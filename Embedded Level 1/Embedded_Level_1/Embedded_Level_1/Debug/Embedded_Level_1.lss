
Embedded_Level_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001aaa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00001aaa  00001b3e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  0080007a  0080007a  00001b58  2**0
                  ALLOC
  3 .stab         000016b0  00000000  00000000  00001b58  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000004c0  00000000  00000000  00003208  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  000036c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003086  00000000  00000000  000038a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b98  00000000  00000000  0000692e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010d7  00000000  00000000  000074c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000710  00000000  00000000  000085a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000129f  00000000  00000000  00008cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001858  00000000  00000000  00009f4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000b7a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 6e 0b 	jmp	0x16dc	; 0x16dc <__vector_4>
      14:	0c 94 25 0a 	jmp	0x144a	; 0x144a <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 36 0b 	jmp	0x166c	; 0x166c <__vector_10>
      2c:	0c 94 14 09 	jmp	0x1228	; 0x1228 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ea       	ldi	r30, 0xAA	; 170
      68:	fa e1       	ldi	r31, 0x1A	; 26
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3b       	cpi	r26, 0xBA	; 186
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2d 02 	call	0x45a	; 0x45a <main>
      8a:	0c 94 53 0d 	jmp	0x1aa6	; 0x1aa6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Task_1>:
#include "LED.h"
#include "Timer.h"
#include "avr/interrupt.h"

void Task_1(void)
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	0f 92       	push	r0
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62
	BTN_State_t BTNState = BTN_NotPressed;
      9c:	19 82       	std	Y+1, r1	; 0x01
	BUTTON_init(Button1);
      9e:	81 e0       	ldi	r24, 0x01	; 1
      a0:	0e 94 a1 00 	call	0x142	; 0x142 <BUTTON_init>
	LED_init(LED_2);
      a4:	82 e0       	ldi	r24, 0x02	; 2
      a6:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LED_init>
	sei();
      aa:	78 94       	sei
	while(1)
	{
		BUTTON_IsPressed(Button1, &BTNState);
      ac:	81 e0       	ldi	r24, 0x01	; 1
      ae:	be 01       	movw	r22, r28
      b0:	6f 5f       	subi	r22, 0xFF	; 255
      b2:	7f 4f       	sbci	r23, 0xFF	; 255
      b4:	0e 94 ce 00 	call	0x19c	; 0x19c <BUTTON_IsPressed>
		if(BTNState == BTN_IS_Pressed)
      b8:	89 81       	ldd	r24, Y+1	; 0x01
      ba:	81 30       	cpi	r24, 0x01	; 1
      bc:	b9 f7       	brne	.-18     	; 0xac <Task_1+0x1a>
		{
			do
			{
				BUTTON_IsPressed(Button1, &BTNState);
      be:	81 e0       	ldi	r24, 0x01	; 1
      c0:	be 01       	movw	r22, r28
      c2:	6f 5f       	subi	r22, 0xFF	; 255
      c4:	7f 4f       	sbci	r23, 0xFF	; 255
      c6:	0e 94 ce 00 	call	0x19c	; 0x19c <BUTTON_IsPressed>
			} while(BTNState == BTN_IS_Pressed);
      ca:	89 81       	ldd	r24, Y+1	; 0x01
      cc:	81 30       	cpi	r24, 0x01	; 1
      ce:	b9 f3       	breq	.-18     	; 0xbe <Task_1+0x2c>
			LED_Toggle(LED_2);
      d0:	82 e0       	ldi	r24, 0x02	; 2
      d2:	0e 94 1b 02 	call	0x436	; 0x436 <LED_Toggle>
      d6:	ea cf       	rjmp	.-44     	; 0xac <Task_1+0x1a>

000000d8 <Task_2>:
#include "Timer.h"
#include "avr/interrupt.h"

void Task_2(void)
{
	LED_init(LED_1);
      d8:	81 e0       	ldi	r24, 0x01	; 1
      da:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LED_init>
	sei();
      de:	78 94       	sei
	while(1)
	{
		LED_Toggle(LED_1);
      e0:	81 e0       	ldi	r24, 0x01	; 1
      e2:	0e 94 1b 02 	call	0x436	; 0x436 <LED_Toggle>
		Timer_Delay_MS(Timer0, 500);
      e6:	80 e0       	ldi	r24, 0x00	; 0
      e8:	44 ef       	ldi	r20, 0xF4	; 244
      ea:	51 e0       	ldi	r21, 0x01	; 1
      ec:	60 e0       	ldi	r22, 0x00	; 0
      ee:	70 e0       	ldi	r23, 0x00	; 0
      f0:	0e 94 19 05 	call	0xa32	; 0xa32 <Timer_Delay_MS>
		LED_Toggle(LED_1);
      f4:	81 e0       	ldi	r24, 0x01	; 1
      f6:	0e 94 1b 02 	call	0x436	; 0x436 <LED_Toggle>
		Timer_Delay_MS(Timer0, 300);
      fa:	80 e0       	ldi	r24, 0x00	; 0
      fc:	4c e2       	ldi	r20, 0x2C	; 44
      fe:	51 e0       	ldi	r21, 0x01	; 1
     100:	60 e0       	ldi	r22, 0x00	; 0
     102:	70 e0       	ldi	r23, 0x00	; 0
     104:	0e 94 19 05 	call	0xa32	; 0xa32 <Timer_Delay_MS>
     108:	eb cf       	rjmp	.-42     	; 0xe0 <Task_2+0x8>

0000010a <Toggle_Led>:
	while(1);	
}

void Toggle_Led(void)
{
	LED_Toggle(LED_0);
     10a:	80 e0       	ldi	r24, 0x00	; 0
     10c:	0e 94 1b 02 	call	0x436	; 0x436 <LED_Toggle>
     110:	08 95       	ret

00000112 <Task_3>:

void Toggle_Led(void);

void Task_3(void)
{
	LED_init(LED_0);
     112:	80 e0       	ldi	r24, 0x00	; 0
     114:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LED_init>
	Timer_SetTrigger(Timer0, Toggle_Led, 500, 300);
     118:	80 e0       	ldi	r24, 0x00	; 0
     11a:	65 e8       	ldi	r22, 0x85	; 133
     11c:	70 e0       	ldi	r23, 0x00	; 0
     11e:	24 ef       	ldi	r18, 0xF4	; 244
     120:	31 e0       	ldi	r19, 0x01	; 1
     122:	40 e0       	ldi	r20, 0x00	; 0
     124:	50 e0       	ldi	r21, 0x00	; 0
     126:	0f 2e       	mov	r0, r31
     128:	fc e2       	ldi	r31, 0x2C	; 44
     12a:	ef 2e       	mov	r14, r31
     12c:	f1 e0       	ldi	r31, 0x01	; 1
     12e:	ff 2e       	mov	r15, r31
     130:	f0 e0       	ldi	r31, 0x00	; 0
     132:	0f 2f       	mov	r16, r31
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	1f 2f       	mov	r17, r31
     138:	f0 2d       	mov	r31, r0
     13a:	0e 94 97 07 	call	0xf2e	; 0xf2e <Timer_SetTrigger>
	sei();
     13e:	78 94       	sei
     140:	ff cf       	rjmp	.-2      	; 0x140 <Task_3+0x2e>

00000142 <BUTTON_init>:

_E BTN_Configuration_t  BTN_Configuration  [Btn_End];


ButtonError_t            BUTTON_init       (Button_t BTN_Num)
{
     142:	ef 92       	push	r14
     144:	ff 92       	push	r15
     146:	0f 93       	push	r16
     148:	1f 93       	push	r17
     14a:	cf 93       	push	r28
	ButtonError_t return_value = BTN_EN_valid_init;
	DioError_t    Dio_returnValue = DIO_EN_valid_inti;
	if((BTN_Num >= Btn_Start) && (BTN_Num < Btn_End))
     14c:	82 30       	cpi	r24, 0x02	; 2
     14e:	f8 f4       	brcc	.+62     	; 0x18e <BUTTON_init+0x4c>
	{
		/* 1. set the direction as input */
		Dio_returnValue	|= Dio_ChannelMode (BTN_Configuration[BTN_Num].Channel, DIO_EN_M_Input);
     150:	e8 2e       	mov	r14, r24
     152:	ff 24       	eor	r15, r15
     154:	87 01       	movw	r16, r14
     156:	00 0f       	add	r16, r16
     158:	11 1f       	adc	r17, r17
     15a:	f8 01       	movw	r30, r16
     15c:	e0 5a       	subi	r30, 0xA0	; 160
     15e:	ff 4f       	sbci	r31, 0xFF	; 255
     160:	80 81       	ld	r24, Z
     162:	60 e0       	ldi	r22, 0x00	; 0
     164:	0e 94 5d 02 	call	0x4ba	; 0x4ba <Dio_ChannelMode>
     168:	c8 2f       	mov	r28, r24
		/* 2. set pull-up resistor */
		if(BTN_Configuration[BTN_Num].Resistor == BTN_EN_Pull_Up)
     16a:	f8 01       	movw	r30, r16
     16c:	ef 59       	subi	r30, 0x9F	; 159
     16e:	ff 4f       	sbci	r31, 0xFF	; 255
     170:	80 81       	ld	r24, Z
     172:	81 30       	cpi	r24, 0x01	; 1
     174:	39 f4       	brne	.+14     	; 0x184 <BUTTON_init+0x42>
		{
			Dio_returnValue	|= Dio_ChannelPullUp (BTN_Configuration[BTN_Num].Channel);
     176:	f8 01       	movw	r30, r16
     178:	e0 5a       	subi	r30, 0xA0	; 160
     17a:	ff 4f       	sbci	r31, 0xFF	; 255
     17c:	80 81       	ld	r24, Z
     17e:	0e 94 32 02 	call	0x464	; 0x464 <Dio_ChannelPullUp>
     182:	c8 2b       	or	r28, r24
		}
		else{ /* MISRA C */ }
			
		if(Dio_returnValue != DIO_EN_valid_inti)
		{
			return_value = BTN_EN_invalidNum;
     184:	81 e0       	ldi	r24, 0x01	; 1
     186:	cc 23       	and	r28, r28
     188:	19 f4       	brne	.+6      	; 0x190 <BUTTON_init+0x4e>
     18a:	80 e0       	ldi	r24, 0x00	; 0
     18c:	01 c0       	rjmp	.+2      	; 0x190 <BUTTON_init+0x4e>
		}
		else{ /* MISRA C */ }
	}
	else
	{
		return_value = BTN_EN_invalidNum;
     18e:	81 e0       	ldi	r24, 0x01	; 1
	}
	return return_value;
}
     190:	cf 91       	pop	r28
     192:	1f 91       	pop	r17
     194:	0f 91       	pop	r16
     196:	ff 90       	pop	r15
     198:	ef 90       	pop	r14
     19a:	08 95       	ret

0000019c <BUTTON_IsPressed>:



ButtonError_t            BUTTON_IsPressed       (Button_t BTN_Num, BTN_State_t * State)
{
     19c:	cf 92       	push	r12
     19e:	df 92       	push	r13
     1a0:	ef 92       	push	r14
     1a2:	ff 92       	push	r15
     1a4:	0f 93       	push	r16
     1a6:	1f 93       	push	r17
     1a8:	cf 93       	push	r28
     1aa:	df 93       	push	r29
     1ac:	00 d0       	rcall	.+0      	; 0x1ae <BUTTON_IsPressed+0x12>
     1ae:	cd b7       	in	r28, 0x3d	; 61
     1b0:	de b7       	in	r29, 0x3e	; 62
     1b2:	7b 01       	movw	r14, r22
	ButtonError_t return_value = BTN_EN_valid_init;
	BTN_State_t   PrevState; 
	BTN_State_t   CurrentState; 
	if((BTN_Num >= Btn_Start) && (BTN_Num < Btn_End))
     1b4:	82 30       	cpi	r24, 0x02	; 2
     1b6:	e8 f5       	brcc	.+122    	; 0x232 <BUTTON_IsPressed+0x96>
	{
		if(State != NULL)
     1b8:	61 15       	cp	r22, r1
     1ba:	71 05       	cpc	r23, r1
     1bc:	e1 f1       	breq	.+120    	; 0x236 <BUTTON_IsPressed+0x9a>
		{
			Dio_ChannelRead(BTN_Configuration[BTN_Num].Channel, &PrevState);
     1be:	c8 2e       	mov	r12, r24
     1c0:	dd 24       	eor	r13, r13
     1c2:	86 01       	movw	r16, r12
     1c4:	00 0f       	add	r16, r16
     1c6:	11 1f       	adc	r17, r17
     1c8:	00 5a       	subi	r16, 0xA0	; 160
     1ca:	1f 4f       	sbci	r17, 0xFF	; 255
     1cc:	f8 01       	movw	r30, r16
     1ce:	80 81       	ld	r24, Z
     1d0:	be 01       	movw	r22, r28
     1d2:	6f 5f       	subi	r22, 0xFF	; 255
     1d4:	7f 4f       	sbci	r23, 0xFF	; 255
     1d6:	0e 94 22 03 	call	0x644	; 0x644 <Dio_ChannelRead>
			Dio_ChannelRead(BTN_Configuration[BTN_Num].Channel, &CurrentState);
     1da:	f8 01       	movw	r30, r16
     1dc:	80 81       	ld	r24, Z
     1de:	be 01       	movw	r22, r28
     1e0:	6e 5f       	subi	r22, 0xFE	; 254
     1e2:	7f 4f       	sbci	r23, 0xFF	; 255
     1e4:	0e 94 22 03 	call	0x644	; 0x644 <Dio_ChannelRead>
			if(CurrentState == PrevState)
     1e8:	8a 81       	ldd	r24, Y+2	; 0x02
     1ea:	99 81       	ldd	r25, Y+1	; 0x01
     1ec:	89 17       	cp	r24, r25
     1ee:	e9 f4       	brne	.+58     	; 0x22a <BUTTON_IsPressed+0x8e>
			{
				if(BTN_Configuration[BTN_Num].Resistor == BTN_EN_Pull_Down)
     1f0:	f6 01       	movw	r30, r12
     1f2:	ee 0f       	add	r30, r30
     1f4:	ff 1f       	adc	r31, r31
     1f6:	ef 59       	subi	r30, 0x9F	; 159
     1f8:	ff 4f       	sbci	r31, 0xFF	; 255
     1fa:	90 81       	ld	r25, Z
     1fc:	99 23       	and	r25, r25
     1fe:	51 f4       	brne	.+20     	; 0x214 <BUTTON_IsPressed+0x78>
				{
					if(CurrentState == BTN_LOW)
     200:	88 23       	and	r24, r24
     202:	19 f4       	brne	.+6      	; 0x20a <BUTTON_IsPressed+0x6e>
					{
						*State = BTN_NotPressed;
     204:	f7 01       	movw	r30, r14
     206:	10 82       	st	Z, r1
     208:	17 c0       	rjmp	.+46     	; 0x238 <BUTTON_IsPressed+0x9c>
					}
					else
					{
						*State = BTN_IS_Pressed;
     20a:	81 e0       	ldi	r24, 0x01	; 1
     20c:	f7 01       	movw	r30, r14
     20e:	80 83       	st	Z, r24



ButtonError_t            BUTTON_IsPressed       (Button_t BTN_Num, BTN_State_t * State)
{
	ButtonError_t return_value = BTN_EN_valid_init;
     210:	80 e0       	ldi	r24, 0x00	; 0
     212:	12 c0       	rjmp	.+36     	; 0x238 <BUTTON_IsPressed+0x9c>
						*State = BTN_IS_Pressed;
					}
				}
				else
				{
					if(CurrentState == BTN_HIGH)
     214:	81 30       	cpi	r24, 0x01	; 1
     216:	21 f4       	brne	.+8      	; 0x220 <BUTTON_IsPressed+0x84>
					{
						*State = BTN_NotPressed;
     218:	f7 01       	movw	r30, r14
     21a:	10 82       	st	Z, r1



ButtonError_t            BUTTON_IsPressed       (Button_t BTN_Num, BTN_State_t * State)
{
	ButtonError_t return_value = BTN_EN_valid_init;
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	0c c0       	rjmp	.+24     	; 0x238 <BUTTON_IsPressed+0x9c>
					{
						*State = BTN_NotPressed;
					}
					else
					{
						*State = BTN_IS_Pressed;
     220:	81 e0       	ldi	r24, 0x01	; 1
     222:	f7 01       	movw	r30, r14
     224:	80 83       	st	Z, r24



ButtonError_t            BUTTON_IsPressed       (Button_t BTN_Num, BTN_State_t * State)
{
	ButtonError_t return_value = BTN_EN_valid_init;
     226:	80 e0       	ldi	r24, 0x00	; 0
     228:	07 c0       	rjmp	.+14     	; 0x238 <BUTTON_IsPressed+0x9c>
					}
				}	
			}
			else
			{
				*State = BTN_NotPressed;
     22a:	f7 01       	movw	r30, r14
     22c:	10 82       	st	Z, r1



ButtonError_t            BUTTON_IsPressed       (Button_t BTN_Num, BTN_State_t * State)
{
	ButtonError_t return_value = BTN_EN_valid_init;
     22e:	80 e0       	ldi	r24, 0x00	; 0
     230:	03 c0       	rjmp	.+6      	; 0x238 <BUTTON_IsPressed+0x9c>
			return_value = BTN_EN_invalidPointer;
		}
	}
	else
	{
		return_value = BTN_EN_invalidNum;
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	01 c0       	rjmp	.+2      	; 0x238 <BUTTON_IsPressed+0x9c>
				*State = BTN_NotPressed;
			}
		}		
		else
		{
			return_value = BTN_EN_invalidPointer;
     236:	82 e0       	ldi	r24, 0x02	; 2
	else
	{
		return_value = BTN_EN_invalidNum;
	}
	return return_value;
     238:	0f 90       	pop	r0
     23a:	0f 90       	pop	r0
     23c:	df 91       	pop	r29
     23e:	cf 91       	pop	r28
     240:	1f 91       	pop	r17
     242:	0f 91       	pop	r16
     244:	ff 90       	pop	r15
     246:	ef 90       	pop	r14
     248:	df 90       	pop	r13
     24a:	cf 90       	pop	r12
     24c:	08 95       	ret

0000024e <Motor_Init>:
_S MOTOR_ERROR_state  Motor_Start	  (Motor_t   num , uint8_t Duty);



MOTOR_ERROR_state	Motor_Init     (Motor_t   num)
{
     24e:	ef 92       	push	r14
     250:	ff 92       	push	r15
     252:	0f 93       	push	r16
     254:	1f 93       	push	r17
     256:	cf 93       	push	r28
     258:	df 93       	push	r29
	MOTOR_ERROR_state   return_value   = Valid_MTR_init;
	/* check if num is in correct range */
	if((num < Mtr_Start) || (num > Mtr_End))
     25a:	83 30       	cpi	r24, 0x03	; 3
     25c:	38 f5       	brcc	.+78     	; 0x2ac <Motor_Init+0x5e>
	{
		return_value   = Invalid_MTR_Num;
	}
	else
	{
		PWM_Init(MTR_PWM_CFG[num]);
     25e:	e8 2e       	mov	r14, r24
     260:	ff 24       	eor	r15, r15
     262:	f7 01       	movw	r30, r14
     264:	ec 59       	subi	r30, 0x9C	; 156
     266:	ff 4f       	sbci	r31, 0xFF	; 255
     268:	80 81       	ld	r24, Z
     26a:	0e 94 34 04 	call	0x868	; 0x868 <PWM_Init>
		
		/* H1 Pin */
		/* set as output */
		Dio_ChannelMode(MTR_H1H2_CFG[num][MOTOR_H1], DIO_EN_M_Output);
     26e:	87 01       	movw	r16, r14
     270:	00 0f       	add	r16, r16
     272:	11 1f       	adc	r17, r17
     274:	e8 01       	movw	r28, r16
     276:	ca 59       	subi	r28, 0x9A	; 154
     278:	df 4f       	sbci	r29, 0xFF	; 255
     27a:	88 81       	ld	r24, Y
     27c:	61 e0       	ldi	r22, 0x01	; 1
     27e:	0e 94 5d 02 	call	0x4ba	; 0x4ba <Dio_ChannelMode>
		/* default value is off */
		Dio_ChannelWrite(MTR_H1H2_CFG[num][MOTOR_H1], DIO_EN_W_Low);
     282:	88 81       	ld	r24, Y
     284:	60 e0       	ldi	r22, 0x00	; 0
     286:	0e 94 af 02 	call	0x55e	; 0x55e <Dio_ChannelWrite>
		
		/* H2 Pin */
		/* set as output */
		Dio_ChannelMode(MTR_H1H2_CFG[num][MOTOR_H2], DIO_EN_M_Output);
     28a:	e8 01       	movw	r28, r16
     28c:	c9 59       	subi	r28, 0x99	; 153
     28e:	df 4f       	sbci	r29, 0xFF	; 255
     290:	88 81       	ld	r24, Y
     292:	61 e0       	ldi	r22, 0x01	; 1
     294:	0e 94 5d 02 	call	0x4ba	; 0x4ba <Dio_ChannelMode>
		/* default value is off */
		Dio_ChannelWrite(MTR_H1H2_CFG[num][MOTOR_H2], DIO_EN_W_Low);
     298:	88 81       	ld	r24, Y
     29a:	60 e0       	ldi	r22, 0x00	; 0
     29c:	0e 94 af 02 	call	0x55e	; 0x55e <Dio_ChannelWrite>
	
		Motor_State [num] = Motor_Off;
     2a0:	f7 01       	movw	r30, r14
     2a2:	e6 58       	subi	r30, 0x86	; 134
     2a4:	ff 4f       	sbci	r31, 0xFF	; 255
     2a6:	10 82       	st	Z, r1



MOTOR_ERROR_state	Motor_Init     (Motor_t   num)
{
	MOTOR_ERROR_state   return_value   = Valid_MTR_init;
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	01 c0       	rjmp	.+2      	; 0x2ae <Motor_Init+0x60>
	/* check if num is in correct range */
	if((num < Mtr_Start) || (num > Mtr_End))
	{
		return_value   = Invalid_MTR_Num;
     2ac:	81 e0       	ldi	r24, 0x01	; 1
		Dio_ChannelWrite(MTR_H1H2_CFG[num][MOTOR_H2], DIO_EN_W_Low);
	
		Motor_State [num] = Motor_Off;
	}
	return return_value;
}
     2ae:	df 91       	pop	r29
     2b0:	cf 91       	pop	r28
     2b2:	1f 91       	pop	r17
     2b4:	0f 91       	pop	r16
     2b6:	ff 90       	pop	r15
     2b8:	ef 90       	pop	r14
     2ba:	08 95       	ret

000002bc <Motor_Stop>:
}



MOTOR_ERROR_state 		Motor_Stop       (Motor_t   num )
{
     2bc:	0f 93       	push	r16
     2be:	1f 93       	push	r17
     2c0:	cf 93       	push	r28
     2c2:	df 93       	push	r29
	MOTOR_ERROR_state   return_value   = Valid_MTR_init;
	/* check if num is in correct range */
	if((num < Mtr_Start) || (num > Mtr_End))
     2c4:	83 30       	cpi	r24, 0x03	; 3
     2c6:	f0 f4       	brcc	.+60     	; 0x304 <Motor_Stop+0x48>
	{
		return_value   = Invalid_MTR_Num;
	}
	else
	{
		PWM_Stop(MTR_PWM_CFG[num]);
     2c8:	08 2f       	mov	r16, r24
     2ca:	10 e0       	ldi	r17, 0x00	; 0
     2cc:	f8 01       	movw	r30, r16
     2ce:	ec 59       	subi	r30, 0x9C	; 156
     2d0:	ff 4f       	sbci	r31, 0xFF	; 255
     2d2:	80 81       	ld	r24, Z
     2d4:	0e 94 78 04 	call	0x8f0	; 0x8f0 <PWM_Stop>
		Dio_ChannelWrite(MTR_H1H2_CFG[num][MOTOR_H1], DIO_EN_W_Low);
     2d8:	e8 01       	movw	r28, r16
     2da:	cc 0f       	add	r28, r28
     2dc:	dd 1f       	adc	r29, r29
     2de:	fe 01       	movw	r30, r28
     2e0:	ea 59       	subi	r30, 0x9A	; 154
     2e2:	ff 4f       	sbci	r31, 0xFF	; 255
     2e4:	80 81       	ld	r24, Z
     2e6:	60 e0       	ldi	r22, 0x00	; 0
     2e8:	0e 94 af 02 	call	0x55e	; 0x55e <Dio_ChannelWrite>
		Dio_ChannelWrite(MTR_H1H2_CFG[num][MOTOR_H2], DIO_EN_W_Low);
     2ec:	c9 59       	subi	r28, 0x99	; 153
     2ee:	df 4f       	sbci	r29, 0xFF	; 255
     2f0:	88 81       	ld	r24, Y
     2f2:	60 e0       	ldi	r22, 0x00	; 0
     2f4:	0e 94 af 02 	call	0x55e	; 0x55e <Dio_ChannelWrite>
			
		/* store the state for the next re-stop */
		Motor_State[num] = Motor_Off;
     2f8:	f8 01       	movw	r30, r16
     2fa:	e6 58       	subi	r30, 0x86	; 134
     2fc:	ff 4f       	sbci	r31, 0xFF	; 255
     2fe:	10 82       	st	Z, r1



MOTOR_ERROR_state 		Motor_Stop       (Motor_t   num )
{
	MOTOR_ERROR_state   return_value   = Valid_MTR_init;
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	01 c0       	rjmp	.+2      	; 0x306 <Motor_Stop+0x4a>
	/* check if num is in correct range */
	if((num < Mtr_Start) || (num > Mtr_End))
	{
		return_value   = Invalid_MTR_Num;
     304:	81 e0       	ldi	r24, 0x01	; 1
			
		/* store the state for the next re-stop */
		Motor_State[num] = Motor_Off;
	}
	return return_value;
}
     306:	df 91       	pop	r29
     308:	cf 91       	pop	r28
     30a:	1f 91       	pop	r17
     30c:	0f 91       	pop	r16
     30e:	08 95       	ret

00000310 <Motor_RunDirection>:
	}
	return return_value;
}

MOTOR_ERROR_state 		Motor_RunDirection (Motor_t   num , MTR_Direction_t Direction, uint8_t Duty)
{
     310:	ef 92       	push	r14
     312:	ff 92       	push	r15
     314:	1f 93       	push	r17
     316:	cf 93       	push	r28
     318:	df 93       	push	r29
     31a:	d8 2f       	mov	r29, r24
     31c:	c6 2f       	mov	r28, r22
     31e:	14 2f       	mov	r17, r20
	MOTOR_ERROR_state   return_value   = Valid_MTR_init;
	/* check if num is in correct range */
	if((num < Mtr_Start) || (num > Mtr_End))
     320:	83 30       	cpi	r24, 0x03	; 3
     322:	08 f0       	brcs	.+2      	; 0x326 <Motor_RunDirection+0x16>
     324:	3f c0       	rjmp	.+126    	; 0x3a4 <Motor_RunDirection+0x94>
		return_value   = Invalid_MTR_Num;
	}
	else
	{
		/* 1. stop the motor */
		Motor_Stop (num);
     326:	0e 94 5e 01 	call	0x2bc	; 0x2bc <Motor_Stop>
		
		/* 2. store the state for the next restart */
		Motor_Direction[num] = Direction;
     32a:	ed 2e       	mov	r14, r29
     32c:	ff 24       	eor	r15, r15
     32e:	f7 01       	movw	r30, r14
     330:	e4 58       	subi	r30, 0x84	; 132
     332:	ff 4f       	sbci	r31, 0xFF	; 255
     334:	c0 83       	st	Z, r28
	{
		return_value   = Invalid_MTR_Num;
	}
	else
	{
		if(Motor_State[num] == Motor_Off)
     336:	f7 01       	movw	r30, r14
     338:	e6 58       	subi	r30, 0x86	; 134
     33a:	ff 4f       	sbci	r31, 0xFF	; 255
     33c:	80 81       	ld	r24, Z
     33e:	88 23       	and	r24, r24
     340:	99 f5       	brne	.+102    	; 0x3a8 <Motor_RunDirection+0x98>
		{
			if(Motor_Direction[num] == Motor_CW)
     342:	cc 23       	and	r28, r28
     344:	89 f4       	brne	.+34     	; 0x368 <Motor_RunDirection+0x58>
			{
				Dio_ChannelWrite(MTR_H1H2_CFG[num][MOTOR_H2], DIO_EN_W_Low);
     346:	e7 01       	movw	r28, r14
     348:	cc 0f       	add	r28, r28
     34a:	dd 1f       	adc	r29, r29
     34c:	fe 01       	movw	r30, r28
     34e:	e9 59       	subi	r30, 0x99	; 153
     350:	ff 4f       	sbci	r31, 0xFF	; 255
     352:	80 81       	ld	r24, Z
     354:	60 e0       	ldi	r22, 0x00	; 0
     356:	0e 94 af 02 	call	0x55e	; 0x55e <Dio_ChannelWrite>
				Dio_ChannelWrite(MTR_H1H2_CFG[num][MOTOR_H1], DIO_EN_W_High);
     35a:	ca 59       	subi	r28, 0x9A	; 154
     35c:	df 4f       	sbci	r29, 0xFF	; 255
     35e:	88 81       	ld	r24, Y
     360:	61 e0       	ldi	r22, 0x01	; 1
     362:	0e 94 af 02 	call	0x55e	; 0x55e <Dio_ChannelWrite>
     366:	10 c0       	rjmp	.+32     	; 0x388 <Motor_RunDirection+0x78>
			}
			else
			{
				Dio_ChannelWrite(MTR_H1H2_CFG[num][MOTOR_H1], DIO_EN_W_Low);
     368:	e7 01       	movw	r28, r14
     36a:	cc 0f       	add	r28, r28
     36c:	dd 1f       	adc	r29, r29
     36e:	fe 01       	movw	r30, r28
     370:	ea 59       	subi	r30, 0x9A	; 154
     372:	ff 4f       	sbci	r31, 0xFF	; 255
     374:	80 81       	ld	r24, Z
     376:	60 e0       	ldi	r22, 0x00	; 0
     378:	0e 94 af 02 	call	0x55e	; 0x55e <Dio_ChannelWrite>
				Dio_ChannelWrite(MTR_H1H2_CFG[num][MOTOR_H2], DIO_EN_W_High);
     37c:	c9 59       	subi	r28, 0x99	; 153
     37e:	df 4f       	sbci	r29, 0xFF	; 255
     380:	88 81       	ld	r24, Y
     382:	61 e0       	ldi	r22, 0x01	; 1
     384:	0e 94 af 02 	call	0x55e	; 0x55e <Dio_ChannelWrite>
			}
			Motor_State[num] = Motor_On;
     388:	f7 01       	movw	r30, r14
     38a:	e6 58       	subi	r30, 0x86	; 134
     38c:	ff 4f       	sbci	r31, 0xFF	; 255
     38e:	81 e0       	ldi	r24, 0x01	; 1
     390:	80 83       	st	Z, r24
			PWM_DutyCycle(MTR_PWM_CFG[num], Duty);	
     392:	f7 01       	movw	r30, r14
     394:	ec 59       	subi	r30, 0x9C	; 156
     396:	ff 4f       	sbci	r31, 0xFF	; 255
     398:	80 81       	ld	r24, Z
     39a:	61 2f       	mov	r22, r17
     39c:	0e 94 91 04 	call	0x922	; 0x922 <PWM_DutyCycle>
	return return_value;
}

MOTOR_ERROR_state 		Motor_RunDirection (Motor_t   num , MTR_Direction_t Direction, uint8_t Duty)
{
	MOTOR_ERROR_state   return_value   = Valid_MTR_init;
     3a0:	80 e0       	ldi	r24, 0x00	; 0
     3a2:	03 c0       	rjmp	.+6      	; 0x3aa <Motor_RunDirection+0x9a>
	/* check if num is in correct range */
	if((num < Mtr_Start) || (num > Mtr_End))
	{
		return_value   = Invalid_MTR_Num;
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	01 c0       	rjmp	.+2      	; 0x3aa <Motor_RunDirection+0x9a>
	return return_value;
}

MOTOR_ERROR_state 		Motor_RunDirection (Motor_t   num , MTR_Direction_t Direction, uint8_t Duty)
{
	MOTOR_ERROR_state   return_value   = Valid_MTR_init;
     3a8:	80 e0       	ldi	r24, 0x00	; 0
		
		/* 3. stop the motor */
		Motor_Start (num , Duty);
	}
	return return_value;
}
     3aa:	df 91       	pop	r29
     3ac:	cf 91       	pop	r28
     3ae:	1f 91       	pop	r17
     3b0:	ff 90       	pop	r15
     3b2:	ef 90       	pop	r14
     3b4:	08 95       	ret

000003b6 <LED_init>:

_E DioChannel_t  LED_Configuration  [LED_End];


LEDError_t            LED_init       (LED_t LED_Num)
{
     3b6:	1f 93       	push	r17
     3b8:	cf 93       	push	r28
     3ba:	df 93       	push	r29
	LEDError_t return_value = LED_EN_valid_init;
	DioError_t    Dio_returnValue = DIO_EN_valid_inti;
	if((LED_Num >= LED_Start) && (LED_Num < LED_End))
     3bc:	84 30       	cpi	r24, 0x04	; 4
     3be:	90 f4       	brcc	.+36     	; 0x3e4 <LED_init+0x2e>
	{
		/* 1. set the direction as output */
		Dio_returnValue	|= Dio_ChannelMode (LED_Configuration[LED_Num], DIO_EN_M_Output);
     3c0:	c8 2f       	mov	r28, r24
     3c2:	d0 e0       	ldi	r29, 0x00	; 0
     3c4:	c6 59       	subi	r28, 0x96	; 150
     3c6:	df 4f       	sbci	r29, 0xFF	; 255
     3c8:	88 81       	ld	r24, Y
     3ca:	61 e0       	ldi	r22, 0x01	; 1
     3cc:	0e 94 5d 02 	call	0x4ba	; 0x4ba <Dio_ChannelMode>
     3d0:	18 2f       	mov	r17, r24
		/* 2. init value low */
		Dio_returnValue	|= Dio_ChannelWrite (LED_Configuration[LED_Num], DIO_EN_W_Low);
     3d2:	88 81       	ld	r24, Y
     3d4:	60 e0       	ldi	r22, 0x00	; 0
     3d6:	0e 94 af 02 	call	0x55e	; 0x55e <Dio_ChannelWrite>
     3da:	18 2b       	or	r17, r24
		if(Dio_returnValue != DIO_EN_valid_inti)
		{
			return_value = LED_EN_invalidNum;
     3dc:	81 e0       	ldi	r24, 0x01	; 1
     3de:	19 f4       	brne	.+6      	; 0x3e6 <LED_init+0x30>
     3e0:	80 e0       	ldi	r24, 0x00	; 0
     3e2:	01 c0       	rjmp	.+2      	; 0x3e6 <LED_init+0x30>
			/* MISRA C */
		}
	}
	else
	{
		return_value = LED_EN_invalidNum;
     3e4:	81 e0       	ldi	r24, 0x01	; 1
	}
	return return_value;
}
     3e6:	df 91       	pop	r29
     3e8:	cf 91       	pop	r28
     3ea:	1f 91       	pop	r17
     3ec:	08 95       	ret

000003ee <LED_ON>:

LEDError_t            LED_ON       (LED_t LED_Num)
{
	LEDError_t return_value = LED_EN_valid_init;
	DioError_t    Dio_returnValue = DIO_EN_valid_inti;
	if((LED_Num >= LED_Start) && (LED_Num < LED_End))
     3ee:	84 30       	cpi	r24, 0x04	; 4
     3f0:	68 f4       	brcc	.+26     	; 0x40c <LED_ON+0x1e>
	{
		Dio_returnValue	|= Dio_ChannelWrite (LED_Configuration[LED_Num], DIO_EN_W_High);
     3f2:	e8 2f       	mov	r30, r24
     3f4:	f0 e0       	ldi	r31, 0x00	; 0
     3f6:	e6 59       	subi	r30, 0x96	; 150
     3f8:	ff 4f       	sbci	r31, 0xFF	; 255
     3fa:	80 81       	ld	r24, Z
     3fc:	61 e0       	ldi	r22, 0x01	; 1
     3fe:	0e 94 af 02 	call	0x55e	; 0x55e <Dio_ChannelWrite>
		if(Dio_returnValue != DIO_EN_valid_inti)
		{
			return_value = LED_EN_invalidNum;
     402:	91 e0       	ldi	r25, 0x01	; 1
     404:	88 23       	and	r24, r24
     406:	19 f4       	brne	.+6      	; 0x40e <LED_ON+0x20>
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	01 c0       	rjmp	.+2      	; 0x40e <LED_ON+0x20>
			/* MISRA C */
		}
	}
	else
	{
		return_value = LED_EN_invalidNum;
     40c:	91 e0       	ldi	r25, 0x01	; 1
	}
	return return_value;
}
     40e:	89 2f       	mov	r24, r25
     410:	08 95       	ret

00000412 <LED_OFF>:

LEDError_t            LED_OFF        (LED_t LED_Num)
{
	LEDError_t return_value = LED_EN_valid_init;
	DioError_t    Dio_returnValue = DIO_EN_valid_inti;
	if((LED_Num >= LED_Start) && (LED_Num < LED_End))
     412:	84 30       	cpi	r24, 0x04	; 4
     414:	68 f4       	brcc	.+26     	; 0x430 <LED_OFF+0x1e>
	{
		Dio_returnValue	|= Dio_ChannelWrite (LED_Configuration[LED_Num], DIO_EN_W_Low);
     416:	e8 2f       	mov	r30, r24
     418:	f0 e0       	ldi	r31, 0x00	; 0
     41a:	e6 59       	subi	r30, 0x96	; 150
     41c:	ff 4f       	sbci	r31, 0xFF	; 255
     41e:	80 81       	ld	r24, Z
     420:	60 e0       	ldi	r22, 0x00	; 0
     422:	0e 94 af 02 	call	0x55e	; 0x55e <Dio_ChannelWrite>
		if(Dio_returnValue != DIO_EN_valid_inti)
		{
			return_value = LED_EN_invalidNum;
     426:	91 e0       	ldi	r25, 0x01	; 1
     428:	88 23       	and	r24, r24
     42a:	19 f4       	brne	.+6      	; 0x432 <LED_OFF+0x20>
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	01 c0       	rjmp	.+2      	; 0x432 <LED_OFF+0x20>
			/* MISRA C */
		}
	}
	else
	{
		return_value = LED_EN_invalidNum;
     430:	91 e0       	ldi	r25, 0x01	; 1
	}
	return return_value;
}
     432:	89 2f       	mov	r24, r25
     434:	08 95       	ret

00000436 <LED_Toggle>:

LEDError_t            LED_Toggle     (LED_t LED_Num)
{
	LEDError_t return_value = LED_EN_valid_init;
	DioError_t    Dio_returnValue = DIO_EN_valid_inti;
	if((LED_Num >= LED_Start) && (LED_Num < LED_End))
     436:	84 30       	cpi	r24, 0x04	; 4
     438:	68 f4       	brcc	.+26     	; 0x454 <LED_Toggle+0x1e>
	{
		Dio_returnValue	|= Dio_ChannelWrite (LED_Configuration[LED_Num], DIO_EN_W_Toggle);
     43a:	e8 2f       	mov	r30, r24
     43c:	f0 e0       	ldi	r31, 0x00	; 0
     43e:	e6 59       	subi	r30, 0x96	; 150
     440:	ff 4f       	sbci	r31, 0xFF	; 255
     442:	80 81       	ld	r24, Z
     444:	62 e0       	ldi	r22, 0x02	; 2
     446:	0e 94 af 02 	call	0x55e	; 0x55e <Dio_ChannelWrite>
		if(Dio_returnValue != DIO_EN_valid_inti)
		{
			return_value = LED_EN_invalidNum;
     44a:	91 e0       	ldi	r25, 0x01	; 1
     44c:	88 23       	and	r24, r24
     44e:	19 f4       	brne	.+6      	; 0x456 <LED_Toggle+0x20>
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	01 c0       	rjmp	.+2      	; 0x456 <LED_Toggle+0x20>
			/* MISRA C */
		}
	}
	else
	{
		return_value = LED_EN_invalidNum;
     454:	91 e0       	ldi	r25, 0x01	; 1
	}
	return return_value;
}
     456:	89 2f       	mov	r24, r25
     458:	08 95       	ret

0000045a <main>:
#if(Task == Task1)
	Task_1();		//Toggle Led 2 with Button 1
#elif(Task == Task2)
	Task_2();		//Toggle led 1 (500 ms on, 300 ms off) using timer "polling" 
#elif(Task == Task3)
	Task_3();		//Toggle led 0 (500 ms on, 300 ms off) using timer "Interrupt"
     45a:	0e 94 89 00 	call	0x112	; 0x112 <Task_3>
#endif /* Task */
     45e:	80 e0       	ldi	r24, 0x00	; 0
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	08 95       	ret

00000464 <Dio_ChannelPullUp>:
#include "../MCAL/DIO/Dio.h"				
#include "../MCAL/DIO/Dio_Private.h"			
#include "../Library/Bit_Math.h"			

DioError_t			Dio_ChannelPullUp		(DioChannel_t Channel)
{
     464:	ef 92       	push	r14
     466:	ff 92       	push	r15
     468:	0f 93       	push	r16
     46a:	1f 93       	push	r17
	DioError_t return_value = DIO_EN_valid_inti;
	if((Channel >= DIO_EN_MIN_Channel) && (Channel <= DIO_EN_MAX_Channel))
     46c:	80 32       	cpi	r24, 0x20	; 32
     46e:	f8 f4       	brcc	.+62     	; 0x4ae <Dio_ChannelPullUp+0x4a>
	{		
		SetBit(DIO[Channel/DIO_CHANNELS_PER_PORT].PORT.Register,(Channel % DIO_CHANNELS_PER_PORT));
     470:	28 2f       	mov	r18, r24
     472:	26 95       	lsr	r18
     474:	26 95       	lsr	r18
     476:	26 95       	lsr	r18
     478:	30 e0       	ldi	r19, 0x00	; 0
     47a:	f9 01       	movw	r30, r18
     47c:	ee 0f       	add	r30, r30
     47e:	ff 1f       	adc	r31, r31
     480:	e2 0f       	add	r30, r18
     482:	f3 1f       	adc	r31, r19
     484:	22 a9       	sts	0x42, r18
     486:	87 70       	andi	r24, 0x07	; 7
     488:	41 e0       	ldi	r20, 0x01	; 1
     48a:	50 e0       	ldi	r21, 0x00	; 0
     48c:	60 e0       	ldi	r22, 0x00	; 0
     48e:	70 e0       	ldi	r23, 0x00	; 0
     490:	7a 01       	movw	r14, r20
     492:	8b 01       	movw	r16, r22
     494:	04 c0       	rjmp	.+8      	; 0x49e <Dio_ChannelPullUp+0x3a>
     496:	ee 0c       	add	r14, r14
     498:	ff 1c       	adc	r15, r15
     49a:	00 1f       	adc	r16, r16
     49c:	11 1f       	adc	r17, r17
     49e:	8a 95       	dec	r24
     4a0:	d2 f7       	brpl	.-12     	; 0x496 <Dio_ChannelPullUp+0x32>
     4a2:	d8 01       	movw	r26, r16
     4a4:	c7 01       	movw	r24, r14
     4a6:	82 2b       	or	r24, r18
     4a8:	82 ab       	sts	0x52, r24
#include "../MCAL/DIO/Dio_Private.h"			
#include "../Library/Bit_Math.h"			

DioError_t			Dio_ChannelPullUp		(DioChannel_t Channel)
{
	DioError_t return_value = DIO_EN_valid_inti;
     4aa:	80 e0       	ldi	r24, 0x00	; 0
     4ac:	01 c0       	rjmp	.+2      	; 0x4b0 <Dio_ChannelPullUp+0x4c>
	{		
		SetBit(DIO[Channel/DIO_CHANNELS_PER_PORT].PORT.Register,(Channel % DIO_CHANNELS_PER_PORT));
	}
	else
	{
		return_value = DIO_EN_invalidChannel;
     4ae:	82 e0       	ldi	r24, 0x02	; 2
	}
	return return_value;
}
     4b0:	1f 91       	pop	r17
     4b2:	0f 91       	pop	r16
     4b4:	ff 90       	pop	r15
     4b6:	ef 90       	pop	r14
     4b8:	08 95       	ret

000004ba <Dio_ChannelMode>:


DioError_t			Dio_ChannelMode			(DioChannel_t Channel, DioMode_t  Mode)
{
     4ba:	ef 92       	push	r14
     4bc:	ff 92       	push	r15
     4be:	0f 93       	push	r16
     4c0:	1f 93       	push	r17
	DioError_t return_value = DIO_EN_valid_inti;
	if((Channel >= DIO_EN_MIN_Channel) && (Channel <= DIO_EN_MAX_Channel))
     4c2:	80 32       	cpi	r24, 0x20	; 32
     4c4:	08 f0       	brcs	.+2      	; 0x4c8 <Dio_ChannelMode+0xe>
     4c6:	43 c0       	rjmp	.+134    	; 0x54e <Dio_ChannelMode+0x94>
	{
		if(DIO_EN_M_Input == Mode)
     4c8:	66 23       	and	r22, r22
     4ca:	01 f5       	brne	.+64     	; 0x50c <Dio_ChannelMode+0x52>
		{
			ClearBit(DIO[Channel/DIO_CHANNELS_PER_PORT].DDR.Register,(Channel % DIO_CHANNELS_PER_PORT));
     4cc:	28 2f       	mov	r18, r24
     4ce:	26 95       	lsr	r18
     4d0:	26 95       	lsr	r18
     4d2:	26 95       	lsr	r18
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	f9 01       	movw	r30, r18
     4d8:	ee 0f       	add	r30, r30
     4da:	ff 1f       	adc	r31, r31
     4dc:	e2 0f       	add	r30, r18
     4de:	f3 1f       	adc	r31, r19
     4e0:	21 a9       	sts	0x41, r18
     4e2:	87 70       	andi	r24, 0x07	; 7
     4e4:	41 e0       	ldi	r20, 0x01	; 1
     4e6:	50 e0       	ldi	r21, 0x00	; 0
     4e8:	60 e0       	ldi	r22, 0x00	; 0
     4ea:	70 e0       	ldi	r23, 0x00	; 0
     4ec:	7a 01       	movw	r14, r20
     4ee:	8b 01       	movw	r16, r22
     4f0:	04 c0       	rjmp	.+8      	; 0x4fa <Dio_ChannelMode+0x40>
     4f2:	ee 0c       	add	r14, r14
     4f4:	ff 1c       	adc	r15, r15
     4f6:	00 1f       	adc	r16, r16
     4f8:	11 1f       	adc	r17, r17
     4fa:	8a 95       	dec	r24
     4fc:	d2 f7       	brpl	.-12     	; 0x4f2 <Dio_ChannelMode+0x38>
     4fe:	d8 01       	movw	r26, r16
     500:	c7 01       	movw	r24, r14
     502:	80 95       	com	r24
     504:	82 23       	and	r24, r18
     506:	81 ab       	sts	0x51, r24
}


DioError_t			Dio_ChannelMode			(DioChannel_t Channel, DioMode_t  Mode)
{
	DioError_t return_value = DIO_EN_valid_inti;
     508:	80 e0       	ldi	r24, 0x00	; 0
     50a:	24 c0       	rjmp	.+72     	; 0x554 <Dio_ChannelMode+0x9a>
	{
		if(DIO_EN_M_Input == Mode)
		{
			ClearBit(DIO[Channel/DIO_CHANNELS_PER_PORT].DDR.Register,(Channel % DIO_CHANNELS_PER_PORT));
		}
		else if(DIO_EN_M_Output == Mode)
     50c:	61 30       	cpi	r22, 0x01	; 1
     50e:	09 f5       	brne	.+66     	; 0x552 <Dio_ChannelMode+0x98>
		{
			SetBit(DIO[Channel/DIO_CHANNELS_PER_PORT].DDR.Register,(Channel % DIO_CHANNELS_PER_PORT));
     510:	28 2f       	mov	r18, r24
     512:	26 95       	lsr	r18
     514:	26 95       	lsr	r18
     516:	26 95       	lsr	r18
     518:	30 e0       	ldi	r19, 0x00	; 0
     51a:	f9 01       	movw	r30, r18
     51c:	ee 0f       	add	r30, r30
     51e:	ff 1f       	adc	r31, r31
     520:	e2 0f       	add	r30, r18
     522:	f3 1f       	adc	r31, r19
     524:	21 a9       	sts	0x41, r18
     526:	87 70       	andi	r24, 0x07	; 7
     528:	41 e0       	ldi	r20, 0x01	; 1
     52a:	50 e0       	ldi	r21, 0x00	; 0
     52c:	60 e0       	ldi	r22, 0x00	; 0
     52e:	70 e0       	ldi	r23, 0x00	; 0
     530:	7a 01       	movw	r14, r20
     532:	8b 01       	movw	r16, r22
     534:	04 c0       	rjmp	.+8      	; 0x53e <Dio_ChannelMode+0x84>
     536:	ee 0c       	add	r14, r14
     538:	ff 1c       	adc	r15, r15
     53a:	00 1f       	adc	r16, r16
     53c:	11 1f       	adc	r17, r17
     53e:	8a 95       	dec	r24
     540:	d2 f7       	brpl	.-12     	; 0x536 <Dio_ChannelMode+0x7c>
     542:	d8 01       	movw	r26, r16
     544:	c7 01       	movw	r24, r14
     546:	82 2b       	or	r24, r18
     548:	81 ab       	sts	0x51, r24
}


DioError_t			Dio_ChannelMode			(DioChannel_t Channel, DioMode_t  Mode)
{
	DioError_t return_value = DIO_EN_valid_inti;
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	03 c0       	rjmp	.+6      	; 0x554 <Dio_ChannelMode+0x9a>
			return_value = DIO_EN_invalidMode;
		}	
	}
	else
	{
		return_value = DIO_EN_invalidChannel;
     54e:	82 e0       	ldi	r24, 0x02	; 2
     550:	01 c0       	rjmp	.+2      	; 0x554 <Dio_ChannelMode+0x9a>
		{
			SetBit(DIO[Channel/DIO_CHANNELS_PER_PORT].DDR.Register,(Channel % DIO_CHANNELS_PER_PORT));
		}
		else
		{
			return_value = DIO_EN_invalidMode;
     552:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		return_value = DIO_EN_invalidChannel;
	}
	return return_value;		
}
     554:	1f 91       	pop	r17
     556:	0f 91       	pop	r16
     558:	ff 90       	pop	r15
     55a:	ef 90       	pop	r14
     55c:	08 95       	ret

0000055e <Dio_ChannelWrite>:



DioError_t			Dio_ChannelWrite		(DioChannel_t Channel, DioWrite_t Output)
{
     55e:	ef 92       	push	r14
     560:	ff 92       	push	r15
     562:	0f 93       	push	r16
     564:	1f 93       	push	r17
	DioError_t return_value = DIO_EN_valid_inti;
	if((Channel >= DIO_EN_MIN_Channel) && (Channel <= DIO_EN_MAX_Channel))
     566:	80 32       	cpi	r24, 0x20	; 32
     568:	08 f0       	brcs	.+2      	; 0x56c <Dio_ChannelWrite+0xe>
     56a:	64 c0       	rjmp	.+200    	; 0x634 <Dio_ChannelWrite+0xd6>
	{
		if(DIO_EN_W_Low == Output)
     56c:	66 23       	and	r22, r22
     56e:	01 f5       	brne	.+64     	; 0x5b0 <Dio_ChannelWrite+0x52>
		{
			ClearBit(DIO[Channel/DIO_CHANNELS_PER_PORT].PORT.Register,(Channel % DIO_CHANNELS_PER_PORT));
     570:	28 2f       	mov	r18, r24
     572:	26 95       	lsr	r18
     574:	26 95       	lsr	r18
     576:	26 95       	lsr	r18
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	f9 01       	movw	r30, r18
     57c:	ee 0f       	add	r30, r30
     57e:	ff 1f       	adc	r31, r31
     580:	e2 0f       	add	r30, r18
     582:	f3 1f       	adc	r31, r19
     584:	22 a9       	sts	0x42, r18
     586:	87 70       	andi	r24, 0x07	; 7
     588:	41 e0       	ldi	r20, 0x01	; 1
     58a:	50 e0       	ldi	r21, 0x00	; 0
     58c:	60 e0       	ldi	r22, 0x00	; 0
     58e:	70 e0       	ldi	r23, 0x00	; 0
     590:	7a 01       	movw	r14, r20
     592:	8b 01       	movw	r16, r22
     594:	04 c0       	rjmp	.+8      	; 0x59e <Dio_ChannelWrite+0x40>
     596:	ee 0c       	add	r14, r14
     598:	ff 1c       	adc	r15, r15
     59a:	00 1f       	adc	r16, r16
     59c:	11 1f       	adc	r17, r17
     59e:	8a 95       	dec	r24
     5a0:	d2 f7       	brpl	.-12     	; 0x596 <Dio_ChannelWrite+0x38>
     5a2:	d8 01       	movw	r26, r16
     5a4:	c7 01       	movw	r24, r14
     5a6:	80 95       	com	r24
     5a8:	82 23       	and	r24, r18
     5aa:	82 ab       	sts	0x52, r24



DioError_t			Dio_ChannelWrite		(DioChannel_t Channel, DioWrite_t Output)
{
	DioError_t return_value = DIO_EN_valid_inti;
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	45 c0       	rjmp	.+138    	; 0x63a <Dio_ChannelWrite+0xdc>
	{
		if(DIO_EN_W_Low == Output)
		{
			ClearBit(DIO[Channel/DIO_CHANNELS_PER_PORT].PORT.Register,(Channel % DIO_CHANNELS_PER_PORT));
		}
		else if(DIO_EN_W_High == Output)
     5b0:	61 30       	cpi	r22, 0x01	; 1
     5b2:	f9 f4       	brne	.+62     	; 0x5f2 <Dio_ChannelWrite+0x94>
		{
			SetBit(DIO[Channel/DIO_CHANNELS_PER_PORT].PORT.Register,(Channel % DIO_CHANNELS_PER_PORT));
     5b4:	28 2f       	mov	r18, r24
     5b6:	26 95       	lsr	r18
     5b8:	26 95       	lsr	r18
     5ba:	26 95       	lsr	r18
     5bc:	30 e0       	ldi	r19, 0x00	; 0
     5be:	f9 01       	movw	r30, r18
     5c0:	ee 0f       	add	r30, r30
     5c2:	ff 1f       	adc	r31, r31
     5c4:	e2 0f       	add	r30, r18
     5c6:	f3 1f       	adc	r31, r19
     5c8:	22 a9       	sts	0x42, r18
     5ca:	87 70       	andi	r24, 0x07	; 7
     5cc:	41 e0       	ldi	r20, 0x01	; 1
     5ce:	50 e0       	ldi	r21, 0x00	; 0
     5d0:	60 e0       	ldi	r22, 0x00	; 0
     5d2:	70 e0       	ldi	r23, 0x00	; 0
     5d4:	7a 01       	movw	r14, r20
     5d6:	8b 01       	movw	r16, r22
     5d8:	04 c0       	rjmp	.+8      	; 0x5e2 <Dio_ChannelWrite+0x84>
     5da:	ee 0c       	add	r14, r14
     5dc:	ff 1c       	adc	r15, r15
     5de:	00 1f       	adc	r16, r16
     5e0:	11 1f       	adc	r17, r17
     5e2:	8a 95       	dec	r24
     5e4:	d2 f7       	brpl	.-12     	; 0x5da <Dio_ChannelWrite+0x7c>
     5e6:	d8 01       	movw	r26, r16
     5e8:	c7 01       	movw	r24, r14
     5ea:	82 2b       	or	r24, r18
     5ec:	82 ab       	sts	0x52, r24



DioError_t			Dio_ChannelWrite		(DioChannel_t Channel, DioWrite_t Output)
{
	DioError_t return_value = DIO_EN_valid_inti;
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	24 c0       	rjmp	.+72     	; 0x63a <Dio_ChannelWrite+0xdc>
		}
		else if(DIO_EN_W_High == Output)
		{
			SetBit(DIO[Channel/DIO_CHANNELS_PER_PORT].PORT.Register,(Channel % DIO_CHANNELS_PER_PORT));
		}
		else if(DIO_EN_W_Toggle == Output)
     5f2:	62 30       	cpi	r22, 0x02	; 2
     5f4:	09 f5       	brne	.+66     	; 0x638 <Dio_ChannelWrite+0xda>
		{
			ToggleBit(DIO[Channel/DIO_CHANNELS_PER_PORT].PORT.Register,(Channel % DIO_CHANNELS_PER_PORT));
     5f6:	28 2f       	mov	r18, r24
     5f8:	26 95       	lsr	r18
     5fa:	26 95       	lsr	r18
     5fc:	26 95       	lsr	r18
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	f9 01       	movw	r30, r18
     602:	ee 0f       	add	r30, r30
     604:	ff 1f       	adc	r31, r31
     606:	e2 0f       	add	r30, r18
     608:	f3 1f       	adc	r31, r19
     60a:	22 a9       	sts	0x42, r18
     60c:	87 70       	andi	r24, 0x07	; 7
     60e:	41 e0       	ldi	r20, 0x01	; 1
     610:	50 e0       	ldi	r21, 0x00	; 0
     612:	60 e0       	ldi	r22, 0x00	; 0
     614:	70 e0       	ldi	r23, 0x00	; 0
     616:	7a 01       	movw	r14, r20
     618:	8b 01       	movw	r16, r22
     61a:	04 c0       	rjmp	.+8      	; 0x624 <Dio_ChannelWrite+0xc6>
     61c:	ee 0c       	add	r14, r14
     61e:	ff 1c       	adc	r15, r15
     620:	00 1f       	adc	r16, r16
     622:	11 1f       	adc	r17, r17
     624:	8a 95       	dec	r24
     626:	d2 f7       	brpl	.-12     	; 0x61c <Dio_ChannelWrite+0xbe>
     628:	d8 01       	movw	r26, r16
     62a:	c7 01       	movw	r24, r14
     62c:	82 27       	eor	r24, r18
     62e:	82 ab       	sts	0x52, r24



DioError_t			Dio_ChannelWrite		(DioChannel_t Channel, DioWrite_t Output)
{
	DioError_t return_value = DIO_EN_valid_inti;
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	03 c0       	rjmp	.+6      	; 0x63a <Dio_ChannelWrite+0xdc>
			return_value = DIO_EN_invalidState;
		}
	}
	else
	{
		return_value = DIO_EN_invalidChannel;
     634:	82 e0       	ldi	r24, 0x02	; 2
     636:	01 c0       	rjmp	.+2      	; 0x63a <Dio_ChannelWrite+0xdc>
		{
			ToggleBit(DIO[Channel/DIO_CHANNELS_PER_PORT].PORT.Register,(Channel % DIO_CHANNELS_PER_PORT));
		}
		else
		{
			return_value = DIO_EN_invalidState;
     638:	84 e0       	ldi	r24, 0x04	; 4
	else
	{
		return_value = DIO_EN_invalidChannel;
	}
	return return_value;
}
     63a:	1f 91       	pop	r17
     63c:	0f 91       	pop	r16
     63e:	ff 90       	pop	r15
     640:	ef 90       	pop	r14
     642:	08 95       	ret

00000644 <Dio_ChannelRead>:


DioError_t			Dio_ChannelRead			(DioChannel_t Channel, DioState_t * State)
{
	DioError_t return_value = DIO_EN_valid_inti;
	if((Channel >= DIO_EN_MIN_Channel) && (Channel <= DIO_EN_MAX_Channel))
     644:	80 32       	cpi	r24, 0x20	; 32
     646:	e8 f4       	brcc	.+58     	; 0x682 <Dio_ChannelRead+0x3e>
	{
		if(NULL != State)
     648:	61 15       	cp	r22, r1
     64a:	71 05       	cpc	r23, r1
     64c:	e1 f0       	breq	.+56     	; 0x686 <Dio_ChannelRead+0x42>
		{
			*State = GetBit(DIO[Channel/DIO_CHANNELS_PER_PORT].PIN.Register,(Channel % DIO_CHANNELS_PER_PORT));
     64e:	28 2f       	mov	r18, r24
     650:	26 95       	lsr	r18
     652:	26 95       	lsr	r18
     654:	26 95       	lsr	r18
     656:	30 e0       	ldi	r19, 0x00	; 0
     658:	a9 01       	movw	r20, r18
     65a:	44 0f       	add	r20, r20
     65c:	55 1f       	adc	r21, r21
     65e:	24 0f       	add	r18, r20
     660:	35 1f       	adc	r19, r21
     662:	f9 01       	movw	r30, r18
     664:	20 a9       	sts	0x40, r18
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	87 70       	andi	r24, 0x07	; 7
     66a:	a9 01       	movw	r20, r18
     66c:	02 c0       	rjmp	.+4      	; 0x672 <Dio_ChannelRead+0x2e>
     66e:	55 95       	asr	r21
     670:	47 95       	ror	r20
     672:	8a 95       	dec	r24
     674:	e2 f7       	brpl	.-8      	; 0x66e <Dio_ChannelRead+0x2a>
     676:	ca 01       	movw	r24, r20
     678:	81 70       	andi	r24, 0x01	; 1
     67a:	fb 01       	movw	r30, r22
     67c:	80 83       	st	Z, r24
}


DioError_t			Dio_ChannelRead			(DioChannel_t Channel, DioState_t * State)
{
	DioError_t return_value = DIO_EN_valid_inti;
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	08 95       	ret
			return_value = DIO_EN_invalidPointer;
		}
	}
	else
	{
		return_value = DIO_EN_invalidChannel;
     682:	82 e0       	ldi	r24, 0x02	; 2
     684:	08 95       	ret
		{
			*State = GetBit(DIO[Channel/DIO_CHANNELS_PER_PORT].PIN.Register,(Channel % DIO_CHANNELS_PER_PORT));
		}		
		else
		{
			return_value = DIO_EN_invalidPointer;
     686:	85 e0       	ldi	r24, 0x05	; 5
	else
	{
		return_value = DIO_EN_invalidChannel;
	}
	return return_value;
}
     688:	08 95       	ret

0000068a <Dio_PortPullUp>:


DioError_t			Dio_PortPullUp			(DioPort_t Port)
{
	DioError_t return_value = DIO_EN_valid_inti;
	if((Port >= DIO_EN_MIN_PORT) && (Port < DIO_EN_MAX_PORT))
     68a:	84 30       	cpi	r24, 0x04	; 4
     68c:	58 f4       	brcc	.+22     	; 0x6a4 <Dio_PortPullUp+0x1a>
	{
		SetReg_8_Bits(DIO[Port].PORT.Register);
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	9c 01       	movw	r18, r24
     692:	22 0f       	add	r18, r18
     694:	33 1f       	adc	r19, r19
     696:	82 0f       	add	r24, r18
     698:	93 1f       	adc	r25, r19
     69a:	2f ef       	ldi	r18, 0xFF	; 255
     69c:	fc 01       	movw	r30, r24
     69e:	22 ab       	sts	0x52, r18
}


DioError_t			Dio_PortPullUp			(DioPort_t Port)
{
	DioError_t return_value = DIO_EN_valid_inti;
     6a0:	80 e0       	ldi	r24, 0x00	; 0
     6a2:	08 95       	ret
	{
		SetReg_8_Bits(DIO[Port].PORT.Register);
	}
	else
	{
		return_value = DIO_EN_invalidChannel;
     6a4:	82 e0       	ldi	r24, 0x02	; 2
	}
	return return_value;
}
     6a6:	08 95       	ret

000006a8 <Dio_PortMode>:

DioError_t			Dio_PortMode			(DioPort_t Port, DioMode_t  Mode)
{
	DioError_t return_value = DIO_EN_valid_inti;
	if((Port >= DIO_EN_MIN_PORT) && (Port < DIO_EN_MAX_PORT))
     6a8:	84 30       	cpi	r24, 0x04	; 4
     6aa:	c8 f4       	brcc	.+50     	; 0x6de <Dio_PortMode+0x36>
	{
		if(DIO_EN_M_Input == Mode)
     6ac:	66 23       	and	r22, r22
     6ae:	51 f4       	brne	.+20     	; 0x6c4 <Dio_PortMode+0x1c>
		{
			ClearReg_8_Bits(DIO[Port].DDR.Register);
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	9c 01       	movw	r18, r24
     6b4:	22 0f       	add	r18, r18
     6b6:	33 1f       	adc	r19, r19
     6b8:	82 0f       	add	r24, r18
     6ba:	93 1f       	adc	r25, r19
     6bc:	fc 01       	movw	r30, r24
     6be:	11 aa       	sts	0x91, r17
	return return_value;
}

DioError_t			Dio_PortMode			(DioPort_t Port, DioMode_t  Mode)
{
	DioError_t return_value = DIO_EN_valid_inti;
     6c0:	80 e0       	ldi	r24, 0x00	; 0
     6c2:	08 95       	ret
	{
		if(DIO_EN_M_Input == Mode)
		{
			ClearReg_8_Bits(DIO[Port].DDR.Register);
		}
		else if(DIO_EN_M_Output == Mode)
     6c4:	61 30       	cpi	r22, 0x01	; 1
     6c6:	69 f4       	brne	.+26     	; 0x6e2 <Dio_PortMode+0x3a>
		{
			SetReg_8_Bits(DIO[Port].DDR.Register);
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	9c 01       	movw	r18, r24
     6cc:	22 0f       	add	r18, r18
     6ce:	33 1f       	adc	r19, r19
     6d0:	82 0f       	add	r24, r18
     6d2:	93 1f       	adc	r25, r19
     6d4:	2f ef       	ldi	r18, 0xFF	; 255
     6d6:	fc 01       	movw	r30, r24
     6d8:	21 ab       	sts	0x51, r18
	return return_value;
}

DioError_t			Dio_PortMode			(DioPort_t Port, DioMode_t  Mode)
{
	DioError_t return_value = DIO_EN_valid_inti;
     6da:	80 e0       	ldi	r24, 0x00	; 0
     6dc:	08 95       	ret
			return_value = DIO_EN_invalidMode;
		}
	}
	else
	{
		return_value = DIO_EN_invalidChannel;
     6de:	82 e0       	ldi	r24, 0x02	; 2
     6e0:	08 95       	ret
		{
			SetReg_8_Bits(DIO[Port].DDR.Register);
		}
		else
		{
			return_value = DIO_EN_invalidMode;
     6e2:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		return_value = DIO_EN_invalidChannel;
	}
	return return_value;
}
     6e4:	08 95       	ret

000006e6 <Dio_PortWrite>:


DioError_t			Dio_PortWrite			(DioPort_t Port, DioWrite_t Output)
{
	DioError_t return_value = DIO_EN_valid_inti;
	if((Port >= DIO_EN_MIN_PORT) && (Port < DIO_EN_MAX_PORT))
     6e6:	84 30       	cpi	r24, 0x04	; 4
     6e8:	30 f5       	brcc	.+76     	; 0x736 <Dio_PortWrite+0x50>
	{
		if(DIO_EN_W_Low == Output)
     6ea:	66 23       	and	r22, r22
     6ec:	51 f4       	brne	.+20     	; 0x702 <Dio_PortWrite+0x1c>
		{
			ClearReg_8_Bits(DIO[Port].PORT.Register);
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	9c 01       	movw	r18, r24
     6f2:	22 0f       	add	r18, r18
     6f4:	33 1f       	adc	r19, r19
     6f6:	82 0f       	add	r24, r18
     6f8:	93 1f       	adc	r25, r19
     6fa:	fc 01       	movw	r30, r24
     6fc:	12 aa       	sts	0x92, r17
}


DioError_t			Dio_PortWrite			(DioPort_t Port, DioWrite_t Output)
{
	DioError_t return_value = DIO_EN_valid_inti;
     6fe:	80 e0       	ldi	r24, 0x00	; 0
     700:	08 95       	ret
	{
		if(DIO_EN_W_Low == Output)
		{
			ClearReg_8_Bits(DIO[Port].PORT.Register);
		}
		else if(DIO_EN_W_High == Output)
     702:	61 30       	cpi	r22, 0x01	; 1
     704:	59 f4       	brne	.+22     	; 0x71c <Dio_PortWrite+0x36>
		{
			SetReg_8_Bits(DIO[Port].PORT.Register);
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	9c 01       	movw	r18, r24
     70a:	22 0f       	add	r18, r18
     70c:	33 1f       	adc	r19, r19
     70e:	82 0f       	add	r24, r18
     710:	93 1f       	adc	r25, r19
     712:	2f ef       	ldi	r18, 0xFF	; 255
     714:	fc 01       	movw	r30, r24
     716:	22 ab       	sts	0x52, r18
}


DioError_t			Dio_PortWrite			(DioPort_t Port, DioWrite_t Output)
{
	DioError_t return_value = DIO_EN_valid_inti;
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	08 95       	ret
		}
		else if(DIO_EN_W_High == Output)
		{
			SetReg_8_Bits(DIO[Port].PORT.Register);
		}
		else if(DIO_EN_W_Toggle == Output)
     71c:	62 30       	cpi	r22, 0x02	; 2
     71e:	69 f4       	brne	.+26     	; 0x73a <Dio_PortWrite+0x54>
		{
			ToggleReg_8_Bits(DIO[Port].PORT.Register);
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	fc 01       	movw	r30, r24
     724:	ee 0f       	add	r30, r30
     726:	ff 1f       	adc	r31, r31
     728:	e8 0f       	add	r30, r24
     72a:	f9 1f       	adc	r31, r25
     72c:	82 a9       	sts	0x42, r24
     72e:	80 95       	com	r24
     730:	82 ab       	sts	0x52, r24
}


DioError_t			Dio_PortWrite			(DioPort_t Port, DioWrite_t Output)
{
	DioError_t return_value = DIO_EN_valid_inti;
     732:	80 e0       	ldi	r24, 0x00	; 0
     734:	08 95       	ret
			return_value = DIO_EN_invalidState;
		}
	}
	else
	{
		return_value = DIO_EN_invalidChannel;
     736:	82 e0       	ldi	r24, 0x02	; 2
     738:	08 95       	ret
		{
			ToggleReg_8_Bits(DIO[Port].PORT.Register);
		}
		else
		{
			return_value = DIO_EN_invalidState;
     73a:	84 e0       	ldi	r24, 0x04	; 4
	else
	{
		return_value = DIO_EN_invalidChannel;
	}
	return return_value;
}
     73c:	08 95       	ret

0000073e <Dio_PortRead>:


DioError_t			Dio_PortRead			(DioPort_t Port, DioPortValue_t * State)
{
	DioError_t return_value = DIO_EN_valid_inti;
	if((Port >= DIO_EN_MIN_PORT) && (Port < DIO_EN_MAX_PORT))
     73e:	84 30       	cpi	r24, 0x04	; 4
     740:	78 f4       	brcc	.+30     	; 0x760 <Dio_PortRead+0x22>
	{
		if(NULL != State)
     742:	61 15       	cp	r22, r1
     744:	71 05       	cpc	r23, r1
     746:	71 f0       	breq	.+28     	; 0x764 <Dio_PortRead+0x26>
		{
			*State = DIO[Port].PIN.Register;
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	9c 01       	movw	r18, r24
     74c:	22 0f       	add	r18, r18
     74e:	33 1f       	adc	r19, r19
     750:	82 0f       	add	r24, r18
     752:	93 1f       	adc	r25, r19
     754:	fc 01       	movw	r30, r24
     756:	80 a9       	sts	0x40, r24
     758:	fb 01       	movw	r30, r22
     75a:	80 83       	st	Z, r24
}


DioError_t			Dio_PortRead			(DioPort_t Port, DioPortValue_t * State)
{
	DioError_t return_value = DIO_EN_valid_inti;
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	08 95       	ret
			return_value = DIO_EN_invalidPointer;
		}
	}
	else
	{
		return_value = DIO_EN_invalidChannel;
     760:	82 e0       	ldi	r24, 0x02	; 2
     762:	08 95       	ret
		{
			*State = DIO[Port].PIN.Register;
		}
		else
		{
			return_value = DIO_EN_invalidPointer;
     764:	85 e0       	ldi	r24, 0x05	; 5
	else
	{
		return_value = DIO_EN_invalidChannel;
	}
	return return_value;
}
     766:	08 95       	ret

00000768 <Dio_GroupPullUp>:


DioError_t			Dio_GroupPullUp			(DioPort_t Port, DioGroupBits_t Group)
{
	DioError_t return_value = DIO_EN_valid_inti;
	if((Port >= DIO_EN_MIN_PORT) && (Port < DIO_EN_MAX_PORT))
     768:	84 30       	cpi	r24, 0x04	; 4
     76a:	58 f4       	brcc	.+22     	; 0x782 <Dio_GroupPullUp+0x1a>
	{
		SetMaskBits(DIO[Port].PORT.Register, Group);
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	fc 01       	movw	r30, r24
     770:	ee 0f       	add	r30, r30
     772:	ff 1f       	adc	r31, r31
     774:	e8 0f       	add	r30, r24
     776:	f9 1f       	adc	r31, r25
     778:	82 a9       	sts	0x42, r24
     77a:	68 2b       	or	r22, r24
     77c:	62 ab       	sts	0x52, r22
}


DioError_t			Dio_GroupPullUp			(DioPort_t Port, DioGroupBits_t Group)
{
	DioError_t return_value = DIO_EN_valid_inti;
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	08 95       	ret
	{
		SetMaskBits(DIO[Port].PORT.Register, Group);
	}
	else
	{
		return_value = DIO_EN_invalidChannel;
     782:	82 e0       	ldi	r24, 0x02	; 2
	}
	return return_value;
}
     784:	08 95       	ret

00000786 <Dio_GroupMode>:

DioError_t			Dio_GroupMode			(DioPort_t Port, DioGroupBits_t Group, DioMode_t  Mode)
{
	DioError_t return_value = DIO_EN_valid_inti;
	if((Port >= DIO_EN_MIN_PORT) && (Port < DIO_EN_MAX_PORT))
     786:	84 30       	cpi	r24, 0x04	; 4
     788:	d8 f4       	brcc	.+54     	; 0x7c0 <Dio_GroupMode+0x3a>
	{
		if(DIO_EN_M_Input == Mode)
     78a:	44 23       	and	r20, r20
     78c:	61 f4       	brne	.+24     	; 0x7a6 <Dio_GroupMode+0x20>
		{
			ClearMaskBits(DIO[Port].DDR.Register, Group);
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	fc 01       	movw	r30, r24
     792:	ee 0f       	add	r30, r30
     794:	ff 1f       	adc	r31, r31
     796:	e8 0f       	add	r30, r24
     798:	f9 1f       	adc	r31, r25
     79a:	81 a9       	sts	0x41, r24
     79c:	60 95       	com	r22
     79e:	68 23       	and	r22, r24
     7a0:	61 ab       	sts	0x51, r22
	return return_value;
}

DioError_t			Dio_GroupMode			(DioPort_t Port, DioGroupBits_t Group, DioMode_t  Mode)
{
	DioError_t return_value = DIO_EN_valid_inti;
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	08 95       	ret
	{
		if(DIO_EN_M_Input == Mode)
		{
			ClearMaskBits(DIO[Port].DDR.Register, Group);
		}
		else if(DIO_EN_M_Output == Mode)
     7a6:	41 30       	cpi	r20, 0x01	; 1
     7a8:	69 f4       	brne	.+26     	; 0x7c4 <Dio_GroupMode+0x3e>
		{
			SetMaskBits(DIO[Port].DDR.Register, Group);
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	fc 01       	movw	r30, r24
     7ae:	ee 0f       	add	r30, r30
     7b0:	ff 1f       	adc	r31, r31
     7b2:	e8 0f       	add	r30, r24
     7b4:	f9 1f       	adc	r31, r25
     7b6:	81 a9       	sts	0x41, r24
     7b8:	68 2b       	or	r22, r24
     7ba:	61 ab       	sts	0x51, r22
	return return_value;
}

DioError_t			Dio_GroupMode			(DioPort_t Port, DioGroupBits_t Group, DioMode_t  Mode)
{
	DioError_t return_value = DIO_EN_valid_inti;
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	08 95       	ret
			return_value = DIO_EN_invalidMode;
		}
	}
	else
	{
		return_value = DIO_EN_invalidChannel;
     7c0:	82 e0       	ldi	r24, 0x02	; 2
     7c2:	08 95       	ret
		{
			SetMaskBits(DIO[Port].DDR.Register, Group);
		}
		else
		{
			return_value = DIO_EN_invalidMode;
     7c4:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		return_value = DIO_EN_invalidChannel;
	}
	return return_value;
}
     7c6:	08 95       	ret

000007c8 <Dio_GroupWrite>:


DioError_t			Dio_GroupWrite			(DioPort_t Port, DioGroupBits_t Group, DioWrite_t Output)
{
	DioError_t return_value = DIO_EN_valid_inti;
	if((Port >= DIO_EN_MIN_PORT) && (Port < DIO_EN_MAX_PORT))
     7c8:	84 30       	cpi	r24, 0x04	; 4
     7ca:	40 f5       	brcc	.+80     	; 0x81c <Dio_GroupWrite+0x54>
	{
		if(DIO_EN_W_Low == Output)
     7cc:	44 23       	and	r20, r20
     7ce:	61 f4       	brne	.+24     	; 0x7e8 <Dio_GroupWrite+0x20>
		{
			ClearMaskBits(DIO[Port].PORT.Register, Group);
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	fc 01       	movw	r30, r24
     7d4:	ee 0f       	add	r30, r30
     7d6:	ff 1f       	adc	r31, r31
     7d8:	e8 0f       	add	r30, r24
     7da:	f9 1f       	adc	r31, r25
     7dc:	82 a9       	sts	0x42, r24
     7de:	60 95       	com	r22
     7e0:	68 23       	and	r22, r24
     7e2:	62 ab       	sts	0x52, r22



DioError_t			Dio_GroupWrite			(DioPort_t Port, DioGroupBits_t Group, DioWrite_t Output)
{
	DioError_t return_value = DIO_EN_valid_inti;
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	08 95       	ret
	{
		if(DIO_EN_W_Low == Output)
		{
			ClearMaskBits(DIO[Port].PORT.Register, Group);
		}
		else if(DIO_EN_W_High == Output)
     7e8:	41 30       	cpi	r20, 0x01	; 1
     7ea:	59 f4       	brne	.+22     	; 0x802 <Dio_GroupWrite+0x3a>
		{
			SetMaskBits(DIO[Port].PORT.Register, Group);
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	fc 01       	movw	r30, r24
     7f0:	ee 0f       	add	r30, r30
     7f2:	ff 1f       	adc	r31, r31
     7f4:	e8 0f       	add	r30, r24
     7f6:	f9 1f       	adc	r31, r25
     7f8:	82 a9       	sts	0x42, r24
     7fa:	68 2b       	or	r22, r24
     7fc:	62 ab       	sts	0x52, r22



DioError_t			Dio_GroupWrite			(DioPort_t Port, DioGroupBits_t Group, DioWrite_t Output)
{
	DioError_t return_value = DIO_EN_valid_inti;
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	08 95       	ret
		}
		else if(DIO_EN_W_High == Output)
		{
			SetMaskBits(DIO[Port].PORT.Register, Group);
		}
		else if(DIO_EN_W_Toggle == Output)
     802:	42 30       	cpi	r20, 0x02	; 2
     804:	69 f4       	brne	.+26     	; 0x820 <Dio_GroupWrite+0x58>
		{
			ToggleMaskBits(DIO[Port].PORT.Register, Group);
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	fc 01       	movw	r30, r24
     80a:	ee 0f       	add	r30, r30
     80c:	ff 1f       	adc	r31, r31
     80e:	e8 0f       	add	r30, r24
     810:	f9 1f       	adc	r31, r25
     812:	82 a9       	sts	0x42, r24
     814:	68 27       	eor	r22, r24
     816:	62 ab       	sts	0x52, r22



DioError_t			Dio_GroupWrite			(DioPort_t Port, DioGroupBits_t Group, DioWrite_t Output)
{
	DioError_t return_value = DIO_EN_valid_inti;
     818:	80 e0       	ldi	r24, 0x00	; 0
     81a:	08 95       	ret
			return_value = DIO_EN_invalidState;
		}
	}
	else
	{
		return_value = DIO_EN_invalidChannel;
     81c:	82 e0       	ldi	r24, 0x02	; 2
     81e:	08 95       	ret
		{
			ToggleMaskBits(DIO[Port].PORT.Register, Group);
		}
		else
		{
			return_value = DIO_EN_invalidState;
     820:	84 e0       	ldi	r24, 0x04	; 4
	else
	{
		return_value = DIO_EN_invalidChannel;
	}
	return return_value;
}
     822:	08 95       	ret

00000824 <Dio_GroupRead>:


DioError_t			Dio_GroupRead			(DioPort_t Port, DioGroupBits_t Group, DioGroupValue_t * State)
{
	DioError_t return_value = DIO_EN_valid_inti;
	if((Port >= DIO_EN_MIN_PORT) && (Port < DIO_EN_MAX_PORT))
     824:	84 30       	cpi	r24, 0x04	; 4
     826:	80 f4       	brcc	.+32     	; 0x848 <Dio_GroupRead+0x24>
	{
		if(NULL != State)
     828:	41 15       	cp	r20, r1
     82a:	51 05       	cpc	r21, r1
     82c:	79 f0       	breq	.+30     	; 0x84c <Dio_GroupRead+0x28>
		{
			*State = GetMaskBits(DIO[Port].PIN.Register, Group);
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	9c 01       	movw	r18, r24
     832:	22 0f       	add	r18, r18
     834:	33 1f       	adc	r19, r19
     836:	82 0f       	add	r24, r18
     838:	93 1f       	adc	r25, r19
     83a:	fc 01       	movw	r30, r24
     83c:	80 a9       	sts	0x40, r24
     83e:	68 23       	and	r22, r24
     840:	fa 01       	movw	r30, r20
     842:	60 83       	st	Z, r22
}


DioError_t			Dio_GroupRead			(DioPort_t Port, DioGroupBits_t Group, DioGroupValue_t * State)
{
	DioError_t return_value = DIO_EN_valid_inti;
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	08 95       	ret
			return_value = DIO_EN_invalidPointer;
		}
	}
	else
	{
		return_value = DIO_EN_invalidChannel;
     848:	82 e0       	ldi	r24, 0x02	; 2
     84a:	08 95       	ret
		{
			*State = GetMaskBits(DIO[Port].PIN.Register, Group);
		}
		else
		{
			return_value = DIO_EN_invalidPointer;
     84c:	85 e0       	ldi	r24, 0x05	; 5
	else
	{
		return_value = DIO_EN_invalidChannel;
	}
	return return_value;
}
     84e:	08 95       	ret

00000850 <TOGGLE_2>:
{
	Dio_ChannelWrite(PWM_CFG[PWM_0].Channel, DIO_EN_W_Toggle);
}
_S void   TOGGLE_2 (void)
{
	Dio_ChannelWrite(PWM_CFG[PWM_2].Channel, DIO_EN_W_Toggle);
     850:	80 91 75 00 	lds	r24, 0x0075
     854:	62 e0       	ldi	r22, 0x02	; 2
     856:	0e 94 af 02 	call	0x55e	; 0x55e <Dio_ChannelWrite>
     85a:	08 95       	ret

0000085c <TOGGLE_0>:
	return return_value;
}

_S void   TOGGLE_0 (void)
{
	Dio_ChannelWrite(PWM_CFG[PWM_0].Channel, DIO_EN_W_Toggle);
     85c:	80 91 72 00 	lds	r24, 0x0072
     860:	62 e0       	ldi	r22, 0x02	; 2
     862:	0e 94 af 02 	call	0x55e	; 0x55e <Dio_ChannelWrite>
}
     866:	08 95       	ret

00000868 <PWM_Init>:
_S void  TOGGLE_0 (void);
_S void  TOGGLE_2 (void);
_V _S V_CallBack_V_t  PWM_CallBacks[PWM_End]  = {TOGGLE_0, TOGGLE_2};

PWMError_t PWM_Init(PWM_CH_t pwm_ch)
{
     868:	ef 92       	push	r14
     86a:	ff 92       	push	r15
     86c:	0f 93       	push	r16
     86e:	1f 93       	push	r17
     870:	cf 93       	push	r28
     872:	df 93       	push	r29
     874:	00 d0       	rcall	.+0      	; 0x876 <PWM_Init+0xe>
     876:	00 d0       	rcall	.+0      	; 0x878 <PWM_Init+0x10>
     878:	0f 92       	push	r0
     87a:	cd b7       	in	r28, 0x3d	; 61
     87c:	de b7       	in	r29, 0x3e	; 62
	PWMError_t return_value = PWM_EN_valid_inti;
	DioError_t DioReturn_value = DIO_EN_valid_inti;
	TMR_Configuration_t  TMRConfiguration;
	if((pwm_ch >= PWM_Start) && (pwm_ch < PWM_End))
     87e:	82 30       	cpi	r24, 0x02	; 2
     880:	40 f5       	brcc	.+80     	; 0x8d2 <PWM_Init+0x6a>
	{
		DioReturn_value = Dio_ChannelMode(PWM_CFG[pwm_ch].Channel, DIO_EN_M_Output);
     882:	e8 2e       	mov	r14, r24
     884:	ff 24       	eor	r15, r15
     886:	f7 01       	movw	r30, r14
     888:	ee 0f       	add	r30, r30
     88a:	ff 1f       	adc	r31, r31
     88c:	ee 0d       	add	r30, r14
     88e:	ff 1d       	adc	r31, r15
     890:	ee 58       	subi	r30, 0x8E	; 142
     892:	ff 4f       	sbci	r31, 0xFF	; 255
     894:	80 81       	ld	r24, Z
     896:	61 e0       	ldi	r22, 0x01	; 1
     898:	0e 94 5d 02 	call	0x4ba	; 0x4ba <Dio_ChannelMode>
		if(DioReturn_value == DIO_EN_valid_inti)
     89c:	88 23       	and	r24, r24
     89e:	d9 f4       	brne	.+54     	; 0x8d6 <PWM_Init+0x6e>
		{
			Timer_PWMCallBack(PWM_CFG[pwm_ch].Timer, PWM_CallBacks[pwm_ch]);
     8a0:	87 01       	movw	r16, r14
     8a2:	00 0f       	add	r16, r16
     8a4:	11 1f       	adc	r17, r17
     8a6:	f8 01       	movw	r30, r16
     8a8:	e2 59       	subi	r30, 0x92	; 146
     8aa:	ff 4f       	sbci	r31, 0xFF	; 255
     8ac:	60 81       	ld	r22, Z
     8ae:	71 81       	ldd	r23, Z+1	; 0x01
     8b0:	0e 0d       	add	r16, r14
     8b2:	1f 1d       	adc	r17, r15
     8b4:	0e 58       	subi	r16, 0x8E	; 142
     8b6:	1f 4f       	sbci	r17, 0xFF	; 255
     8b8:	f8 01       	movw	r30, r16
     8ba:	81 81       	ldd	r24, Z+1	; 0x01
     8bc:	0e 94 af 08 	call	0x115e	; 0x115e <Timer_PWMCallBack>
			TMRConfiguration.Clock = PWM_CFG[pwm_ch].Clock;
     8c0:	f8 01       	movw	r30, r16
     8c2:	82 81       	ldd	r24, Z+2	; 0x02
     8c4:	8b 83       	std	Y+3, r24	; 0x03
			Timer_Init(&TMRConfiguration);
     8c6:	ce 01       	movw	r24, r28
     8c8:	01 96       	adiw	r24, 0x01	; 1
     8ca:	0e 94 3c 07 	call	0xe78	; 0xe78 <Timer_Init>
_S void  TOGGLE_2 (void);
_V _S V_CallBack_V_t  PWM_CallBacks[PWM_End]  = {TOGGLE_0, TOGGLE_2};

PWMError_t PWM_Init(PWM_CH_t pwm_ch)
{
	PWMError_t return_value = PWM_EN_valid_inti;
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	03 c0       	rjmp	.+6      	; 0x8d8 <PWM_Init+0x70>
			TMRConfiguration.Clock = PWM_CFG[pwm_ch].Clock;
			Timer_Init(&TMRConfiguration);
		}
		else{return_value = PWM_EN_InvalidDioChannel;}
	}
	else{return_value = PWM_EN_InvalidChannel;}
     8d2:	81 e0       	ldi	r24, 0x01	; 1
     8d4:	01 c0       	rjmp	.+2      	; 0x8d8 <PWM_Init+0x70>
		{
			Timer_PWMCallBack(PWM_CFG[pwm_ch].Timer, PWM_CallBacks[pwm_ch]);
			TMRConfiguration.Clock = PWM_CFG[pwm_ch].Clock;
			Timer_Init(&TMRConfiguration);
		}
		else{return_value = PWM_EN_InvalidDioChannel;}
     8d6:	82 e0       	ldi	r24, 0x02	; 2
	}
	else{return_value = PWM_EN_InvalidChannel;}
	
	return return_value;
}
     8d8:	0f 90       	pop	r0
     8da:	0f 90       	pop	r0
     8dc:	0f 90       	pop	r0
     8de:	0f 90       	pop	r0
     8e0:	0f 90       	pop	r0
     8e2:	df 91       	pop	r29
     8e4:	cf 91       	pop	r28
     8e6:	1f 91       	pop	r17
     8e8:	0f 91       	pop	r16
     8ea:	ff 90       	pop	r15
     8ec:	ef 90       	pop	r14
     8ee:	08 95       	ret

000008f0 <PWM_Stop>:

PWMError_t PWM_Stop(PWM_CH_t pwm_ch)
{
     8f0:	cf 93       	push	r28
     8f2:	df 93       	push	r29
	PWMError_t return_value = PWM_EN_valid_inti;
	if((pwm_ch >= PWM_Start) && (pwm_ch < PWM_End))
     8f4:	82 30       	cpi	r24, 0x02	; 2
     8f6:	88 f4       	brcc	.+34     	; 0x91a <PWM_Stop+0x2a>
	{
		Timer_Stop(PWM_CFG[pwm_ch].Timer);
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	ec 01       	movw	r28, r24
     8fc:	cc 0f       	add	r28, r28
     8fe:	dd 1f       	adc	r29, r29
     900:	c8 0f       	add	r28, r24
     902:	d9 1f       	adc	r29, r25
     904:	ce 58       	subi	r28, 0x8E	; 142
     906:	df 4f       	sbci	r29, 0xFF	; 255
     908:	89 81       	ldd	r24, Y+1	; 0x01
     90a:	0e 94 be 04 	call	0x97c	; 0x97c <Timer_Stop>
		Dio_ChannelWrite(PWM_CFG[pwm_ch].Channel, DIO_EN_W_Low);
     90e:	88 81       	ld	r24, Y
     910:	60 e0       	ldi	r22, 0x00	; 0
     912:	0e 94 af 02 	call	0x55e	; 0x55e <Dio_ChannelWrite>
	return return_value;
}

PWMError_t PWM_Stop(PWM_CH_t pwm_ch)
{
	PWMError_t return_value = PWM_EN_valid_inti;
     916:	80 e0       	ldi	r24, 0x00	; 0
     918:	01 c0       	rjmp	.+2      	; 0x91c <PWM_Stop+0x2c>
		Timer_Stop(PWM_CFG[pwm_ch].Timer);
		Dio_ChannelWrite(PWM_CFG[pwm_ch].Channel, DIO_EN_W_Low);
	}
	else
	{
		return_value = PWM_EN_InvalidChannel;
     91a:	81 e0       	ldi	r24, 0x01	; 1
	}
	return return_value;
}
     91c:	df 91       	pop	r29
     91e:	cf 91       	pop	r28
     920:	08 95       	ret

00000922 <PWM_DutyCycle>:

PWMError_t PWM_DutyCycle(PWM_CH_t pwm_ch, uint8_t Duty)
{
     922:	cf 93       	push	r28
     924:	df 93       	push	r29
	PWMError_t return_value = PWM_EN_valid_inti;
	if((pwm_ch >= PWM_Start) && (pwm_ch < PWM_End))
     926:	82 30       	cpi	r24, 0x02	; 2
     928:	88 f4       	brcc	.+34     	; 0x94c <PWM_DutyCycle+0x2a>
	{
		Timer_SoftWarePWM(PWM_CFG[pwm_ch].Timer, Duty, PWM_CFG[pwm_ch].Clock);
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	ec 01       	movw	r28, r24
     92e:	cc 0f       	add	r28, r28
     930:	dd 1f       	adc	r29, r29
     932:	c8 0f       	add	r28, r24
     934:	d9 1f       	adc	r29, r25
     936:	ce 58       	subi	r28, 0x8E	; 142
     938:	df 4f       	sbci	r29, 0xFF	; 255
     93a:	89 81       	ldd	r24, Y+1	; 0x01
     93c:	4a 81       	ldd	r20, Y+2	; 0x02
     93e:	0e 94 bd 08 	call	0x117a	; 0x117a <Timer_SoftWarePWM>
		Timer_Start(PWM_CFG[pwm_ch].Timer);
     942:	89 81       	ldd	r24, Y+1	; 0x01
     944:	0e 94 aa 04 	call	0x954	; 0x954 <Timer_Start>
	return return_value;
}

PWMError_t PWM_DutyCycle(PWM_CH_t pwm_ch, uint8_t Duty)
{
	PWMError_t return_value = PWM_EN_valid_inti;
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	01 c0       	rjmp	.+2      	; 0x94e <PWM_DutyCycle+0x2c>
		Timer_SoftWarePWM(PWM_CFG[pwm_ch].Timer, Duty, PWM_CFG[pwm_ch].Clock);
		Timer_Start(PWM_CFG[pwm_ch].Timer);
	}
	else
	{
		return_value = PWM_EN_InvalidChannel;
     94c:	81 e0       	ldi	r24, 0x01	; 1
	}
	return return_value;
}
     94e:	df 91       	pop	r29
     950:	cf 91       	pop	r28
     952:	08 95       	ret

00000954 <Timer_Start>:
	}
	else{/*MISRA C*/}
}
void			  Timer_Start			(Timer_t Timer)
{
	if(Timer == Timer0)
     954:	88 23       	and	r24, r24
     956:	41 f4       	brne	.+16     	; 0x968 <Timer_Start+0x14>
	{
		TIMER0.Control.Clock = Clock[Timer0];
     958:	90 91 b8 00 	lds	r25, 0x00B8
     95c:	97 70       	andi	r25, 0x07	; 7
     95e:	83 b7       	in	r24, 0x33	; 51
     960:	88 7f       	andi	r24, 0xF8	; 248
     962:	89 2b       	or	r24, r25
     964:	83 bf       	out	0x33, r24	; 51
     966:	08 95       	ret
	}
	else if(Timer == Timer2)
     968:	81 30       	cpi	r24, 0x01	; 1
     96a:	39 f4       	brne	.+14     	; 0x97a <Timer_Start+0x26>
	{
		TIMER2.Control.Clock = Clock[Timer2];
     96c:	90 91 b9 00 	lds	r25, 0x00B9
     970:	97 70       	andi	r25, 0x07	; 7
     972:	85 b5       	in	r24, 0x25	; 37
     974:	88 7f       	andi	r24, 0xF8	; 248
     976:	89 2b       	or	r24, r25
     978:	85 bd       	out	0x25, r24	; 37
     97a:	08 95       	ret

0000097c <Timer_Stop>:
	}
	else{/*MISRA C*/}
}
void			  Timer_Stop			(Timer_t Timer)
{
	if(Timer == Timer0)
     97c:	88 23       	and	r24, r24
     97e:	21 f4       	brne	.+8      	; 0x988 <Timer_Stop+0xc>
	{
		TIMER0.Control.Clock = TMR_EN_NoClock;	
     980:	83 b7       	in	r24, 0x33	; 51
     982:	88 7f       	andi	r24, 0xF8	; 248
     984:	83 bf       	out	0x33, r24	; 51
     986:	08 95       	ret
	}
	else if(Timer == Timer2)
     988:	81 30       	cpi	r24, 0x01	; 1
     98a:	19 f4       	brne	.+6      	; 0x992 <Timer_Stop+0x16>
	{
		TIMER2.Control.Clock = TMR_EN_NoClock;
     98c:	85 b5       	in	r24, 0x25	; 37
     98e:	88 7f       	andi	r24, 0xF8	; 248
     990:	85 bd       	out	0x25, r24	; 37
     992:	08 95       	ret

00000994 <Timer_Counter_0>:
	}
	else{/*MISRA C*/}
}
TimerError_t      Timer_Counter_0		(V_CallBack_V_t Ptr_Action, uint8_t Counts, TMR_Edge_t Edge)
{
     994:	0f 93       	push	r16
     996:	1f 93       	push	r17
     998:	cf 93       	push	r28
     99a:	df 93       	push	r29
     99c:	ec 01       	movw	r28, r24
     99e:	06 2f       	mov	r16, r22
     9a0:	14 2f       	mov	r17, r20
	TimerError_t return_value = TMR_EN_valid_inti;
	if((Ptr_Action != NULL))
     9a2:	00 97       	sbiw	r24, 0x00	; 0
     9a4:	c1 f0       	breq	.+48     	; 0x9d6 <Timer_Counter_0+0x42>
	{
		Timer_Stop(Timer0);
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	0e 94 be 04 	call	0x97c	; 0x97c <Timer_Stop>
		TIMER0.Control.CTC_wave_generation = ENABLE;
     9ac:	83 b7       	in	r24, 0x33	; 51
     9ae:	88 60       	ori	r24, 0x08	; 8
     9b0:	83 bf       	out	0x33, r24	; 51
		TIMER0.Control.PWM_wave_generation = DISABLE;
     9b2:	83 b7       	in	r24, 0x33	; 51
     9b4:	8f 7b       	andi	r24, 0xBF	; 191
     9b6:	83 bf       	out	0x33, r24	; 51
		
		CounterAction = Ptr_Action;
     9b8:	d0 93 b7 00 	sts	0x00B7, r29
     9bc:	c0 93 b6 00 	sts	0x00B6, r28
		TIMER0.CompareValue = Counts;
     9c0:	0c bf       	out	0x3c, r16	; 60
		
		TIMER0.Interrupts.Comp_Match = ENABLE;
     9c2:	89 b7       	in	r24, 0x39	; 57
     9c4:	82 60       	ori	r24, 0x02	; 2
     9c6:	89 bf       	out	0x39, r24	; 57
		TIMER0.Control.Clock = Edge;
     9c8:	17 70       	andi	r17, 0x07	; 7
     9ca:	83 b7       	in	r24, 0x33	; 51
     9cc:	88 7f       	andi	r24, 0xF8	; 248
     9ce:	18 2b       	or	r17, r24
     9d0:	13 bf       	out	0x33, r17	; 51
	}
	else{/*MISRA C*/}
}
TimerError_t      Timer_Counter_0		(V_CallBack_V_t Ptr_Action, uint8_t Counts, TMR_Edge_t Edge)
{
	TimerError_t return_value = TMR_EN_valid_inti;
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	01 c0       	rjmp	.+2      	; 0x9d8 <Timer_Counter_0+0x44>
		TIMER0.Control.Clock = Edge;
		//DDRB0 = INPUT;
	}
	else
	{
		return_value = TMR_EN_InvalidPointer;
     9d6:	81 e0       	ldi	r24, 0x01	; 1
	}
	return return_value;
}
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	1f 91       	pop	r17
     9de:	0f 91       	pop	r16
     9e0:	08 95       	ret

000009e2 <Timer_ResetCounter>:
	else{/*MISRA C*/}
}
void	          Timer_ResetCounter    (Timer_t Timer)
{
	
	if(Timer == Timer0)
     9e2:	88 23       	and	r24, r24
     9e4:	91 f4       	brne	.+36     	; 0xa0a <Timer_ResetCounter+0x28>
	{
		OverFlows[Timer0]	= RESET;
     9e6:	10 92 a2 00 	sts	0x00A2, r1
     9ea:	10 92 a3 00 	sts	0x00A3, r1
     9ee:	10 92 a4 00 	sts	0x00A4, r1
     9f2:	10 92 a5 00 	sts	0x00A5, r1
     9f6:	10 92 a6 00 	sts	0x00A6, r1
     9fa:	10 92 a7 00 	sts	0x00A7, r1
     9fe:	10 92 a8 00 	sts	0x00A8, r1
     a02:	10 92 a9 00 	sts	0x00A9, r1
		TIMER0.Counter		= RESET;
     a06:	12 be       	out	0x32, r1	; 50
     a08:	08 95       	ret
	}
	else if(Timer == Timer2)
     a0a:	81 30       	cpi	r24, 0x01	; 1
     a0c:	89 f4       	brne	.+34     	; 0xa30 <Timer_ResetCounter+0x4e>
	{
		OverFlows[Timer2]	= RESET;
     a0e:	10 92 aa 00 	sts	0x00AA, r1
     a12:	10 92 ab 00 	sts	0x00AB, r1
     a16:	10 92 ac 00 	sts	0x00AC, r1
     a1a:	10 92 ad 00 	sts	0x00AD, r1
     a1e:	10 92 ae 00 	sts	0x00AE, r1
     a22:	10 92 af 00 	sts	0x00AF, r1
     a26:	10 92 b0 00 	sts	0x00B0, r1
     a2a:	10 92 b1 00 	sts	0x00B1, r1
		TIMER2.Counter		= RESET;
     a2e:	14 bc       	out	0x24, r1	; 36
     a30:	08 95       	ret

00000a32 <Timer_Delay_MS>:
		return_value = TMR_EN_InvalidPointer;
	}
	return return_value;
}
void		      Timer_Delay_MS		(Timer_t Timer, uint32_t Delay)
{
     a32:	4f 92       	push	r4
     a34:	5f 92       	push	r5
     a36:	6f 92       	push	r6
     a38:	7f 92       	push	r7
     a3a:	8f 92       	push	r8
     a3c:	9f 92       	push	r9
     a3e:	af 92       	push	r10
     a40:	bf 92       	push	r11
     a42:	cf 92       	push	r12
     a44:	df 92       	push	r13
     a46:	ef 92       	push	r14
     a48:	ff 92       	push	r15
     a4a:	0f 93       	push	r16
     a4c:	1f 93       	push	r17
     a4e:	cf 93       	push	r28
     a50:	df 93       	push	r29
     a52:	6a 01       	movw	r12, r20
     a54:	7b 01       	movw	r14, r22
	if(Timer == Timer0)
     a56:	88 23       	and	r24, r24
     a58:	09 f0       	breq	.+2      	; 0xa5c <Timer_Delay_MS+0x2a>
     a5a:	e9 c0       	rjmp	.+466    	; 0xc2e <Timer_Delay_MS+0x1fc>
	{
		TIMER0.Control.CTC_wave_generation = DISABLE;
     a5c:	83 b7       	in	r24, 0x33	; 51
     a5e:	87 7f       	andi	r24, 0xF7	; 247
     a60:	83 bf       	out	0x33, r24	; 51
		TIMER0.Control.PWM_wave_generation = DISABLE;
     a62:	83 b7       	in	r24, 0x33	; 51
     a64:	8f 7b       	andi	r24, 0xBF	; 191
     a66:	83 bf       	out	0x33, r24	; 51
		TIMER0.Control.Modes_out_on_comp   = TMR_EN_CTC_Disconnect;
     a68:	83 b7       	in	r24, 0x33	; 51
     a6a:	8f 7c       	andi	r24, 0xCF	; 207
     a6c:	83 bf       	out	0x33, r24	; 51
		
		Timer_ResetCounter(Timer0);
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <Timer_ResetCounter>
		TIMER0.Interrupts.OverFlow		   = ENABLE;
     a74:	89 b7       	in	r24, 0x39	; 57
     a76:	81 60       	ori	r24, 0x01	; 1
     a78:	89 bf       	out	0x39, r24	; 57
		TIMER0.Control.Clock               = TMR_EN_FCPU_Clock;
     a7a:	83 b7       	in	r24, 0x33	; 51
     a7c:	88 7f       	andi	r24, 0xF8	; 248
     a7e:	81 60       	ori	r24, 0x01	; 1
     a80:	83 bf       	out	0x33, r24	; 51

		while(((OverFlows[Timer0]*256UL + (TIMER0.Counter) + 1)) < (Delay*8000UL));
     a82:	c7 01       	movw	r24, r14
     a84:	b6 01       	movw	r22, r12
     a86:	20 e4       	ldi	r18, 0x40	; 64
     a88:	3f e1       	ldi	r19, 0x1F	; 31
     a8a:	40 e0       	ldi	r20, 0x00	; 0
     a8c:	50 e0       	ldi	r21, 0x00	; 0
     a8e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <__mulsi3>
     a92:	dc 01       	movw	r26, r24
     a94:	cb 01       	movw	r24, r22
     a96:	3c 01       	movw	r6, r24
     a98:	4d 01       	movw	r8, r26
     a9a:	aa 24       	eor	r10, r10
     a9c:	bb 24       	eor	r11, r11
     a9e:	65 01       	movw	r12, r10
     aa0:	0f 2e       	mov	r0, r31
     aa2:	f2 ea       	ldi	r31, 0xA2	; 162
     aa4:	ef 2e       	mov	r14, r31
     aa6:	f0 e0       	ldi	r31, 0x00	; 0
     aa8:	ff 2e       	mov	r15, r31
     aaa:	f0 2d       	mov	r31, r0
     aac:	c1 e0       	ldi	r28, 0x01	; 1
     aae:	d0 e0       	ldi	r29, 0x00	; 0
     ab0:	f7 01       	movw	r30, r14
     ab2:	20 81       	ld	r18, Z
     ab4:	31 81       	ldd	r19, Z+1	; 0x01
     ab6:	42 81       	ldd	r20, Z+2	; 0x02
     ab8:	53 81       	ldd	r21, Z+3	; 0x03
     aba:	64 81       	ldd	r22, Z+4	; 0x04
     abc:	75 81       	ldd	r23, Z+5	; 0x05
     abe:	86 81       	ldd	r24, Z+6	; 0x06
     ac0:	97 81       	ldd	r25, Z+7	; 0x07
     ac2:	12 b7       	in	r17, 0x32	; 50
     ac4:	08 e0       	ldi	r16, 0x08	; 8
     ac6:	0e 94 98 0b 	call	0x1730	; 0x1730 <__ashldi3>
     aca:	12 0f       	add	r17, r18
     acc:	fc 2f       	mov	r31, r28
     ace:	12 17       	cp	r17, r18
     ad0:	08 f0       	brcs	.+2      	; 0xad4 <Timer_Delay_MS+0xa2>
     ad2:	fd 2f       	mov	r31, r29
     ad4:	03 2f       	mov	r16, r19
     ad6:	ed 2f       	mov	r30, r29
     ad8:	3f 0f       	add	r19, r31
     ada:	2c 2f       	mov	r18, r28
     adc:	30 17       	cp	r19, r16
     ade:	08 f0       	brcs	.+2      	; 0xae2 <Timer_Delay_MS+0xb0>
     ae0:	2d 2f       	mov	r18, r29
     ae2:	e2 2b       	or	r30, r18
     ae4:	03 2f       	mov	r16, r19
     ae6:	b4 2f       	mov	r27, r20
     ae8:	2d 2f       	mov	r18, r29
     aea:	4e 0f       	add	r20, r30
     aec:	ec 2f       	mov	r30, r28
     aee:	4b 17       	cp	r20, r27
     af0:	08 f0       	brcs	.+2      	; 0xaf4 <Timer_Delay_MS+0xc2>
     af2:	ed 2f       	mov	r30, r29
     af4:	2e 2b       	or	r18, r30
     af6:	b4 2f       	mov	r27, r20
     af8:	a5 2f       	mov	r26, r21
     afa:	ed 2f       	mov	r30, r29
     afc:	52 0f       	add	r21, r18
     afe:	2c 2f       	mov	r18, r28
     b00:	5a 17       	cp	r21, r26
     b02:	08 f0       	brcs	.+2      	; 0xb06 <Timer_Delay_MS+0xd4>
     b04:	2d 2f       	mov	r18, r29
     b06:	e2 2b       	or	r30, r18
     b08:	a5 2f       	mov	r26, r21
     b0a:	f6 2f       	mov	r31, r22
     b0c:	2d 2f       	mov	r18, r29
     b0e:	6e 0f       	add	r22, r30
     b10:	ec 2f       	mov	r30, r28
     b12:	6f 17       	cp	r22, r31
     b14:	08 f0       	brcs	.+2      	; 0xb18 <Timer_Delay_MS+0xe6>
     b16:	ed 2f       	mov	r30, r29
     b18:	2e 2b       	or	r18, r30
     b1a:	f6 2f       	mov	r31, r22
     b1c:	e7 2f       	mov	r30, r23
     b1e:	5d 2e       	mov	r5, r29
     b20:	72 0f       	add	r23, r18
     b22:	2c 2f       	mov	r18, r28
     b24:	7e 17       	cp	r23, r30
     b26:	08 f0       	brcs	.+2      	; 0xb2a <Timer_Delay_MS+0xf8>
     b28:	2d 2f       	mov	r18, r29
     b2a:	52 2a       	or	r5, r18
     b2c:	e7 2f       	mov	r30, r23
     b2e:	28 2f       	mov	r18, r24
     b30:	4d 2e       	mov	r4, r29
     b32:	85 0d       	add	r24, r5
     b34:	5c 2e       	mov	r5, r28
     b36:	82 17       	cp	r24, r18
     b38:	08 f0       	brcs	.+2      	; 0xb3c <Timer_Delay_MS+0x10a>
     b3a:	5d 2e       	mov	r5, r29
     b3c:	45 28       	or	r4, r5
     b3e:	28 2f       	mov	r18, r24
     b40:	94 0d       	add	r25, r4
     b42:	51 2e       	mov	r5, r17
     b44:	53 94       	inc	r5
     b46:	4c 2e       	mov	r4, r28
     b48:	51 16       	cp	r5, r17
     b4a:	08 f0       	brcs	.+2      	; 0xb4e <Timer_Delay_MS+0x11c>
     b4c:	4d 2e       	mov	r4, r29
     b4e:	1c 2f       	mov	r17, r28
     b50:	30 17       	cp	r19, r16
     b52:	08 f0       	brcs	.+2      	; 0xb56 <Timer_Delay_MS+0x124>
     b54:	1d 2f       	mov	r17, r29
     b56:	43 0e       	add	r4, r19
     b58:	0c 2f       	mov	r16, r28
     b5a:	43 16       	cp	r4, r19
     b5c:	08 f0       	brcs	.+2      	; 0xb60 <Timer_Delay_MS+0x12e>
     b5e:	0d 2f       	mov	r16, r29
     b60:	10 2b       	or	r17, r16
     b62:	34 2d       	mov	r19, r4
     b64:	0c 2f       	mov	r16, r28
     b66:	4b 17       	cp	r20, r27
     b68:	08 f0       	brcs	.+2      	; 0xb6c <Timer_Delay_MS+0x13a>
     b6a:	0d 2f       	mov	r16, r29
     b6c:	14 0f       	add	r17, r20
     b6e:	bc 2f       	mov	r27, r28
     b70:	14 17       	cp	r17, r20
     b72:	08 f0       	brcs	.+2      	; 0xb76 <Timer_Delay_MS+0x144>
     b74:	bd 2f       	mov	r27, r29
     b76:	0b 2b       	or	r16, r27
     b78:	41 2f       	mov	r20, r17
     b7a:	bc 2f       	mov	r27, r28
     b7c:	5a 17       	cp	r21, r26
     b7e:	08 f0       	brcs	.+2      	; 0xb82 <Timer_Delay_MS+0x150>
     b80:	bd 2f       	mov	r27, r29
     b82:	05 0f       	add	r16, r21
     b84:	ac 2f       	mov	r26, r28
     b86:	05 17       	cp	r16, r21
     b88:	08 f0       	brcs	.+2      	; 0xb8c <Timer_Delay_MS+0x15a>
     b8a:	ad 2f       	mov	r26, r29
     b8c:	ba 2b       	or	r27, r26
     b8e:	50 2f       	mov	r21, r16
     b90:	ac 2f       	mov	r26, r28
     b92:	6f 17       	cp	r22, r31
     b94:	08 f0       	brcs	.+2      	; 0xb98 <Timer_Delay_MS+0x166>
     b96:	ad 2f       	mov	r26, r29
     b98:	b6 0f       	add	r27, r22
     b9a:	fc 2f       	mov	r31, r28
     b9c:	b6 17       	cp	r27, r22
     b9e:	08 f0       	brcs	.+2      	; 0xba2 <Timer_Delay_MS+0x170>
     ba0:	fd 2f       	mov	r31, r29
     ba2:	af 2b       	or	r26, r31
     ba4:	6b 2f       	mov	r22, r27
     ba6:	fc 2f       	mov	r31, r28
     ba8:	7e 17       	cp	r23, r30
     baa:	08 f0       	brcs	.+2      	; 0xbae <Timer_Delay_MS+0x17c>
     bac:	fd 2f       	mov	r31, r29
     bae:	a7 0f       	add	r26, r23
     bb0:	ec 2f       	mov	r30, r28
     bb2:	a7 17       	cp	r26, r23
     bb4:	08 f0       	brcs	.+2      	; 0xbb8 <Timer_Delay_MS+0x186>
     bb6:	ed 2f       	mov	r30, r29
     bb8:	fe 2b       	or	r31, r30
     bba:	7a 2f       	mov	r23, r26
     bbc:	4c 2e       	mov	r4, r28
     bbe:	82 17       	cp	r24, r18
     bc0:	08 f0       	brcs	.+2      	; 0xbc4 <Timer_Delay_MS+0x192>
     bc2:	4d 2e       	mov	r4, r29
     bc4:	f8 0f       	add	r31, r24
     bc6:	2c 2f       	mov	r18, r28
     bc8:	f8 17       	cp	r31, r24
     bca:	08 f0       	brcs	.+2      	; 0xbce <Timer_Delay_MS+0x19c>
     bcc:	2d 2f       	mov	r18, r29
     bce:	42 2a       	or	r4, r18
     bd0:	94 0d       	add	r25, r4
     bd2:	9d 15       	cp	r25, r13
     bd4:	08 f4       	brcc	.+2      	; 0xbd8 <Timer_Delay_MS+0x1a6>
     bd6:	6c cf       	rjmp	.-296    	; 0xab0 <Timer_Delay_MS+0x7e>
     bd8:	d9 16       	cp	r13, r25
     bda:	09 f0       	breq	.+2      	; 0xbde <Timer_Delay_MS+0x1ac>
     bdc:	0c c1       	rjmp	.+536    	; 0xdf6 <Timer_Delay_MS+0x3c4>
     bde:	fc 15       	cp	r31, r12
     be0:	08 f4       	brcc	.+2      	; 0xbe4 <Timer_Delay_MS+0x1b2>
     be2:	66 cf       	rjmp	.-308    	; 0xab0 <Timer_Delay_MS+0x7e>
     be4:	cf 16       	cp	r12, r31
     be6:	09 f0       	breq	.+2      	; 0xbea <Timer_Delay_MS+0x1b8>
     be8:	06 c1       	rjmp	.+524    	; 0xdf6 <Timer_Delay_MS+0x3c4>
     bea:	7b 15       	cp	r23, r11
     bec:	08 f4       	brcc	.+2      	; 0xbf0 <Timer_Delay_MS+0x1be>
     bee:	60 cf       	rjmp	.-320    	; 0xab0 <Timer_Delay_MS+0x7e>
     bf0:	b7 16       	cp	r11, r23
     bf2:	09 f0       	breq	.+2      	; 0xbf6 <Timer_Delay_MS+0x1c4>
     bf4:	00 c1       	rjmp	.+512    	; 0xdf6 <Timer_Delay_MS+0x3c4>
     bf6:	6a 15       	cp	r22, r10
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <Timer_Delay_MS+0x1ca>
     bfa:	5a cf       	rjmp	.-332    	; 0xab0 <Timer_Delay_MS+0x7e>
     bfc:	a6 16       	cp	r10, r22
     bfe:	09 f0       	breq	.+2      	; 0xc02 <Timer_Delay_MS+0x1d0>
     c00:	fa c0       	rjmp	.+500    	; 0xdf6 <Timer_Delay_MS+0x3c4>
     c02:	59 15       	cp	r21, r9
     c04:	08 f4       	brcc	.+2      	; 0xc08 <Timer_Delay_MS+0x1d6>
     c06:	54 cf       	rjmp	.-344    	; 0xab0 <Timer_Delay_MS+0x7e>
     c08:	95 16       	cp	r9, r21
     c0a:	09 f0       	breq	.+2      	; 0xc0e <Timer_Delay_MS+0x1dc>
     c0c:	f4 c0       	rjmp	.+488    	; 0xdf6 <Timer_Delay_MS+0x3c4>
     c0e:	48 15       	cp	r20, r8
     c10:	08 f4       	brcc	.+2      	; 0xc14 <Timer_Delay_MS+0x1e2>
     c12:	4e cf       	rjmp	.-356    	; 0xab0 <Timer_Delay_MS+0x7e>
     c14:	84 16       	cp	r8, r20
     c16:	09 f0       	breq	.+2      	; 0xc1a <Timer_Delay_MS+0x1e8>
     c18:	ee c0       	rjmp	.+476    	; 0xdf6 <Timer_Delay_MS+0x3c4>
     c1a:	37 15       	cp	r19, r7
     c1c:	08 f4       	brcc	.+2      	; 0xc20 <Timer_Delay_MS+0x1ee>
     c1e:	48 cf       	rjmp	.-368    	; 0xab0 <Timer_Delay_MS+0x7e>
     c20:	73 16       	cp	r7, r19
     c22:	09 f0       	breq	.+2      	; 0xc26 <Timer_Delay_MS+0x1f4>
     c24:	e8 c0       	rjmp	.+464    	; 0xdf6 <Timer_Delay_MS+0x3c4>
     c26:	56 14       	cp	r5, r6
     c28:	08 f4       	brcc	.+2      	; 0xc2c <Timer_Delay_MS+0x1fa>
     c2a:	42 cf       	rjmp	.-380    	; 0xab0 <Timer_Delay_MS+0x7e>
     c2c:	e4 c0       	rjmp	.+456    	; 0xdf6 <Timer_Delay_MS+0x3c4>
	}
	else if(Timer == Timer2)
     c2e:	81 30       	cpi	r24, 0x01	; 1
     c30:	09 f0       	breq	.+2      	; 0xc34 <Timer_Delay_MS+0x202>
     c32:	e1 c0       	rjmp	.+450    	; 0xdf6 <Timer_Delay_MS+0x3c4>
	{
		TIMER2.Control.CTC_wave_generation = DISABLE;
     c34:	85 b5       	in	r24, 0x25	; 37
     c36:	87 7f       	andi	r24, 0xF7	; 247
     c38:	85 bd       	out	0x25, r24	; 37
		TIMER2.Control.PWM_wave_generation = DISABLE;
     c3a:	85 b5       	in	r24, 0x25	; 37
     c3c:	8f 7b       	andi	r24, 0xBF	; 191
     c3e:	85 bd       	out	0x25, r24	; 37
		TIMER2.Control.Modes_out_on_comp   = TMR_EN_CTC_Disconnect;
     c40:	85 b5       	in	r24, 0x25	; 37
     c42:	8f 7c       	andi	r24, 0xCF	; 207
     c44:	85 bd       	out	0x25, r24	; 37
		
		Timer_ResetCounter(Timer2);
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <Timer_ResetCounter>
		TIMER2.Interrupts.OverFlow		   = ENABLE;
     c4c:	89 b7       	in	r24, 0x39	; 57
     c4e:	80 64       	ori	r24, 0x40	; 64
     c50:	89 bf       	out	0x39, r24	; 57
		TIMER2.Control.Clock               = TMR_EN_FCPU_Clock;
     c52:	85 b5       	in	r24, 0x25	; 37
     c54:	88 7f       	andi	r24, 0xF8	; 248
     c56:	81 60       	ori	r24, 0x01	; 1
     c58:	85 bd       	out	0x25, r24	; 37

		while(((OverFlows[Timer2]*256UL + (TIMER2.Counter) + 1)) < (Delay*8000UL));
     c5a:	c7 01       	movw	r24, r14
     c5c:	b6 01       	movw	r22, r12
     c5e:	20 e4       	ldi	r18, 0x40	; 64
     c60:	3f e1       	ldi	r19, 0x1F	; 31
     c62:	40 e0       	ldi	r20, 0x00	; 0
     c64:	50 e0       	ldi	r21, 0x00	; 0
     c66:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <__mulsi3>
     c6a:	dc 01       	movw	r26, r24
     c6c:	cb 01       	movw	r24, r22
     c6e:	3c 01       	movw	r6, r24
     c70:	4d 01       	movw	r8, r26
     c72:	aa 24       	eor	r10, r10
     c74:	bb 24       	eor	r11, r11
     c76:	65 01       	movw	r12, r10
     c78:	0f 2e       	mov	r0, r31
     c7a:	fa ea       	ldi	r31, 0xAA	; 170
     c7c:	ef 2e       	mov	r14, r31
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	ff 2e       	mov	r15, r31
     c82:	f0 2d       	mov	r31, r0
     c84:	c1 e0       	ldi	r28, 0x01	; 1
     c86:	d0 e0       	ldi	r29, 0x00	; 0
     c88:	f7 01       	movw	r30, r14
     c8a:	20 81       	ld	r18, Z
     c8c:	31 81       	ldd	r19, Z+1	; 0x01
     c8e:	42 81       	ldd	r20, Z+2	; 0x02
     c90:	53 81       	ldd	r21, Z+3	; 0x03
     c92:	64 81       	ldd	r22, Z+4	; 0x04
     c94:	75 81       	ldd	r23, Z+5	; 0x05
     c96:	86 81       	ldd	r24, Z+6	; 0x06
     c98:	97 81       	ldd	r25, Z+7	; 0x07
     c9a:	14 b5       	in	r17, 0x24	; 36
     c9c:	08 e0       	ldi	r16, 0x08	; 8
     c9e:	0e 94 98 0b 	call	0x1730	; 0x1730 <__ashldi3>
     ca2:	12 0f       	add	r17, r18
     ca4:	fc 2f       	mov	r31, r28
     ca6:	12 17       	cp	r17, r18
     ca8:	08 f0       	brcs	.+2      	; 0xcac <Timer_Delay_MS+0x27a>
     caa:	fd 2f       	mov	r31, r29
     cac:	03 2f       	mov	r16, r19
     cae:	ed 2f       	mov	r30, r29
     cb0:	3f 0f       	add	r19, r31
     cb2:	2c 2f       	mov	r18, r28
     cb4:	30 17       	cp	r19, r16
     cb6:	08 f0       	brcs	.+2      	; 0xcba <Timer_Delay_MS+0x288>
     cb8:	2d 2f       	mov	r18, r29
     cba:	e2 2b       	or	r30, r18
     cbc:	03 2f       	mov	r16, r19
     cbe:	b4 2f       	mov	r27, r20
     cc0:	2d 2f       	mov	r18, r29
     cc2:	4e 0f       	add	r20, r30
     cc4:	ec 2f       	mov	r30, r28
     cc6:	4b 17       	cp	r20, r27
     cc8:	08 f0       	brcs	.+2      	; 0xccc <Timer_Delay_MS+0x29a>
     cca:	ed 2f       	mov	r30, r29
     ccc:	2e 2b       	or	r18, r30
     cce:	b4 2f       	mov	r27, r20
     cd0:	a5 2f       	mov	r26, r21
     cd2:	ed 2f       	mov	r30, r29
     cd4:	52 0f       	add	r21, r18
     cd6:	2c 2f       	mov	r18, r28
     cd8:	5a 17       	cp	r21, r26
     cda:	08 f0       	brcs	.+2      	; 0xcde <Timer_Delay_MS+0x2ac>
     cdc:	2d 2f       	mov	r18, r29
     cde:	e2 2b       	or	r30, r18
     ce0:	a5 2f       	mov	r26, r21
     ce2:	f6 2f       	mov	r31, r22
     ce4:	2d 2f       	mov	r18, r29
     ce6:	6e 0f       	add	r22, r30
     ce8:	ec 2f       	mov	r30, r28
     cea:	6f 17       	cp	r22, r31
     cec:	08 f0       	brcs	.+2      	; 0xcf0 <Timer_Delay_MS+0x2be>
     cee:	ed 2f       	mov	r30, r29
     cf0:	2e 2b       	or	r18, r30
     cf2:	f6 2f       	mov	r31, r22
     cf4:	e7 2f       	mov	r30, r23
     cf6:	5d 2e       	mov	r5, r29
     cf8:	72 0f       	add	r23, r18
     cfa:	2c 2f       	mov	r18, r28
     cfc:	7e 17       	cp	r23, r30
     cfe:	08 f0       	brcs	.+2      	; 0xd02 <Timer_Delay_MS+0x2d0>
     d00:	2d 2f       	mov	r18, r29
     d02:	52 2a       	or	r5, r18
     d04:	e7 2f       	mov	r30, r23
     d06:	28 2f       	mov	r18, r24
     d08:	4d 2e       	mov	r4, r29
     d0a:	85 0d       	add	r24, r5
     d0c:	5c 2e       	mov	r5, r28
     d0e:	82 17       	cp	r24, r18
     d10:	08 f0       	brcs	.+2      	; 0xd14 <Timer_Delay_MS+0x2e2>
     d12:	5d 2e       	mov	r5, r29
     d14:	45 28       	or	r4, r5
     d16:	28 2f       	mov	r18, r24
     d18:	94 0d       	add	r25, r4
     d1a:	51 2e       	mov	r5, r17
     d1c:	53 94       	inc	r5
     d1e:	4c 2e       	mov	r4, r28
     d20:	51 16       	cp	r5, r17
     d22:	08 f0       	brcs	.+2      	; 0xd26 <Timer_Delay_MS+0x2f4>
     d24:	4d 2e       	mov	r4, r29
     d26:	1c 2f       	mov	r17, r28
     d28:	30 17       	cp	r19, r16
     d2a:	08 f0       	brcs	.+2      	; 0xd2e <Timer_Delay_MS+0x2fc>
     d2c:	1d 2f       	mov	r17, r29
     d2e:	43 0e       	add	r4, r19
     d30:	0c 2f       	mov	r16, r28
     d32:	43 16       	cp	r4, r19
     d34:	08 f0       	brcs	.+2      	; 0xd38 <Timer_Delay_MS+0x306>
     d36:	0d 2f       	mov	r16, r29
     d38:	10 2b       	or	r17, r16
     d3a:	34 2d       	mov	r19, r4
     d3c:	0c 2f       	mov	r16, r28
     d3e:	4b 17       	cp	r20, r27
     d40:	08 f0       	brcs	.+2      	; 0xd44 <Timer_Delay_MS+0x312>
     d42:	0d 2f       	mov	r16, r29
     d44:	14 0f       	add	r17, r20
     d46:	bc 2f       	mov	r27, r28
     d48:	14 17       	cp	r17, r20
     d4a:	08 f0       	brcs	.+2      	; 0xd4e <Timer_Delay_MS+0x31c>
     d4c:	bd 2f       	mov	r27, r29
     d4e:	0b 2b       	or	r16, r27
     d50:	41 2f       	mov	r20, r17
     d52:	bc 2f       	mov	r27, r28
     d54:	5a 17       	cp	r21, r26
     d56:	08 f0       	brcs	.+2      	; 0xd5a <Timer_Delay_MS+0x328>
     d58:	bd 2f       	mov	r27, r29
     d5a:	05 0f       	add	r16, r21
     d5c:	ac 2f       	mov	r26, r28
     d5e:	05 17       	cp	r16, r21
     d60:	08 f0       	brcs	.+2      	; 0xd64 <Timer_Delay_MS+0x332>
     d62:	ad 2f       	mov	r26, r29
     d64:	ba 2b       	or	r27, r26
     d66:	50 2f       	mov	r21, r16
     d68:	ac 2f       	mov	r26, r28
     d6a:	6f 17       	cp	r22, r31
     d6c:	08 f0       	brcs	.+2      	; 0xd70 <Timer_Delay_MS+0x33e>
     d6e:	ad 2f       	mov	r26, r29
     d70:	b6 0f       	add	r27, r22
     d72:	fc 2f       	mov	r31, r28
     d74:	b6 17       	cp	r27, r22
     d76:	08 f0       	brcs	.+2      	; 0xd7a <Timer_Delay_MS+0x348>
     d78:	fd 2f       	mov	r31, r29
     d7a:	af 2b       	or	r26, r31
     d7c:	6b 2f       	mov	r22, r27
     d7e:	fc 2f       	mov	r31, r28
     d80:	7e 17       	cp	r23, r30
     d82:	08 f0       	brcs	.+2      	; 0xd86 <Timer_Delay_MS+0x354>
     d84:	fd 2f       	mov	r31, r29
     d86:	a7 0f       	add	r26, r23
     d88:	ec 2f       	mov	r30, r28
     d8a:	a7 17       	cp	r26, r23
     d8c:	08 f0       	brcs	.+2      	; 0xd90 <Timer_Delay_MS+0x35e>
     d8e:	ed 2f       	mov	r30, r29
     d90:	fe 2b       	or	r31, r30
     d92:	7a 2f       	mov	r23, r26
     d94:	4c 2e       	mov	r4, r28
     d96:	82 17       	cp	r24, r18
     d98:	08 f0       	brcs	.+2      	; 0xd9c <Timer_Delay_MS+0x36a>
     d9a:	4d 2e       	mov	r4, r29
     d9c:	f8 0f       	add	r31, r24
     d9e:	2c 2f       	mov	r18, r28
     da0:	f8 17       	cp	r31, r24
     da2:	08 f0       	brcs	.+2      	; 0xda6 <Timer_Delay_MS+0x374>
     da4:	2d 2f       	mov	r18, r29
     da6:	42 2a       	or	r4, r18
     da8:	94 0d       	add	r25, r4
     daa:	9d 15       	cp	r25, r13
     dac:	08 f4       	brcc	.+2      	; 0xdb0 <Timer_Delay_MS+0x37e>
     dae:	6c cf       	rjmp	.-296    	; 0xc88 <Timer_Delay_MS+0x256>
     db0:	d9 16       	cp	r13, r25
     db2:	09 f5       	brne	.+66     	; 0xdf6 <Timer_Delay_MS+0x3c4>
     db4:	fc 15       	cp	r31, r12
     db6:	08 f4       	brcc	.+2      	; 0xdba <Timer_Delay_MS+0x388>
     db8:	67 cf       	rjmp	.-306    	; 0xc88 <Timer_Delay_MS+0x256>
     dba:	cf 16       	cp	r12, r31
     dbc:	e1 f4       	brne	.+56     	; 0xdf6 <Timer_Delay_MS+0x3c4>
     dbe:	7b 15       	cp	r23, r11
     dc0:	08 f4       	brcc	.+2      	; 0xdc4 <Timer_Delay_MS+0x392>
     dc2:	62 cf       	rjmp	.-316    	; 0xc88 <Timer_Delay_MS+0x256>
     dc4:	b7 16       	cp	r11, r23
     dc6:	b9 f4       	brne	.+46     	; 0xdf6 <Timer_Delay_MS+0x3c4>
     dc8:	6a 15       	cp	r22, r10
     dca:	08 f4       	brcc	.+2      	; 0xdce <Timer_Delay_MS+0x39c>
     dcc:	5d cf       	rjmp	.-326    	; 0xc88 <Timer_Delay_MS+0x256>
     dce:	a6 16       	cp	r10, r22
     dd0:	91 f4       	brne	.+36     	; 0xdf6 <Timer_Delay_MS+0x3c4>
     dd2:	59 15       	cp	r21, r9
     dd4:	08 f4       	brcc	.+2      	; 0xdd8 <Timer_Delay_MS+0x3a6>
     dd6:	58 cf       	rjmp	.-336    	; 0xc88 <Timer_Delay_MS+0x256>
     dd8:	95 16       	cp	r9, r21
     dda:	69 f4       	brne	.+26     	; 0xdf6 <Timer_Delay_MS+0x3c4>
     ddc:	48 15       	cp	r20, r8
     dde:	08 f4       	brcc	.+2      	; 0xde2 <Timer_Delay_MS+0x3b0>
     de0:	53 cf       	rjmp	.-346    	; 0xc88 <Timer_Delay_MS+0x256>
     de2:	84 16       	cp	r8, r20
     de4:	41 f4       	brne	.+16     	; 0xdf6 <Timer_Delay_MS+0x3c4>
     de6:	37 15       	cp	r19, r7
     de8:	08 f4       	brcc	.+2      	; 0xdec <Timer_Delay_MS+0x3ba>
     dea:	4e cf       	rjmp	.-356    	; 0xc88 <Timer_Delay_MS+0x256>
     dec:	73 16       	cp	r7, r19
     dee:	19 f4       	brne	.+6      	; 0xdf6 <Timer_Delay_MS+0x3c4>
     df0:	56 14       	cp	r5, r6
     df2:	08 f4       	brcc	.+2      	; 0xdf6 <Timer_Delay_MS+0x3c4>
     df4:	49 cf       	rjmp	.-366    	; 0xc88 <Timer_Delay_MS+0x256>
	}
	else{/*MISRA C*/}
}
     df6:	df 91       	pop	r29
     df8:	cf 91       	pop	r28
     dfa:	1f 91       	pop	r17
     dfc:	0f 91       	pop	r16
     dfe:	ff 90       	pop	r15
     e00:	ef 90       	pop	r14
     e02:	df 90       	pop	r13
     e04:	cf 90       	pop	r12
     e06:	bf 90       	pop	r11
     e08:	af 90       	pop	r10
     e0a:	9f 90       	pop	r9
     e0c:	8f 90       	pop	r8
     e0e:	7f 90       	pop	r7
     e10:	6f 90       	pop	r6
     e12:	5f 90       	pop	r5
     e14:	4f 90       	pop	r4
     e16:	08 95       	ret

00000e18 <Timer_De_init>:
	}
	return return_value;
}
void              Timer_De_init			(Timer_t Timer)
{
	if(Timer == Timer0)
     e18:	88 23       	and	r24, r24
     e1a:	b1 f4       	brne	.+44     	; 0xe48 <Timer_De_init+0x30>
	{
		Timer_Stop(Timer);
     e1c:	0e 94 be 04 	call	0x97c	; 0x97c <Timer_Stop>
		Timer_ResetCounter(Timer);
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <Timer_ResetCounter>
		TIMER0.Interrupts.Comp_Match       = DISABLE;
     e26:	89 b7       	in	r24, 0x39	; 57
     e28:	8d 7f       	andi	r24, 0xFD	; 253
     e2a:	89 bf       	out	0x39, r24	; 57
		TIMER0.Interrupts.OverFlow         = DISABLE;
     e2c:	89 b7       	in	r24, 0x39	; 57
     e2e:	8e 7f       	andi	r24, 0xFE	; 254
     e30:	89 bf       	out	0x39, r24	; 57
		TIMER0.Control.CTC_wave_generation = DISABLE;
     e32:	83 b7       	in	r24, 0x33	; 51
     e34:	87 7f       	andi	r24, 0xF7	; 247
     e36:	83 bf       	out	0x33, r24	; 51
		TIMER0.Control.PWM_wave_generation = DISABLE;
     e38:	83 b7       	in	r24, 0x33	; 51
     e3a:	8f 7b       	andi	r24, 0xBF	; 191
     e3c:	83 bf       	out	0x33, r24	; 51
		TIMER0.Control.Modes_out_on_comp   = TMR_EN_CTC_Disconnect;
     e3e:	83 b7       	in	r24, 0x33	; 51
     e40:	8f 7c       	andi	r24, 0xCF	; 207
     e42:	83 bf       	out	0x33, r24	; 51
		TIMER0.CompareValue = RESET;
     e44:	1c be       	out	0x3c, r1	; 60
     e46:	08 95       	ret
	}
	else if (Timer == Timer2)
     e48:	81 30       	cpi	r24, 0x01	; 1
     e4a:	a9 f4       	brne	.+42     	; 0xe76 <Timer_De_init+0x5e>
	{
		Timer_Stop(Timer);
     e4c:	0e 94 be 04 	call	0x97c	; 0x97c <Timer_Stop>
		Timer_ResetCounter(Timer);
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <Timer_ResetCounter>
		TIMER2.Interrupts.Comp_Match       = DISABLE;
     e56:	89 b7       	in	r24, 0x39	; 57
     e58:	8f 77       	andi	r24, 0x7F	; 127
     e5a:	89 bf       	out	0x39, r24	; 57
		TIMER2.Interrupts.OverFlow         = DISABLE;
     e5c:	89 b7       	in	r24, 0x39	; 57
     e5e:	8f 7b       	andi	r24, 0xBF	; 191
     e60:	89 bf       	out	0x39, r24	; 57
		TIMER2.Control.CTC_wave_generation = DISABLE;
     e62:	85 b5       	in	r24, 0x25	; 37
     e64:	87 7f       	andi	r24, 0xF7	; 247
     e66:	85 bd       	out	0x25, r24	; 37
		TIMER2.Control.PWM_wave_generation = DISABLE;
     e68:	85 b5       	in	r24, 0x25	; 37
     e6a:	8f 7b       	andi	r24, 0xBF	; 191
     e6c:	85 bd       	out	0x25, r24	; 37
		TIMER2.Control.Modes_out_on_comp   = TMR_EN_CTC_Disconnect;
     e6e:	85 b5       	in	r24, 0x25	; 37
     e70:	8f 7c       	andi	r24, 0xCF	; 207
     e72:	85 bd       	out	0x25, r24	; 37
		TIMER2.CompareValue = RESET;
     e74:	13 bc       	out	0x23, r1	; 35
     e76:	08 95       	ret

00000e78 <Timer_Init>:




TimerError_t      Timer_Init			(_C TMR_Configuration_t * _C Configuration)
{
     e78:	cf 93       	push	r28
     e7a:	df 93       	push	r29
     e7c:	ec 01       	movw	r28, r24
	TimerError_t return_value = TMR_EN_valid_inti;
	if(Configuration != NULL)
     e7e:	00 97       	sbiw	r24, 0x00	; 0
     e80:	09 f4       	brne	.+2      	; 0xe84 <Timer_Init+0xc>
     e82:	4f c0       	rjmp	.+158    	; 0xf22 <Timer_Init+0xaa>
	{
		if(Configuration->Timer == Timer0)
     e84:	88 81       	ld	r24, Y
     e86:	88 23       	and	r24, r24
     e88:	29 f5       	brne	.+74     	; 0xed4 <Timer_Init+0x5c>
		{
			Timer_Stop(Configuration->Timer);
     e8a:	0e 94 be 04 	call	0x97c	; 0x97c <Timer_Stop>
			Timer_ResetCounter(Configuration->Timer);
     e8e:	88 81       	ld	r24, Y
     e90:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <Timer_ResetCounter>
			TIMER0.Control.CTC_wave_generation = Configuration->Mode>>1;
     e94:	99 81       	ldd	r25, Y+1	; 0x01
     e96:	99 0f       	add	r25, r25
     e98:	99 0f       	add	r25, r25
     e9a:	98 70       	andi	r25, 0x08	; 8
     e9c:	83 b7       	in	r24, 0x33	; 51
     e9e:	87 7f       	andi	r24, 0xF7	; 247
     ea0:	89 2b       	or	r24, r25
     ea2:	83 bf       	out	0x33, r24	; 51
			TIMER0.Control.PWM_wave_generation = Configuration->Mode<<1;
     ea4:	83 b7       	in	r24, 0x33	; 51
     ea6:	8f 7b       	andi	r24, 0xBF	; 191
     ea8:	83 bf       	out	0x33, r24	; 51
			TIMER0.Control.Clock = TMR_EN_NoClock;
     eaa:	83 b7       	in	r24, 0x33	; 51
     eac:	88 7f       	andi	r24, 0xF8	; 248
     eae:	83 bf       	out	0x33, r24	; 51
			TIMER0.Control.Modes_out_on_comp = Configuration->Action.OCR_Pin;
     eb0:	9b 81       	ldd	r25, Y+3	; 0x03
     eb2:	93 70       	andi	r25, 0x03	; 3
     eb4:	92 95       	swap	r25
     eb6:	90 7f       	andi	r25, 0xF0	; 240
     eb8:	83 b7       	in	r24, 0x33	; 51
     eba:	8f 7c       	andi	r24, 0xCF	; 207
     ebc:	89 2b       	or	r24, r25
     ebe:	83 bf       	out	0x33, r24	; 51
			TIMER0.CompareValue = Configuration->CompareValue;
     ec0:	8c 81       	ldd	r24, Y+4	; 0x04
     ec2:	8c bf       	out	0x3c, r24	; 60
			Clock[Configuration->Timer] = Configuration->Clock;
     ec4:	e8 81       	ld	r30, Y
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	e8 54       	subi	r30, 0x48	; 72
     eca:	ff 4f       	sbci	r31, 0xFF	; 255
     ecc:	8a 81       	ldd	r24, Y+2	; 0x02
     ece:	80 83       	st	Z, r24



TimerError_t      Timer_Init			(_C TMR_Configuration_t * _C Configuration)
{
	TimerError_t return_value = TMR_EN_valid_inti;
     ed0:	80 e0       	ldi	r24, 0x00	; 0
     ed2:	2a c0       	rjmp	.+84     	; 0xf28 <Timer_Init+0xb0>
			TIMER0.Control.Clock = TMR_EN_NoClock;
			TIMER0.Control.Modes_out_on_comp = Configuration->Action.OCR_Pin;
			TIMER0.CompareValue = Configuration->CompareValue;
			Clock[Configuration->Timer] = Configuration->Clock;
		}
		else if(Configuration->Timer == Timer2)
     ed4:	81 30       	cpi	r24, 0x01	; 1
     ed6:	39 f5       	brne	.+78     	; 0xf26 <Timer_Init+0xae>
		{
			Timer_Stop(Configuration->Timer);
     ed8:	0e 94 be 04 	call	0x97c	; 0x97c <Timer_Stop>
			Timer_ResetCounter(Configuration->Timer);
     edc:	88 81       	ld	r24, Y
     ede:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <Timer_ResetCounter>
			TIMER2.Control.CTC_wave_generation = Configuration->Mode>>1;
     ee2:	99 81       	ldd	r25, Y+1	; 0x01
     ee4:	99 0f       	add	r25, r25
     ee6:	99 0f       	add	r25, r25
     ee8:	98 70       	andi	r25, 0x08	; 8
     eea:	85 b5       	in	r24, 0x25	; 37
     eec:	87 7f       	andi	r24, 0xF7	; 247
     eee:	89 2b       	or	r24, r25
     ef0:	85 bd       	out	0x25, r24	; 37
			TIMER2.Control.PWM_wave_generation = Configuration->Mode<<1;
     ef2:	85 b5       	in	r24, 0x25	; 37
     ef4:	8f 7b       	andi	r24, 0xBF	; 191
     ef6:	85 bd       	out	0x25, r24	; 37
			TIMER2.Control.Clock = TMR_EN_NoClock;
     ef8:	85 b5       	in	r24, 0x25	; 37
     efa:	88 7f       	andi	r24, 0xF8	; 248
     efc:	85 bd       	out	0x25, r24	; 37
			TIMER2.Control.Modes_out_on_comp = Configuration->Action.OCR_Pin;
     efe:	9b 81       	ldd	r25, Y+3	; 0x03
     f00:	93 70       	andi	r25, 0x03	; 3
     f02:	92 95       	swap	r25
     f04:	90 7f       	andi	r25, 0xF0	; 240
     f06:	85 b5       	in	r24, 0x25	; 37
     f08:	8f 7c       	andi	r24, 0xCF	; 207
     f0a:	89 2b       	or	r24, r25
     f0c:	85 bd       	out	0x25, r24	; 37
			TIMER2.CompareValue = Configuration->CompareValue;
     f0e:	8c 81       	ldd	r24, Y+4	; 0x04
     f10:	83 bd       	out	0x23, r24	; 35
			Clock[Configuration->Timer] = Configuration->Clock;
     f12:	e8 81       	ld	r30, Y
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	e8 54       	subi	r30, 0x48	; 72
     f18:	ff 4f       	sbci	r31, 0xFF	; 255
     f1a:	8a 81       	ldd	r24, Y+2	; 0x02
     f1c:	80 83       	st	Z, r24



TimerError_t      Timer_Init			(_C TMR_Configuration_t * _C Configuration)
{
	TimerError_t return_value = TMR_EN_valid_inti;
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	03 c0       	rjmp	.+6      	; 0xf28 <Timer_Init+0xb0>
			return_value = TMR_EN_InvalidTimer;	
		}
	}
	else
	{
		return_value = TMR_EN_InvalidPointer;
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	01 c0       	rjmp	.+2      	; 0xf28 <Timer_Init+0xb0>
			TIMER2.CompareValue = Configuration->CompareValue;
			Clock[Configuration->Timer] = Configuration->Clock;
		}
		else
		{
			return_value = TMR_EN_InvalidTimer;	
     f26:	82 e0       	ldi	r24, 0x02	; 2
	else
	{
		return_value = TMR_EN_InvalidPointer;
	}
	return return_value;
}
     f28:	df 91       	pop	r29
     f2a:	cf 91       	pop	r28
     f2c:	08 95       	ret

00000f2e <Timer_SetTrigger>:
		TIMER2.Counter		= RESET;
	}
	else{/*MISRA C*/}
}
TimerError_t      Timer_SetTrigger		(Timer_t Timer, V_CallBack_V_t Notifier, uint32_t Time_On_MS, uint32_t Time_Off_MS)
{
     f2e:	ef 92       	push	r14
     f30:	ff 92       	push	r15
     f32:	0f 93       	push	r16
     f34:	1f 93       	push	r17
     f36:	cf 93       	push	r28
     f38:	df 93       	push	r29
     f3a:	a8 2f       	mov	r26, r24
     f3c:	fb 01       	movw	r30, r22
     f3e:	ca 01       	movw	r24, r20
     f40:	b9 01       	movw	r22, r18
	TimerError_t return_value = TMR_EN_valid_inti;
	if((Notifier != NULL))
     f42:	30 97       	sbiw	r30, 0x00	; 0
     f44:	09 f4       	brne	.+2      	; 0xf48 <Timer_SetTrigger+0x1a>
     f46:	b0 c0       	rjmp	.+352    	; 0x10a8 <Timer_SetTrigger+0x17a>
	{
		if(Timer == Timer0)
     f48:	aa 23       	and	r26, r26
     f4a:	09 f0       	breq	.+2      	; 0xf4e <Timer_SetTrigger+0x20>
     f4c:	55 c0       	rjmp	.+170    	; 0xff8 <Timer_SetTrigger+0xca>
		{
			TIMER0.Control.CTC_wave_generation = DISABLE;
     f4e:	23 b7       	in	r18, 0x33	; 51
     f50:	27 7f       	andi	r18, 0xF7	; 247
     f52:	23 bf       	out	0x33, r18	; 51
			TIMER0.Control.PWM_wave_generation = DISABLE;
     f54:	23 b7       	in	r18, 0x33	; 51
     f56:	2f 7b       	andi	r18, 0xBF	; 191
     f58:	23 bf       	out	0x33, r18	; 51
			TIMER0.Control.Modes_out_on_comp   = TMR_EN_CTC_Disconnect;
     f5a:	23 b7       	in	r18, 0x33	; 51
     f5c:	2f 7c       	andi	r18, 0xCF	; 207
     f5e:	23 bf       	out	0x33, r18	; 51
			
			NotifierAction[Timer0]  = Notifier;
     f60:	f0 93 b3 00 	sts	0x00B3, r31
     f64:	e0 93 b2 00 	sts	0x00B2, r30
			OverFlows[Timer0]       = RESET;
     f68:	10 92 a2 00 	sts	0x00A2, r1
     f6c:	10 92 a3 00 	sts	0x00A3, r1
     f70:	10 92 a4 00 	sts	0x00A4, r1
     f74:	10 92 a5 00 	sts	0x00A5, r1
     f78:	10 92 a6 00 	sts	0x00A6, r1
     f7c:	10 92 a7 00 	sts	0x00A7, r1
     f80:	10 92 a8 00 	sts	0x00A8, r1
     f84:	10 92 a9 00 	sts	0x00A9, r1
			
			Duty[Timer0][ON_Cycle]  = (Time_On_MS  * 1000UL) / 256 ;//no. OverFlowsT0 for on Duty
     f88:	28 ee       	ldi	r18, 0xE8	; 232
     f8a:	33 e0       	ldi	r19, 0x03	; 3
     f8c:	40 e0       	ldi	r20, 0x00	; 0
     f8e:	50 e0       	ldi	r21, 0x00	; 0
     f90:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <__mulsi3>
     f94:	dc 01       	movw	r26, r24
     f96:	cb 01       	movw	r24, r22
     f98:	89 2f       	mov	r24, r25
     f9a:	9a 2f       	mov	r25, r26
     f9c:	ab 2f       	mov	r26, r27
     f9e:	bb 27       	eor	r27, r27
     fa0:	80 93 82 00 	sts	0x0082, r24
     fa4:	90 93 83 00 	sts	0x0083, r25
     fa8:	a0 93 84 00 	sts	0x0084, r26
     fac:	b0 93 85 00 	sts	0x0085, r27
     fb0:	10 92 86 00 	sts	0x0086, r1
     fb4:	10 92 87 00 	sts	0x0087, r1
     fb8:	10 92 88 00 	sts	0x0088, r1
     fbc:	10 92 89 00 	sts	0x0089, r1
			Duty[Timer0][OFF_Cycle] = (Time_Off_MS * 1000UL) / 256 ;//no. OverFlowsT0 for off Duty
     fc0:	c8 01       	movw	r24, r16
     fc2:	b7 01       	movw	r22, r14
     fc4:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <__mulsi3>
     fc8:	07 2f       	mov	r16, r23
     fca:	18 2f       	mov	r17, r24
     fcc:	29 2f       	mov	r18, r25
     fce:	33 27       	eor	r19, r19
     fd0:	ea e8       	ldi	r30, 0x8A	; 138
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	00 93 8a 00 	sts	0x008A, r16
     fd8:	11 83       	std	Z+1, r17	; 0x01
     fda:	22 83       	std	Z+2, r18	; 0x02
     fdc:	33 83       	std	Z+3, r19	; 0x03
     fde:	14 82       	std	Z+4, r1	; 0x04
     fe0:	15 82       	std	Z+5, r1	; 0x05
     fe2:	16 82       	std	Z+6, r1	; 0x06
     fe4:	17 82       	std	Z+7, r1	; 0x07
			
			TIMER0.Interrupts.OverFlow		   = ENABLE;
     fe6:	89 b7       	in	r24, 0x39	; 57
     fe8:	81 60       	ori	r24, 0x01	; 1
     fea:	89 bf       	out	0x39, r24	; 57
			TIMER0.Control.Clock               = TMR_EN_PRESCAL_8;
     fec:	83 b7       	in	r24, 0x33	; 51
     fee:	88 7f       	andi	r24, 0xF8	; 248
     ff0:	82 60       	ori	r24, 0x02	; 2
     ff2:	83 bf       	out	0x33, r24	; 51
	}
	else{/*MISRA C*/}
}
TimerError_t      Timer_SetTrigger		(Timer_t Timer, V_CallBack_V_t Notifier, uint32_t Time_On_MS, uint32_t Time_Off_MS)
{
	TimerError_t return_value = TMR_EN_valid_inti;
     ff4:	80 e0       	ldi	r24, 0x00	; 0
     ff6:	5b c0       	rjmp	.+182    	; 0x10ae <Timer_SetTrigger+0x180>
			Duty[Timer0][OFF_Cycle] = (Time_Off_MS * 1000UL) / 256 ;//no. OverFlowsT0 for off Duty
			
			TIMER0.Interrupts.OverFlow		   = ENABLE;
			TIMER0.Control.Clock               = TMR_EN_PRESCAL_8;
		}
		else if(Timer == Timer2)
     ff8:	a1 30       	cpi	r26, 0x01	; 1
     ffa:	09 f0       	breq	.+2      	; 0xffe <Timer_SetTrigger+0xd0>
     ffc:	57 c0       	rjmp	.+174    	; 0x10ac <Timer_SetTrigger+0x17e>
		{
			TIMER2.Control.CTC_wave_generation = DISABLE;
     ffe:	25 b5       	in	r18, 0x25	; 37
    1000:	27 7f       	andi	r18, 0xF7	; 247
    1002:	25 bd       	out	0x25, r18	; 37
			TIMER2.Control.PWM_wave_generation = DISABLE;
    1004:	25 b5       	in	r18, 0x25	; 37
    1006:	2f 7b       	andi	r18, 0xBF	; 191
    1008:	25 bd       	out	0x25, r18	; 37
			TIMER2.Control.Modes_out_on_comp   = TMR_EN_CTC_Disconnect;
    100a:	25 b5       	in	r18, 0x25	; 37
    100c:	2f 7c       	andi	r18, 0xCF	; 207
    100e:	25 bd       	out	0x25, r18	; 37
			
			NotifierAction[Timer2]  = Notifier;
    1010:	f0 93 b5 00 	sts	0x00B5, r31
    1014:	e0 93 b4 00 	sts	0x00B4, r30
			OverFlows[Timer2]       = RESET;
    1018:	10 92 aa 00 	sts	0x00AA, r1
    101c:	10 92 ab 00 	sts	0x00AB, r1
    1020:	10 92 ac 00 	sts	0x00AC, r1
    1024:	10 92 ad 00 	sts	0x00AD, r1
    1028:	10 92 ae 00 	sts	0x00AE, r1
    102c:	10 92 af 00 	sts	0x00AF, r1
    1030:	10 92 b0 00 	sts	0x00B0, r1
    1034:	10 92 b1 00 	sts	0x00B1, r1
			
			Duty[Timer2][ON_Cycle]  = (Time_On_MS  * 1000UL) / 256 ;//no. OverFlowsT0 for on Duty
    1038:	28 ee       	ldi	r18, 0xE8	; 232
    103a:	33 e0       	ldi	r19, 0x03	; 3
    103c:	40 e0       	ldi	r20, 0x00	; 0
    103e:	50 e0       	ldi	r21, 0x00	; 0
    1040:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <__mulsi3>
    1044:	dc 01       	movw	r26, r24
    1046:	cb 01       	movw	r24, r22
    1048:	89 2f       	mov	r24, r25
    104a:	9a 2f       	mov	r25, r26
    104c:	ab 2f       	mov	r26, r27
    104e:	bb 27       	eor	r27, r27
    1050:	80 93 92 00 	sts	0x0092, r24
    1054:	90 93 93 00 	sts	0x0093, r25
    1058:	a0 93 94 00 	sts	0x0094, r26
    105c:	b0 93 95 00 	sts	0x0095, r27
    1060:	10 92 96 00 	sts	0x0096, r1
    1064:	10 92 97 00 	sts	0x0097, r1
    1068:	10 92 98 00 	sts	0x0098, r1
    106c:	10 92 99 00 	sts	0x0099, r1
			Duty[Timer2][OFF_Cycle] = (Time_Off_MS * 1000UL) / 256 ;//no. OverFlowsT0 for off Duty
    1070:	c8 01       	movw	r24, r16
    1072:	b7 01       	movw	r22, r14
    1074:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <__mulsi3>
    1078:	07 2f       	mov	r16, r23
    107a:	18 2f       	mov	r17, r24
    107c:	29 2f       	mov	r18, r25
    107e:	33 27       	eor	r19, r19
    1080:	ea e9       	ldi	r30, 0x9A	; 154
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	00 93 9a 00 	sts	0x009A, r16
    1088:	11 83       	std	Z+1, r17	; 0x01
    108a:	22 83       	std	Z+2, r18	; 0x02
    108c:	33 83       	std	Z+3, r19	; 0x03
    108e:	14 82       	std	Z+4, r1	; 0x04
    1090:	15 82       	std	Z+5, r1	; 0x05
    1092:	16 82       	std	Z+6, r1	; 0x06
    1094:	17 82       	std	Z+7, r1	; 0x07
			
			TIMER2.Interrupts.OverFlow		   = ENABLE;
    1096:	89 b7       	in	r24, 0x39	; 57
    1098:	80 64       	ori	r24, 0x40	; 64
    109a:	89 bf       	out	0x39, r24	; 57
			TIMER2.Control.Clock               = TMR_EN_PRESCAL_8;
    109c:	85 b5       	in	r24, 0x25	; 37
    109e:	88 7f       	andi	r24, 0xF8	; 248
    10a0:	82 60       	ori	r24, 0x02	; 2
    10a2:	85 bd       	out	0x25, r24	; 37
	}
	else{/*MISRA C*/}
}
TimerError_t      Timer_SetTrigger		(Timer_t Timer, V_CallBack_V_t Notifier, uint32_t Time_On_MS, uint32_t Time_Off_MS)
{
	TimerError_t return_value = TMR_EN_valid_inti;
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	03 c0       	rjmp	.+6      	; 0x10ae <Timer_SetTrigger+0x180>
		}
		else{/*MISRA C*/}
	}
	else
	{
		return_value = TMR_EN_InvalidPointer;
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	01 c0       	rjmp	.+2      	; 0x10ae <Timer_SetTrigger+0x180>
	}
	else{/*MISRA C*/}
}
TimerError_t      Timer_SetTrigger		(Timer_t Timer, V_CallBack_V_t Notifier, uint32_t Time_On_MS, uint32_t Time_Off_MS)
{
	TimerError_t return_value = TMR_EN_valid_inti;
    10ac:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		return_value = TMR_EN_InvalidPointer;
	}
	return return_value;
}
    10ae:	df 91       	pop	r29
    10b0:	cf 91       	pop	r28
    10b2:	1f 91       	pop	r17
    10b4:	0f 91       	pop	r16
    10b6:	ff 90       	pop	r15
    10b8:	ef 90       	pop	r14
    10ba:	08 95       	ret

000010bc <Timer_PWM_SetDuty>:
void			  Timer_PWM_SetDuty		(Timer_t Timer, uint8_t PWMDuty)
{
	if(Timer == Timer0)
    10bc:	88 23       	and	r24, r24
    10be:	39 f5       	brne	.+78     	; 0x110e <Timer_PWM_SetDuty+0x52>
	{
		TIMER0.Control.CTC_wave_generation = DISABLE;
    10c0:	83 b7       	in	r24, 0x33	; 51
    10c2:	87 7f       	andi	r24, 0xF7	; 247
    10c4:	83 bf       	out	0x33, r24	; 51
		TIMER0.Control.PWM_wave_generation = ENABLE;
    10c6:	83 b7       	in	r24, 0x33	; 51
    10c8:	80 64       	ori	r24, 0x40	; 64
    10ca:	83 bf       	out	0x33, r24	; 51
		if(PWMDuty >= 100)
    10cc:	64 36       	cpi	r22, 0x64	; 100
    10ce:	18 f0       	brcs	.+6      	; 0x10d6 <Timer_PWM_SetDuty+0x1a>
		{
			TIMER0.CompareValue = 0xFF;
    10d0:	8f ef       	ldi	r24, 0xFF	; 255
    10d2:	8c bf       	out	0x3c, r24	; 60
    10d4:	14 c0       	rjmp	.+40     	; 0x10fe <Timer_PWM_SetDuty+0x42>
		}
		else
		{
			TIMER0.CompareValue = (0xFFUL*PWMDuty)/100.0;
    10d6:	70 e0       	ldi	r23, 0x00	; 0
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	2f ef       	ldi	r18, 0xFF	; 255
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	40 e0       	ldi	r20, 0x00	; 0
    10e2:	50 e0       	ldi	r21, 0x00	; 0
    10e4:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <__mulsi3>
    10e8:	0e 94 a6 0c 	call	0x194c	; 0x194c <__floatunsisf>
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	48 ec       	ldi	r20, 0xC8	; 200
    10f2:	52 e4       	ldi	r21, 0x42	; 66
    10f4:	0e 94 12 0c 	call	0x1824	; 0x1824 <__divsf3>
    10f8:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <__fixunssfsi>
    10fc:	6c bf       	out	0x3c, r22	; 60
		}
		//DDRB3 = OUTPUT;
		TIMER0.Interrupts.Comp_Match       = DISABLE;
    10fe:	89 b7       	in	r24, 0x39	; 57
    1100:	8d 7f       	andi	r24, 0xFD	; 253
    1102:	89 bf       	out	0x39, r24	; 57
		TIMER0.Control.Clock = TMR_EN_T0_PRESCAL_1024;
    1104:	83 b7       	in	r24, 0x33	; 51
    1106:	88 7f       	andi	r24, 0xF8	; 248
    1108:	85 60       	ori	r24, 0x05	; 5
    110a:	83 bf       	out	0x33, r24	; 51
    110c:	08 95       	ret
	}
	else if(Timer == Timer2)
    110e:	81 30       	cpi	r24, 0x01	; 1
    1110:	29 f5       	brne	.+74     	; 0x115c <Timer_PWM_SetDuty+0xa0>
	{
		TIMER2.Control.CTC_wave_generation = DISABLE;
    1112:	85 b5       	in	r24, 0x25	; 37
    1114:	87 7f       	andi	r24, 0xF7	; 247
    1116:	85 bd       	out	0x25, r24	; 37
		TIMER2.Control.PWM_wave_generation = ENABLE;
    1118:	85 b5       	in	r24, 0x25	; 37
    111a:	80 64       	ori	r24, 0x40	; 64
    111c:	85 bd       	out	0x25, r24	; 37
		if(PWMDuty >= 100)
    111e:	64 36       	cpi	r22, 0x64	; 100
    1120:	18 f0       	brcs	.+6      	; 0x1128 <Timer_PWM_SetDuty+0x6c>
		{
			TIMER2.CompareValue = 0xFF;
    1122:	8f ef       	ldi	r24, 0xFF	; 255
    1124:	83 bd       	out	0x23, r24	; 35
    1126:	14 c0       	rjmp	.+40     	; 0x1150 <Timer_PWM_SetDuty+0x94>
		}
		else
		{
			TIMER2.CompareValue = (0xFFUL*PWMDuty)/100.0;
    1128:	70 e0       	ldi	r23, 0x00	; 0
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	2f ef       	ldi	r18, 0xFF	; 255
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	40 e0       	ldi	r20, 0x00	; 0
    1134:	50 e0       	ldi	r21, 0x00	; 0
    1136:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <__mulsi3>
    113a:	0e 94 a6 0c 	call	0x194c	; 0x194c <__floatunsisf>
    113e:	20 e0       	ldi	r18, 0x00	; 0
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	48 ec       	ldi	r20, 0xC8	; 200
    1144:	52 e4       	ldi	r21, 0x42	; 66
    1146:	0e 94 12 0c 	call	0x1824	; 0x1824 <__divsf3>
    114a:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <__fixunssfsi>
    114e:	63 bd       	out	0x23, r22	; 35
		}
		//DDRD7 = OUTPUT;
		TIMER2.Interrupts.Comp_Match       = DISABLE;
    1150:	89 b7       	in	r24, 0x39	; 57
    1152:	8f 77       	andi	r24, 0x7F	; 127
    1154:	89 bf       	out	0x39, r24	; 57
		TIMER2.Control.Clock = TMR_EN_T2_PRESCAL_1024;
    1156:	85 b5       	in	r24, 0x25	; 37
    1158:	87 60       	ori	r24, 0x07	; 7
    115a:	85 bd       	out	0x25, r24	; 37
    115c:	08 95       	ret

0000115e <Timer_PWMCallBack>:
	}
	else{/*MISRA C*/}
}
void			  Timer_PWMCallBack     (Timer_t Timer, V_CallBack_V_t pwm_toggle)
{
	if(Timer == Timer0)
    115e:	88 23       	and	r24, r24
    1160:	29 f4       	brne	.+10     	; 0x116c <Timer_PWMCallBack+0xe>
	{
		PWMAction[Timer0] = pwm_toggle;
    1162:	70 93 7f 00 	sts	0x007F, r23
    1166:	60 93 7e 00 	sts	0x007E, r22
    116a:	08 95       	ret
	}
	else if(Timer == Timer2)
    116c:	81 30       	cpi	r24, 0x01	; 1
    116e:	21 f4       	brne	.+8      	; 0x1178 <Timer_PWMCallBack+0x1a>
	{
		PWMAction[Timer2] = pwm_toggle;
    1170:	70 93 81 00 	sts	0x0081, r23
    1174:	60 93 80 00 	sts	0x0080, r22
    1178:	08 95       	ret

0000117a <Timer_SoftWarePWM>:
	}
	else{/*MISRA C*/}
}
void		      Timer_SoftWarePWM		(Timer_t Timer, uint8_t PWMDuty, TMR_Clock_t Clock)
{
    117a:	cf 93       	push	r28
    117c:	c4 2f       	mov	r28, r20
	float localDuty = 0;
	if(Timer == Timer0)
    117e:	88 23       	and	r24, r24
    1180:	41 f5       	brne	.+80     	; 0x11d2 <Timer_SoftWarePWM+0x58>
	{
		TIMER0.Control.CTC_wave_generation = DISABLE;
    1182:	83 b7       	in	r24, 0x33	; 51
    1184:	87 7f       	andi	r24, 0xF7	; 247
    1186:	83 bf       	out	0x33, r24	; 51
		TIMER0.Control.PWM_wave_generation = ENABLE;
    1188:	83 b7       	in	r24, 0x33	; 51
    118a:	80 64       	ori	r24, 0x40	; 64
    118c:	83 bf       	out	0x33, r24	; 51
		if(PWMDuty >= 100)
    118e:	64 36       	cpi	r22, 0x64	; 100
    1190:	18 f0       	brcs	.+6      	; 0x1198 <Timer_SoftWarePWM+0x1e>
		{
			TIMER0.CompareValue = 0xFF;
    1192:	8f ef       	ldi	r24, 0xFF	; 255
    1194:	8c bf       	out	0x3c, r24	; 60
    1196:	14 c0       	rjmp	.+40     	; 0x11c0 <Timer_SoftWarePWM+0x46>
		}
		else
		{
			localDuty = (0xFFUL*PWMDuty)/100.0;
    1198:	70 e0       	ldi	r23, 0x00	; 0
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	2f ef       	ldi	r18, 0xFF	; 255
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	40 e0       	ldi	r20, 0x00	; 0
    11a4:	50 e0       	ldi	r21, 0x00	; 0
    11a6:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <__mulsi3>
    11aa:	0e 94 a6 0c 	call	0x194c	; 0x194c <__floatunsisf>
    11ae:	20 e0       	ldi	r18, 0x00	; 0
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	48 ec       	ldi	r20, 0xC8	; 200
    11b4:	52 e4       	ldi	r21, 0x42	; 66
    11b6:	0e 94 12 0c 	call	0x1824	; 0x1824 <__divsf3>
			TIMER0.CompareValue = localDuty;
    11ba:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <__fixunssfsi>
    11be:	6c bf       	out	0x3c, r22	; 60
		}
		//DDRB3 = OUTPUT;
		TIMER0.Interrupts.Comp_Match       = DISABLE;
    11c0:	89 b7       	in	r24, 0x39	; 57
    11c2:	8d 7f       	andi	r24, 0xFD	; 253
    11c4:	89 bf       	out	0x39, r24	; 57
		TIMER0.Control.Clock = Clock;
    11c6:	c7 70       	andi	r28, 0x07	; 7
    11c8:	83 b7       	in	r24, 0x33	; 51
    11ca:	88 7f       	andi	r24, 0xF8	; 248
    11cc:	c8 2b       	or	r28, r24
    11ce:	c3 bf       	out	0x33, r28	; 51
    11d0:	29 c0       	rjmp	.+82     	; 0x1224 <Timer_SoftWarePWM+0xaa>
	}
	else if(Timer == Timer2)
    11d2:	81 30       	cpi	r24, 0x01	; 1
    11d4:	39 f5       	brne	.+78     	; 0x1224 <Timer_SoftWarePWM+0xaa>
	{
		TIMER2.Control.CTC_wave_generation = DISABLE;
    11d6:	85 b5       	in	r24, 0x25	; 37
    11d8:	87 7f       	andi	r24, 0xF7	; 247
    11da:	85 bd       	out	0x25, r24	; 37
		TIMER2.Control.PWM_wave_generation = ENABLE;
    11dc:	85 b5       	in	r24, 0x25	; 37
    11de:	80 64       	ori	r24, 0x40	; 64
    11e0:	85 bd       	out	0x25, r24	; 37
		if(PWMDuty >= 100)
    11e2:	64 36       	cpi	r22, 0x64	; 100
    11e4:	18 f0       	brcs	.+6      	; 0x11ec <Timer_SoftWarePWM+0x72>
		{
			TIMER2.CompareValue = 0xFF;
    11e6:	8f ef       	ldi	r24, 0xFF	; 255
    11e8:	83 bd       	out	0x23, r24	; 35
    11ea:	14 c0       	rjmp	.+40     	; 0x1214 <Timer_SoftWarePWM+0x9a>
		}
		else
		{
			localDuty = (0xFFUL*PWMDuty)/100.0;
    11ec:	70 e0       	ldi	r23, 0x00	; 0
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	2f ef       	ldi	r18, 0xFF	; 255
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	40 e0       	ldi	r20, 0x00	; 0
    11f8:	50 e0       	ldi	r21, 0x00	; 0
    11fa:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <__mulsi3>
    11fe:	0e 94 a6 0c 	call	0x194c	; 0x194c <__floatunsisf>
    1202:	20 e0       	ldi	r18, 0x00	; 0
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	48 ec       	ldi	r20, 0xC8	; 200
    1208:	52 e4       	ldi	r21, 0x42	; 66
    120a:	0e 94 12 0c 	call	0x1824	; 0x1824 <__divsf3>
			TIMER2.CompareValue = localDuty;
    120e:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <__fixunssfsi>
    1212:	63 bd       	out	0x23, r22	; 35
		}
		//DDRD7 = OUTPUT;
		TIMER2.Interrupts.Comp_Match       = DISABLE;
    1214:	89 b7       	in	r24, 0x39	; 57
    1216:	8f 77       	andi	r24, 0x7F	; 127
    1218:	89 bf       	out	0x39, r24	; 57
		TIMER2.Control.Clock = Clock;
    121a:	c7 70       	andi	r28, 0x07	; 7
    121c:	85 b5       	in	r24, 0x25	; 37
    121e:	88 7f       	andi	r24, 0xF8	; 248
    1220:	c8 2b       	or	r28, r24
    1222:	c5 bd       	out	0x25, r28	; 37
	}
	else{/*MISRA C*/}
}
    1224:	cf 91       	pop	r28
    1226:	08 95       	ret

00001228 <__vector_11>:


ISR(TIMER0_OVF_vect)
{
    1228:	1f 92       	push	r1
    122a:	0f 92       	push	r0
    122c:	0f b6       	in	r0, 0x3f	; 63
    122e:	0f 92       	push	r0
    1230:	11 24       	eor	r1, r1
    1232:	ff 92       	push	r15
    1234:	0f 93       	push	r16
    1236:	1f 93       	push	r17
    1238:	2f 93       	push	r18
    123a:	3f 93       	push	r19
    123c:	4f 93       	push	r20
    123e:	5f 93       	push	r21
    1240:	6f 93       	push	r22
    1242:	7f 93       	push	r23
    1244:	8f 93       	push	r24
    1246:	9f 93       	push	r25
    1248:	af 93       	push	r26
    124a:	bf 93       	push	r27
    124c:	cf 93       	push	r28
    124e:	df 93       	push	r29
    1250:	ef 93       	push	r30
    1252:	ff 93       	push	r31
	TIMER0.Flags.OverFlow = ENABLE;
    1254:	88 b7       	in	r24, 0x38	; 56
    1256:	81 60       	ori	r24, 0x01	; 1
    1258:	88 bf       	out	0x38, r24	; 56
	OverFlows[Timer0]++;
    125a:	50 91 a2 00 	lds	r21, 0x00A2
    125e:	40 91 a3 00 	lds	r20, 0x00A3
    1262:	30 91 a4 00 	lds	r19, 0x00A4
    1266:	20 91 a5 00 	lds	r18, 0x00A5
    126a:	90 91 a6 00 	lds	r25, 0x00A6
    126e:	f0 91 a7 00 	lds	r31, 0x00A7
    1272:	e0 91 a8 00 	lds	r30, 0x00A8
    1276:	a0 91 a9 00 	lds	r26, 0x00A9
    127a:	75 2f       	mov	r23, r21
    127c:	7f 5f       	subi	r23, 0xFF	; 255
    127e:	61 e0       	ldi	r22, 0x01	; 1
    1280:	75 17       	cp	r23, r21
    1282:	08 f0       	brcs	.+2      	; 0x1286 <__vector_11+0x5e>
    1284:	60 e0       	ldi	r22, 0x00	; 0
    1286:	84 2f       	mov	r24, r20
    1288:	50 e0       	ldi	r21, 0x00	; 0
    128a:	64 0f       	add	r22, r20
    128c:	41 e0       	ldi	r20, 0x01	; 1
    128e:	68 17       	cp	r22, r24
    1290:	08 f0       	brcs	.+2      	; 0x1294 <__vector_11+0x6c>
    1292:	40 e0       	ldi	r20, 0x00	; 0
    1294:	54 2b       	or	r21, r20
    1296:	83 2f       	mov	r24, r19
    1298:	40 e0       	ldi	r20, 0x00	; 0
    129a:	53 0f       	add	r21, r19
    129c:	31 e0       	ldi	r19, 0x01	; 1
    129e:	58 17       	cp	r21, r24
    12a0:	08 f0       	brcs	.+2      	; 0x12a4 <__vector_11+0x7c>
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	43 2b       	or	r20, r19
    12a6:	82 2f       	mov	r24, r18
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	42 0f       	add	r20, r18
    12ac:	21 e0       	ldi	r18, 0x01	; 1
    12ae:	48 17       	cp	r20, r24
    12b0:	08 f0       	brcs	.+2      	; 0x12b4 <__vector_11+0x8c>
    12b2:	20 e0       	ldi	r18, 0x00	; 0
    12b4:	32 2b       	or	r19, r18
    12b6:	89 2f       	mov	r24, r25
    12b8:	20 e0       	ldi	r18, 0x00	; 0
    12ba:	39 0f       	add	r19, r25
    12bc:	91 e0       	ldi	r25, 0x01	; 1
    12be:	38 17       	cp	r19, r24
    12c0:	08 f0       	brcs	.+2      	; 0x12c4 <__vector_11+0x9c>
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	29 2b       	or	r18, r25
    12c6:	8f 2f       	mov	r24, r31
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	2f 0f       	add	r18, r31
    12cc:	f1 e0       	ldi	r31, 0x01	; 1
    12ce:	28 17       	cp	r18, r24
    12d0:	08 f0       	brcs	.+2      	; 0x12d4 <__vector_11+0xac>
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	9f 2b       	or	r25, r31
    12d6:	fe 2f       	mov	r31, r30
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	9e 0f       	add	r25, r30
    12dc:	e1 e0       	ldi	r30, 0x01	; 1
    12de:	9f 17       	cp	r25, r31
    12e0:	08 f0       	brcs	.+2      	; 0x12e4 <__vector_11+0xbc>
    12e2:	e0 e0       	ldi	r30, 0x00	; 0
    12e4:	8e 2b       	or	r24, r30
    12e6:	8a 0f       	add	r24, r26
    12e8:	70 93 a2 00 	sts	0x00A2, r23
    12ec:	60 93 a3 00 	sts	0x00A3, r22
    12f0:	50 93 a4 00 	sts	0x00A4, r21
    12f4:	40 93 a5 00 	sts	0x00A5, r20
    12f8:	30 93 a6 00 	sts	0x00A6, r19
    12fc:	20 93 a7 00 	sts	0x00A7, r18
    1300:	90 93 a8 00 	sts	0x00A8, r25
    1304:	80 93 a9 00 	sts	0x00A9, r24
	if(OverFlows[Timer0] == Duty[Timer0][Cycle[Timer0]])
    1308:	90 91 a2 00 	lds	r25, 0x00A2
    130c:	30 91 a3 00 	lds	r19, 0x00A3
    1310:	50 91 a4 00 	lds	r21, 0x00A4
    1314:	70 91 a5 00 	lds	r23, 0x00A5
    1318:	f0 90 a6 00 	lds	r15, 0x00A6
    131c:	10 91 a7 00 	lds	r17, 0x00A7
    1320:	c0 91 a8 00 	lds	r28, 0x00A8
    1324:	a0 91 a9 00 	lds	r26, 0x00A9
    1328:	e0 91 78 00 	lds	r30, 0x0078
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	ee 0f       	add	r30, r30
    1330:	ff 1f       	adc	r31, r31
    1332:	ee 0f       	add	r30, r30
    1334:	ff 1f       	adc	r31, r31
    1336:	ee 0f       	add	r30, r30
    1338:	ff 1f       	adc	r31, r31
    133a:	ee 57       	subi	r30, 0x7E	; 126
    133c:	ff 4f       	sbci	r31, 0xFF	; 255
    133e:	80 81       	ld	r24, Z
    1340:	21 81       	ldd	r18, Z+1	; 0x01
    1342:	42 81       	ldd	r20, Z+2	; 0x02
    1344:	63 81       	ldd	r22, Z+3	; 0x03
    1346:	04 81       	ldd	r16, Z+4	; 0x04
    1348:	d5 81       	ldd	r29, Z+5	; 0x05
    134a:	b6 81       	ldd	r27, Z+6	; 0x06
    134c:	e7 81       	ldd	r30, Z+7	; 0x07
    134e:	98 17       	cp	r25, r24
    1350:	09 f0       	breq	.+2      	; 0x1354 <__vector_11+0x12c>
    1352:	65 c0       	rjmp	.+202    	; 0x141e <__vector_11+0x1f6>
    1354:	32 17       	cp	r19, r18
    1356:	09 f0       	breq	.+2      	; 0x135a <__vector_11+0x132>
    1358:	62 c0       	rjmp	.+196    	; 0x141e <__vector_11+0x1f6>
    135a:	54 17       	cp	r21, r20
    135c:	09 f0       	breq	.+2      	; 0x1360 <__vector_11+0x138>
    135e:	5f c0       	rjmp	.+190    	; 0x141e <__vector_11+0x1f6>
    1360:	76 17       	cp	r23, r22
    1362:	09 f0       	breq	.+2      	; 0x1366 <__vector_11+0x13e>
    1364:	5c c0       	rjmp	.+184    	; 0x141e <__vector_11+0x1f6>
    1366:	f0 16       	cp	r15, r16
    1368:	09 f0       	breq	.+2      	; 0x136c <__vector_11+0x144>
    136a:	59 c0       	rjmp	.+178    	; 0x141e <__vector_11+0x1f6>
    136c:	1d 17       	cp	r17, r29
    136e:	09 f0       	breq	.+2      	; 0x1372 <__vector_11+0x14a>
    1370:	56 c0       	rjmp	.+172    	; 0x141e <__vector_11+0x1f6>
    1372:	cb 17       	cp	r28, r27
    1374:	09 f0       	breq	.+2      	; 0x1378 <__vector_11+0x150>
    1376:	53 c0       	rjmp	.+166    	; 0x141e <__vector_11+0x1f6>
    1378:	ae 17       	cp	r26, r30
    137a:	09 f0       	breq	.+2      	; 0x137e <__vector_11+0x156>
    137c:	50 c0       	rjmp	.+160    	; 0x141e <__vector_11+0x1f6>
	{
		OverFlows[Timer0] = RESET;
    137e:	10 92 a2 00 	sts	0x00A2, r1
    1382:	10 92 a3 00 	sts	0x00A3, r1
    1386:	10 92 a4 00 	sts	0x00A4, r1
    138a:	10 92 a5 00 	sts	0x00A5, r1
    138e:	10 92 a6 00 	sts	0x00A6, r1
    1392:	10 92 a7 00 	sts	0x00A7, r1
    1396:	10 92 a8 00 	sts	0x00A8, r1
    139a:	10 92 a9 00 	sts	0x00A9, r1
		NotifierAction[Timer0]();
    139e:	e0 91 b2 00 	lds	r30, 0x00B2
    13a2:	f0 91 b3 00 	lds	r31, 0x00B3
    13a6:	09 95       	icall
		if(Cycle[Timer0] == ON_Cycle)
    13a8:	80 91 78 00 	lds	r24, 0x0078
    13ac:	88 23       	and	r24, r24
    13ae:	d1 f4       	brne	.+52     	; 0x13e4 <__vector_11+0x1bc>
		{
			Cycle[Timer0] = OFF_Cycle;
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	80 93 78 00 	sts	0x0078, r24
			TIMER0.Counter  = 256 - ((Duty[Timer0][OFF_Cycle] * 1000UL)%256 -1);
    13b6:	20 91 8a 00 	lds	r18, 0x008A
    13ba:	90 91 8b 00 	lds	r25, 0x008B
    13be:	90 91 8c 00 	lds	r25, 0x008C
    13c2:	90 91 8d 00 	lds	r25, 0x008D
    13c6:	90 91 8e 00 	lds	r25, 0x008E
    13ca:	90 91 8f 00 	lds	r25, 0x008F
    13ce:	90 91 90 00 	lds	r25, 0x0090
    13d2:	90 91 91 00 	lds	r25, 0x0091
    13d6:	98 ee       	ldi	r25, 0xE8	; 232
    13d8:	29 9f       	mul	r18, r25
    13da:	90 2d       	mov	r25, r0
    13dc:	11 24       	eor	r1, r1
    13de:	89 1b       	sub	r24, r25
    13e0:	82 bf       	out	0x32, r24	; 50
    13e2:	1d c0       	rjmp	.+58     	; 0x141e <__vector_11+0x1f6>
		}
		else if(Cycle[Timer0] == OFF_Cycle)
    13e4:	80 91 78 00 	lds	r24, 0x0078
    13e8:	81 30       	cpi	r24, 0x01	; 1
    13ea:	c9 f4       	brne	.+50     	; 0x141e <__vector_11+0x1f6>
		{
			Cycle[Timer0] = ON_Cycle;
    13ec:	10 92 78 00 	sts	0x0078, r1
			TIMER0.Counter  = 256 - ((Duty[Timer0][ON_Cycle] * 1000UL)%256 -1);
    13f0:	90 91 82 00 	lds	r25, 0x0082
    13f4:	80 91 83 00 	lds	r24, 0x0083
    13f8:	80 91 84 00 	lds	r24, 0x0084
    13fc:	80 91 85 00 	lds	r24, 0x0085
    1400:	80 91 86 00 	lds	r24, 0x0086
    1404:	80 91 87 00 	lds	r24, 0x0087
    1408:	80 91 88 00 	lds	r24, 0x0088
    140c:	80 91 89 00 	lds	r24, 0x0089
    1410:	88 ee       	ldi	r24, 0xE8	; 232
    1412:	98 9f       	mul	r25, r24
    1414:	90 2d       	mov	r25, r0
    1416:	11 24       	eor	r1, r1
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	89 1b       	sub	r24, r25
    141c:	82 bf       	out	0x32, r24	; 50
		}
	}
}
    141e:	ff 91       	pop	r31
    1420:	ef 91       	pop	r30
    1422:	df 91       	pop	r29
    1424:	cf 91       	pop	r28
    1426:	bf 91       	pop	r27
    1428:	af 91       	pop	r26
    142a:	9f 91       	pop	r25
    142c:	8f 91       	pop	r24
    142e:	7f 91       	pop	r23
    1430:	6f 91       	pop	r22
    1432:	5f 91       	pop	r21
    1434:	4f 91       	pop	r20
    1436:	3f 91       	pop	r19
    1438:	2f 91       	pop	r18
    143a:	1f 91       	pop	r17
    143c:	0f 91       	pop	r16
    143e:	ff 90       	pop	r15
    1440:	0f 90       	pop	r0
    1442:	0f be       	out	0x3f, r0	; 63
    1444:	0f 90       	pop	r0
    1446:	1f 90       	pop	r1
    1448:	18 95       	reti

0000144a <__vector_5>:
ISR(TIMER2_OVF_vect)
{
    144a:	1f 92       	push	r1
    144c:	0f 92       	push	r0
    144e:	0f b6       	in	r0, 0x3f	; 63
    1450:	0f 92       	push	r0
    1452:	11 24       	eor	r1, r1
    1454:	ff 92       	push	r15
    1456:	0f 93       	push	r16
    1458:	1f 93       	push	r17
    145a:	2f 93       	push	r18
    145c:	3f 93       	push	r19
    145e:	4f 93       	push	r20
    1460:	5f 93       	push	r21
    1462:	6f 93       	push	r22
    1464:	7f 93       	push	r23
    1466:	8f 93       	push	r24
    1468:	9f 93       	push	r25
    146a:	af 93       	push	r26
    146c:	bf 93       	push	r27
    146e:	cf 93       	push	r28
    1470:	df 93       	push	r29
    1472:	ef 93       	push	r30
    1474:	ff 93       	push	r31
	TIMER2.Flags.OverFlow = ENABLE;
    1476:	88 b7       	in	r24, 0x38	; 56
    1478:	80 64       	ori	r24, 0x40	; 64
    147a:	88 bf       	out	0x38, r24	; 56
	OverFlows[Timer2]++;
    147c:	50 91 aa 00 	lds	r21, 0x00AA
    1480:	40 91 ab 00 	lds	r20, 0x00AB
    1484:	30 91 ac 00 	lds	r19, 0x00AC
    1488:	20 91 ad 00 	lds	r18, 0x00AD
    148c:	90 91 ae 00 	lds	r25, 0x00AE
    1490:	f0 91 af 00 	lds	r31, 0x00AF
    1494:	e0 91 b0 00 	lds	r30, 0x00B0
    1498:	a0 91 b1 00 	lds	r26, 0x00B1
    149c:	75 2f       	mov	r23, r21
    149e:	7f 5f       	subi	r23, 0xFF	; 255
    14a0:	61 e0       	ldi	r22, 0x01	; 1
    14a2:	75 17       	cp	r23, r21
    14a4:	08 f0       	brcs	.+2      	; 0x14a8 <__vector_5+0x5e>
    14a6:	60 e0       	ldi	r22, 0x00	; 0
    14a8:	84 2f       	mov	r24, r20
    14aa:	50 e0       	ldi	r21, 0x00	; 0
    14ac:	64 0f       	add	r22, r20
    14ae:	41 e0       	ldi	r20, 0x01	; 1
    14b0:	68 17       	cp	r22, r24
    14b2:	08 f0       	brcs	.+2      	; 0x14b6 <__vector_5+0x6c>
    14b4:	40 e0       	ldi	r20, 0x00	; 0
    14b6:	54 2b       	or	r21, r20
    14b8:	83 2f       	mov	r24, r19
    14ba:	40 e0       	ldi	r20, 0x00	; 0
    14bc:	53 0f       	add	r21, r19
    14be:	31 e0       	ldi	r19, 0x01	; 1
    14c0:	58 17       	cp	r21, r24
    14c2:	08 f0       	brcs	.+2      	; 0x14c6 <__vector_5+0x7c>
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	43 2b       	or	r20, r19
    14c8:	82 2f       	mov	r24, r18
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	42 0f       	add	r20, r18
    14ce:	21 e0       	ldi	r18, 0x01	; 1
    14d0:	48 17       	cp	r20, r24
    14d2:	08 f0       	brcs	.+2      	; 0x14d6 <__vector_5+0x8c>
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	32 2b       	or	r19, r18
    14d8:	89 2f       	mov	r24, r25
    14da:	20 e0       	ldi	r18, 0x00	; 0
    14dc:	39 0f       	add	r19, r25
    14de:	91 e0       	ldi	r25, 0x01	; 1
    14e0:	38 17       	cp	r19, r24
    14e2:	08 f0       	brcs	.+2      	; 0x14e6 <__vector_5+0x9c>
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	29 2b       	or	r18, r25
    14e8:	8f 2f       	mov	r24, r31
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	2f 0f       	add	r18, r31
    14ee:	f1 e0       	ldi	r31, 0x01	; 1
    14f0:	28 17       	cp	r18, r24
    14f2:	08 f0       	brcs	.+2      	; 0x14f6 <__vector_5+0xac>
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	9f 2b       	or	r25, r31
    14f8:	fe 2f       	mov	r31, r30
    14fa:	80 e0       	ldi	r24, 0x00	; 0
    14fc:	9e 0f       	add	r25, r30
    14fe:	e1 e0       	ldi	r30, 0x01	; 1
    1500:	9f 17       	cp	r25, r31
    1502:	08 f0       	brcs	.+2      	; 0x1506 <__vector_5+0xbc>
    1504:	e0 e0       	ldi	r30, 0x00	; 0
    1506:	8e 2b       	or	r24, r30
    1508:	8a 0f       	add	r24, r26
    150a:	70 93 aa 00 	sts	0x00AA, r23
    150e:	60 93 ab 00 	sts	0x00AB, r22
    1512:	50 93 ac 00 	sts	0x00AC, r21
    1516:	40 93 ad 00 	sts	0x00AD, r20
    151a:	30 93 ae 00 	sts	0x00AE, r19
    151e:	20 93 af 00 	sts	0x00AF, r18
    1522:	90 93 b0 00 	sts	0x00B0, r25
    1526:	80 93 b1 00 	sts	0x00B1, r24
	if(OverFlows[Timer2] == Duty[Timer2][Cycle[Timer2]])
    152a:	90 91 aa 00 	lds	r25, 0x00AA
    152e:	30 91 ab 00 	lds	r19, 0x00AB
    1532:	50 91 ac 00 	lds	r21, 0x00AC
    1536:	70 91 ad 00 	lds	r23, 0x00AD
    153a:	f0 90 ae 00 	lds	r15, 0x00AE
    153e:	10 91 af 00 	lds	r17, 0x00AF
    1542:	c0 91 b0 00 	lds	r28, 0x00B0
    1546:	a0 91 b1 00 	lds	r26, 0x00B1
    154a:	e0 91 79 00 	lds	r30, 0x0079
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	ee 0f       	add	r30, r30
    1552:	ff 1f       	adc	r31, r31
    1554:	ee 0f       	add	r30, r30
    1556:	ff 1f       	adc	r31, r31
    1558:	ee 0f       	add	r30, r30
    155a:	ff 1f       	adc	r31, r31
    155c:	ee 56       	subi	r30, 0x6E	; 110
    155e:	ff 4f       	sbci	r31, 0xFF	; 255
    1560:	80 81       	ld	r24, Z
    1562:	21 81       	ldd	r18, Z+1	; 0x01
    1564:	42 81       	ldd	r20, Z+2	; 0x02
    1566:	63 81       	ldd	r22, Z+3	; 0x03
    1568:	04 81       	ldd	r16, Z+4	; 0x04
    156a:	d5 81       	ldd	r29, Z+5	; 0x05
    156c:	b6 81       	ldd	r27, Z+6	; 0x06
    156e:	e7 81       	ldd	r30, Z+7	; 0x07
    1570:	98 17       	cp	r25, r24
    1572:	09 f0       	breq	.+2      	; 0x1576 <__vector_5+0x12c>
    1574:	65 c0       	rjmp	.+202    	; 0x1640 <__vector_5+0x1f6>
    1576:	32 17       	cp	r19, r18
    1578:	09 f0       	breq	.+2      	; 0x157c <__vector_5+0x132>
    157a:	62 c0       	rjmp	.+196    	; 0x1640 <__vector_5+0x1f6>
    157c:	54 17       	cp	r21, r20
    157e:	09 f0       	breq	.+2      	; 0x1582 <__vector_5+0x138>
    1580:	5f c0       	rjmp	.+190    	; 0x1640 <__vector_5+0x1f6>
    1582:	76 17       	cp	r23, r22
    1584:	09 f0       	breq	.+2      	; 0x1588 <__vector_5+0x13e>
    1586:	5c c0       	rjmp	.+184    	; 0x1640 <__vector_5+0x1f6>
    1588:	f0 16       	cp	r15, r16
    158a:	09 f0       	breq	.+2      	; 0x158e <__vector_5+0x144>
    158c:	59 c0       	rjmp	.+178    	; 0x1640 <__vector_5+0x1f6>
    158e:	1d 17       	cp	r17, r29
    1590:	09 f0       	breq	.+2      	; 0x1594 <__vector_5+0x14a>
    1592:	56 c0       	rjmp	.+172    	; 0x1640 <__vector_5+0x1f6>
    1594:	cb 17       	cp	r28, r27
    1596:	09 f0       	breq	.+2      	; 0x159a <__vector_5+0x150>
    1598:	53 c0       	rjmp	.+166    	; 0x1640 <__vector_5+0x1f6>
    159a:	ae 17       	cp	r26, r30
    159c:	09 f0       	breq	.+2      	; 0x15a0 <__vector_5+0x156>
    159e:	50 c0       	rjmp	.+160    	; 0x1640 <__vector_5+0x1f6>
	{
		OverFlows[Timer2] = RESET;
    15a0:	10 92 aa 00 	sts	0x00AA, r1
    15a4:	10 92 ab 00 	sts	0x00AB, r1
    15a8:	10 92 ac 00 	sts	0x00AC, r1
    15ac:	10 92 ad 00 	sts	0x00AD, r1
    15b0:	10 92 ae 00 	sts	0x00AE, r1
    15b4:	10 92 af 00 	sts	0x00AF, r1
    15b8:	10 92 b0 00 	sts	0x00B0, r1
    15bc:	10 92 b1 00 	sts	0x00B1, r1
		NotifierAction[Timer2]();
    15c0:	e0 91 b4 00 	lds	r30, 0x00B4
    15c4:	f0 91 b5 00 	lds	r31, 0x00B5
    15c8:	09 95       	icall
		if(Cycle[Timer2] == ON_Cycle)
    15ca:	80 91 79 00 	lds	r24, 0x0079
    15ce:	88 23       	and	r24, r24
    15d0:	d1 f4       	brne	.+52     	; 0x1606 <__vector_5+0x1bc>
		{
			Cycle[Timer2] = OFF_Cycle;
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	80 93 79 00 	sts	0x0079, r24
			TIMER0.Counter  = 256 - ((Duty[Timer2][OFF_Cycle] * 1000UL)%256 -1);
    15d8:	20 91 9a 00 	lds	r18, 0x009A
    15dc:	90 91 9b 00 	lds	r25, 0x009B
    15e0:	90 91 9c 00 	lds	r25, 0x009C
    15e4:	90 91 9d 00 	lds	r25, 0x009D
    15e8:	90 91 9e 00 	lds	r25, 0x009E
    15ec:	90 91 9f 00 	lds	r25, 0x009F
    15f0:	90 91 a0 00 	lds	r25, 0x00A0
    15f4:	90 91 a1 00 	lds	r25, 0x00A1
    15f8:	98 ee       	ldi	r25, 0xE8	; 232
    15fa:	29 9f       	mul	r18, r25
    15fc:	90 2d       	mov	r25, r0
    15fe:	11 24       	eor	r1, r1
    1600:	89 1b       	sub	r24, r25
    1602:	82 bf       	out	0x32, r24	; 50
    1604:	1d c0       	rjmp	.+58     	; 0x1640 <__vector_5+0x1f6>
		}
		else if(Cycle[Timer2] == OFF_Cycle)
    1606:	80 91 79 00 	lds	r24, 0x0079
    160a:	81 30       	cpi	r24, 0x01	; 1
    160c:	c9 f4       	brne	.+50     	; 0x1640 <__vector_5+0x1f6>
		{
			Cycle[Timer2] = ON_Cycle;
    160e:	10 92 79 00 	sts	0x0079, r1
			TIMER2.Counter  = 256 - ((Duty[Timer2][ON_Cycle] * 1000UL)%256 -1);
    1612:	90 91 92 00 	lds	r25, 0x0092
    1616:	80 91 93 00 	lds	r24, 0x0093
    161a:	80 91 94 00 	lds	r24, 0x0094
    161e:	80 91 95 00 	lds	r24, 0x0095
    1622:	80 91 96 00 	lds	r24, 0x0096
    1626:	80 91 97 00 	lds	r24, 0x0097
    162a:	80 91 98 00 	lds	r24, 0x0098
    162e:	80 91 99 00 	lds	r24, 0x0099
    1632:	88 ee       	ldi	r24, 0xE8	; 232
    1634:	98 9f       	mul	r25, r24
    1636:	90 2d       	mov	r25, r0
    1638:	11 24       	eor	r1, r1
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	89 1b       	sub	r24, r25
    163e:	84 bd       	out	0x24, r24	; 36
		}
	}
}
    1640:	ff 91       	pop	r31
    1642:	ef 91       	pop	r30
    1644:	df 91       	pop	r29
    1646:	cf 91       	pop	r28
    1648:	bf 91       	pop	r27
    164a:	af 91       	pop	r26
    164c:	9f 91       	pop	r25
    164e:	8f 91       	pop	r24
    1650:	7f 91       	pop	r23
    1652:	6f 91       	pop	r22
    1654:	5f 91       	pop	r21
    1656:	4f 91       	pop	r20
    1658:	3f 91       	pop	r19
    165a:	2f 91       	pop	r18
    165c:	1f 91       	pop	r17
    165e:	0f 91       	pop	r16
    1660:	ff 90       	pop	r15
    1662:	0f 90       	pop	r0
    1664:	0f be       	out	0x3f, r0	; 63
    1666:	0f 90       	pop	r0
    1668:	1f 90       	pop	r1
    166a:	18 95       	reti

0000166c <__vector_10>:
ISR(TIMER0_COMP_vect)
{
    166c:	1f 92       	push	r1
    166e:	0f 92       	push	r0
    1670:	0f b6       	in	r0, 0x3f	; 63
    1672:	0f 92       	push	r0
    1674:	11 24       	eor	r1, r1
    1676:	2f 93       	push	r18
    1678:	3f 93       	push	r19
    167a:	4f 93       	push	r20
    167c:	5f 93       	push	r21
    167e:	6f 93       	push	r22
    1680:	7f 93       	push	r23
    1682:	8f 93       	push	r24
    1684:	9f 93       	push	r25
    1686:	af 93       	push	r26
    1688:	bf 93       	push	r27
    168a:	ef 93       	push	r30
    168c:	ff 93       	push	r31
	TIMER0.Flags.Comp_Match = ENABLE;
    168e:	88 b7       	in	r24, 0x38	; 56
    1690:	82 60       	ori	r24, 0x02	; 2
    1692:	88 bf       	out	0x38, r24	; 56
	if(CounterAction != NULL)
    1694:	80 91 b6 00 	lds	r24, 0x00B6
    1698:	90 91 b7 00 	lds	r25, 0x00B7
    169c:	00 97       	sbiw	r24, 0x00	; 0
    169e:	41 f0       	breq	.+16     	; 0x16b0 <__vector_10+0x44>
	{
		CounterAction();
    16a0:	e0 91 b6 00 	lds	r30, 0x00B6
    16a4:	f0 91 b7 00 	lds	r31, 0x00B7
    16a8:	09 95       	icall
		Timer_ResetCounter(Timer0);
    16aa:	80 e0       	ldi	r24, 0x00	; 0
    16ac:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <Timer_ResetCounter>
	}
	PWMAction[Timer0]();
    16b0:	e0 91 7e 00 	lds	r30, 0x007E
    16b4:	f0 91 7f 00 	lds	r31, 0x007F
    16b8:	09 95       	icall
}
    16ba:	ff 91       	pop	r31
    16bc:	ef 91       	pop	r30
    16be:	bf 91       	pop	r27
    16c0:	af 91       	pop	r26
    16c2:	9f 91       	pop	r25
    16c4:	8f 91       	pop	r24
    16c6:	7f 91       	pop	r23
    16c8:	6f 91       	pop	r22
    16ca:	5f 91       	pop	r21
    16cc:	4f 91       	pop	r20
    16ce:	3f 91       	pop	r19
    16d0:	2f 91       	pop	r18
    16d2:	0f 90       	pop	r0
    16d4:	0f be       	out	0x3f, r0	; 63
    16d6:	0f 90       	pop	r0
    16d8:	1f 90       	pop	r1
    16da:	18 95       	reti

000016dc <__vector_4>:
ISR(TIMER2_COMP_vect)
{
    16dc:	1f 92       	push	r1
    16de:	0f 92       	push	r0
    16e0:	0f b6       	in	r0, 0x3f	; 63
    16e2:	0f 92       	push	r0
    16e4:	11 24       	eor	r1, r1
    16e6:	2f 93       	push	r18
    16e8:	3f 93       	push	r19
    16ea:	4f 93       	push	r20
    16ec:	5f 93       	push	r21
    16ee:	6f 93       	push	r22
    16f0:	7f 93       	push	r23
    16f2:	8f 93       	push	r24
    16f4:	9f 93       	push	r25
    16f6:	af 93       	push	r26
    16f8:	bf 93       	push	r27
    16fa:	ef 93       	push	r30
    16fc:	ff 93       	push	r31
	TIMER2.Flags.Comp_Match = ENABLE;
    16fe:	88 b7       	in	r24, 0x38	; 56
    1700:	80 68       	ori	r24, 0x80	; 128
    1702:	88 bf       	out	0x38, r24	; 56
	PWMAction[Timer2]();
    1704:	e0 91 80 00 	lds	r30, 0x0080
    1708:	f0 91 81 00 	lds	r31, 0x0081
    170c:	09 95       	icall
    170e:	ff 91       	pop	r31
    1710:	ef 91       	pop	r30
    1712:	bf 91       	pop	r27
    1714:	af 91       	pop	r26
    1716:	9f 91       	pop	r25
    1718:	8f 91       	pop	r24
    171a:	7f 91       	pop	r23
    171c:	6f 91       	pop	r22
    171e:	5f 91       	pop	r21
    1720:	4f 91       	pop	r20
    1722:	3f 91       	pop	r19
    1724:	2f 91       	pop	r18
    1726:	0f 90       	pop	r0
    1728:	0f be       	out	0x3f, r0	; 63
    172a:	0f 90       	pop	r0
    172c:	1f 90       	pop	r1
    172e:	18 95       	reti

00001730 <__ashldi3>:
    1730:	cf 92       	push	r12
    1732:	df 92       	push	r13
    1734:	ef 92       	push	r14
    1736:	ff 92       	push	r15
    1738:	0f 93       	push	r16
    173a:	cf 93       	push	r28
    173c:	df 93       	push	r29
    173e:	cd b7       	in	r28, 0x3d	; 61
    1740:	de b7       	in	r29, 0x3e	; 62
    1742:	60 97       	sbiw	r28, 0x10	; 16
    1744:	0f b6       	in	r0, 0x3f	; 63
    1746:	f8 94       	cli
    1748:	de bf       	out	0x3e, r29	; 62
    174a:	0f be       	out	0x3f, r0	; 63
    174c:	cd bf       	out	0x3d, r28	; 61
    174e:	00 23       	and	r16, r16
    1750:	09 f4       	brne	.+2      	; 0x1754 <__ashldi3+0x24>
    1752:	5a c0       	rjmp	.+180    	; 0x1808 <__ashldi3+0xd8>
    1754:	29 87       	std	Y+9, r18	; 0x09
    1756:	3a 87       	std	Y+10, r19	; 0x0a
    1758:	4b 87       	std	Y+11, r20	; 0x0b
    175a:	5c 87       	std	Y+12, r21	; 0x0c
    175c:	6d 87       	std	Y+13, r22	; 0x0d
    175e:	7e 87       	std	Y+14, r23	; 0x0e
    1760:	8f 87       	std	Y+15, r24	; 0x0f
    1762:	98 8b       	std	Y+16, r25	; 0x10
    1764:	80 e2       	ldi	r24, 0x20	; 32
    1766:	80 1b       	sub	r24, r16
    1768:	49 85       	ldd	r20, Y+9	; 0x09
    176a:	5a 85       	ldd	r21, Y+10	; 0x0a
    176c:	6b 85       	ldd	r22, Y+11	; 0x0b
    176e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1770:	18 16       	cp	r1, r24
    1772:	b4 f0       	brlt	.+44     	; 0x17a0 <__ashldi3+0x70>
    1774:	19 82       	std	Y+1, r1	; 0x01
    1776:	1a 82       	std	Y+2, r1	; 0x02
    1778:	1b 82       	std	Y+3, r1	; 0x03
    177a:	1c 82       	std	Y+4, r1	; 0x04
    177c:	99 27       	eor	r25, r25
    177e:	87 fd       	sbrc	r24, 7
    1780:	90 95       	com	r25
    1782:	90 95       	com	r25
    1784:	81 95       	neg	r24
    1786:	9f 4f       	sbci	r25, 0xFF	; 255
    1788:	04 c0       	rjmp	.+8      	; 0x1792 <__ashldi3+0x62>
    178a:	44 0f       	add	r20, r20
    178c:	55 1f       	adc	r21, r21
    178e:	66 1f       	adc	r22, r22
    1790:	77 1f       	adc	r23, r23
    1792:	8a 95       	dec	r24
    1794:	d2 f7       	brpl	.-12     	; 0x178a <__ashldi3+0x5a>
    1796:	4d 83       	std	Y+5, r20	; 0x05
    1798:	5e 83       	std	Y+6, r21	; 0x06
    179a:	6f 83       	std	Y+7, r22	; 0x07
    179c:	78 87       	std	Y+8, r23	; 0x08
    179e:	2c c0       	rjmp	.+88     	; 0x17f8 <__ashldi3+0xc8>
    17a0:	6a 01       	movw	r12, r20
    17a2:	7b 01       	movw	r14, r22
    17a4:	00 2e       	mov	r0, r16
    17a6:	04 c0       	rjmp	.+8      	; 0x17b0 <__ashldi3+0x80>
    17a8:	cc 0c       	add	r12, r12
    17aa:	dd 1c       	adc	r13, r13
    17ac:	ee 1c       	adc	r14, r14
    17ae:	ff 1c       	adc	r15, r15
    17b0:	0a 94       	dec	r0
    17b2:	d2 f7       	brpl	.-12     	; 0x17a8 <__ashldi3+0x78>
    17b4:	c9 82       	std	Y+1, r12	; 0x01
    17b6:	da 82       	std	Y+2, r13	; 0x02
    17b8:	eb 82       	std	Y+3, r14	; 0x03
    17ba:	fc 82       	std	Y+4, r15	; 0x04
    17bc:	6a 01       	movw	r12, r20
    17be:	7b 01       	movw	r14, r22
    17c0:	04 c0       	rjmp	.+8      	; 0x17ca <__ashldi3+0x9a>
    17c2:	f6 94       	lsr	r15
    17c4:	e7 94       	ror	r14
    17c6:	d7 94       	ror	r13
    17c8:	c7 94       	ror	r12
    17ca:	8a 95       	dec	r24
    17cc:	d2 f7       	brpl	.-12     	; 0x17c2 <__ashldi3+0x92>
    17ce:	d7 01       	movw	r26, r14
    17d0:	c6 01       	movw	r24, r12
    17d2:	4d 85       	ldd	r20, Y+13	; 0x0d
    17d4:	5e 85       	ldd	r21, Y+14	; 0x0e
    17d6:	6f 85       	ldd	r22, Y+15	; 0x0f
    17d8:	78 89       	ldd	r23, Y+16	; 0x10
    17da:	04 c0       	rjmp	.+8      	; 0x17e4 <__ashldi3+0xb4>
    17dc:	44 0f       	add	r20, r20
    17de:	55 1f       	adc	r21, r21
    17e0:	66 1f       	adc	r22, r22
    17e2:	77 1f       	adc	r23, r23
    17e4:	0a 95       	dec	r16
    17e6:	d2 f7       	brpl	.-12     	; 0x17dc <__ashldi3+0xac>
    17e8:	84 2b       	or	r24, r20
    17ea:	95 2b       	or	r25, r21
    17ec:	a6 2b       	or	r26, r22
    17ee:	b7 2b       	or	r27, r23
    17f0:	8d 83       	std	Y+5, r24	; 0x05
    17f2:	9e 83       	std	Y+6, r25	; 0x06
    17f4:	af 83       	std	Y+7, r26	; 0x07
    17f6:	b8 87       	std	Y+8, r27	; 0x08
    17f8:	29 81       	ldd	r18, Y+1	; 0x01
    17fa:	3a 81       	ldd	r19, Y+2	; 0x02
    17fc:	4b 81       	ldd	r20, Y+3	; 0x03
    17fe:	5c 81       	ldd	r21, Y+4	; 0x04
    1800:	6d 81       	ldd	r22, Y+5	; 0x05
    1802:	7e 81       	ldd	r23, Y+6	; 0x06
    1804:	8f 81       	ldd	r24, Y+7	; 0x07
    1806:	98 85       	ldd	r25, Y+8	; 0x08
    1808:	60 96       	adiw	r28, 0x10	; 16
    180a:	0f b6       	in	r0, 0x3f	; 63
    180c:	f8 94       	cli
    180e:	de bf       	out	0x3e, r29	; 62
    1810:	0f be       	out	0x3f, r0	; 63
    1812:	cd bf       	out	0x3d, r28	; 61
    1814:	df 91       	pop	r29
    1816:	cf 91       	pop	r28
    1818:	0f 91       	pop	r16
    181a:	ff 90       	pop	r15
    181c:	ef 90       	pop	r14
    181e:	df 90       	pop	r13
    1820:	cf 90       	pop	r12
    1822:	08 95       	ret

00001824 <__divsf3>:
    1824:	0c d0       	rcall	.+24     	; 0x183e <__divsf3x>
    1826:	e6 c0       	rjmp	.+460    	; 0x19f4 <__fp_round>
    1828:	de d0       	rcall	.+444    	; 0x19e6 <__fp_pscB>
    182a:	40 f0       	brcs	.+16     	; 0x183c <__divsf3+0x18>
    182c:	d5 d0       	rcall	.+426    	; 0x19d8 <__fp_pscA>
    182e:	30 f0       	brcs	.+12     	; 0x183c <__divsf3+0x18>
    1830:	21 f4       	brne	.+8      	; 0x183a <__divsf3+0x16>
    1832:	5f 3f       	cpi	r21, 0xFF	; 255
    1834:	19 f0       	breq	.+6      	; 0x183c <__divsf3+0x18>
    1836:	c7 c0       	rjmp	.+398    	; 0x19c6 <__fp_inf>
    1838:	51 11       	cpse	r21, r1
    183a:	10 c1       	rjmp	.+544    	; 0x1a5c <__fp_szero>
    183c:	ca c0       	rjmp	.+404    	; 0x19d2 <__fp_nan>

0000183e <__divsf3x>:
    183e:	eb d0       	rcall	.+470    	; 0x1a16 <__fp_split3>
    1840:	98 f3       	brcs	.-26     	; 0x1828 <__divsf3+0x4>

00001842 <__divsf3_pse>:
    1842:	99 23       	and	r25, r25
    1844:	c9 f3       	breq	.-14     	; 0x1838 <__divsf3+0x14>
    1846:	55 23       	and	r21, r21
    1848:	b1 f3       	breq	.-20     	; 0x1836 <__divsf3+0x12>
    184a:	95 1b       	sub	r25, r21
    184c:	55 0b       	sbc	r21, r21
    184e:	bb 27       	eor	r27, r27
    1850:	aa 27       	eor	r26, r26
    1852:	62 17       	cp	r22, r18
    1854:	73 07       	cpc	r23, r19
    1856:	84 07       	cpc	r24, r20
    1858:	38 f0       	brcs	.+14     	; 0x1868 <__divsf3_pse+0x26>
    185a:	9f 5f       	subi	r25, 0xFF	; 255
    185c:	5f 4f       	sbci	r21, 0xFF	; 255
    185e:	22 0f       	add	r18, r18
    1860:	33 1f       	adc	r19, r19
    1862:	44 1f       	adc	r20, r20
    1864:	aa 1f       	adc	r26, r26
    1866:	a9 f3       	breq	.-22     	; 0x1852 <__divsf3_pse+0x10>
    1868:	33 d0       	rcall	.+102    	; 0x18d0 <__divsf3_pse+0x8e>
    186a:	0e 2e       	mov	r0, r30
    186c:	3a f0       	brmi	.+14     	; 0x187c <__divsf3_pse+0x3a>
    186e:	e0 e8       	ldi	r30, 0x80	; 128
    1870:	30 d0       	rcall	.+96     	; 0x18d2 <__divsf3_pse+0x90>
    1872:	91 50       	subi	r25, 0x01	; 1
    1874:	50 40       	sbci	r21, 0x00	; 0
    1876:	e6 95       	lsr	r30
    1878:	00 1c       	adc	r0, r0
    187a:	ca f7       	brpl	.-14     	; 0x186e <__divsf3_pse+0x2c>
    187c:	29 d0       	rcall	.+82     	; 0x18d0 <__divsf3_pse+0x8e>
    187e:	fe 2f       	mov	r31, r30
    1880:	27 d0       	rcall	.+78     	; 0x18d0 <__divsf3_pse+0x8e>
    1882:	66 0f       	add	r22, r22
    1884:	77 1f       	adc	r23, r23
    1886:	88 1f       	adc	r24, r24
    1888:	bb 1f       	adc	r27, r27
    188a:	26 17       	cp	r18, r22
    188c:	37 07       	cpc	r19, r23
    188e:	48 07       	cpc	r20, r24
    1890:	ab 07       	cpc	r26, r27
    1892:	b0 e8       	ldi	r27, 0x80	; 128
    1894:	09 f0       	breq	.+2      	; 0x1898 <__divsf3_pse+0x56>
    1896:	bb 0b       	sbc	r27, r27
    1898:	80 2d       	mov	r24, r0
    189a:	bf 01       	movw	r22, r30
    189c:	ff 27       	eor	r31, r31
    189e:	93 58       	subi	r25, 0x83	; 131
    18a0:	5f 4f       	sbci	r21, 0xFF	; 255
    18a2:	2a f0       	brmi	.+10     	; 0x18ae <__divsf3_pse+0x6c>
    18a4:	9e 3f       	cpi	r25, 0xFE	; 254
    18a6:	51 05       	cpc	r21, r1
    18a8:	68 f0       	brcs	.+26     	; 0x18c4 <__divsf3_pse+0x82>
    18aa:	8d c0       	rjmp	.+282    	; 0x19c6 <__fp_inf>
    18ac:	d7 c0       	rjmp	.+430    	; 0x1a5c <__fp_szero>
    18ae:	5f 3f       	cpi	r21, 0xFF	; 255
    18b0:	ec f3       	brlt	.-6      	; 0x18ac <__divsf3_pse+0x6a>
    18b2:	98 3e       	cpi	r25, 0xE8	; 232
    18b4:	dc f3       	brlt	.-10     	; 0x18ac <__divsf3_pse+0x6a>
    18b6:	86 95       	lsr	r24
    18b8:	77 95       	ror	r23
    18ba:	67 95       	ror	r22
    18bc:	b7 95       	ror	r27
    18be:	f7 95       	ror	r31
    18c0:	9f 5f       	subi	r25, 0xFF	; 255
    18c2:	c9 f7       	brne	.-14     	; 0x18b6 <__divsf3_pse+0x74>
    18c4:	88 0f       	add	r24, r24
    18c6:	91 1d       	adc	r25, r1
    18c8:	96 95       	lsr	r25
    18ca:	87 95       	ror	r24
    18cc:	97 f9       	bld	r25, 7
    18ce:	08 95       	ret
    18d0:	e1 e0       	ldi	r30, 0x01	; 1
    18d2:	66 0f       	add	r22, r22
    18d4:	77 1f       	adc	r23, r23
    18d6:	88 1f       	adc	r24, r24
    18d8:	bb 1f       	adc	r27, r27
    18da:	62 17       	cp	r22, r18
    18dc:	73 07       	cpc	r23, r19
    18de:	84 07       	cpc	r24, r20
    18e0:	ba 07       	cpc	r27, r26
    18e2:	20 f0       	brcs	.+8      	; 0x18ec <__divsf3_pse+0xaa>
    18e4:	62 1b       	sub	r22, r18
    18e6:	73 0b       	sbc	r23, r19
    18e8:	84 0b       	sbc	r24, r20
    18ea:	ba 0b       	sbc	r27, r26
    18ec:	ee 1f       	adc	r30, r30
    18ee:	88 f7       	brcc	.-30     	; 0x18d2 <__divsf3_pse+0x90>
    18f0:	e0 95       	com	r30
    18f2:	08 95       	ret

000018f4 <__fixunssfsi>:
    18f4:	98 d0       	rcall	.+304    	; 0x1a26 <__fp_splitA>
    18f6:	88 f0       	brcs	.+34     	; 0x191a <__fixunssfsi+0x26>
    18f8:	9f 57       	subi	r25, 0x7F	; 127
    18fa:	90 f0       	brcs	.+36     	; 0x1920 <__fixunssfsi+0x2c>
    18fc:	b9 2f       	mov	r27, r25
    18fe:	99 27       	eor	r25, r25
    1900:	b7 51       	subi	r27, 0x17	; 23
    1902:	a0 f0       	brcs	.+40     	; 0x192c <__fixunssfsi+0x38>
    1904:	d1 f0       	breq	.+52     	; 0x193a <__fixunssfsi+0x46>
    1906:	66 0f       	add	r22, r22
    1908:	77 1f       	adc	r23, r23
    190a:	88 1f       	adc	r24, r24
    190c:	99 1f       	adc	r25, r25
    190e:	1a f0       	brmi	.+6      	; 0x1916 <__fixunssfsi+0x22>
    1910:	ba 95       	dec	r27
    1912:	c9 f7       	brne	.-14     	; 0x1906 <__fixunssfsi+0x12>
    1914:	12 c0       	rjmp	.+36     	; 0x193a <__fixunssfsi+0x46>
    1916:	b1 30       	cpi	r27, 0x01	; 1
    1918:	81 f0       	breq	.+32     	; 0x193a <__fixunssfsi+0x46>
    191a:	9f d0       	rcall	.+318    	; 0x1a5a <__fp_zero>
    191c:	b1 e0       	ldi	r27, 0x01	; 1
    191e:	08 95       	ret
    1920:	9c c0       	rjmp	.+312    	; 0x1a5a <__fp_zero>
    1922:	67 2f       	mov	r22, r23
    1924:	78 2f       	mov	r23, r24
    1926:	88 27       	eor	r24, r24
    1928:	b8 5f       	subi	r27, 0xF8	; 248
    192a:	39 f0       	breq	.+14     	; 0x193a <__fixunssfsi+0x46>
    192c:	b9 3f       	cpi	r27, 0xF9	; 249
    192e:	cc f3       	brlt	.-14     	; 0x1922 <__fixunssfsi+0x2e>
    1930:	86 95       	lsr	r24
    1932:	77 95       	ror	r23
    1934:	67 95       	ror	r22
    1936:	b3 95       	inc	r27
    1938:	d9 f7       	brne	.-10     	; 0x1930 <__fixunssfsi+0x3c>
    193a:	3e f4       	brtc	.+14     	; 0x194a <__fixunssfsi+0x56>
    193c:	90 95       	com	r25
    193e:	80 95       	com	r24
    1940:	70 95       	com	r23
    1942:	61 95       	neg	r22
    1944:	7f 4f       	sbci	r23, 0xFF	; 255
    1946:	8f 4f       	sbci	r24, 0xFF	; 255
    1948:	9f 4f       	sbci	r25, 0xFF	; 255
    194a:	08 95       	ret

0000194c <__floatunsisf>:
    194c:	e8 94       	clt
    194e:	09 c0       	rjmp	.+18     	; 0x1962 <__floatsisf+0x12>

00001950 <__floatsisf>:
    1950:	97 fb       	bst	r25, 7
    1952:	3e f4       	brtc	.+14     	; 0x1962 <__floatsisf+0x12>
    1954:	90 95       	com	r25
    1956:	80 95       	com	r24
    1958:	70 95       	com	r23
    195a:	61 95       	neg	r22
    195c:	7f 4f       	sbci	r23, 0xFF	; 255
    195e:	8f 4f       	sbci	r24, 0xFF	; 255
    1960:	9f 4f       	sbci	r25, 0xFF	; 255
    1962:	99 23       	and	r25, r25
    1964:	a9 f0       	breq	.+42     	; 0x1990 <__floatsisf+0x40>
    1966:	f9 2f       	mov	r31, r25
    1968:	96 e9       	ldi	r25, 0x96	; 150
    196a:	bb 27       	eor	r27, r27
    196c:	93 95       	inc	r25
    196e:	f6 95       	lsr	r31
    1970:	87 95       	ror	r24
    1972:	77 95       	ror	r23
    1974:	67 95       	ror	r22
    1976:	b7 95       	ror	r27
    1978:	f1 11       	cpse	r31, r1
    197a:	f8 cf       	rjmp	.-16     	; 0x196c <__floatsisf+0x1c>
    197c:	fa f4       	brpl	.+62     	; 0x19bc <__floatsisf+0x6c>
    197e:	bb 0f       	add	r27, r27
    1980:	11 f4       	brne	.+4      	; 0x1986 <__floatsisf+0x36>
    1982:	60 ff       	sbrs	r22, 0
    1984:	1b c0       	rjmp	.+54     	; 0x19bc <__floatsisf+0x6c>
    1986:	6f 5f       	subi	r22, 0xFF	; 255
    1988:	7f 4f       	sbci	r23, 0xFF	; 255
    198a:	8f 4f       	sbci	r24, 0xFF	; 255
    198c:	9f 4f       	sbci	r25, 0xFF	; 255
    198e:	16 c0       	rjmp	.+44     	; 0x19bc <__floatsisf+0x6c>
    1990:	88 23       	and	r24, r24
    1992:	11 f0       	breq	.+4      	; 0x1998 <__floatsisf+0x48>
    1994:	96 e9       	ldi	r25, 0x96	; 150
    1996:	11 c0       	rjmp	.+34     	; 0x19ba <__floatsisf+0x6a>
    1998:	77 23       	and	r23, r23
    199a:	21 f0       	breq	.+8      	; 0x19a4 <__floatsisf+0x54>
    199c:	9e e8       	ldi	r25, 0x8E	; 142
    199e:	87 2f       	mov	r24, r23
    19a0:	76 2f       	mov	r23, r22
    19a2:	05 c0       	rjmp	.+10     	; 0x19ae <__floatsisf+0x5e>
    19a4:	66 23       	and	r22, r22
    19a6:	71 f0       	breq	.+28     	; 0x19c4 <__floatsisf+0x74>
    19a8:	96 e8       	ldi	r25, 0x86	; 134
    19aa:	86 2f       	mov	r24, r22
    19ac:	70 e0       	ldi	r23, 0x00	; 0
    19ae:	60 e0       	ldi	r22, 0x00	; 0
    19b0:	2a f0       	brmi	.+10     	; 0x19bc <__floatsisf+0x6c>
    19b2:	9a 95       	dec	r25
    19b4:	66 0f       	add	r22, r22
    19b6:	77 1f       	adc	r23, r23
    19b8:	88 1f       	adc	r24, r24
    19ba:	da f7       	brpl	.-10     	; 0x19b2 <__floatsisf+0x62>
    19bc:	88 0f       	add	r24, r24
    19be:	96 95       	lsr	r25
    19c0:	87 95       	ror	r24
    19c2:	97 f9       	bld	r25, 7
    19c4:	08 95       	ret

000019c6 <__fp_inf>:
    19c6:	97 f9       	bld	r25, 7
    19c8:	9f 67       	ori	r25, 0x7F	; 127
    19ca:	80 e8       	ldi	r24, 0x80	; 128
    19cc:	70 e0       	ldi	r23, 0x00	; 0
    19ce:	60 e0       	ldi	r22, 0x00	; 0
    19d0:	08 95       	ret

000019d2 <__fp_nan>:
    19d2:	9f ef       	ldi	r25, 0xFF	; 255
    19d4:	80 ec       	ldi	r24, 0xC0	; 192
    19d6:	08 95       	ret

000019d8 <__fp_pscA>:
    19d8:	00 24       	eor	r0, r0
    19da:	0a 94       	dec	r0
    19dc:	16 16       	cp	r1, r22
    19de:	17 06       	cpc	r1, r23
    19e0:	18 06       	cpc	r1, r24
    19e2:	09 06       	cpc	r0, r25
    19e4:	08 95       	ret

000019e6 <__fp_pscB>:
    19e6:	00 24       	eor	r0, r0
    19e8:	0a 94       	dec	r0
    19ea:	12 16       	cp	r1, r18
    19ec:	13 06       	cpc	r1, r19
    19ee:	14 06       	cpc	r1, r20
    19f0:	05 06       	cpc	r0, r21
    19f2:	08 95       	ret

000019f4 <__fp_round>:
    19f4:	09 2e       	mov	r0, r25
    19f6:	03 94       	inc	r0
    19f8:	00 0c       	add	r0, r0
    19fa:	11 f4       	brne	.+4      	; 0x1a00 <__fp_round+0xc>
    19fc:	88 23       	and	r24, r24
    19fe:	52 f0       	brmi	.+20     	; 0x1a14 <__fp_round+0x20>
    1a00:	bb 0f       	add	r27, r27
    1a02:	40 f4       	brcc	.+16     	; 0x1a14 <__fp_round+0x20>
    1a04:	bf 2b       	or	r27, r31
    1a06:	11 f4       	brne	.+4      	; 0x1a0c <__fp_round+0x18>
    1a08:	60 ff       	sbrs	r22, 0
    1a0a:	04 c0       	rjmp	.+8      	; 0x1a14 <__fp_round+0x20>
    1a0c:	6f 5f       	subi	r22, 0xFF	; 255
    1a0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a10:	8f 4f       	sbci	r24, 0xFF	; 255
    1a12:	9f 4f       	sbci	r25, 0xFF	; 255
    1a14:	08 95       	ret

00001a16 <__fp_split3>:
    1a16:	57 fd       	sbrc	r21, 7
    1a18:	90 58       	subi	r25, 0x80	; 128
    1a1a:	44 0f       	add	r20, r20
    1a1c:	55 1f       	adc	r21, r21
    1a1e:	59 f0       	breq	.+22     	; 0x1a36 <__fp_splitA+0x10>
    1a20:	5f 3f       	cpi	r21, 0xFF	; 255
    1a22:	71 f0       	breq	.+28     	; 0x1a40 <__fp_splitA+0x1a>
    1a24:	47 95       	ror	r20

00001a26 <__fp_splitA>:
    1a26:	88 0f       	add	r24, r24
    1a28:	97 fb       	bst	r25, 7
    1a2a:	99 1f       	adc	r25, r25
    1a2c:	61 f0       	breq	.+24     	; 0x1a46 <__fp_splitA+0x20>
    1a2e:	9f 3f       	cpi	r25, 0xFF	; 255
    1a30:	79 f0       	breq	.+30     	; 0x1a50 <__fp_splitA+0x2a>
    1a32:	87 95       	ror	r24
    1a34:	08 95       	ret
    1a36:	12 16       	cp	r1, r18
    1a38:	13 06       	cpc	r1, r19
    1a3a:	14 06       	cpc	r1, r20
    1a3c:	55 1f       	adc	r21, r21
    1a3e:	f2 cf       	rjmp	.-28     	; 0x1a24 <__fp_split3+0xe>
    1a40:	46 95       	lsr	r20
    1a42:	f1 df       	rcall	.-30     	; 0x1a26 <__fp_splitA>
    1a44:	08 c0       	rjmp	.+16     	; 0x1a56 <__fp_splitA+0x30>
    1a46:	16 16       	cp	r1, r22
    1a48:	17 06       	cpc	r1, r23
    1a4a:	18 06       	cpc	r1, r24
    1a4c:	99 1f       	adc	r25, r25
    1a4e:	f1 cf       	rjmp	.-30     	; 0x1a32 <__fp_splitA+0xc>
    1a50:	86 95       	lsr	r24
    1a52:	71 05       	cpc	r23, r1
    1a54:	61 05       	cpc	r22, r1
    1a56:	08 94       	sec
    1a58:	08 95       	ret

00001a5a <__fp_zero>:
    1a5a:	e8 94       	clt

00001a5c <__fp_szero>:
    1a5c:	bb 27       	eor	r27, r27
    1a5e:	66 27       	eor	r22, r22
    1a60:	77 27       	eor	r23, r23
    1a62:	cb 01       	movw	r24, r22
    1a64:	97 f9       	bld	r25, 7
    1a66:	08 95       	ret

00001a68 <__mulsi3>:
    1a68:	62 9f       	mul	r22, r18
    1a6a:	d0 01       	movw	r26, r0
    1a6c:	73 9f       	mul	r23, r19
    1a6e:	f0 01       	movw	r30, r0
    1a70:	82 9f       	mul	r24, r18
    1a72:	e0 0d       	add	r30, r0
    1a74:	f1 1d       	adc	r31, r1
    1a76:	64 9f       	mul	r22, r20
    1a78:	e0 0d       	add	r30, r0
    1a7a:	f1 1d       	adc	r31, r1
    1a7c:	92 9f       	mul	r25, r18
    1a7e:	f0 0d       	add	r31, r0
    1a80:	83 9f       	mul	r24, r19
    1a82:	f0 0d       	add	r31, r0
    1a84:	74 9f       	mul	r23, r20
    1a86:	f0 0d       	add	r31, r0
    1a88:	65 9f       	mul	r22, r21
    1a8a:	f0 0d       	add	r31, r0
    1a8c:	99 27       	eor	r25, r25
    1a8e:	72 9f       	mul	r23, r18
    1a90:	b0 0d       	add	r27, r0
    1a92:	e1 1d       	adc	r30, r1
    1a94:	f9 1f       	adc	r31, r25
    1a96:	63 9f       	mul	r22, r19
    1a98:	b0 0d       	add	r27, r0
    1a9a:	e1 1d       	adc	r30, r1
    1a9c:	f9 1f       	adc	r31, r25
    1a9e:	bd 01       	movw	r22, r26
    1aa0:	cf 01       	movw	r24, r30
    1aa2:	11 24       	eor	r1, r1
    1aa4:	08 95       	ret

00001aa6 <_exit>:
    1aa6:	f8 94       	cli

00001aa8 <__stop_program>:
    1aa8:	ff cf       	rjmp	.-2      	; 0x1aa8 <__stop_program>
