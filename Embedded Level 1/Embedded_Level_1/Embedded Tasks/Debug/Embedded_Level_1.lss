
Embedded_Level_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001952  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00001952  000019e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003c  00800074  00800074  000019fa  2**0
                  ALLOC
  3 .stab         000016b0  00000000  00000000  000019fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000004c0  00000000  00000000  000030ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00003570  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002aad  00000000  00000000  00003730  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a66  00000000  00000000  000061dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001000  00000000  00000000  00006c43  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000067c  00000000  00000000  00007c44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001145  00000000  00000000  000082c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015f0  00000000  00000000  00009405  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 c2 0a 	jmp	0x1584	; 0x1584 <__vector_4>
      14:	0c 94 79 09 	jmp	0x12f2	; 0x12f2 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 8a 0a 	jmp	0x1514	; 0x1514 <__vector_10>
      2c:	0c 94 68 08 	jmp	0x10d0	; 0x10d0 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e5       	ldi	r30, 0x52	; 82
      68:	f9 e1       	ldi	r31, 0x19	; 25
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3b       	cpi	r26, 0xB0	; 176
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 82 01 	call	0x304	; 0x304 <main>
      8a:	0c 94 a7 0c 	jmp	0x194e	; 0x194e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Task_1>:
#include "LED.h"
#include "Timer.h"
#include "avr/interrupt.h"

void Task_1(void)
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	0f 92       	push	r0
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62
	BTN_State_t BTNState = BTN_NotPressed;
      9c:	19 82       	std	Y+1, r1	; 0x01
	BUTTON_init(Button1);
      9e:	81 e0       	ldi	r24, 0x01	; 1
      a0:	0e 94 9f 00 	call	0x13e	; 0x13e <BUTTON_init>
	LED_init(LED_2);
      a4:	82 e0       	ldi	r24, 0x02	; 2
      a6:	0e 94 30 01 	call	0x260	; 0x260 <LED_init>
	sei();
      aa:	78 94       	sei
	while(1)
	{
		BUTTON_IsPressed(Button1, &BTNState);
      ac:	81 e0       	ldi	r24, 0x01	; 1
      ae:	be 01       	movw	r22, r28
      b0:	6f 5f       	subi	r22, 0xFF	; 255
      b2:	7f 4f       	sbci	r23, 0xFF	; 255
      b4:	0e 94 cc 00 	call	0x198	; 0x198 <BUTTON_IsPressed>
		if(BTNState == BTN_IS_Pressed)
      b8:	89 81       	ldd	r24, Y+1	; 0x01
      ba:	81 30       	cpi	r24, 0x01	; 1
      bc:	b9 f7       	brne	.-18     	; 0xac <Task_1+0x1a>
		{
			LED_Toggle(LED_2);
      be:	82 e0       	ldi	r24, 0x02	; 2
      c0:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LED_Toggle>
			Timer_Delay_MS(Timer0, 300);
      c4:	80 e0       	ldi	r24, 0x00	; 0
      c6:	4c e2       	ldi	r20, 0x2C	; 44
      c8:	51 e0       	ldi	r21, 0x01	; 1
      ca:	60 e0       	ldi	r22, 0x00	; 0
      cc:	70 e0       	ldi	r23, 0x00	; 0
      ce:	0e 94 6e 04 	call	0x8dc	; 0x8dc <Timer_Delay_MS>
      d2:	ec cf       	rjmp	.-40     	; 0xac <Task_1+0x1a>

000000d4 <Task_2>:
#include "Timer.h"
#include "avr/interrupt.h"

void Task_2(void)
{
	LED_init(LED_1);
      d4:	81 e0       	ldi	r24, 0x01	; 1
      d6:	0e 94 30 01 	call	0x260	; 0x260 <LED_init>
	sei();
      da:	78 94       	sei
	while(1)
	{
		LED_Toggle(LED_1);
      dc:	81 e0       	ldi	r24, 0x01	; 1
      de:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LED_Toggle>
		Timer_Delay_MS(Timer0, 500);
      e2:	80 e0       	ldi	r24, 0x00	; 0
      e4:	44 ef       	ldi	r20, 0xF4	; 244
      e6:	51 e0       	ldi	r21, 0x01	; 1
      e8:	60 e0       	ldi	r22, 0x00	; 0
      ea:	70 e0       	ldi	r23, 0x00	; 0
      ec:	0e 94 6e 04 	call	0x8dc	; 0x8dc <Timer_Delay_MS>
		LED_Toggle(LED_1);
      f0:	81 e0       	ldi	r24, 0x01	; 1
      f2:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LED_Toggle>
		Timer_Delay_MS(Timer0, 300);
      f6:	80 e0       	ldi	r24, 0x00	; 0
      f8:	4c e2       	ldi	r20, 0x2C	; 44
      fa:	51 e0       	ldi	r21, 0x01	; 1
      fc:	60 e0       	ldi	r22, 0x00	; 0
      fe:	70 e0       	ldi	r23, 0x00	; 0
     100:	0e 94 6e 04 	call	0x8dc	; 0x8dc <Timer_Delay_MS>
     104:	eb cf       	rjmp	.-42     	; 0xdc <Task_2+0x8>

00000106 <Toggle_Led>:
	while(1);	
}

void Toggle_Led(void)
{
	LED_Toggle(LED_0);
     106:	80 e0       	ldi	r24, 0x00	; 0
     108:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LED_Toggle>
     10c:	08 95       	ret

0000010e <Task_3>:

void Toggle_Led(void);

void Task_3(void)
{
	LED_init(LED_0);
     10e:	80 e0       	ldi	r24, 0x00	; 0
     110:	0e 94 30 01 	call	0x260	; 0x260 <LED_init>
	Timer_SetTrigger(Timer0, Toggle_Led, 500, 300);
     114:	80 e0       	ldi	r24, 0x00	; 0
     116:	63 e8       	ldi	r22, 0x83	; 131
     118:	70 e0       	ldi	r23, 0x00	; 0
     11a:	24 ef       	ldi	r18, 0xF4	; 244
     11c:	31 e0       	ldi	r19, 0x01	; 1
     11e:	40 e0       	ldi	r20, 0x00	; 0
     120:	50 e0       	ldi	r21, 0x00	; 0
     122:	0f 2e       	mov	r0, r31
     124:	fc e2       	ldi	r31, 0x2C	; 44
     126:	ef 2e       	mov	r14, r31
     128:	f1 e0       	ldi	r31, 0x01	; 1
     12a:	ff 2e       	mov	r15, r31
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	0f 2f       	mov	r16, r31
     130:	f0 e0       	ldi	r31, 0x00	; 0
     132:	1f 2f       	mov	r17, r31
     134:	f0 2d       	mov	r31, r0
     136:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <Timer_SetTrigger>
	sei();
     13a:	78 94       	sei
     13c:	ff cf       	rjmp	.-2      	; 0x13c <Task_3+0x2e>

0000013e <BUTTON_init>:

_E BTN_Configuration_t  BTN_Configuration  [Btn_End];


ButtonError_t            BUTTON_init       (Button_t BTN_Num)
{
     13e:	ef 92       	push	r14
     140:	ff 92       	push	r15
     142:	0f 93       	push	r16
     144:	1f 93       	push	r17
     146:	cf 93       	push	r28
	ButtonError_t return_value = BTN_EN_valid_init;
	DioError_t    Dio_returnValue = DIO_EN_valid_inti;
	if((BTN_Num >= Btn_Start) && (BTN_Num < Btn_End))
     148:	82 30       	cpi	r24, 0x02	; 2
     14a:	f8 f4       	brcc	.+62     	; 0x18a <BUTTON_init+0x4c>
	{
		/* 1. set the direction as input */
		Dio_returnValue	|= Dio_ChannelMode (BTN_Configuration[BTN_Num].Channel, DIO_EN_M_Input);
     14c:	e8 2e       	mov	r14, r24
     14e:	ff 24       	eor	r15, r15
     150:	87 01       	movw	r16, r14
     152:	00 0f       	add	r16, r16
     154:	11 1f       	adc	r17, r17
     156:	f8 01       	movw	r30, r16
     158:	e0 5a       	subi	r30, 0xA0	; 160
     15a:	ff 4f       	sbci	r31, 0xFF	; 255
     15c:	80 81       	ld	r24, Z
     15e:	60 e0       	ldi	r22, 0x00	; 0
     160:	0e 94 b2 01 	call	0x364	; 0x364 <Dio_ChannelMode>
     164:	c8 2f       	mov	r28, r24
		/* 2. set pull-up resistor */
		if(BTN_Configuration[BTN_Num].Resistor == BTN_EN_Pull_Up)
     166:	f8 01       	movw	r30, r16
     168:	ef 59       	subi	r30, 0x9F	; 159
     16a:	ff 4f       	sbci	r31, 0xFF	; 255
     16c:	80 81       	ld	r24, Z
     16e:	81 30       	cpi	r24, 0x01	; 1
     170:	39 f4       	brne	.+14     	; 0x180 <BUTTON_init+0x42>
		{
			Dio_returnValue	|= Dio_ChannelPullUp (BTN_Configuration[BTN_Num].Channel);
     172:	f8 01       	movw	r30, r16
     174:	e0 5a       	subi	r30, 0xA0	; 160
     176:	ff 4f       	sbci	r31, 0xFF	; 255
     178:	80 81       	ld	r24, Z
     17a:	0e 94 87 01 	call	0x30e	; 0x30e <Dio_ChannelPullUp>
     17e:	c8 2b       	or	r28, r24
		}
		else{ /* MISRA C */ }
			
		if(Dio_returnValue != DIO_EN_valid_inti)
		{
			return_value = BTN_EN_invalidNum;
     180:	81 e0       	ldi	r24, 0x01	; 1
     182:	cc 23       	and	r28, r28
     184:	19 f4       	brne	.+6      	; 0x18c <BUTTON_init+0x4e>
     186:	80 e0       	ldi	r24, 0x00	; 0
     188:	01 c0       	rjmp	.+2      	; 0x18c <BUTTON_init+0x4e>
		}
		else{ /* MISRA C */ }
	}
	else
	{
		return_value = BTN_EN_invalidNum;
     18a:	81 e0       	ldi	r24, 0x01	; 1
	}
	return return_value;
}
     18c:	cf 91       	pop	r28
     18e:	1f 91       	pop	r17
     190:	0f 91       	pop	r16
     192:	ff 90       	pop	r15
     194:	ef 90       	pop	r14
     196:	08 95       	ret

00000198 <BUTTON_IsPressed>:



ButtonError_t            BUTTON_IsPressed       (Button_t BTN_Num, BTN_State_t * State)
{
     198:	cf 92       	push	r12
     19a:	df 92       	push	r13
     19c:	ef 92       	push	r14
     19e:	ff 92       	push	r15
     1a0:	0f 93       	push	r16
     1a2:	1f 93       	push	r17
     1a4:	cf 93       	push	r28
     1a6:	df 93       	push	r29
     1a8:	00 d0       	rcall	.+0      	; 0x1aa <BUTTON_IsPressed+0x12>
     1aa:	cd b7       	in	r28, 0x3d	; 61
     1ac:	de b7       	in	r29, 0x3e	; 62
     1ae:	7b 01       	movw	r14, r22
	ButtonError_t return_value = BTN_EN_valid_init;
	BTN_State_t   PrevState; 
	BTN_State_t   CurrentState; 
	if((BTN_Num >= Btn_Start) && (BTN_Num < Btn_End))
     1b0:	82 30       	cpi	r24, 0x02	; 2
     1b2:	08 f0       	brcs	.+2      	; 0x1b6 <BUTTON_IsPressed+0x1e>
     1b4:	47 c0       	rjmp	.+142    	; 0x244 <BUTTON_IsPressed+0xac>
	{
		if(State != NULL)
     1b6:	61 15       	cp	r22, r1
     1b8:	71 05       	cpc	r23, r1
     1ba:	09 f4       	brne	.+2      	; 0x1be <BUTTON_IsPressed+0x26>
     1bc:	45 c0       	rjmp	.+138    	; 0x248 <BUTTON_IsPressed+0xb0>
		{
			Dio_ChannelRead(BTN_Configuration[BTN_Num].Channel, &PrevState);
     1be:	c8 2e       	mov	r12, r24
     1c0:	dd 24       	eor	r13, r13
     1c2:	86 01       	movw	r16, r12
     1c4:	00 0f       	add	r16, r16
     1c6:	11 1f       	adc	r17, r17
     1c8:	00 5a       	subi	r16, 0xA0	; 160
     1ca:	1f 4f       	sbci	r17, 0xFF	; 255
     1cc:	d8 01       	movw	r26, r16
     1ce:	8c 91       	ld	r24, X
     1d0:	be 01       	movw	r22, r28
     1d2:	6f 5f       	subi	r22, 0xFF	; 255
     1d4:	7f 4f       	sbci	r23, 0xFF	; 255
     1d6:	0e 94 77 02 	call	0x4ee	; 0x4ee <Dio_ChannelRead>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1da:	8f e7       	ldi	r24, 0x7F	; 127
     1dc:	98 e3       	ldi	r25, 0x38	; 56
     1de:	a1 e0       	ldi	r26, 0x01	; 1
     1e0:	81 50       	subi	r24, 0x01	; 1
     1e2:	90 40       	sbci	r25, 0x00	; 0
     1e4:	a0 40       	sbci	r26, 0x00	; 0
     1e6:	e1 f7       	brne	.-8      	; 0x1e0 <BUTTON_IsPressed+0x48>
     1e8:	00 c0       	rjmp	.+0      	; 0x1ea <BUTTON_IsPressed+0x52>
     1ea:	00 00       	nop
			_delay_ms(BUTTON_DEBOUNCING_MS);
			Dio_ChannelRead(BTN_Configuration[BTN_Num].Channel, &CurrentState);
     1ec:	d8 01       	movw	r26, r16
     1ee:	8c 91       	ld	r24, X
     1f0:	be 01       	movw	r22, r28
     1f2:	6e 5f       	subi	r22, 0xFE	; 254
     1f4:	7f 4f       	sbci	r23, 0xFF	; 255
     1f6:	0e 94 77 02 	call	0x4ee	; 0x4ee <Dio_ChannelRead>
			if(CurrentState == PrevState)
     1fa:	8a 81       	ldd	r24, Y+2	; 0x02
     1fc:	99 81       	ldd	r25, Y+1	; 0x01
     1fe:	89 17       	cp	r24, r25
     200:	e9 f4       	brne	.+58     	; 0x23c <BUTTON_IsPressed+0xa4>
			{
				if(BTN_Configuration[BTN_Num].Resistor == BTN_EN_Pull_Down)
     202:	f6 01       	movw	r30, r12
     204:	ee 0f       	add	r30, r30
     206:	ff 1f       	adc	r31, r31
     208:	ef 59       	subi	r30, 0x9F	; 159
     20a:	ff 4f       	sbci	r31, 0xFF	; 255
     20c:	90 81       	ld	r25, Z
     20e:	99 23       	and	r25, r25
     210:	51 f4       	brne	.+20     	; 0x226 <BUTTON_IsPressed+0x8e>
				{
					if(CurrentState == BTN_LOW)
     212:	88 23       	and	r24, r24
     214:	19 f4       	brne	.+6      	; 0x21c <BUTTON_IsPressed+0x84>
					{
						*State = BTN_NotPressed;
     216:	f7 01       	movw	r30, r14
     218:	10 82       	st	Z, r1
     21a:	17 c0       	rjmp	.+46     	; 0x24a <BUTTON_IsPressed+0xb2>
					}
					else
					{
						*State = BTN_IS_Pressed;
     21c:	81 e0       	ldi	r24, 0x01	; 1
     21e:	d7 01       	movw	r26, r14
     220:	8c 93       	st	X, r24



ButtonError_t            BUTTON_IsPressed       (Button_t BTN_Num, BTN_State_t * State)
{
	ButtonError_t return_value = BTN_EN_valid_init;
     222:	80 e0       	ldi	r24, 0x00	; 0
     224:	12 c0       	rjmp	.+36     	; 0x24a <BUTTON_IsPressed+0xb2>
						*State = BTN_IS_Pressed;
					}
				}
				else
				{
					if(CurrentState == BTN_HIGH)
     226:	81 30       	cpi	r24, 0x01	; 1
     228:	21 f4       	brne	.+8      	; 0x232 <BUTTON_IsPressed+0x9a>
					{
						*State = BTN_NotPressed;
     22a:	f7 01       	movw	r30, r14
     22c:	10 82       	st	Z, r1



ButtonError_t            BUTTON_IsPressed       (Button_t BTN_Num, BTN_State_t * State)
{
	ButtonError_t return_value = BTN_EN_valid_init;
     22e:	80 e0       	ldi	r24, 0x00	; 0
     230:	0c c0       	rjmp	.+24     	; 0x24a <BUTTON_IsPressed+0xb2>
					{
						*State = BTN_NotPressed;
					}
					else
					{
						*State = BTN_IS_Pressed;
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	d7 01       	movw	r26, r14
     236:	8c 93       	st	X, r24



ButtonError_t            BUTTON_IsPressed       (Button_t BTN_Num, BTN_State_t * State)
{
	ButtonError_t return_value = BTN_EN_valid_init;
     238:	80 e0       	ldi	r24, 0x00	; 0
     23a:	07 c0       	rjmp	.+14     	; 0x24a <BUTTON_IsPressed+0xb2>
					}
				}	
			}
			else
			{
				*State = BTN_NotPressed;
     23c:	f7 01       	movw	r30, r14
     23e:	10 82       	st	Z, r1



ButtonError_t            BUTTON_IsPressed       (Button_t BTN_Num, BTN_State_t * State)
{
	ButtonError_t return_value = BTN_EN_valid_init;
     240:	80 e0       	ldi	r24, 0x00	; 0
     242:	03 c0       	rjmp	.+6      	; 0x24a <BUTTON_IsPressed+0xb2>
			return_value = BTN_EN_invalidPointer;
		}
	}
	else
	{
		return_value = BTN_EN_invalidNum;
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	01 c0       	rjmp	.+2      	; 0x24a <BUTTON_IsPressed+0xb2>
				*State = BTN_NotPressed;
			}
		}		
		else
		{
			return_value = BTN_EN_invalidPointer;
     248:	82 e0       	ldi	r24, 0x02	; 2
	else
	{
		return_value = BTN_EN_invalidNum;
	}
	return return_value;
     24a:	0f 90       	pop	r0
     24c:	0f 90       	pop	r0
     24e:	df 91       	pop	r29
     250:	cf 91       	pop	r28
     252:	1f 91       	pop	r17
     254:	0f 91       	pop	r16
     256:	ff 90       	pop	r15
     258:	ef 90       	pop	r14
     25a:	df 90       	pop	r13
     25c:	cf 90       	pop	r12
     25e:	08 95       	ret

00000260 <LED_init>:

_E DioChannel_t  LED_Configuration  [LED_End];


LEDError_t            LED_init       (LED_t LED_Num)
{
     260:	1f 93       	push	r17
     262:	cf 93       	push	r28
     264:	df 93       	push	r29
	LEDError_t return_value = LED_EN_valid_init;
	DioError_t    Dio_returnValue = DIO_EN_valid_inti;
	if((LED_Num >= LED_Start) && (LED_Num < LED_End))
     266:	84 30       	cpi	r24, 0x04	; 4
     268:	90 f4       	brcc	.+36     	; 0x28e <LED_init+0x2e>
	{
		/* 1. set the direction as output */
		Dio_returnValue	|= Dio_ChannelMode (LED_Configuration[LED_Num], DIO_EN_M_Output);
     26a:	c8 2f       	mov	r28, r24
     26c:	d0 e0       	ldi	r29, 0x00	; 0
     26e:	cc 59       	subi	r28, 0x9C	; 156
     270:	df 4f       	sbci	r29, 0xFF	; 255
     272:	88 81       	ld	r24, Y
     274:	61 e0       	ldi	r22, 0x01	; 1
     276:	0e 94 b2 01 	call	0x364	; 0x364 <Dio_ChannelMode>
     27a:	18 2f       	mov	r17, r24
		/* 2. init value low */
		Dio_returnValue	|= Dio_ChannelWrite (LED_Configuration[LED_Num], DIO_EN_W_Low);
     27c:	88 81       	ld	r24, Y
     27e:	60 e0       	ldi	r22, 0x00	; 0
     280:	0e 94 04 02 	call	0x408	; 0x408 <Dio_ChannelWrite>
     284:	18 2b       	or	r17, r24
		if(Dio_returnValue != DIO_EN_valid_inti)
		{
			return_value = LED_EN_invalidNum;
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	19 f4       	brne	.+6      	; 0x290 <LED_init+0x30>
     28a:	80 e0       	ldi	r24, 0x00	; 0
     28c:	01 c0       	rjmp	.+2      	; 0x290 <LED_init+0x30>
			/* MISRA C */
		}
	}
	else
	{
		return_value = LED_EN_invalidNum;
     28e:	81 e0       	ldi	r24, 0x01	; 1
	}
	return return_value;
}
     290:	df 91       	pop	r29
     292:	cf 91       	pop	r28
     294:	1f 91       	pop	r17
     296:	08 95       	ret

00000298 <LED_ON>:

LEDError_t            LED_ON       (LED_t LED_Num)
{
	LEDError_t return_value = LED_EN_valid_init;
	DioError_t    Dio_returnValue = DIO_EN_valid_inti;
	if((LED_Num >= LED_Start) && (LED_Num < LED_End))
     298:	84 30       	cpi	r24, 0x04	; 4
     29a:	68 f4       	brcc	.+26     	; 0x2b6 <LED_ON+0x1e>
	{
		Dio_returnValue	|= Dio_ChannelWrite (LED_Configuration[LED_Num], DIO_EN_W_High);
     29c:	e8 2f       	mov	r30, r24
     29e:	f0 e0       	ldi	r31, 0x00	; 0
     2a0:	ec 59       	subi	r30, 0x9C	; 156
     2a2:	ff 4f       	sbci	r31, 0xFF	; 255
     2a4:	80 81       	ld	r24, Z
     2a6:	61 e0       	ldi	r22, 0x01	; 1
     2a8:	0e 94 04 02 	call	0x408	; 0x408 <Dio_ChannelWrite>
		if(Dio_returnValue != DIO_EN_valid_inti)
		{
			return_value = LED_EN_invalidNum;
     2ac:	91 e0       	ldi	r25, 0x01	; 1
     2ae:	88 23       	and	r24, r24
     2b0:	19 f4       	brne	.+6      	; 0x2b8 <LED_ON+0x20>
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	01 c0       	rjmp	.+2      	; 0x2b8 <LED_ON+0x20>
			/* MISRA C */
		}
	}
	else
	{
		return_value = LED_EN_invalidNum;
     2b6:	91 e0       	ldi	r25, 0x01	; 1
	}
	return return_value;
}
     2b8:	89 2f       	mov	r24, r25
     2ba:	08 95       	ret

000002bc <LED_OFF>:

LEDError_t            LED_OFF        (LED_t LED_Num)
{
	LEDError_t return_value = LED_EN_valid_init;
	DioError_t    Dio_returnValue = DIO_EN_valid_inti;
	if((LED_Num >= LED_Start) && (LED_Num < LED_End))
     2bc:	84 30       	cpi	r24, 0x04	; 4
     2be:	68 f4       	brcc	.+26     	; 0x2da <LED_OFF+0x1e>
	{
		Dio_returnValue	|= Dio_ChannelWrite (LED_Configuration[LED_Num], DIO_EN_W_Low);
     2c0:	e8 2f       	mov	r30, r24
     2c2:	f0 e0       	ldi	r31, 0x00	; 0
     2c4:	ec 59       	subi	r30, 0x9C	; 156
     2c6:	ff 4f       	sbci	r31, 0xFF	; 255
     2c8:	80 81       	ld	r24, Z
     2ca:	60 e0       	ldi	r22, 0x00	; 0
     2cc:	0e 94 04 02 	call	0x408	; 0x408 <Dio_ChannelWrite>
		if(Dio_returnValue != DIO_EN_valid_inti)
		{
			return_value = LED_EN_invalidNum;
     2d0:	91 e0       	ldi	r25, 0x01	; 1
     2d2:	88 23       	and	r24, r24
     2d4:	19 f4       	brne	.+6      	; 0x2dc <LED_OFF+0x20>
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	01 c0       	rjmp	.+2      	; 0x2dc <LED_OFF+0x20>
			/* MISRA C */
		}
	}
	else
	{
		return_value = LED_EN_invalidNum;
     2da:	91 e0       	ldi	r25, 0x01	; 1
	}
	return return_value;
}
     2dc:	89 2f       	mov	r24, r25
     2de:	08 95       	ret

000002e0 <LED_Toggle>:

LEDError_t            LED_Toggle     (LED_t LED_Num)
{
	LEDError_t return_value = LED_EN_valid_init;
	DioError_t    Dio_returnValue = DIO_EN_valid_inti;
	if((LED_Num >= LED_Start) && (LED_Num < LED_End))
     2e0:	84 30       	cpi	r24, 0x04	; 4
     2e2:	68 f4       	brcc	.+26     	; 0x2fe <LED_Toggle+0x1e>
	{
		Dio_returnValue	|= Dio_ChannelWrite (LED_Configuration[LED_Num], DIO_EN_W_Toggle);
     2e4:	e8 2f       	mov	r30, r24
     2e6:	f0 e0       	ldi	r31, 0x00	; 0
     2e8:	ec 59       	subi	r30, 0x9C	; 156
     2ea:	ff 4f       	sbci	r31, 0xFF	; 255
     2ec:	80 81       	ld	r24, Z
     2ee:	62 e0       	ldi	r22, 0x02	; 2
     2f0:	0e 94 04 02 	call	0x408	; 0x408 <Dio_ChannelWrite>
		if(Dio_returnValue != DIO_EN_valid_inti)
		{
			return_value = LED_EN_invalidNum;
     2f4:	91 e0       	ldi	r25, 0x01	; 1
     2f6:	88 23       	and	r24, r24
     2f8:	19 f4       	brne	.+6      	; 0x300 <LED_Toggle+0x20>
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	01 c0       	rjmp	.+2      	; 0x300 <LED_Toggle+0x20>
			/* MISRA C */
		}
	}
	else
	{
		return_value = LED_EN_invalidNum;
     2fe:	91 e0       	ldi	r25, 0x01	; 1
	}
	return return_value;
}
     300:	89 2f       	mov	r24, r25
     302:	08 95       	ret

00000304 <main>:
int main(void)
{
#if(Task == Task1)
	Task_1();		//Toggle Led 2 with Button 1
#elif(Task == Task2)
	Task_2();		//Toggle led 1 (500 ms on, 300 ms off) using timer "polling" 
     304:	0e 94 6a 00 	call	0xd4	; 0xd4 <Task_2>
#elif(Task == Task3)
	Task_3();		//Toggle led 0 (500 ms on, 300 ms off) using timer "Interrupt"
#endif /* Task */
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	08 95       	ret

0000030e <Dio_ChannelPullUp>:
#include "../MCAL/DIO/Dio.h"				
#include "../MCAL/DIO/Dio_Private.h"			
#include "../Library/Bit_Math.h"			

DioError_t			Dio_ChannelPullUp		(DioChannel_t Channel)
{
     30e:	ef 92       	push	r14
     310:	ff 92       	push	r15
     312:	0f 93       	push	r16
     314:	1f 93       	push	r17
	DioError_t return_value = DIO_EN_valid_inti;
	if((Channel >= DIO_EN_MIN_Channel) && (Channel <= DIO_EN_MAX_Channel))
     316:	80 32       	cpi	r24, 0x20	; 32
     318:	f8 f4       	brcc	.+62     	; 0x358 <Dio_ChannelPullUp+0x4a>
	{		
		SetBit(DIO[Channel/DIO_CHANNELS_PER_PORT].PORT.Register,(Channel % DIO_CHANNELS_PER_PORT));
     31a:	28 2f       	mov	r18, r24
     31c:	26 95       	lsr	r18
     31e:	26 95       	lsr	r18
     320:	26 95       	lsr	r18
     322:	30 e0       	ldi	r19, 0x00	; 0
     324:	f9 01       	movw	r30, r18
     326:	ee 0f       	add	r30, r30
     328:	ff 1f       	adc	r31, r31
     32a:	e2 0f       	add	r30, r18
     32c:	f3 1f       	adc	r31, r19
     32e:	22 a9       	sts	0x42, r18
     330:	87 70       	andi	r24, 0x07	; 7
     332:	41 e0       	ldi	r20, 0x01	; 1
     334:	50 e0       	ldi	r21, 0x00	; 0
     336:	60 e0       	ldi	r22, 0x00	; 0
     338:	70 e0       	ldi	r23, 0x00	; 0
     33a:	7a 01       	movw	r14, r20
     33c:	8b 01       	movw	r16, r22
     33e:	04 c0       	rjmp	.+8      	; 0x348 <Dio_ChannelPullUp+0x3a>
     340:	ee 0c       	add	r14, r14
     342:	ff 1c       	adc	r15, r15
     344:	00 1f       	adc	r16, r16
     346:	11 1f       	adc	r17, r17
     348:	8a 95       	dec	r24
     34a:	d2 f7       	brpl	.-12     	; 0x340 <Dio_ChannelPullUp+0x32>
     34c:	d8 01       	movw	r26, r16
     34e:	c7 01       	movw	r24, r14
     350:	82 2b       	or	r24, r18
     352:	82 ab       	sts	0x52, r24
#include "../MCAL/DIO/Dio_Private.h"			
#include "../Library/Bit_Math.h"			

DioError_t			Dio_ChannelPullUp		(DioChannel_t Channel)
{
	DioError_t return_value = DIO_EN_valid_inti;
     354:	80 e0       	ldi	r24, 0x00	; 0
     356:	01 c0       	rjmp	.+2      	; 0x35a <Dio_ChannelPullUp+0x4c>
	{		
		SetBit(DIO[Channel/DIO_CHANNELS_PER_PORT].PORT.Register,(Channel % DIO_CHANNELS_PER_PORT));
	}
	else
	{
		return_value = DIO_EN_invalidChannel;
     358:	82 e0       	ldi	r24, 0x02	; 2
	}
	return return_value;
}
     35a:	1f 91       	pop	r17
     35c:	0f 91       	pop	r16
     35e:	ff 90       	pop	r15
     360:	ef 90       	pop	r14
     362:	08 95       	ret

00000364 <Dio_ChannelMode>:


DioError_t			Dio_ChannelMode			(DioChannel_t Channel, DioMode_t  Mode)
{
     364:	ef 92       	push	r14
     366:	ff 92       	push	r15
     368:	0f 93       	push	r16
     36a:	1f 93       	push	r17
	DioError_t return_value = DIO_EN_valid_inti;
	if((Channel >= DIO_EN_MIN_Channel) && (Channel <= DIO_EN_MAX_Channel))
     36c:	80 32       	cpi	r24, 0x20	; 32
     36e:	08 f0       	brcs	.+2      	; 0x372 <Dio_ChannelMode+0xe>
     370:	43 c0       	rjmp	.+134    	; 0x3f8 <Dio_ChannelMode+0x94>
	{
		if(DIO_EN_M_Input == Mode)
     372:	66 23       	and	r22, r22
     374:	01 f5       	brne	.+64     	; 0x3b6 <Dio_ChannelMode+0x52>
		{
			ClearBit(DIO[Channel/DIO_CHANNELS_PER_PORT].DDR.Register,(Channel % DIO_CHANNELS_PER_PORT));
     376:	28 2f       	mov	r18, r24
     378:	26 95       	lsr	r18
     37a:	26 95       	lsr	r18
     37c:	26 95       	lsr	r18
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	f9 01       	movw	r30, r18
     382:	ee 0f       	add	r30, r30
     384:	ff 1f       	adc	r31, r31
     386:	e2 0f       	add	r30, r18
     388:	f3 1f       	adc	r31, r19
     38a:	21 a9       	sts	0x41, r18
     38c:	87 70       	andi	r24, 0x07	; 7
     38e:	41 e0       	ldi	r20, 0x01	; 1
     390:	50 e0       	ldi	r21, 0x00	; 0
     392:	60 e0       	ldi	r22, 0x00	; 0
     394:	70 e0       	ldi	r23, 0x00	; 0
     396:	7a 01       	movw	r14, r20
     398:	8b 01       	movw	r16, r22
     39a:	04 c0       	rjmp	.+8      	; 0x3a4 <Dio_ChannelMode+0x40>
     39c:	ee 0c       	add	r14, r14
     39e:	ff 1c       	adc	r15, r15
     3a0:	00 1f       	adc	r16, r16
     3a2:	11 1f       	adc	r17, r17
     3a4:	8a 95       	dec	r24
     3a6:	d2 f7       	brpl	.-12     	; 0x39c <Dio_ChannelMode+0x38>
     3a8:	d8 01       	movw	r26, r16
     3aa:	c7 01       	movw	r24, r14
     3ac:	80 95       	com	r24
     3ae:	82 23       	and	r24, r18
     3b0:	81 ab       	sts	0x51, r24
}


DioError_t			Dio_ChannelMode			(DioChannel_t Channel, DioMode_t  Mode)
{
	DioError_t return_value = DIO_EN_valid_inti;
     3b2:	80 e0       	ldi	r24, 0x00	; 0
     3b4:	24 c0       	rjmp	.+72     	; 0x3fe <Dio_ChannelMode+0x9a>
	{
		if(DIO_EN_M_Input == Mode)
		{
			ClearBit(DIO[Channel/DIO_CHANNELS_PER_PORT].DDR.Register,(Channel % DIO_CHANNELS_PER_PORT));
		}
		else if(DIO_EN_M_Output == Mode)
     3b6:	61 30       	cpi	r22, 0x01	; 1
     3b8:	09 f5       	brne	.+66     	; 0x3fc <Dio_ChannelMode+0x98>
		{
			SetBit(DIO[Channel/DIO_CHANNELS_PER_PORT].DDR.Register,(Channel % DIO_CHANNELS_PER_PORT));
     3ba:	28 2f       	mov	r18, r24
     3bc:	26 95       	lsr	r18
     3be:	26 95       	lsr	r18
     3c0:	26 95       	lsr	r18
     3c2:	30 e0       	ldi	r19, 0x00	; 0
     3c4:	f9 01       	movw	r30, r18
     3c6:	ee 0f       	add	r30, r30
     3c8:	ff 1f       	adc	r31, r31
     3ca:	e2 0f       	add	r30, r18
     3cc:	f3 1f       	adc	r31, r19
     3ce:	21 a9       	sts	0x41, r18
     3d0:	87 70       	andi	r24, 0x07	; 7
     3d2:	41 e0       	ldi	r20, 0x01	; 1
     3d4:	50 e0       	ldi	r21, 0x00	; 0
     3d6:	60 e0       	ldi	r22, 0x00	; 0
     3d8:	70 e0       	ldi	r23, 0x00	; 0
     3da:	7a 01       	movw	r14, r20
     3dc:	8b 01       	movw	r16, r22
     3de:	04 c0       	rjmp	.+8      	; 0x3e8 <Dio_ChannelMode+0x84>
     3e0:	ee 0c       	add	r14, r14
     3e2:	ff 1c       	adc	r15, r15
     3e4:	00 1f       	adc	r16, r16
     3e6:	11 1f       	adc	r17, r17
     3e8:	8a 95       	dec	r24
     3ea:	d2 f7       	brpl	.-12     	; 0x3e0 <Dio_ChannelMode+0x7c>
     3ec:	d8 01       	movw	r26, r16
     3ee:	c7 01       	movw	r24, r14
     3f0:	82 2b       	or	r24, r18
     3f2:	81 ab       	sts	0x51, r24
}


DioError_t			Dio_ChannelMode			(DioChannel_t Channel, DioMode_t  Mode)
{
	DioError_t return_value = DIO_EN_valid_inti;
     3f4:	80 e0       	ldi	r24, 0x00	; 0
     3f6:	03 c0       	rjmp	.+6      	; 0x3fe <Dio_ChannelMode+0x9a>
			return_value = DIO_EN_invalidMode;
		}	
	}
	else
	{
		return_value = DIO_EN_invalidChannel;
     3f8:	82 e0       	ldi	r24, 0x02	; 2
     3fa:	01 c0       	rjmp	.+2      	; 0x3fe <Dio_ChannelMode+0x9a>
		{
			SetBit(DIO[Channel/DIO_CHANNELS_PER_PORT].DDR.Register,(Channel % DIO_CHANNELS_PER_PORT));
		}
		else
		{
			return_value = DIO_EN_invalidMode;
     3fc:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		return_value = DIO_EN_invalidChannel;
	}
	return return_value;		
}
     3fe:	1f 91       	pop	r17
     400:	0f 91       	pop	r16
     402:	ff 90       	pop	r15
     404:	ef 90       	pop	r14
     406:	08 95       	ret

00000408 <Dio_ChannelWrite>:



DioError_t			Dio_ChannelWrite		(DioChannel_t Channel, DioWrite_t Output)
{
     408:	ef 92       	push	r14
     40a:	ff 92       	push	r15
     40c:	0f 93       	push	r16
     40e:	1f 93       	push	r17
	DioError_t return_value = DIO_EN_valid_inti;
	if((Channel >= DIO_EN_MIN_Channel) && (Channel <= DIO_EN_MAX_Channel))
     410:	80 32       	cpi	r24, 0x20	; 32
     412:	08 f0       	brcs	.+2      	; 0x416 <Dio_ChannelWrite+0xe>
     414:	64 c0       	rjmp	.+200    	; 0x4de <Dio_ChannelWrite+0xd6>
	{
		if(DIO_EN_W_Low == Output)
     416:	66 23       	and	r22, r22
     418:	01 f5       	brne	.+64     	; 0x45a <Dio_ChannelWrite+0x52>
		{
			ClearBit(DIO[Channel/DIO_CHANNELS_PER_PORT].PORT.Register,(Channel % DIO_CHANNELS_PER_PORT));
     41a:	28 2f       	mov	r18, r24
     41c:	26 95       	lsr	r18
     41e:	26 95       	lsr	r18
     420:	26 95       	lsr	r18
     422:	30 e0       	ldi	r19, 0x00	; 0
     424:	f9 01       	movw	r30, r18
     426:	ee 0f       	add	r30, r30
     428:	ff 1f       	adc	r31, r31
     42a:	e2 0f       	add	r30, r18
     42c:	f3 1f       	adc	r31, r19
     42e:	22 a9       	sts	0x42, r18
     430:	87 70       	andi	r24, 0x07	; 7
     432:	41 e0       	ldi	r20, 0x01	; 1
     434:	50 e0       	ldi	r21, 0x00	; 0
     436:	60 e0       	ldi	r22, 0x00	; 0
     438:	70 e0       	ldi	r23, 0x00	; 0
     43a:	7a 01       	movw	r14, r20
     43c:	8b 01       	movw	r16, r22
     43e:	04 c0       	rjmp	.+8      	; 0x448 <Dio_ChannelWrite+0x40>
     440:	ee 0c       	add	r14, r14
     442:	ff 1c       	adc	r15, r15
     444:	00 1f       	adc	r16, r16
     446:	11 1f       	adc	r17, r17
     448:	8a 95       	dec	r24
     44a:	d2 f7       	brpl	.-12     	; 0x440 <Dio_ChannelWrite+0x38>
     44c:	d8 01       	movw	r26, r16
     44e:	c7 01       	movw	r24, r14
     450:	80 95       	com	r24
     452:	82 23       	and	r24, r18
     454:	82 ab       	sts	0x52, r24



DioError_t			Dio_ChannelWrite		(DioChannel_t Channel, DioWrite_t Output)
{
	DioError_t return_value = DIO_EN_valid_inti;
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	45 c0       	rjmp	.+138    	; 0x4e4 <Dio_ChannelWrite+0xdc>
	{
		if(DIO_EN_W_Low == Output)
		{
			ClearBit(DIO[Channel/DIO_CHANNELS_PER_PORT].PORT.Register,(Channel % DIO_CHANNELS_PER_PORT));
		}
		else if(DIO_EN_W_High == Output)
     45a:	61 30       	cpi	r22, 0x01	; 1
     45c:	f9 f4       	brne	.+62     	; 0x49c <Dio_ChannelWrite+0x94>
		{
			SetBit(DIO[Channel/DIO_CHANNELS_PER_PORT].PORT.Register,(Channel % DIO_CHANNELS_PER_PORT));
     45e:	28 2f       	mov	r18, r24
     460:	26 95       	lsr	r18
     462:	26 95       	lsr	r18
     464:	26 95       	lsr	r18
     466:	30 e0       	ldi	r19, 0x00	; 0
     468:	f9 01       	movw	r30, r18
     46a:	ee 0f       	add	r30, r30
     46c:	ff 1f       	adc	r31, r31
     46e:	e2 0f       	add	r30, r18
     470:	f3 1f       	adc	r31, r19
     472:	22 a9       	sts	0x42, r18
     474:	87 70       	andi	r24, 0x07	; 7
     476:	41 e0       	ldi	r20, 0x01	; 1
     478:	50 e0       	ldi	r21, 0x00	; 0
     47a:	60 e0       	ldi	r22, 0x00	; 0
     47c:	70 e0       	ldi	r23, 0x00	; 0
     47e:	7a 01       	movw	r14, r20
     480:	8b 01       	movw	r16, r22
     482:	04 c0       	rjmp	.+8      	; 0x48c <Dio_ChannelWrite+0x84>
     484:	ee 0c       	add	r14, r14
     486:	ff 1c       	adc	r15, r15
     488:	00 1f       	adc	r16, r16
     48a:	11 1f       	adc	r17, r17
     48c:	8a 95       	dec	r24
     48e:	d2 f7       	brpl	.-12     	; 0x484 <Dio_ChannelWrite+0x7c>
     490:	d8 01       	movw	r26, r16
     492:	c7 01       	movw	r24, r14
     494:	82 2b       	or	r24, r18
     496:	82 ab       	sts	0x52, r24



DioError_t			Dio_ChannelWrite		(DioChannel_t Channel, DioWrite_t Output)
{
	DioError_t return_value = DIO_EN_valid_inti;
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	24 c0       	rjmp	.+72     	; 0x4e4 <Dio_ChannelWrite+0xdc>
		}
		else if(DIO_EN_W_High == Output)
		{
			SetBit(DIO[Channel/DIO_CHANNELS_PER_PORT].PORT.Register,(Channel % DIO_CHANNELS_PER_PORT));
		}
		else if(DIO_EN_W_Toggle == Output)
     49c:	62 30       	cpi	r22, 0x02	; 2
     49e:	09 f5       	brne	.+66     	; 0x4e2 <Dio_ChannelWrite+0xda>
		{
			ToggleBit(DIO[Channel/DIO_CHANNELS_PER_PORT].PORT.Register,(Channel % DIO_CHANNELS_PER_PORT));
     4a0:	28 2f       	mov	r18, r24
     4a2:	26 95       	lsr	r18
     4a4:	26 95       	lsr	r18
     4a6:	26 95       	lsr	r18
     4a8:	30 e0       	ldi	r19, 0x00	; 0
     4aa:	f9 01       	movw	r30, r18
     4ac:	ee 0f       	add	r30, r30
     4ae:	ff 1f       	adc	r31, r31
     4b0:	e2 0f       	add	r30, r18
     4b2:	f3 1f       	adc	r31, r19
     4b4:	22 a9       	sts	0x42, r18
     4b6:	87 70       	andi	r24, 0x07	; 7
     4b8:	41 e0       	ldi	r20, 0x01	; 1
     4ba:	50 e0       	ldi	r21, 0x00	; 0
     4bc:	60 e0       	ldi	r22, 0x00	; 0
     4be:	70 e0       	ldi	r23, 0x00	; 0
     4c0:	7a 01       	movw	r14, r20
     4c2:	8b 01       	movw	r16, r22
     4c4:	04 c0       	rjmp	.+8      	; 0x4ce <Dio_ChannelWrite+0xc6>
     4c6:	ee 0c       	add	r14, r14
     4c8:	ff 1c       	adc	r15, r15
     4ca:	00 1f       	adc	r16, r16
     4cc:	11 1f       	adc	r17, r17
     4ce:	8a 95       	dec	r24
     4d0:	d2 f7       	brpl	.-12     	; 0x4c6 <Dio_ChannelWrite+0xbe>
     4d2:	d8 01       	movw	r26, r16
     4d4:	c7 01       	movw	r24, r14
     4d6:	82 27       	eor	r24, r18
     4d8:	82 ab       	sts	0x52, r24



DioError_t			Dio_ChannelWrite		(DioChannel_t Channel, DioWrite_t Output)
{
	DioError_t return_value = DIO_EN_valid_inti;
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	03 c0       	rjmp	.+6      	; 0x4e4 <Dio_ChannelWrite+0xdc>
			return_value = DIO_EN_invalidState;
		}
	}
	else
	{
		return_value = DIO_EN_invalidChannel;
     4de:	82 e0       	ldi	r24, 0x02	; 2
     4e0:	01 c0       	rjmp	.+2      	; 0x4e4 <Dio_ChannelWrite+0xdc>
		{
			ToggleBit(DIO[Channel/DIO_CHANNELS_PER_PORT].PORT.Register,(Channel % DIO_CHANNELS_PER_PORT));
		}
		else
		{
			return_value = DIO_EN_invalidState;
     4e2:	84 e0       	ldi	r24, 0x04	; 4
	else
	{
		return_value = DIO_EN_invalidChannel;
	}
	return return_value;
}
     4e4:	1f 91       	pop	r17
     4e6:	0f 91       	pop	r16
     4e8:	ff 90       	pop	r15
     4ea:	ef 90       	pop	r14
     4ec:	08 95       	ret

000004ee <Dio_ChannelRead>:


DioError_t			Dio_ChannelRead			(DioChannel_t Channel, DioState_t * State)
{
	DioError_t return_value = DIO_EN_valid_inti;
	if((Channel >= DIO_EN_MIN_Channel) && (Channel <= DIO_EN_MAX_Channel))
     4ee:	80 32       	cpi	r24, 0x20	; 32
     4f0:	e8 f4       	brcc	.+58     	; 0x52c <Dio_ChannelRead+0x3e>
	{
		if(NULL != State)
     4f2:	61 15       	cp	r22, r1
     4f4:	71 05       	cpc	r23, r1
     4f6:	e1 f0       	breq	.+56     	; 0x530 <Dio_ChannelRead+0x42>
		{
			*State = GetBit(DIO[Channel/DIO_CHANNELS_PER_PORT].PIN.Register,(Channel % DIO_CHANNELS_PER_PORT));
     4f8:	28 2f       	mov	r18, r24
     4fa:	26 95       	lsr	r18
     4fc:	26 95       	lsr	r18
     4fe:	26 95       	lsr	r18
     500:	30 e0       	ldi	r19, 0x00	; 0
     502:	a9 01       	movw	r20, r18
     504:	44 0f       	add	r20, r20
     506:	55 1f       	adc	r21, r21
     508:	24 0f       	add	r18, r20
     50a:	35 1f       	adc	r19, r21
     50c:	f9 01       	movw	r30, r18
     50e:	20 a9       	sts	0x40, r18
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	87 70       	andi	r24, 0x07	; 7
     514:	a9 01       	movw	r20, r18
     516:	02 c0       	rjmp	.+4      	; 0x51c <Dio_ChannelRead+0x2e>
     518:	55 95       	asr	r21
     51a:	47 95       	ror	r20
     51c:	8a 95       	dec	r24
     51e:	e2 f7       	brpl	.-8      	; 0x518 <Dio_ChannelRead+0x2a>
     520:	ca 01       	movw	r24, r20
     522:	81 70       	andi	r24, 0x01	; 1
     524:	fb 01       	movw	r30, r22
     526:	80 83       	st	Z, r24
}


DioError_t			Dio_ChannelRead			(DioChannel_t Channel, DioState_t * State)
{
	DioError_t return_value = DIO_EN_valid_inti;
     528:	80 e0       	ldi	r24, 0x00	; 0
     52a:	08 95       	ret
			return_value = DIO_EN_invalidPointer;
		}
	}
	else
	{
		return_value = DIO_EN_invalidChannel;
     52c:	82 e0       	ldi	r24, 0x02	; 2
     52e:	08 95       	ret
		{
			*State = GetBit(DIO[Channel/DIO_CHANNELS_PER_PORT].PIN.Register,(Channel % DIO_CHANNELS_PER_PORT));
		}		
		else
		{
			return_value = DIO_EN_invalidPointer;
     530:	85 e0       	ldi	r24, 0x05	; 5
	else
	{
		return_value = DIO_EN_invalidChannel;
	}
	return return_value;
}
     532:	08 95       	ret

00000534 <Dio_PortPullUp>:


DioError_t			Dio_PortPullUp			(DioPort_t Port)
{
	DioError_t return_value = DIO_EN_valid_inti;
	if((Port >= DIO_EN_MIN_PORT) && (Port < DIO_EN_MAX_PORT))
     534:	84 30       	cpi	r24, 0x04	; 4
     536:	58 f4       	brcc	.+22     	; 0x54e <Dio_PortPullUp+0x1a>
	{
		SetReg_8_Bits(DIO[Port].PORT.Register);
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	9c 01       	movw	r18, r24
     53c:	22 0f       	add	r18, r18
     53e:	33 1f       	adc	r19, r19
     540:	82 0f       	add	r24, r18
     542:	93 1f       	adc	r25, r19
     544:	2f ef       	ldi	r18, 0xFF	; 255
     546:	fc 01       	movw	r30, r24
     548:	22 ab       	sts	0x52, r18
}


DioError_t			Dio_PortPullUp			(DioPort_t Port)
{
	DioError_t return_value = DIO_EN_valid_inti;
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	08 95       	ret
	{
		SetReg_8_Bits(DIO[Port].PORT.Register);
	}
	else
	{
		return_value = DIO_EN_invalidChannel;
     54e:	82 e0       	ldi	r24, 0x02	; 2
	}
	return return_value;
}
     550:	08 95       	ret

00000552 <Dio_PortMode>:

DioError_t			Dio_PortMode			(DioPort_t Port, DioMode_t  Mode)
{
	DioError_t return_value = DIO_EN_valid_inti;
	if((Port >= DIO_EN_MIN_PORT) && (Port < DIO_EN_MAX_PORT))
     552:	84 30       	cpi	r24, 0x04	; 4
     554:	c8 f4       	brcc	.+50     	; 0x588 <Dio_PortMode+0x36>
	{
		if(DIO_EN_M_Input == Mode)
     556:	66 23       	and	r22, r22
     558:	51 f4       	brne	.+20     	; 0x56e <Dio_PortMode+0x1c>
		{
			ClearReg_8_Bits(DIO[Port].DDR.Register);
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	9c 01       	movw	r18, r24
     55e:	22 0f       	add	r18, r18
     560:	33 1f       	adc	r19, r19
     562:	82 0f       	add	r24, r18
     564:	93 1f       	adc	r25, r19
     566:	fc 01       	movw	r30, r24
     568:	11 aa       	sts	0x91, r17
	return return_value;
}

DioError_t			Dio_PortMode			(DioPort_t Port, DioMode_t  Mode)
{
	DioError_t return_value = DIO_EN_valid_inti;
     56a:	80 e0       	ldi	r24, 0x00	; 0
     56c:	08 95       	ret
	{
		if(DIO_EN_M_Input == Mode)
		{
			ClearReg_8_Bits(DIO[Port].DDR.Register);
		}
		else if(DIO_EN_M_Output == Mode)
     56e:	61 30       	cpi	r22, 0x01	; 1
     570:	69 f4       	brne	.+26     	; 0x58c <Dio_PortMode+0x3a>
		{
			SetReg_8_Bits(DIO[Port].DDR.Register);
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	9c 01       	movw	r18, r24
     576:	22 0f       	add	r18, r18
     578:	33 1f       	adc	r19, r19
     57a:	82 0f       	add	r24, r18
     57c:	93 1f       	adc	r25, r19
     57e:	2f ef       	ldi	r18, 0xFF	; 255
     580:	fc 01       	movw	r30, r24
     582:	21 ab       	sts	0x51, r18
	return return_value;
}

DioError_t			Dio_PortMode			(DioPort_t Port, DioMode_t  Mode)
{
	DioError_t return_value = DIO_EN_valid_inti;
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	08 95       	ret
			return_value = DIO_EN_invalidMode;
		}
	}
	else
	{
		return_value = DIO_EN_invalidChannel;
     588:	82 e0       	ldi	r24, 0x02	; 2
     58a:	08 95       	ret
		{
			SetReg_8_Bits(DIO[Port].DDR.Register);
		}
		else
		{
			return_value = DIO_EN_invalidMode;
     58c:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		return_value = DIO_EN_invalidChannel;
	}
	return return_value;
}
     58e:	08 95       	ret

00000590 <Dio_PortWrite>:


DioError_t			Dio_PortWrite			(DioPort_t Port, DioWrite_t Output)
{
	DioError_t return_value = DIO_EN_valid_inti;
	if((Port >= DIO_EN_MIN_PORT) && (Port < DIO_EN_MAX_PORT))
     590:	84 30       	cpi	r24, 0x04	; 4
     592:	30 f5       	brcc	.+76     	; 0x5e0 <Dio_PortWrite+0x50>
	{
		if(DIO_EN_W_Low == Output)
     594:	66 23       	and	r22, r22
     596:	51 f4       	brne	.+20     	; 0x5ac <Dio_PortWrite+0x1c>
		{
			ClearReg_8_Bits(DIO[Port].PORT.Register);
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	9c 01       	movw	r18, r24
     59c:	22 0f       	add	r18, r18
     59e:	33 1f       	adc	r19, r19
     5a0:	82 0f       	add	r24, r18
     5a2:	93 1f       	adc	r25, r19
     5a4:	fc 01       	movw	r30, r24
     5a6:	12 aa       	sts	0x92, r17
}


DioError_t			Dio_PortWrite			(DioPort_t Port, DioWrite_t Output)
{
	DioError_t return_value = DIO_EN_valid_inti;
     5a8:	80 e0       	ldi	r24, 0x00	; 0
     5aa:	08 95       	ret
	{
		if(DIO_EN_W_Low == Output)
		{
			ClearReg_8_Bits(DIO[Port].PORT.Register);
		}
		else if(DIO_EN_W_High == Output)
     5ac:	61 30       	cpi	r22, 0x01	; 1
     5ae:	59 f4       	brne	.+22     	; 0x5c6 <Dio_PortWrite+0x36>
		{
			SetReg_8_Bits(DIO[Port].PORT.Register);
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	9c 01       	movw	r18, r24
     5b4:	22 0f       	add	r18, r18
     5b6:	33 1f       	adc	r19, r19
     5b8:	82 0f       	add	r24, r18
     5ba:	93 1f       	adc	r25, r19
     5bc:	2f ef       	ldi	r18, 0xFF	; 255
     5be:	fc 01       	movw	r30, r24
     5c0:	22 ab       	sts	0x52, r18
}


DioError_t			Dio_PortWrite			(DioPort_t Port, DioWrite_t Output)
{
	DioError_t return_value = DIO_EN_valid_inti;
     5c2:	80 e0       	ldi	r24, 0x00	; 0
     5c4:	08 95       	ret
		}
		else if(DIO_EN_W_High == Output)
		{
			SetReg_8_Bits(DIO[Port].PORT.Register);
		}
		else if(DIO_EN_W_Toggle == Output)
     5c6:	62 30       	cpi	r22, 0x02	; 2
     5c8:	69 f4       	brne	.+26     	; 0x5e4 <Dio_PortWrite+0x54>
		{
			ToggleReg_8_Bits(DIO[Port].PORT.Register);
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	fc 01       	movw	r30, r24
     5ce:	ee 0f       	add	r30, r30
     5d0:	ff 1f       	adc	r31, r31
     5d2:	e8 0f       	add	r30, r24
     5d4:	f9 1f       	adc	r31, r25
     5d6:	82 a9       	sts	0x42, r24
     5d8:	80 95       	com	r24
     5da:	82 ab       	sts	0x52, r24
}


DioError_t			Dio_PortWrite			(DioPort_t Port, DioWrite_t Output)
{
	DioError_t return_value = DIO_EN_valid_inti;
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	08 95       	ret
			return_value = DIO_EN_invalidState;
		}
	}
	else
	{
		return_value = DIO_EN_invalidChannel;
     5e0:	82 e0       	ldi	r24, 0x02	; 2
     5e2:	08 95       	ret
		{
			ToggleReg_8_Bits(DIO[Port].PORT.Register);
		}
		else
		{
			return_value = DIO_EN_invalidState;
     5e4:	84 e0       	ldi	r24, 0x04	; 4
	else
	{
		return_value = DIO_EN_invalidChannel;
	}
	return return_value;
}
     5e6:	08 95       	ret

000005e8 <Dio_PortRead>:


DioError_t			Dio_PortRead			(DioPort_t Port, DioPortValue_t * State)
{
	DioError_t return_value = DIO_EN_valid_inti;
	if((Port >= DIO_EN_MIN_PORT) && (Port < DIO_EN_MAX_PORT))
     5e8:	84 30       	cpi	r24, 0x04	; 4
     5ea:	78 f4       	brcc	.+30     	; 0x60a <Dio_PortRead+0x22>
	{
		if(NULL != State)
     5ec:	61 15       	cp	r22, r1
     5ee:	71 05       	cpc	r23, r1
     5f0:	71 f0       	breq	.+28     	; 0x60e <Dio_PortRead+0x26>
		{
			*State = DIO[Port].PIN.Register;
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	9c 01       	movw	r18, r24
     5f6:	22 0f       	add	r18, r18
     5f8:	33 1f       	adc	r19, r19
     5fa:	82 0f       	add	r24, r18
     5fc:	93 1f       	adc	r25, r19
     5fe:	fc 01       	movw	r30, r24
     600:	80 a9       	sts	0x40, r24
     602:	fb 01       	movw	r30, r22
     604:	80 83       	st	Z, r24
}


DioError_t			Dio_PortRead			(DioPort_t Port, DioPortValue_t * State)
{
	DioError_t return_value = DIO_EN_valid_inti;
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	08 95       	ret
			return_value = DIO_EN_invalidPointer;
		}
	}
	else
	{
		return_value = DIO_EN_invalidChannel;
     60a:	82 e0       	ldi	r24, 0x02	; 2
     60c:	08 95       	ret
		{
			*State = DIO[Port].PIN.Register;
		}
		else
		{
			return_value = DIO_EN_invalidPointer;
     60e:	85 e0       	ldi	r24, 0x05	; 5
	else
	{
		return_value = DIO_EN_invalidChannel;
	}
	return return_value;
}
     610:	08 95       	ret

00000612 <Dio_GroupPullUp>:


DioError_t			Dio_GroupPullUp			(DioPort_t Port, DioGroupBits_t Group)
{
	DioError_t return_value = DIO_EN_valid_inti;
	if((Port >= DIO_EN_MIN_PORT) && (Port < DIO_EN_MAX_PORT))
     612:	84 30       	cpi	r24, 0x04	; 4
     614:	58 f4       	brcc	.+22     	; 0x62c <Dio_GroupPullUp+0x1a>
	{
		SetMaskBits(DIO[Port].PORT.Register, Group);
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	fc 01       	movw	r30, r24
     61a:	ee 0f       	add	r30, r30
     61c:	ff 1f       	adc	r31, r31
     61e:	e8 0f       	add	r30, r24
     620:	f9 1f       	adc	r31, r25
     622:	82 a9       	sts	0x42, r24
     624:	68 2b       	or	r22, r24
     626:	62 ab       	sts	0x52, r22
}


DioError_t			Dio_GroupPullUp			(DioPort_t Port, DioGroupBits_t Group)
{
	DioError_t return_value = DIO_EN_valid_inti;
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	08 95       	ret
	{
		SetMaskBits(DIO[Port].PORT.Register, Group);
	}
	else
	{
		return_value = DIO_EN_invalidChannel;
     62c:	82 e0       	ldi	r24, 0x02	; 2
	}
	return return_value;
}
     62e:	08 95       	ret

00000630 <Dio_GroupMode>:

DioError_t			Dio_GroupMode			(DioPort_t Port, DioGroupBits_t Group, DioMode_t  Mode)
{
	DioError_t return_value = DIO_EN_valid_inti;
	if((Port >= DIO_EN_MIN_PORT) && (Port < DIO_EN_MAX_PORT))
     630:	84 30       	cpi	r24, 0x04	; 4
     632:	d8 f4       	brcc	.+54     	; 0x66a <Dio_GroupMode+0x3a>
	{
		if(DIO_EN_M_Input == Mode)
     634:	44 23       	and	r20, r20
     636:	61 f4       	brne	.+24     	; 0x650 <Dio_GroupMode+0x20>
		{
			ClearMaskBits(DIO[Port].DDR.Register, Group);
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	fc 01       	movw	r30, r24
     63c:	ee 0f       	add	r30, r30
     63e:	ff 1f       	adc	r31, r31
     640:	e8 0f       	add	r30, r24
     642:	f9 1f       	adc	r31, r25
     644:	81 a9       	sts	0x41, r24
     646:	60 95       	com	r22
     648:	68 23       	and	r22, r24
     64a:	61 ab       	sts	0x51, r22
	return return_value;
}

DioError_t			Dio_GroupMode			(DioPort_t Port, DioGroupBits_t Group, DioMode_t  Mode)
{
	DioError_t return_value = DIO_EN_valid_inti;
     64c:	80 e0       	ldi	r24, 0x00	; 0
     64e:	08 95       	ret
	{
		if(DIO_EN_M_Input == Mode)
		{
			ClearMaskBits(DIO[Port].DDR.Register, Group);
		}
		else if(DIO_EN_M_Output == Mode)
     650:	41 30       	cpi	r20, 0x01	; 1
     652:	69 f4       	brne	.+26     	; 0x66e <Dio_GroupMode+0x3e>
		{
			SetMaskBits(DIO[Port].DDR.Register, Group);
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	fc 01       	movw	r30, r24
     658:	ee 0f       	add	r30, r30
     65a:	ff 1f       	adc	r31, r31
     65c:	e8 0f       	add	r30, r24
     65e:	f9 1f       	adc	r31, r25
     660:	81 a9       	sts	0x41, r24
     662:	68 2b       	or	r22, r24
     664:	61 ab       	sts	0x51, r22
	return return_value;
}

DioError_t			Dio_GroupMode			(DioPort_t Port, DioGroupBits_t Group, DioMode_t  Mode)
{
	DioError_t return_value = DIO_EN_valid_inti;
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	08 95       	ret
			return_value = DIO_EN_invalidMode;
		}
	}
	else
	{
		return_value = DIO_EN_invalidChannel;
     66a:	82 e0       	ldi	r24, 0x02	; 2
     66c:	08 95       	ret
		{
			SetMaskBits(DIO[Port].DDR.Register, Group);
		}
		else
		{
			return_value = DIO_EN_invalidMode;
     66e:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		return_value = DIO_EN_invalidChannel;
	}
	return return_value;
}
     670:	08 95       	ret

00000672 <Dio_GroupWrite>:


DioError_t			Dio_GroupWrite			(DioPort_t Port, DioGroupBits_t Group, DioWrite_t Output)
{
	DioError_t return_value = DIO_EN_valid_inti;
	if((Port >= DIO_EN_MIN_PORT) && (Port < DIO_EN_MAX_PORT))
     672:	84 30       	cpi	r24, 0x04	; 4
     674:	40 f5       	brcc	.+80     	; 0x6c6 <Dio_GroupWrite+0x54>
	{
		if(DIO_EN_W_Low == Output)
     676:	44 23       	and	r20, r20
     678:	61 f4       	brne	.+24     	; 0x692 <Dio_GroupWrite+0x20>
		{
			ClearMaskBits(DIO[Port].PORT.Register, Group);
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	fc 01       	movw	r30, r24
     67e:	ee 0f       	add	r30, r30
     680:	ff 1f       	adc	r31, r31
     682:	e8 0f       	add	r30, r24
     684:	f9 1f       	adc	r31, r25
     686:	82 a9       	sts	0x42, r24
     688:	60 95       	com	r22
     68a:	68 23       	and	r22, r24
     68c:	62 ab       	sts	0x52, r22



DioError_t			Dio_GroupWrite			(DioPort_t Port, DioGroupBits_t Group, DioWrite_t Output)
{
	DioError_t return_value = DIO_EN_valid_inti;
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	08 95       	ret
	{
		if(DIO_EN_W_Low == Output)
		{
			ClearMaskBits(DIO[Port].PORT.Register, Group);
		}
		else if(DIO_EN_W_High == Output)
     692:	41 30       	cpi	r20, 0x01	; 1
     694:	59 f4       	brne	.+22     	; 0x6ac <Dio_GroupWrite+0x3a>
		{
			SetMaskBits(DIO[Port].PORT.Register, Group);
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	fc 01       	movw	r30, r24
     69a:	ee 0f       	add	r30, r30
     69c:	ff 1f       	adc	r31, r31
     69e:	e8 0f       	add	r30, r24
     6a0:	f9 1f       	adc	r31, r25
     6a2:	82 a9       	sts	0x42, r24
     6a4:	68 2b       	or	r22, r24
     6a6:	62 ab       	sts	0x52, r22



DioError_t			Dio_GroupWrite			(DioPort_t Port, DioGroupBits_t Group, DioWrite_t Output)
{
	DioError_t return_value = DIO_EN_valid_inti;
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	08 95       	ret
		}
		else if(DIO_EN_W_High == Output)
		{
			SetMaskBits(DIO[Port].PORT.Register, Group);
		}
		else if(DIO_EN_W_Toggle == Output)
     6ac:	42 30       	cpi	r20, 0x02	; 2
     6ae:	69 f4       	brne	.+26     	; 0x6ca <Dio_GroupWrite+0x58>
		{
			ToggleMaskBits(DIO[Port].PORT.Register, Group);
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	fc 01       	movw	r30, r24
     6b4:	ee 0f       	add	r30, r30
     6b6:	ff 1f       	adc	r31, r31
     6b8:	e8 0f       	add	r30, r24
     6ba:	f9 1f       	adc	r31, r25
     6bc:	82 a9       	sts	0x42, r24
     6be:	68 27       	eor	r22, r24
     6c0:	62 ab       	sts	0x52, r22



DioError_t			Dio_GroupWrite			(DioPort_t Port, DioGroupBits_t Group, DioWrite_t Output)
{
	DioError_t return_value = DIO_EN_valid_inti;
     6c2:	80 e0       	ldi	r24, 0x00	; 0
     6c4:	08 95       	ret
			return_value = DIO_EN_invalidState;
		}
	}
	else
	{
		return_value = DIO_EN_invalidChannel;
     6c6:	82 e0       	ldi	r24, 0x02	; 2
     6c8:	08 95       	ret
		{
			ToggleMaskBits(DIO[Port].PORT.Register, Group);
		}
		else
		{
			return_value = DIO_EN_invalidState;
     6ca:	84 e0       	ldi	r24, 0x04	; 4
	else
	{
		return_value = DIO_EN_invalidChannel;
	}
	return return_value;
}
     6cc:	08 95       	ret

000006ce <Dio_GroupRead>:


DioError_t			Dio_GroupRead			(DioPort_t Port, DioGroupBits_t Group, DioGroupValue_t * State)
{
	DioError_t return_value = DIO_EN_valid_inti;
	if((Port >= DIO_EN_MIN_PORT) && (Port < DIO_EN_MAX_PORT))
     6ce:	84 30       	cpi	r24, 0x04	; 4
     6d0:	80 f4       	brcc	.+32     	; 0x6f2 <Dio_GroupRead+0x24>
	{
		if(NULL != State)
     6d2:	41 15       	cp	r20, r1
     6d4:	51 05       	cpc	r21, r1
     6d6:	79 f0       	breq	.+30     	; 0x6f6 <Dio_GroupRead+0x28>
		{
			*State = GetMaskBits(DIO[Port].PIN.Register, Group);
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	9c 01       	movw	r18, r24
     6dc:	22 0f       	add	r18, r18
     6de:	33 1f       	adc	r19, r19
     6e0:	82 0f       	add	r24, r18
     6e2:	93 1f       	adc	r25, r19
     6e4:	fc 01       	movw	r30, r24
     6e6:	80 a9       	sts	0x40, r24
     6e8:	68 23       	and	r22, r24
     6ea:	fa 01       	movw	r30, r20
     6ec:	60 83       	st	Z, r22
}


DioError_t			Dio_GroupRead			(DioPort_t Port, DioGroupBits_t Group, DioGroupValue_t * State)
{
	DioError_t return_value = DIO_EN_valid_inti;
     6ee:	80 e0       	ldi	r24, 0x00	; 0
     6f0:	08 95       	ret
			return_value = DIO_EN_invalidPointer;
		}
	}
	else
	{
		return_value = DIO_EN_invalidChannel;
     6f2:	82 e0       	ldi	r24, 0x02	; 2
     6f4:	08 95       	ret
		{
			*State = GetMaskBits(DIO[Port].PIN.Register, Group);
		}
		else
		{
			return_value = DIO_EN_invalidPointer;
     6f6:	85 e0       	ldi	r24, 0x05	; 5
	else
	{
		return_value = DIO_EN_invalidChannel;
	}
	return return_value;
}
     6f8:	08 95       	ret

000006fa <TOGGLE_2>:
{
	Dio_ChannelWrite(PWM_CFG[PWM_0].Channel, DIO_EN_W_Toggle);
}
_S void   TOGGLE_2 (void)
{
	Dio_ChannelWrite(PWM_CFG[PWM_2].Channel, DIO_EN_W_Toggle);
     6fa:	80 91 6f 00 	lds	r24, 0x006F
     6fe:	62 e0       	ldi	r22, 0x02	; 2
     700:	0e 94 04 02 	call	0x408	; 0x408 <Dio_ChannelWrite>
     704:	08 95       	ret

00000706 <TOGGLE_0>:
	return return_value;
}

_S void   TOGGLE_0 (void)
{
	Dio_ChannelWrite(PWM_CFG[PWM_0].Channel, DIO_EN_W_Toggle);
     706:	80 91 6c 00 	lds	r24, 0x006C
     70a:	62 e0       	ldi	r22, 0x02	; 2
     70c:	0e 94 04 02 	call	0x408	; 0x408 <Dio_ChannelWrite>
}
     710:	08 95       	ret

00000712 <PWM_Init>:
_S void  TOGGLE_0 (void);
_S void  TOGGLE_2 (void);
_V _S V_CallBack_V_t  PWM_CallBacks[PWM_End]  = {TOGGLE_0, TOGGLE_2};

PWMError_t PWM_Init(PWM_CH_t pwm_ch)
{
     712:	ef 92       	push	r14
     714:	ff 92       	push	r15
     716:	0f 93       	push	r16
     718:	1f 93       	push	r17
     71a:	cf 93       	push	r28
     71c:	df 93       	push	r29
     71e:	00 d0       	rcall	.+0      	; 0x720 <PWM_Init+0xe>
     720:	00 d0       	rcall	.+0      	; 0x722 <PWM_Init+0x10>
     722:	0f 92       	push	r0
     724:	cd b7       	in	r28, 0x3d	; 61
     726:	de b7       	in	r29, 0x3e	; 62
	PWMError_t return_value = PWM_EN_valid_inti;
	DioError_t DioReturn_value = DIO_EN_valid_inti;
	TMR_Configuration_t  TMRConfiguration;
	if((pwm_ch >= PWM_Start) && (pwm_ch < PWM_End))
     728:	82 30       	cpi	r24, 0x02	; 2
     72a:	40 f5       	brcc	.+80     	; 0x77c <PWM_Init+0x6a>
	{
		DioReturn_value = Dio_ChannelMode(PWM_CFG[pwm_ch].Channel, DIO_EN_M_Output);
     72c:	e8 2e       	mov	r14, r24
     72e:	ff 24       	eor	r15, r15
     730:	f7 01       	movw	r30, r14
     732:	ee 0f       	add	r30, r30
     734:	ff 1f       	adc	r31, r31
     736:	ee 0d       	add	r30, r14
     738:	ff 1d       	adc	r31, r15
     73a:	e4 59       	subi	r30, 0x94	; 148
     73c:	ff 4f       	sbci	r31, 0xFF	; 255
     73e:	80 81       	ld	r24, Z
     740:	61 e0       	ldi	r22, 0x01	; 1
     742:	0e 94 b2 01 	call	0x364	; 0x364 <Dio_ChannelMode>
		if(DioReturn_value == DIO_EN_valid_inti)
     746:	88 23       	and	r24, r24
     748:	d9 f4       	brne	.+54     	; 0x780 <PWM_Init+0x6e>
		{
			Timer_PWMCallBack(PWM_CFG[pwm_ch].Timer, PWM_CallBacks[pwm_ch]);
     74a:	87 01       	movw	r16, r14
     74c:	00 0f       	add	r16, r16
     74e:	11 1f       	adc	r17, r17
     750:	f8 01       	movw	r30, r16
     752:	e8 59       	subi	r30, 0x98	; 152
     754:	ff 4f       	sbci	r31, 0xFF	; 255
     756:	60 81       	ld	r22, Z
     758:	71 81       	ldd	r23, Z+1	; 0x01
     75a:	0e 0d       	add	r16, r14
     75c:	1f 1d       	adc	r17, r15
     75e:	04 59       	subi	r16, 0x94	; 148
     760:	1f 4f       	sbci	r17, 0xFF	; 255
     762:	f8 01       	movw	r30, r16
     764:	81 81       	ldd	r24, Z+1	; 0x01
     766:	0e 94 03 08 	call	0x1006	; 0x1006 <Timer_PWMCallBack>
			TMRConfiguration.Clock = PWM_CFG[pwm_ch].Clock;
     76a:	f8 01       	movw	r30, r16
     76c:	82 81       	ldd	r24, Z+2	; 0x02
     76e:	8b 83       	std	Y+3, r24	; 0x03
			Timer_Init(&TMRConfiguration);
     770:	ce 01       	movw	r24, r28
     772:	01 96       	adiw	r24, 0x01	; 1
     774:	0e 94 91 06 	call	0xd22	; 0xd22 <Timer_Init>
_S void  TOGGLE_2 (void);
_V _S V_CallBack_V_t  PWM_CallBacks[PWM_End]  = {TOGGLE_0, TOGGLE_2};

PWMError_t PWM_Init(PWM_CH_t pwm_ch)
{
	PWMError_t return_value = PWM_EN_valid_inti;
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	03 c0       	rjmp	.+6      	; 0x782 <PWM_Init+0x70>
			TMRConfiguration.Clock = PWM_CFG[pwm_ch].Clock;
			Timer_Init(&TMRConfiguration);
		}
		else{return_value = PWM_EN_InvalidDioChannel;}
	}
	else{return_value = PWM_EN_InvalidChannel;}
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	01 c0       	rjmp	.+2      	; 0x782 <PWM_Init+0x70>
		{
			Timer_PWMCallBack(PWM_CFG[pwm_ch].Timer, PWM_CallBacks[pwm_ch]);
			TMRConfiguration.Clock = PWM_CFG[pwm_ch].Clock;
			Timer_Init(&TMRConfiguration);
		}
		else{return_value = PWM_EN_InvalidDioChannel;}
     780:	82 e0       	ldi	r24, 0x02	; 2
	}
	else{return_value = PWM_EN_InvalidChannel;}
	
	return return_value;
}
     782:	0f 90       	pop	r0
     784:	0f 90       	pop	r0
     786:	0f 90       	pop	r0
     788:	0f 90       	pop	r0
     78a:	0f 90       	pop	r0
     78c:	df 91       	pop	r29
     78e:	cf 91       	pop	r28
     790:	1f 91       	pop	r17
     792:	0f 91       	pop	r16
     794:	ff 90       	pop	r15
     796:	ef 90       	pop	r14
     798:	08 95       	ret

0000079a <PWM_Stop>:

PWMError_t PWM_Stop(PWM_CH_t pwm_ch)
{
     79a:	cf 93       	push	r28
     79c:	df 93       	push	r29
	PWMError_t return_value = PWM_EN_valid_inti;
	if((pwm_ch >= PWM_Start) && (pwm_ch < PWM_End))
     79e:	82 30       	cpi	r24, 0x02	; 2
     7a0:	88 f4       	brcc	.+34     	; 0x7c4 <PWM_Stop+0x2a>
	{
		Timer_Stop(PWM_CFG[pwm_ch].Timer);
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	ec 01       	movw	r28, r24
     7a6:	cc 0f       	add	r28, r28
     7a8:	dd 1f       	adc	r29, r29
     7aa:	c8 0f       	add	r28, r24
     7ac:	d9 1f       	adc	r29, r25
     7ae:	c4 59       	subi	r28, 0x94	; 148
     7b0:	df 4f       	sbci	r29, 0xFF	; 255
     7b2:	89 81       	ldd	r24, Y+1	; 0x01
     7b4:	0e 94 13 04 	call	0x826	; 0x826 <Timer_Stop>
		Dio_ChannelWrite(PWM_CFG[pwm_ch].Channel, DIO_EN_W_Low);
     7b8:	88 81       	ld	r24, Y
     7ba:	60 e0       	ldi	r22, 0x00	; 0
     7bc:	0e 94 04 02 	call	0x408	; 0x408 <Dio_ChannelWrite>
	return return_value;
}

PWMError_t PWM_Stop(PWM_CH_t pwm_ch)
{
	PWMError_t return_value = PWM_EN_valid_inti;
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	01 c0       	rjmp	.+2      	; 0x7c6 <PWM_Stop+0x2c>
		Timer_Stop(PWM_CFG[pwm_ch].Timer);
		Dio_ChannelWrite(PWM_CFG[pwm_ch].Channel, DIO_EN_W_Low);
	}
	else
	{
		return_value = PWM_EN_InvalidChannel;
     7c4:	81 e0       	ldi	r24, 0x01	; 1
	}
	return return_value;
}
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	08 95       	ret

000007cc <SET_PWM_DutyCycle>:

PWMError_t SET_PWM_DutyCycle(PWM_CH_t pwm_ch, uint8_t Duty)
{
     7cc:	cf 93       	push	r28
     7ce:	df 93       	push	r29
	PWMError_t return_value = PWM_EN_valid_inti;
	if((pwm_ch >= PWM_Start) && (pwm_ch < PWM_End))
     7d0:	82 30       	cpi	r24, 0x02	; 2
     7d2:	88 f4       	brcc	.+34     	; 0x7f6 <SET_PWM_DutyCycle+0x2a>
	{
		Timer_SoftWarePWM(PWM_CFG[pwm_ch].Timer, Duty, PWM_CFG[pwm_ch].Clock);
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	ec 01       	movw	r28, r24
     7d8:	cc 0f       	add	r28, r28
     7da:	dd 1f       	adc	r29, r29
     7dc:	c8 0f       	add	r28, r24
     7de:	d9 1f       	adc	r29, r25
     7e0:	c4 59       	subi	r28, 0x94	; 148
     7e2:	df 4f       	sbci	r29, 0xFF	; 255
     7e4:	89 81       	ldd	r24, Y+1	; 0x01
     7e6:	4a 81       	ldd	r20, Y+2	; 0x02
     7e8:	0e 94 11 08 	call	0x1022	; 0x1022 <Timer_SoftWarePWM>
		Timer_Start(PWM_CFG[pwm_ch].Timer);
     7ec:	89 81       	ldd	r24, Y+1	; 0x01
     7ee:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Timer_Start>
	return return_value;
}

PWMError_t SET_PWM_DutyCycle(PWM_CH_t pwm_ch, uint8_t Duty)
{
	PWMError_t return_value = PWM_EN_valid_inti;
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	01 c0       	rjmp	.+2      	; 0x7f8 <SET_PWM_DutyCycle+0x2c>
		Timer_SoftWarePWM(PWM_CFG[pwm_ch].Timer, Duty, PWM_CFG[pwm_ch].Clock);
		Timer_Start(PWM_CFG[pwm_ch].Timer);
	}
	else
	{
		return_value = PWM_EN_InvalidChannel;
     7f6:	81 e0       	ldi	r24, 0x01	; 1
	}
	return return_value;
}
     7f8:	df 91       	pop	r29
     7fa:	cf 91       	pop	r28
     7fc:	08 95       	ret

000007fe <Timer_Start>:
	}
	else{/*MISRA C*/}
}
void			  Timer_Start			(Timer_t Timer)
{
	if(Timer == Timer0)
     7fe:	88 23       	and	r24, r24
     800:	41 f4       	brne	.+16     	; 0x812 <Timer_Start+0x14>
	{
		TIMER0.Control.Clock = Clock[Timer0];
     802:	90 91 ae 00 	lds	r25, 0x00AE
     806:	97 70       	andi	r25, 0x07	; 7
     808:	83 b7       	in	r24, 0x33	; 51
     80a:	88 7f       	andi	r24, 0xF8	; 248
     80c:	89 2b       	or	r24, r25
     80e:	83 bf       	out	0x33, r24	; 51
     810:	08 95       	ret
	}
	else if(Timer == Timer2)
     812:	81 30       	cpi	r24, 0x01	; 1
     814:	39 f4       	brne	.+14     	; 0x824 <Timer_Start+0x26>
	{
		TIMER2.Control.Clock = Clock[Timer2];
     816:	90 91 af 00 	lds	r25, 0x00AF
     81a:	97 70       	andi	r25, 0x07	; 7
     81c:	85 b5       	in	r24, 0x25	; 37
     81e:	88 7f       	andi	r24, 0xF8	; 248
     820:	89 2b       	or	r24, r25
     822:	85 bd       	out	0x25, r24	; 37
     824:	08 95       	ret

00000826 <Timer_Stop>:
	}
	else{/*MISRA C*/}
}
void			  Timer_Stop			(Timer_t Timer)
{
	if(Timer == Timer0)
     826:	88 23       	and	r24, r24
     828:	21 f4       	brne	.+8      	; 0x832 <Timer_Stop+0xc>
	{
		TIMER0.Control.Clock = TMR_EN_NoClock;	
     82a:	83 b7       	in	r24, 0x33	; 51
     82c:	88 7f       	andi	r24, 0xF8	; 248
     82e:	83 bf       	out	0x33, r24	; 51
     830:	08 95       	ret
	}
	else if(Timer == Timer2)
     832:	81 30       	cpi	r24, 0x01	; 1
     834:	19 f4       	brne	.+6      	; 0x83c <Timer_Stop+0x16>
	{
		TIMER2.Control.Clock = TMR_EN_NoClock;
     836:	85 b5       	in	r24, 0x25	; 37
     838:	88 7f       	andi	r24, 0xF8	; 248
     83a:	85 bd       	out	0x25, r24	; 37
     83c:	08 95       	ret

0000083e <Timer_Counter_0>:
	}
	else{/*MISRA C*/}
}
TimerError_t      Timer_Counter_0		(V_CallBack_V_t Ptr_Action, uint8_t Counts, TMR_Edge_t Edge)
{
     83e:	0f 93       	push	r16
     840:	1f 93       	push	r17
     842:	cf 93       	push	r28
     844:	df 93       	push	r29
     846:	ec 01       	movw	r28, r24
     848:	06 2f       	mov	r16, r22
     84a:	14 2f       	mov	r17, r20
	TimerError_t return_value = TMR_EN_valid_inti;
	if((Ptr_Action != NULL))
     84c:	00 97       	sbiw	r24, 0x00	; 0
     84e:	c1 f0       	breq	.+48     	; 0x880 <__stack+0x21>
	{
		Timer_Stop(Timer0);
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	0e 94 13 04 	call	0x826	; 0x826 <Timer_Stop>
		TIMER0.Control.CTC_wave_generation = ENABLE;
     856:	83 b7       	in	r24, 0x33	; 51
     858:	88 60       	ori	r24, 0x08	; 8
     85a:	83 bf       	out	0x33, r24	; 51
		TIMER0.Control.PWM_wave_generation = DISABLE;
     85c:	83 b7       	in	r24, 0x33	; 51
     85e:	8f 7b       	andi	r24, 0xBF	; 191
     860:	83 bf       	out	0x33, r24	; 51
		
		CounterAction = Ptr_Action;
     862:	d0 93 ad 00 	sts	0x00AD, r29
     866:	c0 93 ac 00 	sts	0x00AC, r28
		TIMER0.CompareValue = Counts;
     86a:	0c bf       	out	0x3c, r16	; 60
		
		TIMER0.Interrupts.Comp_Match = ENABLE;
     86c:	89 b7       	in	r24, 0x39	; 57
     86e:	82 60       	ori	r24, 0x02	; 2
     870:	89 bf       	out	0x39, r24	; 57
		TIMER0.Control.Clock = Edge;
     872:	17 70       	andi	r17, 0x07	; 7
     874:	83 b7       	in	r24, 0x33	; 51
     876:	88 7f       	andi	r24, 0xF8	; 248
     878:	18 2b       	or	r17, r24
     87a:	13 bf       	out	0x33, r17	; 51
	}
	else{/*MISRA C*/}
}
TimerError_t      Timer_Counter_0		(V_CallBack_V_t Ptr_Action, uint8_t Counts, TMR_Edge_t Edge)
{
	TimerError_t return_value = TMR_EN_valid_inti;
     87c:	80 e0       	ldi	r24, 0x00	; 0
     87e:	01 c0       	rjmp	.+2      	; 0x882 <__stack+0x23>
		TIMER0.Control.Clock = Edge;
		//DDRB0 = INPUT;
	}
	else
	{
		return_value = TMR_EN_InvalidPointer;
     880:	81 e0       	ldi	r24, 0x01	; 1
	}
	return return_value;
}
     882:	df 91       	pop	r29
     884:	cf 91       	pop	r28
     886:	1f 91       	pop	r17
     888:	0f 91       	pop	r16
     88a:	08 95       	ret

0000088c <Timer_ResetCounter>:
	else{/*MISRA C*/}
}
void	          Timer_ResetCounter    (Timer_t Timer)
{
	
	if(Timer == Timer0)
     88c:	88 23       	and	r24, r24
     88e:	91 f4       	brne	.+36     	; 0x8b4 <Timer_ResetCounter+0x28>
	{
		OverFlows[Timer0]	= RESET;
     890:	10 92 98 00 	sts	0x0098, r1
     894:	10 92 99 00 	sts	0x0099, r1
     898:	10 92 9a 00 	sts	0x009A, r1
     89c:	10 92 9b 00 	sts	0x009B, r1
     8a0:	10 92 9c 00 	sts	0x009C, r1
     8a4:	10 92 9d 00 	sts	0x009D, r1
     8a8:	10 92 9e 00 	sts	0x009E, r1
     8ac:	10 92 9f 00 	sts	0x009F, r1
		TIMER0.Counter		= RESET;
     8b0:	12 be       	out	0x32, r1	; 50
     8b2:	08 95       	ret
	}
	else if(Timer == Timer2)
     8b4:	81 30       	cpi	r24, 0x01	; 1
     8b6:	89 f4       	brne	.+34     	; 0x8da <Timer_ResetCounter+0x4e>
	{
		OverFlows[Timer2]	= RESET;
     8b8:	10 92 a0 00 	sts	0x00A0, r1
     8bc:	10 92 a1 00 	sts	0x00A1, r1
     8c0:	10 92 a2 00 	sts	0x00A2, r1
     8c4:	10 92 a3 00 	sts	0x00A3, r1
     8c8:	10 92 a4 00 	sts	0x00A4, r1
     8cc:	10 92 a5 00 	sts	0x00A5, r1
     8d0:	10 92 a6 00 	sts	0x00A6, r1
     8d4:	10 92 a7 00 	sts	0x00A7, r1
		TIMER2.Counter		= RESET;
     8d8:	14 bc       	out	0x24, r1	; 36
     8da:	08 95       	ret

000008dc <Timer_Delay_MS>:
		return_value = TMR_EN_InvalidPointer;
	}
	return return_value;
}
void		      Timer_Delay_MS		(Timer_t Timer, uint32_t Delay)
{
     8dc:	4f 92       	push	r4
     8de:	5f 92       	push	r5
     8e0:	6f 92       	push	r6
     8e2:	7f 92       	push	r7
     8e4:	8f 92       	push	r8
     8e6:	9f 92       	push	r9
     8e8:	af 92       	push	r10
     8ea:	bf 92       	push	r11
     8ec:	cf 92       	push	r12
     8ee:	df 92       	push	r13
     8f0:	ef 92       	push	r14
     8f2:	ff 92       	push	r15
     8f4:	0f 93       	push	r16
     8f6:	1f 93       	push	r17
     8f8:	cf 93       	push	r28
     8fa:	df 93       	push	r29
     8fc:	6a 01       	movw	r12, r20
     8fe:	7b 01       	movw	r14, r22
	if(Timer == Timer0)
     900:	88 23       	and	r24, r24
     902:	09 f0       	breq	.+2      	; 0x906 <Timer_Delay_MS+0x2a>
     904:	e9 c0       	rjmp	.+466    	; 0xad8 <Timer_Delay_MS+0x1fc>
	{
		TIMER0.Control.CTC_wave_generation = DISABLE;
     906:	83 b7       	in	r24, 0x33	; 51
     908:	87 7f       	andi	r24, 0xF7	; 247
     90a:	83 bf       	out	0x33, r24	; 51
		TIMER0.Control.PWM_wave_generation = DISABLE;
     90c:	83 b7       	in	r24, 0x33	; 51
     90e:	8f 7b       	andi	r24, 0xBF	; 191
     910:	83 bf       	out	0x33, r24	; 51
		TIMER0.Control.Modes_out_on_comp   = TMR_EN_CTC_Disconnect;
     912:	83 b7       	in	r24, 0x33	; 51
     914:	8f 7c       	andi	r24, 0xCF	; 207
     916:	83 bf       	out	0x33, r24	; 51
		
		Timer_ResetCounter(Timer0);
     918:	80 e0       	ldi	r24, 0x00	; 0
     91a:	0e 94 46 04 	call	0x88c	; 0x88c <Timer_ResetCounter>
		TIMER0.Interrupts.OverFlow		   = ENABLE;
     91e:	89 b7       	in	r24, 0x39	; 57
     920:	81 60       	ori	r24, 0x01	; 1
     922:	89 bf       	out	0x39, r24	; 57
		TIMER0.Control.Clock               = TMR_EN_FCPU_Clock;
     924:	83 b7       	in	r24, 0x33	; 51
     926:	88 7f       	andi	r24, 0xF8	; 248
     928:	81 60       	ori	r24, 0x01	; 1
     92a:	83 bf       	out	0x33, r24	; 51

		while(((OverFlows[Timer0]*256UL + (TIMER0.Counter) + 1)) < (Delay*8000UL));
     92c:	c7 01       	movw	r24, r14
     92e:	b6 01       	movw	r22, r12
     930:	20 e4       	ldi	r18, 0x40	; 64
     932:	3f e1       	ldi	r19, 0x1F	; 31
     934:	40 e0       	ldi	r20, 0x00	; 0
     936:	50 e0       	ldi	r21, 0x00	; 0
     938:	0e 94 88 0c 	call	0x1910	; 0x1910 <__mulsi3>
     93c:	dc 01       	movw	r26, r24
     93e:	cb 01       	movw	r24, r22
     940:	3c 01       	movw	r6, r24
     942:	4d 01       	movw	r8, r26
     944:	aa 24       	eor	r10, r10
     946:	bb 24       	eor	r11, r11
     948:	65 01       	movw	r12, r10
     94a:	0f 2e       	mov	r0, r31
     94c:	f8 e9       	ldi	r31, 0x98	; 152
     94e:	ef 2e       	mov	r14, r31
     950:	f0 e0       	ldi	r31, 0x00	; 0
     952:	ff 2e       	mov	r15, r31
     954:	f0 2d       	mov	r31, r0
     956:	c1 e0       	ldi	r28, 0x01	; 1
     958:	d0 e0       	ldi	r29, 0x00	; 0
     95a:	f7 01       	movw	r30, r14
     95c:	20 81       	ld	r18, Z
     95e:	31 81       	ldd	r19, Z+1	; 0x01
     960:	42 81       	ldd	r20, Z+2	; 0x02
     962:	53 81       	ldd	r21, Z+3	; 0x03
     964:	64 81       	ldd	r22, Z+4	; 0x04
     966:	75 81       	ldd	r23, Z+5	; 0x05
     968:	86 81       	ldd	r24, Z+6	; 0x06
     96a:	97 81       	ldd	r25, Z+7	; 0x07
     96c:	12 b7       	in	r17, 0x32	; 50
     96e:	08 e0       	ldi	r16, 0x08	; 8
     970:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <__ashldi3>
     974:	12 0f       	add	r17, r18
     976:	fc 2f       	mov	r31, r28
     978:	12 17       	cp	r17, r18
     97a:	08 f0       	brcs	.+2      	; 0x97e <Timer_Delay_MS+0xa2>
     97c:	fd 2f       	mov	r31, r29
     97e:	03 2f       	mov	r16, r19
     980:	ed 2f       	mov	r30, r29
     982:	3f 0f       	add	r19, r31
     984:	2c 2f       	mov	r18, r28
     986:	30 17       	cp	r19, r16
     988:	08 f0       	brcs	.+2      	; 0x98c <Timer_Delay_MS+0xb0>
     98a:	2d 2f       	mov	r18, r29
     98c:	e2 2b       	or	r30, r18
     98e:	03 2f       	mov	r16, r19
     990:	b4 2f       	mov	r27, r20
     992:	2d 2f       	mov	r18, r29
     994:	4e 0f       	add	r20, r30
     996:	ec 2f       	mov	r30, r28
     998:	4b 17       	cp	r20, r27
     99a:	08 f0       	brcs	.+2      	; 0x99e <Timer_Delay_MS+0xc2>
     99c:	ed 2f       	mov	r30, r29
     99e:	2e 2b       	or	r18, r30
     9a0:	b4 2f       	mov	r27, r20
     9a2:	a5 2f       	mov	r26, r21
     9a4:	ed 2f       	mov	r30, r29
     9a6:	52 0f       	add	r21, r18
     9a8:	2c 2f       	mov	r18, r28
     9aa:	5a 17       	cp	r21, r26
     9ac:	08 f0       	brcs	.+2      	; 0x9b0 <Timer_Delay_MS+0xd4>
     9ae:	2d 2f       	mov	r18, r29
     9b0:	e2 2b       	or	r30, r18
     9b2:	a5 2f       	mov	r26, r21
     9b4:	f6 2f       	mov	r31, r22
     9b6:	2d 2f       	mov	r18, r29
     9b8:	6e 0f       	add	r22, r30
     9ba:	ec 2f       	mov	r30, r28
     9bc:	6f 17       	cp	r22, r31
     9be:	08 f0       	brcs	.+2      	; 0x9c2 <Timer_Delay_MS+0xe6>
     9c0:	ed 2f       	mov	r30, r29
     9c2:	2e 2b       	or	r18, r30
     9c4:	f6 2f       	mov	r31, r22
     9c6:	e7 2f       	mov	r30, r23
     9c8:	5d 2e       	mov	r5, r29
     9ca:	72 0f       	add	r23, r18
     9cc:	2c 2f       	mov	r18, r28
     9ce:	7e 17       	cp	r23, r30
     9d0:	08 f0       	brcs	.+2      	; 0x9d4 <Timer_Delay_MS+0xf8>
     9d2:	2d 2f       	mov	r18, r29
     9d4:	52 2a       	or	r5, r18
     9d6:	e7 2f       	mov	r30, r23
     9d8:	28 2f       	mov	r18, r24
     9da:	4d 2e       	mov	r4, r29
     9dc:	85 0d       	add	r24, r5
     9de:	5c 2e       	mov	r5, r28
     9e0:	82 17       	cp	r24, r18
     9e2:	08 f0       	brcs	.+2      	; 0x9e6 <Timer_Delay_MS+0x10a>
     9e4:	5d 2e       	mov	r5, r29
     9e6:	45 28       	or	r4, r5
     9e8:	28 2f       	mov	r18, r24
     9ea:	94 0d       	add	r25, r4
     9ec:	51 2e       	mov	r5, r17
     9ee:	53 94       	inc	r5
     9f0:	4c 2e       	mov	r4, r28
     9f2:	51 16       	cp	r5, r17
     9f4:	08 f0       	brcs	.+2      	; 0x9f8 <Timer_Delay_MS+0x11c>
     9f6:	4d 2e       	mov	r4, r29
     9f8:	1c 2f       	mov	r17, r28
     9fa:	30 17       	cp	r19, r16
     9fc:	08 f0       	brcs	.+2      	; 0xa00 <Timer_Delay_MS+0x124>
     9fe:	1d 2f       	mov	r17, r29
     a00:	43 0e       	add	r4, r19
     a02:	0c 2f       	mov	r16, r28
     a04:	43 16       	cp	r4, r19
     a06:	08 f0       	brcs	.+2      	; 0xa0a <Timer_Delay_MS+0x12e>
     a08:	0d 2f       	mov	r16, r29
     a0a:	10 2b       	or	r17, r16
     a0c:	34 2d       	mov	r19, r4
     a0e:	0c 2f       	mov	r16, r28
     a10:	4b 17       	cp	r20, r27
     a12:	08 f0       	brcs	.+2      	; 0xa16 <Timer_Delay_MS+0x13a>
     a14:	0d 2f       	mov	r16, r29
     a16:	14 0f       	add	r17, r20
     a18:	bc 2f       	mov	r27, r28
     a1a:	14 17       	cp	r17, r20
     a1c:	08 f0       	brcs	.+2      	; 0xa20 <Timer_Delay_MS+0x144>
     a1e:	bd 2f       	mov	r27, r29
     a20:	0b 2b       	or	r16, r27
     a22:	41 2f       	mov	r20, r17
     a24:	bc 2f       	mov	r27, r28
     a26:	5a 17       	cp	r21, r26
     a28:	08 f0       	brcs	.+2      	; 0xa2c <Timer_Delay_MS+0x150>
     a2a:	bd 2f       	mov	r27, r29
     a2c:	05 0f       	add	r16, r21
     a2e:	ac 2f       	mov	r26, r28
     a30:	05 17       	cp	r16, r21
     a32:	08 f0       	brcs	.+2      	; 0xa36 <Timer_Delay_MS+0x15a>
     a34:	ad 2f       	mov	r26, r29
     a36:	ba 2b       	or	r27, r26
     a38:	50 2f       	mov	r21, r16
     a3a:	ac 2f       	mov	r26, r28
     a3c:	6f 17       	cp	r22, r31
     a3e:	08 f0       	brcs	.+2      	; 0xa42 <Timer_Delay_MS+0x166>
     a40:	ad 2f       	mov	r26, r29
     a42:	b6 0f       	add	r27, r22
     a44:	fc 2f       	mov	r31, r28
     a46:	b6 17       	cp	r27, r22
     a48:	08 f0       	brcs	.+2      	; 0xa4c <Timer_Delay_MS+0x170>
     a4a:	fd 2f       	mov	r31, r29
     a4c:	af 2b       	or	r26, r31
     a4e:	6b 2f       	mov	r22, r27
     a50:	fc 2f       	mov	r31, r28
     a52:	7e 17       	cp	r23, r30
     a54:	08 f0       	brcs	.+2      	; 0xa58 <Timer_Delay_MS+0x17c>
     a56:	fd 2f       	mov	r31, r29
     a58:	a7 0f       	add	r26, r23
     a5a:	ec 2f       	mov	r30, r28
     a5c:	a7 17       	cp	r26, r23
     a5e:	08 f0       	brcs	.+2      	; 0xa62 <Timer_Delay_MS+0x186>
     a60:	ed 2f       	mov	r30, r29
     a62:	fe 2b       	or	r31, r30
     a64:	7a 2f       	mov	r23, r26
     a66:	4c 2e       	mov	r4, r28
     a68:	82 17       	cp	r24, r18
     a6a:	08 f0       	brcs	.+2      	; 0xa6e <Timer_Delay_MS+0x192>
     a6c:	4d 2e       	mov	r4, r29
     a6e:	f8 0f       	add	r31, r24
     a70:	2c 2f       	mov	r18, r28
     a72:	f8 17       	cp	r31, r24
     a74:	08 f0       	brcs	.+2      	; 0xa78 <Timer_Delay_MS+0x19c>
     a76:	2d 2f       	mov	r18, r29
     a78:	42 2a       	or	r4, r18
     a7a:	94 0d       	add	r25, r4
     a7c:	9d 15       	cp	r25, r13
     a7e:	08 f4       	brcc	.+2      	; 0xa82 <Timer_Delay_MS+0x1a6>
     a80:	6c cf       	rjmp	.-296    	; 0x95a <Timer_Delay_MS+0x7e>
     a82:	d9 16       	cp	r13, r25
     a84:	09 f0       	breq	.+2      	; 0xa88 <Timer_Delay_MS+0x1ac>
     a86:	0c c1       	rjmp	.+536    	; 0xca0 <Timer_Delay_MS+0x3c4>
     a88:	fc 15       	cp	r31, r12
     a8a:	08 f4       	brcc	.+2      	; 0xa8e <Timer_Delay_MS+0x1b2>
     a8c:	66 cf       	rjmp	.-308    	; 0x95a <Timer_Delay_MS+0x7e>
     a8e:	cf 16       	cp	r12, r31
     a90:	09 f0       	breq	.+2      	; 0xa94 <Timer_Delay_MS+0x1b8>
     a92:	06 c1       	rjmp	.+524    	; 0xca0 <Timer_Delay_MS+0x3c4>
     a94:	7b 15       	cp	r23, r11
     a96:	08 f4       	brcc	.+2      	; 0xa9a <Timer_Delay_MS+0x1be>
     a98:	60 cf       	rjmp	.-320    	; 0x95a <Timer_Delay_MS+0x7e>
     a9a:	b7 16       	cp	r11, r23
     a9c:	09 f0       	breq	.+2      	; 0xaa0 <Timer_Delay_MS+0x1c4>
     a9e:	00 c1       	rjmp	.+512    	; 0xca0 <Timer_Delay_MS+0x3c4>
     aa0:	6a 15       	cp	r22, r10
     aa2:	08 f4       	brcc	.+2      	; 0xaa6 <Timer_Delay_MS+0x1ca>
     aa4:	5a cf       	rjmp	.-332    	; 0x95a <Timer_Delay_MS+0x7e>
     aa6:	a6 16       	cp	r10, r22
     aa8:	09 f0       	breq	.+2      	; 0xaac <Timer_Delay_MS+0x1d0>
     aaa:	fa c0       	rjmp	.+500    	; 0xca0 <Timer_Delay_MS+0x3c4>
     aac:	59 15       	cp	r21, r9
     aae:	08 f4       	brcc	.+2      	; 0xab2 <Timer_Delay_MS+0x1d6>
     ab0:	54 cf       	rjmp	.-344    	; 0x95a <Timer_Delay_MS+0x7e>
     ab2:	95 16       	cp	r9, r21
     ab4:	09 f0       	breq	.+2      	; 0xab8 <Timer_Delay_MS+0x1dc>
     ab6:	f4 c0       	rjmp	.+488    	; 0xca0 <Timer_Delay_MS+0x3c4>
     ab8:	48 15       	cp	r20, r8
     aba:	08 f4       	brcc	.+2      	; 0xabe <Timer_Delay_MS+0x1e2>
     abc:	4e cf       	rjmp	.-356    	; 0x95a <Timer_Delay_MS+0x7e>
     abe:	84 16       	cp	r8, r20
     ac0:	09 f0       	breq	.+2      	; 0xac4 <Timer_Delay_MS+0x1e8>
     ac2:	ee c0       	rjmp	.+476    	; 0xca0 <Timer_Delay_MS+0x3c4>
     ac4:	37 15       	cp	r19, r7
     ac6:	08 f4       	brcc	.+2      	; 0xaca <Timer_Delay_MS+0x1ee>
     ac8:	48 cf       	rjmp	.-368    	; 0x95a <Timer_Delay_MS+0x7e>
     aca:	73 16       	cp	r7, r19
     acc:	09 f0       	breq	.+2      	; 0xad0 <Timer_Delay_MS+0x1f4>
     ace:	e8 c0       	rjmp	.+464    	; 0xca0 <Timer_Delay_MS+0x3c4>
     ad0:	56 14       	cp	r5, r6
     ad2:	08 f4       	brcc	.+2      	; 0xad6 <Timer_Delay_MS+0x1fa>
     ad4:	42 cf       	rjmp	.-380    	; 0x95a <Timer_Delay_MS+0x7e>
     ad6:	e4 c0       	rjmp	.+456    	; 0xca0 <Timer_Delay_MS+0x3c4>
	}
	else if(Timer == Timer2)
     ad8:	81 30       	cpi	r24, 0x01	; 1
     ada:	09 f0       	breq	.+2      	; 0xade <Timer_Delay_MS+0x202>
     adc:	e1 c0       	rjmp	.+450    	; 0xca0 <Timer_Delay_MS+0x3c4>
	{
		TIMER2.Control.CTC_wave_generation = DISABLE;
     ade:	85 b5       	in	r24, 0x25	; 37
     ae0:	87 7f       	andi	r24, 0xF7	; 247
     ae2:	85 bd       	out	0x25, r24	; 37
		TIMER2.Control.PWM_wave_generation = DISABLE;
     ae4:	85 b5       	in	r24, 0x25	; 37
     ae6:	8f 7b       	andi	r24, 0xBF	; 191
     ae8:	85 bd       	out	0x25, r24	; 37
		TIMER2.Control.Modes_out_on_comp   = TMR_EN_CTC_Disconnect;
     aea:	85 b5       	in	r24, 0x25	; 37
     aec:	8f 7c       	andi	r24, 0xCF	; 207
     aee:	85 bd       	out	0x25, r24	; 37
		
		Timer_ResetCounter(Timer2);
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	0e 94 46 04 	call	0x88c	; 0x88c <Timer_ResetCounter>
		TIMER2.Interrupts.OverFlow		   = ENABLE;
     af6:	89 b7       	in	r24, 0x39	; 57
     af8:	80 64       	ori	r24, 0x40	; 64
     afa:	89 bf       	out	0x39, r24	; 57
		TIMER2.Control.Clock               = TMR_EN_FCPU_Clock;
     afc:	85 b5       	in	r24, 0x25	; 37
     afe:	88 7f       	andi	r24, 0xF8	; 248
     b00:	81 60       	ori	r24, 0x01	; 1
     b02:	85 bd       	out	0x25, r24	; 37

		while(((OverFlows[Timer2]*256UL + (TIMER2.Counter) + 1)) < (Delay*8000UL));
     b04:	c7 01       	movw	r24, r14
     b06:	b6 01       	movw	r22, r12
     b08:	20 e4       	ldi	r18, 0x40	; 64
     b0a:	3f e1       	ldi	r19, 0x1F	; 31
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	0e 94 88 0c 	call	0x1910	; 0x1910 <__mulsi3>
     b14:	dc 01       	movw	r26, r24
     b16:	cb 01       	movw	r24, r22
     b18:	3c 01       	movw	r6, r24
     b1a:	4d 01       	movw	r8, r26
     b1c:	aa 24       	eor	r10, r10
     b1e:	bb 24       	eor	r11, r11
     b20:	65 01       	movw	r12, r10
     b22:	0f 2e       	mov	r0, r31
     b24:	f0 ea       	ldi	r31, 0xA0	; 160
     b26:	ef 2e       	mov	r14, r31
     b28:	f0 e0       	ldi	r31, 0x00	; 0
     b2a:	ff 2e       	mov	r15, r31
     b2c:	f0 2d       	mov	r31, r0
     b2e:	c1 e0       	ldi	r28, 0x01	; 1
     b30:	d0 e0       	ldi	r29, 0x00	; 0
     b32:	f7 01       	movw	r30, r14
     b34:	20 81       	ld	r18, Z
     b36:	31 81       	ldd	r19, Z+1	; 0x01
     b38:	42 81       	ldd	r20, Z+2	; 0x02
     b3a:	53 81       	ldd	r21, Z+3	; 0x03
     b3c:	64 81       	ldd	r22, Z+4	; 0x04
     b3e:	75 81       	ldd	r23, Z+5	; 0x05
     b40:	86 81       	ldd	r24, Z+6	; 0x06
     b42:	97 81       	ldd	r25, Z+7	; 0x07
     b44:	14 b5       	in	r17, 0x24	; 36
     b46:	08 e0       	ldi	r16, 0x08	; 8
     b48:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <__ashldi3>
     b4c:	12 0f       	add	r17, r18
     b4e:	fc 2f       	mov	r31, r28
     b50:	12 17       	cp	r17, r18
     b52:	08 f0       	brcs	.+2      	; 0xb56 <Timer_Delay_MS+0x27a>
     b54:	fd 2f       	mov	r31, r29
     b56:	03 2f       	mov	r16, r19
     b58:	ed 2f       	mov	r30, r29
     b5a:	3f 0f       	add	r19, r31
     b5c:	2c 2f       	mov	r18, r28
     b5e:	30 17       	cp	r19, r16
     b60:	08 f0       	brcs	.+2      	; 0xb64 <Timer_Delay_MS+0x288>
     b62:	2d 2f       	mov	r18, r29
     b64:	e2 2b       	or	r30, r18
     b66:	03 2f       	mov	r16, r19
     b68:	b4 2f       	mov	r27, r20
     b6a:	2d 2f       	mov	r18, r29
     b6c:	4e 0f       	add	r20, r30
     b6e:	ec 2f       	mov	r30, r28
     b70:	4b 17       	cp	r20, r27
     b72:	08 f0       	brcs	.+2      	; 0xb76 <Timer_Delay_MS+0x29a>
     b74:	ed 2f       	mov	r30, r29
     b76:	2e 2b       	or	r18, r30
     b78:	b4 2f       	mov	r27, r20
     b7a:	a5 2f       	mov	r26, r21
     b7c:	ed 2f       	mov	r30, r29
     b7e:	52 0f       	add	r21, r18
     b80:	2c 2f       	mov	r18, r28
     b82:	5a 17       	cp	r21, r26
     b84:	08 f0       	brcs	.+2      	; 0xb88 <Timer_Delay_MS+0x2ac>
     b86:	2d 2f       	mov	r18, r29
     b88:	e2 2b       	or	r30, r18
     b8a:	a5 2f       	mov	r26, r21
     b8c:	f6 2f       	mov	r31, r22
     b8e:	2d 2f       	mov	r18, r29
     b90:	6e 0f       	add	r22, r30
     b92:	ec 2f       	mov	r30, r28
     b94:	6f 17       	cp	r22, r31
     b96:	08 f0       	brcs	.+2      	; 0xb9a <Timer_Delay_MS+0x2be>
     b98:	ed 2f       	mov	r30, r29
     b9a:	2e 2b       	or	r18, r30
     b9c:	f6 2f       	mov	r31, r22
     b9e:	e7 2f       	mov	r30, r23
     ba0:	5d 2e       	mov	r5, r29
     ba2:	72 0f       	add	r23, r18
     ba4:	2c 2f       	mov	r18, r28
     ba6:	7e 17       	cp	r23, r30
     ba8:	08 f0       	brcs	.+2      	; 0xbac <Timer_Delay_MS+0x2d0>
     baa:	2d 2f       	mov	r18, r29
     bac:	52 2a       	or	r5, r18
     bae:	e7 2f       	mov	r30, r23
     bb0:	28 2f       	mov	r18, r24
     bb2:	4d 2e       	mov	r4, r29
     bb4:	85 0d       	add	r24, r5
     bb6:	5c 2e       	mov	r5, r28
     bb8:	82 17       	cp	r24, r18
     bba:	08 f0       	brcs	.+2      	; 0xbbe <Timer_Delay_MS+0x2e2>
     bbc:	5d 2e       	mov	r5, r29
     bbe:	45 28       	or	r4, r5
     bc0:	28 2f       	mov	r18, r24
     bc2:	94 0d       	add	r25, r4
     bc4:	51 2e       	mov	r5, r17
     bc6:	53 94       	inc	r5
     bc8:	4c 2e       	mov	r4, r28
     bca:	51 16       	cp	r5, r17
     bcc:	08 f0       	brcs	.+2      	; 0xbd0 <Timer_Delay_MS+0x2f4>
     bce:	4d 2e       	mov	r4, r29
     bd0:	1c 2f       	mov	r17, r28
     bd2:	30 17       	cp	r19, r16
     bd4:	08 f0       	brcs	.+2      	; 0xbd8 <Timer_Delay_MS+0x2fc>
     bd6:	1d 2f       	mov	r17, r29
     bd8:	43 0e       	add	r4, r19
     bda:	0c 2f       	mov	r16, r28
     bdc:	43 16       	cp	r4, r19
     bde:	08 f0       	brcs	.+2      	; 0xbe2 <Timer_Delay_MS+0x306>
     be0:	0d 2f       	mov	r16, r29
     be2:	10 2b       	or	r17, r16
     be4:	34 2d       	mov	r19, r4
     be6:	0c 2f       	mov	r16, r28
     be8:	4b 17       	cp	r20, r27
     bea:	08 f0       	brcs	.+2      	; 0xbee <Timer_Delay_MS+0x312>
     bec:	0d 2f       	mov	r16, r29
     bee:	14 0f       	add	r17, r20
     bf0:	bc 2f       	mov	r27, r28
     bf2:	14 17       	cp	r17, r20
     bf4:	08 f0       	brcs	.+2      	; 0xbf8 <Timer_Delay_MS+0x31c>
     bf6:	bd 2f       	mov	r27, r29
     bf8:	0b 2b       	or	r16, r27
     bfa:	41 2f       	mov	r20, r17
     bfc:	bc 2f       	mov	r27, r28
     bfe:	5a 17       	cp	r21, r26
     c00:	08 f0       	brcs	.+2      	; 0xc04 <Timer_Delay_MS+0x328>
     c02:	bd 2f       	mov	r27, r29
     c04:	05 0f       	add	r16, r21
     c06:	ac 2f       	mov	r26, r28
     c08:	05 17       	cp	r16, r21
     c0a:	08 f0       	brcs	.+2      	; 0xc0e <Timer_Delay_MS+0x332>
     c0c:	ad 2f       	mov	r26, r29
     c0e:	ba 2b       	or	r27, r26
     c10:	50 2f       	mov	r21, r16
     c12:	ac 2f       	mov	r26, r28
     c14:	6f 17       	cp	r22, r31
     c16:	08 f0       	brcs	.+2      	; 0xc1a <Timer_Delay_MS+0x33e>
     c18:	ad 2f       	mov	r26, r29
     c1a:	b6 0f       	add	r27, r22
     c1c:	fc 2f       	mov	r31, r28
     c1e:	b6 17       	cp	r27, r22
     c20:	08 f0       	brcs	.+2      	; 0xc24 <Timer_Delay_MS+0x348>
     c22:	fd 2f       	mov	r31, r29
     c24:	af 2b       	or	r26, r31
     c26:	6b 2f       	mov	r22, r27
     c28:	fc 2f       	mov	r31, r28
     c2a:	7e 17       	cp	r23, r30
     c2c:	08 f0       	brcs	.+2      	; 0xc30 <Timer_Delay_MS+0x354>
     c2e:	fd 2f       	mov	r31, r29
     c30:	a7 0f       	add	r26, r23
     c32:	ec 2f       	mov	r30, r28
     c34:	a7 17       	cp	r26, r23
     c36:	08 f0       	brcs	.+2      	; 0xc3a <Timer_Delay_MS+0x35e>
     c38:	ed 2f       	mov	r30, r29
     c3a:	fe 2b       	or	r31, r30
     c3c:	7a 2f       	mov	r23, r26
     c3e:	4c 2e       	mov	r4, r28
     c40:	82 17       	cp	r24, r18
     c42:	08 f0       	brcs	.+2      	; 0xc46 <Timer_Delay_MS+0x36a>
     c44:	4d 2e       	mov	r4, r29
     c46:	f8 0f       	add	r31, r24
     c48:	2c 2f       	mov	r18, r28
     c4a:	f8 17       	cp	r31, r24
     c4c:	08 f0       	brcs	.+2      	; 0xc50 <Timer_Delay_MS+0x374>
     c4e:	2d 2f       	mov	r18, r29
     c50:	42 2a       	or	r4, r18
     c52:	94 0d       	add	r25, r4
     c54:	9d 15       	cp	r25, r13
     c56:	08 f4       	brcc	.+2      	; 0xc5a <Timer_Delay_MS+0x37e>
     c58:	6c cf       	rjmp	.-296    	; 0xb32 <Timer_Delay_MS+0x256>
     c5a:	d9 16       	cp	r13, r25
     c5c:	09 f5       	brne	.+66     	; 0xca0 <Timer_Delay_MS+0x3c4>
     c5e:	fc 15       	cp	r31, r12
     c60:	08 f4       	brcc	.+2      	; 0xc64 <Timer_Delay_MS+0x388>
     c62:	67 cf       	rjmp	.-306    	; 0xb32 <Timer_Delay_MS+0x256>
     c64:	cf 16       	cp	r12, r31
     c66:	e1 f4       	brne	.+56     	; 0xca0 <Timer_Delay_MS+0x3c4>
     c68:	7b 15       	cp	r23, r11
     c6a:	08 f4       	brcc	.+2      	; 0xc6e <Timer_Delay_MS+0x392>
     c6c:	62 cf       	rjmp	.-316    	; 0xb32 <Timer_Delay_MS+0x256>
     c6e:	b7 16       	cp	r11, r23
     c70:	b9 f4       	brne	.+46     	; 0xca0 <Timer_Delay_MS+0x3c4>
     c72:	6a 15       	cp	r22, r10
     c74:	08 f4       	brcc	.+2      	; 0xc78 <Timer_Delay_MS+0x39c>
     c76:	5d cf       	rjmp	.-326    	; 0xb32 <Timer_Delay_MS+0x256>
     c78:	a6 16       	cp	r10, r22
     c7a:	91 f4       	brne	.+36     	; 0xca0 <Timer_Delay_MS+0x3c4>
     c7c:	59 15       	cp	r21, r9
     c7e:	08 f4       	brcc	.+2      	; 0xc82 <Timer_Delay_MS+0x3a6>
     c80:	58 cf       	rjmp	.-336    	; 0xb32 <Timer_Delay_MS+0x256>
     c82:	95 16       	cp	r9, r21
     c84:	69 f4       	brne	.+26     	; 0xca0 <Timer_Delay_MS+0x3c4>
     c86:	48 15       	cp	r20, r8
     c88:	08 f4       	brcc	.+2      	; 0xc8c <Timer_Delay_MS+0x3b0>
     c8a:	53 cf       	rjmp	.-346    	; 0xb32 <Timer_Delay_MS+0x256>
     c8c:	84 16       	cp	r8, r20
     c8e:	41 f4       	brne	.+16     	; 0xca0 <Timer_Delay_MS+0x3c4>
     c90:	37 15       	cp	r19, r7
     c92:	08 f4       	brcc	.+2      	; 0xc96 <Timer_Delay_MS+0x3ba>
     c94:	4e cf       	rjmp	.-356    	; 0xb32 <Timer_Delay_MS+0x256>
     c96:	73 16       	cp	r7, r19
     c98:	19 f4       	brne	.+6      	; 0xca0 <Timer_Delay_MS+0x3c4>
     c9a:	56 14       	cp	r5, r6
     c9c:	08 f4       	brcc	.+2      	; 0xca0 <Timer_Delay_MS+0x3c4>
     c9e:	49 cf       	rjmp	.-366    	; 0xb32 <Timer_Delay_MS+0x256>
	}
	else{/*MISRA C*/}
}
     ca0:	df 91       	pop	r29
     ca2:	cf 91       	pop	r28
     ca4:	1f 91       	pop	r17
     ca6:	0f 91       	pop	r16
     ca8:	ff 90       	pop	r15
     caa:	ef 90       	pop	r14
     cac:	df 90       	pop	r13
     cae:	cf 90       	pop	r12
     cb0:	bf 90       	pop	r11
     cb2:	af 90       	pop	r10
     cb4:	9f 90       	pop	r9
     cb6:	8f 90       	pop	r8
     cb8:	7f 90       	pop	r7
     cba:	6f 90       	pop	r6
     cbc:	5f 90       	pop	r5
     cbe:	4f 90       	pop	r4
     cc0:	08 95       	ret

00000cc2 <Timer_De_init>:
	}
	return return_value;
}
void              Timer_De_init			(Timer_t Timer)
{
	if(Timer == Timer0)
     cc2:	88 23       	and	r24, r24
     cc4:	b1 f4       	brne	.+44     	; 0xcf2 <Timer_De_init+0x30>
	{
		Timer_Stop(Timer);
     cc6:	0e 94 13 04 	call	0x826	; 0x826 <Timer_Stop>
		Timer_ResetCounter(Timer);
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	0e 94 46 04 	call	0x88c	; 0x88c <Timer_ResetCounter>
		TIMER0.Interrupts.Comp_Match       = DISABLE;
     cd0:	89 b7       	in	r24, 0x39	; 57
     cd2:	8d 7f       	andi	r24, 0xFD	; 253
     cd4:	89 bf       	out	0x39, r24	; 57
		TIMER0.Interrupts.OverFlow         = DISABLE;
     cd6:	89 b7       	in	r24, 0x39	; 57
     cd8:	8e 7f       	andi	r24, 0xFE	; 254
     cda:	89 bf       	out	0x39, r24	; 57
		TIMER0.Control.CTC_wave_generation = DISABLE;
     cdc:	83 b7       	in	r24, 0x33	; 51
     cde:	87 7f       	andi	r24, 0xF7	; 247
     ce0:	83 bf       	out	0x33, r24	; 51
		TIMER0.Control.PWM_wave_generation = DISABLE;
     ce2:	83 b7       	in	r24, 0x33	; 51
     ce4:	8f 7b       	andi	r24, 0xBF	; 191
     ce6:	83 bf       	out	0x33, r24	; 51
		TIMER0.Control.Modes_out_on_comp   = TMR_EN_CTC_Disconnect;
     ce8:	83 b7       	in	r24, 0x33	; 51
     cea:	8f 7c       	andi	r24, 0xCF	; 207
     cec:	83 bf       	out	0x33, r24	; 51
		TIMER0.CompareValue = RESET;
     cee:	1c be       	out	0x3c, r1	; 60
     cf0:	08 95       	ret
	}
	else if (Timer == Timer2)
     cf2:	81 30       	cpi	r24, 0x01	; 1
     cf4:	a9 f4       	brne	.+42     	; 0xd20 <Timer_De_init+0x5e>
	{
		Timer_Stop(Timer);
     cf6:	0e 94 13 04 	call	0x826	; 0x826 <Timer_Stop>
		Timer_ResetCounter(Timer);
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	0e 94 46 04 	call	0x88c	; 0x88c <Timer_ResetCounter>
		TIMER2.Interrupts.Comp_Match       = DISABLE;
     d00:	89 b7       	in	r24, 0x39	; 57
     d02:	8f 77       	andi	r24, 0x7F	; 127
     d04:	89 bf       	out	0x39, r24	; 57
		TIMER2.Interrupts.OverFlow         = DISABLE;
     d06:	89 b7       	in	r24, 0x39	; 57
     d08:	8f 7b       	andi	r24, 0xBF	; 191
     d0a:	89 bf       	out	0x39, r24	; 57
		TIMER2.Control.CTC_wave_generation = DISABLE;
     d0c:	85 b5       	in	r24, 0x25	; 37
     d0e:	87 7f       	andi	r24, 0xF7	; 247
     d10:	85 bd       	out	0x25, r24	; 37
		TIMER2.Control.PWM_wave_generation = DISABLE;
     d12:	85 b5       	in	r24, 0x25	; 37
     d14:	8f 7b       	andi	r24, 0xBF	; 191
     d16:	85 bd       	out	0x25, r24	; 37
		TIMER2.Control.Modes_out_on_comp   = TMR_EN_CTC_Disconnect;
     d18:	85 b5       	in	r24, 0x25	; 37
     d1a:	8f 7c       	andi	r24, 0xCF	; 207
     d1c:	85 bd       	out	0x25, r24	; 37
		TIMER2.CompareValue = RESET;
     d1e:	13 bc       	out	0x23, r1	; 35
     d20:	08 95       	ret

00000d22 <Timer_Init>:




TimerError_t      Timer_Init			(_C TMR_Configuration_t * _C Configuration)
{
     d22:	cf 93       	push	r28
     d24:	df 93       	push	r29
     d26:	ec 01       	movw	r28, r24
	TimerError_t return_value = TMR_EN_valid_inti;
	if(Configuration != NULL)
     d28:	00 97       	sbiw	r24, 0x00	; 0
     d2a:	09 f4       	brne	.+2      	; 0xd2e <Timer_Init+0xc>
     d2c:	4f c0       	rjmp	.+158    	; 0xdcc <Timer_Init+0xaa>
	{
		if(Configuration->Timer == Timer0)
     d2e:	88 81       	ld	r24, Y
     d30:	88 23       	and	r24, r24
     d32:	29 f5       	brne	.+74     	; 0xd7e <Timer_Init+0x5c>
		{
			Timer_Stop(Configuration->Timer);
     d34:	0e 94 13 04 	call	0x826	; 0x826 <Timer_Stop>
			Timer_ResetCounter(Configuration->Timer);
     d38:	88 81       	ld	r24, Y
     d3a:	0e 94 46 04 	call	0x88c	; 0x88c <Timer_ResetCounter>
			TIMER0.Control.CTC_wave_generation = Configuration->Mode>>1;
     d3e:	99 81       	ldd	r25, Y+1	; 0x01
     d40:	99 0f       	add	r25, r25
     d42:	99 0f       	add	r25, r25
     d44:	98 70       	andi	r25, 0x08	; 8
     d46:	83 b7       	in	r24, 0x33	; 51
     d48:	87 7f       	andi	r24, 0xF7	; 247
     d4a:	89 2b       	or	r24, r25
     d4c:	83 bf       	out	0x33, r24	; 51
			TIMER0.Control.PWM_wave_generation = Configuration->Mode<<1;
     d4e:	83 b7       	in	r24, 0x33	; 51
     d50:	8f 7b       	andi	r24, 0xBF	; 191
     d52:	83 bf       	out	0x33, r24	; 51
			TIMER0.Control.Clock = TMR_EN_NoClock;
     d54:	83 b7       	in	r24, 0x33	; 51
     d56:	88 7f       	andi	r24, 0xF8	; 248
     d58:	83 bf       	out	0x33, r24	; 51
			TIMER0.Control.Modes_out_on_comp = Configuration->Action.OCR_Pin;
     d5a:	9b 81       	ldd	r25, Y+3	; 0x03
     d5c:	93 70       	andi	r25, 0x03	; 3
     d5e:	92 95       	swap	r25
     d60:	90 7f       	andi	r25, 0xF0	; 240
     d62:	83 b7       	in	r24, 0x33	; 51
     d64:	8f 7c       	andi	r24, 0xCF	; 207
     d66:	89 2b       	or	r24, r25
     d68:	83 bf       	out	0x33, r24	; 51
			TIMER0.CompareValue = Configuration->CompareValue;
     d6a:	8c 81       	ldd	r24, Y+4	; 0x04
     d6c:	8c bf       	out	0x3c, r24	; 60
			Clock[Configuration->Timer] = Configuration->Clock;
     d6e:	e8 81       	ld	r30, Y
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	e2 55       	subi	r30, 0x52	; 82
     d74:	ff 4f       	sbci	r31, 0xFF	; 255
     d76:	8a 81       	ldd	r24, Y+2	; 0x02
     d78:	80 83       	st	Z, r24



TimerError_t      Timer_Init			(_C TMR_Configuration_t * _C Configuration)
{
	TimerError_t return_value = TMR_EN_valid_inti;
     d7a:	80 e0       	ldi	r24, 0x00	; 0
     d7c:	2a c0       	rjmp	.+84     	; 0xdd2 <Timer_Init+0xb0>
			TIMER0.Control.Clock = TMR_EN_NoClock;
			TIMER0.Control.Modes_out_on_comp = Configuration->Action.OCR_Pin;
			TIMER0.CompareValue = Configuration->CompareValue;
			Clock[Configuration->Timer] = Configuration->Clock;
		}
		else if(Configuration->Timer == Timer2)
     d7e:	81 30       	cpi	r24, 0x01	; 1
     d80:	39 f5       	brne	.+78     	; 0xdd0 <Timer_Init+0xae>
		{
			Timer_Stop(Configuration->Timer);
     d82:	0e 94 13 04 	call	0x826	; 0x826 <Timer_Stop>
			Timer_ResetCounter(Configuration->Timer);
     d86:	88 81       	ld	r24, Y
     d88:	0e 94 46 04 	call	0x88c	; 0x88c <Timer_ResetCounter>
			TIMER2.Control.CTC_wave_generation = Configuration->Mode>>1;
     d8c:	99 81       	ldd	r25, Y+1	; 0x01
     d8e:	99 0f       	add	r25, r25
     d90:	99 0f       	add	r25, r25
     d92:	98 70       	andi	r25, 0x08	; 8
     d94:	85 b5       	in	r24, 0x25	; 37
     d96:	87 7f       	andi	r24, 0xF7	; 247
     d98:	89 2b       	or	r24, r25
     d9a:	85 bd       	out	0x25, r24	; 37
			TIMER2.Control.PWM_wave_generation = Configuration->Mode<<1;
     d9c:	85 b5       	in	r24, 0x25	; 37
     d9e:	8f 7b       	andi	r24, 0xBF	; 191
     da0:	85 bd       	out	0x25, r24	; 37
			TIMER2.Control.Clock = TMR_EN_NoClock;
     da2:	85 b5       	in	r24, 0x25	; 37
     da4:	88 7f       	andi	r24, 0xF8	; 248
     da6:	85 bd       	out	0x25, r24	; 37
			TIMER2.Control.Modes_out_on_comp = Configuration->Action.OCR_Pin;
     da8:	9b 81       	ldd	r25, Y+3	; 0x03
     daa:	93 70       	andi	r25, 0x03	; 3
     dac:	92 95       	swap	r25
     dae:	90 7f       	andi	r25, 0xF0	; 240
     db0:	85 b5       	in	r24, 0x25	; 37
     db2:	8f 7c       	andi	r24, 0xCF	; 207
     db4:	89 2b       	or	r24, r25
     db6:	85 bd       	out	0x25, r24	; 37
			TIMER2.CompareValue = Configuration->CompareValue;
     db8:	8c 81       	ldd	r24, Y+4	; 0x04
     dba:	83 bd       	out	0x23, r24	; 35
			Clock[Configuration->Timer] = Configuration->Clock;
     dbc:	e8 81       	ld	r30, Y
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	e2 55       	subi	r30, 0x52	; 82
     dc2:	ff 4f       	sbci	r31, 0xFF	; 255
     dc4:	8a 81       	ldd	r24, Y+2	; 0x02
     dc6:	80 83       	st	Z, r24



TimerError_t      Timer_Init			(_C TMR_Configuration_t * _C Configuration)
{
	TimerError_t return_value = TMR_EN_valid_inti;
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	03 c0       	rjmp	.+6      	; 0xdd2 <Timer_Init+0xb0>
			return_value = TMR_EN_InvalidTimer;	
		}
	}
	else
	{
		return_value = TMR_EN_InvalidPointer;
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	01 c0       	rjmp	.+2      	; 0xdd2 <Timer_Init+0xb0>
			TIMER2.CompareValue = Configuration->CompareValue;
			Clock[Configuration->Timer] = Configuration->Clock;
		}
		else
		{
			return_value = TMR_EN_InvalidTimer;	
     dd0:	82 e0       	ldi	r24, 0x02	; 2
	else
	{
		return_value = TMR_EN_InvalidPointer;
	}
	return return_value;
}
     dd2:	df 91       	pop	r29
     dd4:	cf 91       	pop	r28
     dd6:	08 95       	ret

00000dd8 <Timer_SetTrigger>:
		TIMER2.Counter		= RESET;
	}
	else{/*MISRA C*/}
}
TimerError_t      Timer_SetTrigger		(Timer_t Timer, V_CallBack_V_t Notifier, uint32_t Time_On_MS, uint32_t Time_Off_MS)
{
     dd8:	ef 92       	push	r14
     dda:	ff 92       	push	r15
     ddc:	0f 93       	push	r16
     dde:	1f 93       	push	r17
     de0:	cf 93       	push	r28
     de2:	df 93       	push	r29
     de4:	a8 2f       	mov	r26, r24
     de6:	fb 01       	movw	r30, r22
     de8:	ca 01       	movw	r24, r20
     dea:	b9 01       	movw	r22, r18
	TimerError_t return_value = TMR_EN_valid_inti;
	if((Notifier != NULL))
     dec:	30 97       	sbiw	r30, 0x00	; 0
     dee:	09 f4       	brne	.+2      	; 0xdf2 <Timer_SetTrigger+0x1a>
     df0:	af c0       	rjmp	.+350    	; 0xf50 <Timer_SetTrigger+0x178>
	{
		if(Timer == Timer0)
     df2:	aa 23       	and	r26, r26
     df4:	09 f0       	breq	.+2      	; 0xdf8 <Timer_SetTrigger+0x20>
     df6:	55 c0       	rjmp	.+170    	; 0xea2 <Timer_SetTrigger+0xca>
		{
			TIMER0.Control.CTC_wave_generation = DISABLE;
     df8:	23 b7       	in	r18, 0x33	; 51
     dfa:	27 7f       	andi	r18, 0xF7	; 247
     dfc:	23 bf       	out	0x33, r18	; 51
			TIMER0.Control.PWM_wave_generation = DISABLE;
     dfe:	23 b7       	in	r18, 0x33	; 51
     e00:	2f 7b       	andi	r18, 0xBF	; 191
     e02:	23 bf       	out	0x33, r18	; 51
			TIMER0.Control.Modes_out_on_comp   = TMR_EN_CTC_Disconnect;
     e04:	23 b7       	in	r18, 0x33	; 51
     e06:	2f 7c       	andi	r18, 0xCF	; 207
     e08:	23 bf       	out	0x33, r18	; 51
			
			NotifierAction[Timer0]  = Notifier;
     e0a:	f0 93 a9 00 	sts	0x00A9, r31
     e0e:	e0 93 a8 00 	sts	0x00A8, r30
			OverFlows[Timer0]       = RESET;
     e12:	10 92 98 00 	sts	0x0098, r1
     e16:	10 92 99 00 	sts	0x0099, r1
     e1a:	10 92 9a 00 	sts	0x009A, r1
     e1e:	10 92 9b 00 	sts	0x009B, r1
     e22:	10 92 9c 00 	sts	0x009C, r1
     e26:	10 92 9d 00 	sts	0x009D, r1
     e2a:	10 92 9e 00 	sts	0x009E, r1
     e2e:	10 92 9f 00 	sts	0x009F, r1
			
			Duty[Timer0][ON_Cycle]  = (Time_On_MS  * 1000UL) / 256 ;//no. OverFlowsT0 for on Duty
     e32:	28 ee       	ldi	r18, 0xE8	; 232
     e34:	33 e0       	ldi	r19, 0x03	; 3
     e36:	40 e0       	ldi	r20, 0x00	; 0
     e38:	50 e0       	ldi	r21, 0x00	; 0
     e3a:	0e 94 88 0c 	call	0x1910	; 0x1910 <__mulsi3>
     e3e:	dc 01       	movw	r26, r24
     e40:	cb 01       	movw	r24, r22
     e42:	89 2f       	mov	r24, r25
     e44:	9a 2f       	mov	r25, r26
     e46:	ab 2f       	mov	r26, r27
     e48:	bb 27       	eor	r27, r27
     e4a:	80 93 78 00 	sts	0x0078, r24
     e4e:	90 93 79 00 	sts	0x0079, r25
     e52:	a0 93 7a 00 	sts	0x007A, r26
     e56:	b0 93 7b 00 	sts	0x007B, r27
     e5a:	10 92 7c 00 	sts	0x007C, r1
     e5e:	10 92 7d 00 	sts	0x007D, r1
     e62:	10 92 7e 00 	sts	0x007E, r1
     e66:	10 92 7f 00 	sts	0x007F, r1
			Duty[Timer0][OFF_Cycle] = (Time_Off_MS * 1000UL) / 256 ;//no. OverFlowsT0 for off Duty
     e6a:	c8 01       	movw	r24, r16
     e6c:	b7 01       	movw	r22, r14
     e6e:	0e 94 88 0c 	call	0x1910	; 0x1910 <__mulsi3>
     e72:	07 2f       	mov	r16, r23
     e74:	18 2f       	mov	r17, r24
     e76:	29 2f       	mov	r18, r25
     e78:	33 27       	eor	r19, r19
     e7a:	e0 e8       	ldi	r30, 0x80	; 128
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	00 93 80 00 	sts	0x0080, r16
     e82:	11 83       	std	Z+1, r17	; 0x01
     e84:	22 83       	std	Z+2, r18	; 0x02
     e86:	33 83       	std	Z+3, r19	; 0x03
     e88:	14 82       	std	Z+4, r1	; 0x04
     e8a:	15 82       	std	Z+5, r1	; 0x05
     e8c:	16 82       	std	Z+6, r1	; 0x06
     e8e:	17 82       	std	Z+7, r1	; 0x07
			
			TIMER0.Interrupts.OverFlow		   = ENABLE;
     e90:	89 b7       	in	r24, 0x39	; 57
     e92:	81 60       	ori	r24, 0x01	; 1
     e94:	89 bf       	out	0x39, r24	; 57
			TIMER0.Control.Clock               = TMR_EN_T0_PRESCAL_1024;
     e96:	83 b7       	in	r24, 0x33	; 51
     e98:	88 7f       	andi	r24, 0xF8	; 248
     e9a:	85 60       	ori	r24, 0x05	; 5
     e9c:	83 bf       	out	0x33, r24	; 51
	}
	else{/*MISRA C*/}
}
TimerError_t      Timer_SetTrigger		(Timer_t Timer, V_CallBack_V_t Notifier, uint32_t Time_On_MS, uint32_t Time_Off_MS)
{
	TimerError_t return_value = TMR_EN_valid_inti;
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	5a c0       	rjmp	.+180    	; 0xf56 <Timer_SetTrigger+0x17e>
			Duty[Timer0][OFF_Cycle] = (Time_Off_MS * 1000UL) / 256 ;//no. OverFlowsT0 for off Duty
			
			TIMER0.Interrupts.OverFlow		   = ENABLE;
			TIMER0.Control.Clock               = TMR_EN_T0_PRESCAL_1024;
		}
		else if(Timer == Timer2)
     ea2:	a1 30       	cpi	r26, 0x01	; 1
     ea4:	09 f0       	breq	.+2      	; 0xea8 <Timer_SetTrigger+0xd0>
     ea6:	56 c0       	rjmp	.+172    	; 0xf54 <Timer_SetTrigger+0x17c>
		{
			TIMER2.Control.CTC_wave_generation = DISABLE;
     ea8:	25 b5       	in	r18, 0x25	; 37
     eaa:	27 7f       	andi	r18, 0xF7	; 247
     eac:	25 bd       	out	0x25, r18	; 37
			TIMER2.Control.PWM_wave_generation = DISABLE;
     eae:	25 b5       	in	r18, 0x25	; 37
     eb0:	2f 7b       	andi	r18, 0xBF	; 191
     eb2:	25 bd       	out	0x25, r18	; 37
			TIMER2.Control.Modes_out_on_comp   = TMR_EN_CTC_Disconnect;
     eb4:	25 b5       	in	r18, 0x25	; 37
     eb6:	2f 7c       	andi	r18, 0xCF	; 207
     eb8:	25 bd       	out	0x25, r18	; 37
			
			NotifierAction[Timer2]  = Notifier;
     eba:	f0 93 ab 00 	sts	0x00AB, r31
     ebe:	e0 93 aa 00 	sts	0x00AA, r30
			OverFlows[Timer2]       = RESET;
     ec2:	10 92 a0 00 	sts	0x00A0, r1
     ec6:	10 92 a1 00 	sts	0x00A1, r1
     eca:	10 92 a2 00 	sts	0x00A2, r1
     ece:	10 92 a3 00 	sts	0x00A3, r1
     ed2:	10 92 a4 00 	sts	0x00A4, r1
     ed6:	10 92 a5 00 	sts	0x00A5, r1
     eda:	10 92 a6 00 	sts	0x00A6, r1
     ede:	10 92 a7 00 	sts	0x00A7, r1
			
			Duty[Timer2][ON_Cycle]  = (Time_On_MS  * 1000UL) / 256 ;//no. OverFlowsT0 for on Duty
     ee2:	28 ee       	ldi	r18, 0xE8	; 232
     ee4:	33 e0       	ldi	r19, 0x03	; 3
     ee6:	40 e0       	ldi	r20, 0x00	; 0
     ee8:	50 e0       	ldi	r21, 0x00	; 0
     eea:	0e 94 88 0c 	call	0x1910	; 0x1910 <__mulsi3>
     eee:	dc 01       	movw	r26, r24
     ef0:	cb 01       	movw	r24, r22
     ef2:	89 2f       	mov	r24, r25
     ef4:	9a 2f       	mov	r25, r26
     ef6:	ab 2f       	mov	r26, r27
     ef8:	bb 27       	eor	r27, r27
     efa:	80 93 88 00 	sts	0x0088, r24
     efe:	90 93 89 00 	sts	0x0089, r25
     f02:	a0 93 8a 00 	sts	0x008A, r26
     f06:	b0 93 8b 00 	sts	0x008B, r27
     f0a:	10 92 8c 00 	sts	0x008C, r1
     f0e:	10 92 8d 00 	sts	0x008D, r1
     f12:	10 92 8e 00 	sts	0x008E, r1
     f16:	10 92 8f 00 	sts	0x008F, r1
			Duty[Timer2][OFF_Cycle] = (Time_Off_MS * 1000UL) / 256 ;//no. OverFlowsT0 for off Duty
     f1a:	c8 01       	movw	r24, r16
     f1c:	b7 01       	movw	r22, r14
     f1e:	0e 94 88 0c 	call	0x1910	; 0x1910 <__mulsi3>
     f22:	07 2f       	mov	r16, r23
     f24:	18 2f       	mov	r17, r24
     f26:	29 2f       	mov	r18, r25
     f28:	33 27       	eor	r19, r19
     f2a:	e0 e9       	ldi	r30, 0x90	; 144
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	00 93 90 00 	sts	0x0090, r16
     f32:	11 83       	std	Z+1, r17	; 0x01
     f34:	22 83       	std	Z+2, r18	; 0x02
     f36:	33 83       	std	Z+3, r19	; 0x03
     f38:	14 82       	std	Z+4, r1	; 0x04
     f3a:	15 82       	std	Z+5, r1	; 0x05
     f3c:	16 82       	std	Z+6, r1	; 0x06
     f3e:	17 82       	std	Z+7, r1	; 0x07
			
			TIMER2.Interrupts.OverFlow		   = ENABLE;
     f40:	89 b7       	in	r24, 0x39	; 57
     f42:	80 64       	ori	r24, 0x40	; 64
     f44:	89 bf       	out	0x39, r24	; 57
			TIMER2.Control.Clock               = TMR_EN_T2_PRESCAL_1024;
     f46:	85 b5       	in	r24, 0x25	; 37
     f48:	87 60       	ori	r24, 0x07	; 7
     f4a:	85 bd       	out	0x25, r24	; 37
	}
	else{/*MISRA C*/}
}
TimerError_t      Timer_SetTrigger		(Timer_t Timer, V_CallBack_V_t Notifier, uint32_t Time_On_MS, uint32_t Time_Off_MS)
{
	TimerError_t return_value = TMR_EN_valid_inti;
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	03 c0       	rjmp	.+6      	; 0xf56 <Timer_SetTrigger+0x17e>
		}
		else{/*MISRA C*/}
	}
	else
	{
		return_value = TMR_EN_InvalidPointer;
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	01 c0       	rjmp	.+2      	; 0xf56 <Timer_SetTrigger+0x17e>
	}
	else{/*MISRA C*/}
}
TimerError_t      Timer_SetTrigger		(Timer_t Timer, V_CallBack_V_t Notifier, uint32_t Time_On_MS, uint32_t Time_Off_MS)
{
	TimerError_t return_value = TMR_EN_valid_inti;
     f54:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		return_value = TMR_EN_InvalidPointer;
	}
	return return_value;
}
     f56:	df 91       	pop	r29
     f58:	cf 91       	pop	r28
     f5a:	1f 91       	pop	r17
     f5c:	0f 91       	pop	r16
     f5e:	ff 90       	pop	r15
     f60:	ef 90       	pop	r14
     f62:	08 95       	ret

00000f64 <Timer_PWM_SetDuty>:
void			  Timer_PWM_SetDuty		(Timer_t Timer, uint8_t PWMDuty)
{
	if(Timer == Timer0)
     f64:	88 23       	and	r24, r24
     f66:	39 f5       	brne	.+78     	; 0xfb6 <Timer_PWM_SetDuty+0x52>
	{
		TIMER0.Control.CTC_wave_generation = DISABLE;
     f68:	83 b7       	in	r24, 0x33	; 51
     f6a:	87 7f       	andi	r24, 0xF7	; 247
     f6c:	83 bf       	out	0x33, r24	; 51
		TIMER0.Control.PWM_wave_generation = ENABLE;
     f6e:	83 b7       	in	r24, 0x33	; 51
     f70:	80 64       	ori	r24, 0x40	; 64
     f72:	83 bf       	out	0x33, r24	; 51
		if(PWMDuty >= 100)
     f74:	64 36       	cpi	r22, 0x64	; 100
     f76:	18 f0       	brcs	.+6      	; 0xf7e <Timer_PWM_SetDuty+0x1a>
		{
			TIMER0.CompareValue = 0xFF;
     f78:	8f ef       	ldi	r24, 0xFF	; 255
     f7a:	8c bf       	out	0x3c, r24	; 60
     f7c:	14 c0       	rjmp	.+40     	; 0xfa6 <Timer_PWM_SetDuty+0x42>
		}
		else
		{
			TIMER0.CompareValue = (0xFFUL*PWMDuty)/100.0;
     f7e:	70 e0       	ldi	r23, 0x00	; 0
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	2f ef       	ldi	r18, 0xFF	; 255
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	40 e0       	ldi	r20, 0x00	; 0
     f8a:	50 e0       	ldi	r21, 0x00	; 0
     f8c:	0e 94 88 0c 	call	0x1910	; 0x1910 <__mulsi3>
     f90:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <__floatunsisf>
     f94:	20 e0       	ldi	r18, 0x00	; 0
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	48 ec       	ldi	r20, 0xC8	; 200
     f9a:	52 e4       	ldi	r21, 0x42	; 66
     f9c:	0e 94 66 0b 	call	0x16cc	; 0x16cc <__divsf3>
     fa0:	0e 94 ce 0b 	call	0x179c	; 0x179c <__fixunssfsi>
     fa4:	6c bf       	out	0x3c, r22	; 60
		}
		//DDRB3 = OUTPUT;
		TIMER0.Interrupts.Comp_Match       = DISABLE;
     fa6:	89 b7       	in	r24, 0x39	; 57
     fa8:	8d 7f       	andi	r24, 0xFD	; 253
     faa:	89 bf       	out	0x39, r24	; 57
		TIMER0.Control.Clock = TMR_EN_T0_PRESCAL_1024;
     fac:	83 b7       	in	r24, 0x33	; 51
     fae:	88 7f       	andi	r24, 0xF8	; 248
     fb0:	85 60       	ori	r24, 0x05	; 5
     fb2:	83 bf       	out	0x33, r24	; 51
     fb4:	08 95       	ret
	}
	else if(Timer == Timer2)
     fb6:	81 30       	cpi	r24, 0x01	; 1
     fb8:	29 f5       	brne	.+74     	; 0x1004 <Timer_PWM_SetDuty+0xa0>
	{
		TIMER2.Control.CTC_wave_generation = DISABLE;
     fba:	85 b5       	in	r24, 0x25	; 37
     fbc:	87 7f       	andi	r24, 0xF7	; 247
     fbe:	85 bd       	out	0x25, r24	; 37
		TIMER2.Control.PWM_wave_generation = ENABLE;
     fc0:	85 b5       	in	r24, 0x25	; 37
     fc2:	80 64       	ori	r24, 0x40	; 64
     fc4:	85 bd       	out	0x25, r24	; 37
		if(PWMDuty >= 100)
     fc6:	64 36       	cpi	r22, 0x64	; 100
     fc8:	18 f0       	brcs	.+6      	; 0xfd0 <Timer_PWM_SetDuty+0x6c>
		{
			TIMER2.CompareValue = 0xFF;
     fca:	8f ef       	ldi	r24, 0xFF	; 255
     fcc:	83 bd       	out	0x23, r24	; 35
     fce:	14 c0       	rjmp	.+40     	; 0xff8 <Timer_PWM_SetDuty+0x94>
		}
		else
		{
			TIMER2.CompareValue = (0xFFUL*PWMDuty)/100.0;
     fd0:	70 e0       	ldi	r23, 0x00	; 0
     fd2:	80 e0       	ldi	r24, 0x00	; 0
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	2f ef       	ldi	r18, 0xFF	; 255
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	40 e0       	ldi	r20, 0x00	; 0
     fdc:	50 e0       	ldi	r21, 0x00	; 0
     fde:	0e 94 88 0c 	call	0x1910	; 0x1910 <__mulsi3>
     fe2:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <__floatunsisf>
     fe6:	20 e0       	ldi	r18, 0x00	; 0
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	48 ec       	ldi	r20, 0xC8	; 200
     fec:	52 e4       	ldi	r21, 0x42	; 66
     fee:	0e 94 66 0b 	call	0x16cc	; 0x16cc <__divsf3>
     ff2:	0e 94 ce 0b 	call	0x179c	; 0x179c <__fixunssfsi>
     ff6:	63 bd       	out	0x23, r22	; 35
		}
		//DDRD7 = OUTPUT;
		TIMER2.Interrupts.Comp_Match       = DISABLE;
     ff8:	89 b7       	in	r24, 0x39	; 57
     ffa:	8f 77       	andi	r24, 0x7F	; 127
     ffc:	89 bf       	out	0x39, r24	; 57
		TIMER2.Control.Clock = TMR_EN_T2_PRESCAL_1024;
     ffe:	85 b5       	in	r24, 0x25	; 37
    1000:	87 60       	ori	r24, 0x07	; 7
    1002:	85 bd       	out	0x25, r24	; 37
    1004:	08 95       	ret

00001006 <Timer_PWMCallBack>:
	}
	else{/*MISRA C*/}
}
void			  Timer_PWMCallBack     (Timer_t Timer, V_CallBack_V_t pwm_toggle)
{
	if(Timer == Timer0)
    1006:	88 23       	and	r24, r24
    1008:	29 f4       	brne	.+10     	; 0x1014 <Timer_PWMCallBack+0xe>
	{
		PWMAction[Timer0] = pwm_toggle;
    100a:	70 93 75 00 	sts	0x0075, r23
    100e:	60 93 74 00 	sts	0x0074, r22
    1012:	08 95       	ret
	}
	else if(Timer == Timer2)
    1014:	81 30       	cpi	r24, 0x01	; 1
    1016:	21 f4       	brne	.+8      	; 0x1020 <Timer_PWMCallBack+0x1a>
	{
		PWMAction[Timer2] = pwm_toggle;
    1018:	70 93 77 00 	sts	0x0077, r23
    101c:	60 93 76 00 	sts	0x0076, r22
    1020:	08 95       	ret

00001022 <Timer_SoftWarePWM>:
	}
	else{/*MISRA C*/}
}
void		      Timer_SoftWarePWM		(Timer_t Timer, uint8_t PWMDuty, TMR_Clock_t Clock)
{
    1022:	cf 93       	push	r28
    1024:	c4 2f       	mov	r28, r20
	if(Timer == Timer0)
    1026:	88 23       	and	r24, r24
    1028:	41 f5       	brne	.+80     	; 0x107a <Timer_SoftWarePWM+0x58>
	{
		TIMER0.Control.CTC_wave_generation = DISABLE;
    102a:	83 b7       	in	r24, 0x33	; 51
    102c:	87 7f       	andi	r24, 0xF7	; 247
    102e:	83 bf       	out	0x33, r24	; 51
		TIMER0.Control.PWM_wave_generation = ENABLE;
    1030:	83 b7       	in	r24, 0x33	; 51
    1032:	80 64       	ori	r24, 0x40	; 64
    1034:	83 bf       	out	0x33, r24	; 51
		if(PWMDuty >= 100)
    1036:	64 36       	cpi	r22, 0x64	; 100
    1038:	18 f0       	brcs	.+6      	; 0x1040 <Timer_SoftWarePWM+0x1e>
		{
			TIMER0.CompareValue = 0xFF;
    103a:	8f ef       	ldi	r24, 0xFF	; 255
    103c:	8c bf       	out	0x3c, r24	; 60
    103e:	14 c0       	rjmp	.+40     	; 0x1068 <Timer_SoftWarePWM+0x46>
		}
		else
		{
			TIMER0.CompareValue = (0xFFUL*PWMDuty)/100.0;
    1040:	70 e0       	ldi	r23, 0x00	; 0
    1042:	80 e0       	ldi	r24, 0x00	; 0
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	2f ef       	ldi	r18, 0xFF	; 255
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	40 e0       	ldi	r20, 0x00	; 0
    104c:	50 e0       	ldi	r21, 0x00	; 0
    104e:	0e 94 88 0c 	call	0x1910	; 0x1910 <__mulsi3>
    1052:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <__floatunsisf>
    1056:	20 e0       	ldi	r18, 0x00	; 0
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	48 ec       	ldi	r20, 0xC8	; 200
    105c:	52 e4       	ldi	r21, 0x42	; 66
    105e:	0e 94 66 0b 	call	0x16cc	; 0x16cc <__divsf3>
    1062:	0e 94 ce 0b 	call	0x179c	; 0x179c <__fixunssfsi>
    1066:	6c bf       	out	0x3c, r22	; 60
		}
		//DDRB3 = OUTPUT;
		TIMER0.Interrupts.Comp_Match       = DISABLE;
    1068:	89 b7       	in	r24, 0x39	; 57
    106a:	8d 7f       	andi	r24, 0xFD	; 253
    106c:	89 bf       	out	0x39, r24	; 57
		TIMER0.Control.Clock = Clock;
    106e:	c7 70       	andi	r28, 0x07	; 7
    1070:	83 b7       	in	r24, 0x33	; 51
    1072:	88 7f       	andi	r24, 0xF8	; 248
    1074:	c8 2b       	or	r28, r24
    1076:	c3 bf       	out	0x33, r28	; 51
    1078:	29 c0       	rjmp	.+82     	; 0x10cc <Timer_SoftWarePWM+0xaa>
	}
	else if(Timer == Timer2)
    107a:	81 30       	cpi	r24, 0x01	; 1
    107c:	39 f5       	brne	.+78     	; 0x10cc <Timer_SoftWarePWM+0xaa>
	{
		TIMER2.Control.CTC_wave_generation = DISABLE;
    107e:	85 b5       	in	r24, 0x25	; 37
    1080:	87 7f       	andi	r24, 0xF7	; 247
    1082:	85 bd       	out	0x25, r24	; 37
		TIMER2.Control.PWM_wave_generation = ENABLE;
    1084:	85 b5       	in	r24, 0x25	; 37
    1086:	80 64       	ori	r24, 0x40	; 64
    1088:	85 bd       	out	0x25, r24	; 37
		if(PWMDuty >= 100)
    108a:	64 36       	cpi	r22, 0x64	; 100
    108c:	18 f0       	brcs	.+6      	; 0x1094 <Timer_SoftWarePWM+0x72>
		{
			TIMER2.CompareValue = 0xFF;
    108e:	8f ef       	ldi	r24, 0xFF	; 255
    1090:	83 bd       	out	0x23, r24	; 35
    1092:	14 c0       	rjmp	.+40     	; 0x10bc <Timer_SoftWarePWM+0x9a>
		}
		else
		{
			TIMER2.CompareValue = (0xFFUL*PWMDuty)/100.0;
    1094:	70 e0       	ldi	r23, 0x00	; 0
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	2f ef       	ldi	r18, 0xFF	; 255
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	40 e0       	ldi	r20, 0x00	; 0
    10a0:	50 e0       	ldi	r21, 0x00	; 0
    10a2:	0e 94 88 0c 	call	0x1910	; 0x1910 <__mulsi3>
    10a6:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <__floatunsisf>
    10aa:	20 e0       	ldi	r18, 0x00	; 0
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	48 ec       	ldi	r20, 0xC8	; 200
    10b0:	52 e4       	ldi	r21, 0x42	; 66
    10b2:	0e 94 66 0b 	call	0x16cc	; 0x16cc <__divsf3>
    10b6:	0e 94 ce 0b 	call	0x179c	; 0x179c <__fixunssfsi>
    10ba:	63 bd       	out	0x23, r22	; 35
		}
		//DDRD7 = OUTPUT;
		TIMER2.Interrupts.Comp_Match       = DISABLE;
    10bc:	89 b7       	in	r24, 0x39	; 57
    10be:	8f 77       	andi	r24, 0x7F	; 127
    10c0:	89 bf       	out	0x39, r24	; 57
		TIMER2.Control.Clock = Clock;
    10c2:	c7 70       	andi	r28, 0x07	; 7
    10c4:	85 b5       	in	r24, 0x25	; 37
    10c6:	88 7f       	andi	r24, 0xF8	; 248
    10c8:	c8 2b       	or	r28, r24
    10ca:	c5 bd       	out	0x25, r28	; 37
	}
	else{/*MISRA C*/}
}
    10cc:	cf 91       	pop	r28
    10ce:	08 95       	ret

000010d0 <__vector_11>:


ISR(TIMER0_OVF_vect)
{
    10d0:	1f 92       	push	r1
    10d2:	0f 92       	push	r0
    10d4:	0f b6       	in	r0, 0x3f	; 63
    10d6:	0f 92       	push	r0
    10d8:	11 24       	eor	r1, r1
    10da:	ff 92       	push	r15
    10dc:	0f 93       	push	r16
    10de:	1f 93       	push	r17
    10e0:	2f 93       	push	r18
    10e2:	3f 93       	push	r19
    10e4:	4f 93       	push	r20
    10e6:	5f 93       	push	r21
    10e8:	6f 93       	push	r22
    10ea:	7f 93       	push	r23
    10ec:	8f 93       	push	r24
    10ee:	9f 93       	push	r25
    10f0:	af 93       	push	r26
    10f2:	bf 93       	push	r27
    10f4:	cf 93       	push	r28
    10f6:	df 93       	push	r29
    10f8:	ef 93       	push	r30
    10fa:	ff 93       	push	r31
	TIMER0.Flags.OverFlow = ENABLE;
    10fc:	88 b7       	in	r24, 0x38	; 56
    10fe:	81 60       	ori	r24, 0x01	; 1
    1100:	88 bf       	out	0x38, r24	; 56
	OverFlows[Timer0]++;
    1102:	50 91 98 00 	lds	r21, 0x0098
    1106:	40 91 99 00 	lds	r20, 0x0099
    110a:	30 91 9a 00 	lds	r19, 0x009A
    110e:	20 91 9b 00 	lds	r18, 0x009B
    1112:	90 91 9c 00 	lds	r25, 0x009C
    1116:	f0 91 9d 00 	lds	r31, 0x009D
    111a:	e0 91 9e 00 	lds	r30, 0x009E
    111e:	a0 91 9f 00 	lds	r26, 0x009F
    1122:	75 2f       	mov	r23, r21
    1124:	7f 5f       	subi	r23, 0xFF	; 255
    1126:	61 e0       	ldi	r22, 0x01	; 1
    1128:	75 17       	cp	r23, r21
    112a:	08 f0       	brcs	.+2      	; 0x112e <__vector_11+0x5e>
    112c:	60 e0       	ldi	r22, 0x00	; 0
    112e:	84 2f       	mov	r24, r20
    1130:	50 e0       	ldi	r21, 0x00	; 0
    1132:	64 0f       	add	r22, r20
    1134:	41 e0       	ldi	r20, 0x01	; 1
    1136:	68 17       	cp	r22, r24
    1138:	08 f0       	brcs	.+2      	; 0x113c <__vector_11+0x6c>
    113a:	40 e0       	ldi	r20, 0x00	; 0
    113c:	54 2b       	or	r21, r20
    113e:	83 2f       	mov	r24, r19
    1140:	40 e0       	ldi	r20, 0x00	; 0
    1142:	53 0f       	add	r21, r19
    1144:	31 e0       	ldi	r19, 0x01	; 1
    1146:	58 17       	cp	r21, r24
    1148:	08 f0       	brcs	.+2      	; 0x114c <__vector_11+0x7c>
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	43 2b       	or	r20, r19
    114e:	82 2f       	mov	r24, r18
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	42 0f       	add	r20, r18
    1154:	21 e0       	ldi	r18, 0x01	; 1
    1156:	48 17       	cp	r20, r24
    1158:	08 f0       	brcs	.+2      	; 0x115c <__vector_11+0x8c>
    115a:	20 e0       	ldi	r18, 0x00	; 0
    115c:	32 2b       	or	r19, r18
    115e:	89 2f       	mov	r24, r25
    1160:	20 e0       	ldi	r18, 0x00	; 0
    1162:	39 0f       	add	r19, r25
    1164:	91 e0       	ldi	r25, 0x01	; 1
    1166:	38 17       	cp	r19, r24
    1168:	08 f0       	brcs	.+2      	; 0x116c <__vector_11+0x9c>
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	29 2b       	or	r18, r25
    116e:	8f 2f       	mov	r24, r31
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	2f 0f       	add	r18, r31
    1174:	f1 e0       	ldi	r31, 0x01	; 1
    1176:	28 17       	cp	r18, r24
    1178:	08 f0       	brcs	.+2      	; 0x117c <__vector_11+0xac>
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	9f 2b       	or	r25, r31
    117e:	fe 2f       	mov	r31, r30
    1180:	80 e0       	ldi	r24, 0x00	; 0
    1182:	9e 0f       	add	r25, r30
    1184:	e1 e0       	ldi	r30, 0x01	; 1
    1186:	9f 17       	cp	r25, r31
    1188:	08 f0       	brcs	.+2      	; 0x118c <__vector_11+0xbc>
    118a:	e0 e0       	ldi	r30, 0x00	; 0
    118c:	8e 2b       	or	r24, r30
    118e:	8a 0f       	add	r24, r26
    1190:	70 93 98 00 	sts	0x0098, r23
    1194:	60 93 99 00 	sts	0x0099, r22
    1198:	50 93 9a 00 	sts	0x009A, r21
    119c:	40 93 9b 00 	sts	0x009B, r20
    11a0:	30 93 9c 00 	sts	0x009C, r19
    11a4:	20 93 9d 00 	sts	0x009D, r18
    11a8:	90 93 9e 00 	sts	0x009E, r25
    11ac:	80 93 9f 00 	sts	0x009F, r24
	if(OverFlows[Timer0] == Duty[Timer0][Cycle[Timer0]])
    11b0:	90 91 98 00 	lds	r25, 0x0098
    11b4:	30 91 99 00 	lds	r19, 0x0099
    11b8:	50 91 9a 00 	lds	r21, 0x009A
    11bc:	70 91 9b 00 	lds	r23, 0x009B
    11c0:	f0 90 9c 00 	lds	r15, 0x009C
    11c4:	10 91 9d 00 	lds	r17, 0x009D
    11c8:	c0 91 9e 00 	lds	r28, 0x009E
    11cc:	a0 91 9f 00 	lds	r26, 0x009F
    11d0:	e0 91 72 00 	lds	r30, 0x0072
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	ee 0f       	add	r30, r30
    11d8:	ff 1f       	adc	r31, r31
    11da:	ee 0f       	add	r30, r30
    11dc:	ff 1f       	adc	r31, r31
    11de:	ee 0f       	add	r30, r30
    11e0:	ff 1f       	adc	r31, r31
    11e2:	e8 58       	subi	r30, 0x88	; 136
    11e4:	ff 4f       	sbci	r31, 0xFF	; 255
    11e6:	80 81       	ld	r24, Z
    11e8:	21 81       	ldd	r18, Z+1	; 0x01
    11ea:	42 81       	ldd	r20, Z+2	; 0x02
    11ec:	63 81       	ldd	r22, Z+3	; 0x03
    11ee:	04 81       	ldd	r16, Z+4	; 0x04
    11f0:	d5 81       	ldd	r29, Z+5	; 0x05
    11f2:	b6 81       	ldd	r27, Z+6	; 0x06
    11f4:	e7 81       	ldd	r30, Z+7	; 0x07
    11f6:	98 17       	cp	r25, r24
    11f8:	09 f0       	breq	.+2      	; 0x11fc <__vector_11+0x12c>
    11fa:	65 c0       	rjmp	.+202    	; 0x12c6 <__vector_11+0x1f6>
    11fc:	32 17       	cp	r19, r18
    11fe:	09 f0       	breq	.+2      	; 0x1202 <__vector_11+0x132>
    1200:	62 c0       	rjmp	.+196    	; 0x12c6 <__vector_11+0x1f6>
    1202:	54 17       	cp	r21, r20
    1204:	09 f0       	breq	.+2      	; 0x1208 <__vector_11+0x138>
    1206:	5f c0       	rjmp	.+190    	; 0x12c6 <__vector_11+0x1f6>
    1208:	76 17       	cp	r23, r22
    120a:	09 f0       	breq	.+2      	; 0x120e <__vector_11+0x13e>
    120c:	5c c0       	rjmp	.+184    	; 0x12c6 <__vector_11+0x1f6>
    120e:	f0 16       	cp	r15, r16
    1210:	09 f0       	breq	.+2      	; 0x1214 <__vector_11+0x144>
    1212:	59 c0       	rjmp	.+178    	; 0x12c6 <__vector_11+0x1f6>
    1214:	1d 17       	cp	r17, r29
    1216:	09 f0       	breq	.+2      	; 0x121a <__vector_11+0x14a>
    1218:	56 c0       	rjmp	.+172    	; 0x12c6 <__vector_11+0x1f6>
    121a:	cb 17       	cp	r28, r27
    121c:	09 f0       	breq	.+2      	; 0x1220 <__vector_11+0x150>
    121e:	53 c0       	rjmp	.+166    	; 0x12c6 <__vector_11+0x1f6>
    1220:	ae 17       	cp	r26, r30
    1222:	09 f0       	breq	.+2      	; 0x1226 <__vector_11+0x156>
    1224:	50 c0       	rjmp	.+160    	; 0x12c6 <__vector_11+0x1f6>
	{
		OverFlows[Timer0] = RESET;
    1226:	10 92 98 00 	sts	0x0098, r1
    122a:	10 92 99 00 	sts	0x0099, r1
    122e:	10 92 9a 00 	sts	0x009A, r1
    1232:	10 92 9b 00 	sts	0x009B, r1
    1236:	10 92 9c 00 	sts	0x009C, r1
    123a:	10 92 9d 00 	sts	0x009D, r1
    123e:	10 92 9e 00 	sts	0x009E, r1
    1242:	10 92 9f 00 	sts	0x009F, r1
		NotifierAction[Timer0]();
    1246:	e0 91 a8 00 	lds	r30, 0x00A8
    124a:	f0 91 a9 00 	lds	r31, 0x00A9
    124e:	09 95       	icall
		if(Cycle[Timer0] == ON_Cycle)
    1250:	80 91 72 00 	lds	r24, 0x0072
    1254:	88 23       	and	r24, r24
    1256:	d1 f4       	brne	.+52     	; 0x128c <__vector_11+0x1bc>
		{
			Cycle[Timer0] = OFF_Cycle;
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	80 93 72 00 	sts	0x0072, r24
			TIMER0.Counter  = 256 - ((Duty[Timer0][OFF_Cycle] * 1000UL)%256 -1);
    125e:	20 91 80 00 	lds	r18, 0x0080
    1262:	90 91 81 00 	lds	r25, 0x0081
    1266:	90 91 82 00 	lds	r25, 0x0082
    126a:	90 91 83 00 	lds	r25, 0x0083
    126e:	90 91 84 00 	lds	r25, 0x0084
    1272:	90 91 85 00 	lds	r25, 0x0085
    1276:	90 91 86 00 	lds	r25, 0x0086
    127a:	90 91 87 00 	lds	r25, 0x0087
    127e:	98 ee       	ldi	r25, 0xE8	; 232
    1280:	29 9f       	mul	r18, r25
    1282:	90 2d       	mov	r25, r0
    1284:	11 24       	eor	r1, r1
    1286:	89 1b       	sub	r24, r25
    1288:	82 bf       	out	0x32, r24	; 50
    128a:	1d c0       	rjmp	.+58     	; 0x12c6 <__vector_11+0x1f6>
		}
		else if(Cycle[Timer0] == OFF_Cycle)
    128c:	80 91 72 00 	lds	r24, 0x0072
    1290:	81 30       	cpi	r24, 0x01	; 1
    1292:	c9 f4       	brne	.+50     	; 0x12c6 <__vector_11+0x1f6>
		{
			Cycle[Timer0] = ON_Cycle;
    1294:	10 92 72 00 	sts	0x0072, r1
			TIMER0.Counter  = 256 - ((Duty[Timer0][ON_Cycle] * 1000UL)%256 -1);
    1298:	90 91 78 00 	lds	r25, 0x0078
    129c:	80 91 79 00 	lds	r24, 0x0079
    12a0:	80 91 7a 00 	lds	r24, 0x007A
    12a4:	80 91 7b 00 	lds	r24, 0x007B
    12a8:	80 91 7c 00 	lds	r24, 0x007C
    12ac:	80 91 7d 00 	lds	r24, 0x007D
    12b0:	80 91 7e 00 	lds	r24, 0x007E
    12b4:	80 91 7f 00 	lds	r24, 0x007F
    12b8:	88 ee       	ldi	r24, 0xE8	; 232
    12ba:	98 9f       	mul	r25, r24
    12bc:	90 2d       	mov	r25, r0
    12be:	11 24       	eor	r1, r1
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	89 1b       	sub	r24, r25
    12c4:	82 bf       	out	0x32, r24	; 50
		}
	}
}
    12c6:	ff 91       	pop	r31
    12c8:	ef 91       	pop	r30
    12ca:	df 91       	pop	r29
    12cc:	cf 91       	pop	r28
    12ce:	bf 91       	pop	r27
    12d0:	af 91       	pop	r26
    12d2:	9f 91       	pop	r25
    12d4:	8f 91       	pop	r24
    12d6:	7f 91       	pop	r23
    12d8:	6f 91       	pop	r22
    12da:	5f 91       	pop	r21
    12dc:	4f 91       	pop	r20
    12de:	3f 91       	pop	r19
    12e0:	2f 91       	pop	r18
    12e2:	1f 91       	pop	r17
    12e4:	0f 91       	pop	r16
    12e6:	ff 90       	pop	r15
    12e8:	0f 90       	pop	r0
    12ea:	0f be       	out	0x3f, r0	; 63
    12ec:	0f 90       	pop	r0
    12ee:	1f 90       	pop	r1
    12f0:	18 95       	reti

000012f2 <__vector_5>:
ISR(TIMER2_OVF_vect)
{
    12f2:	1f 92       	push	r1
    12f4:	0f 92       	push	r0
    12f6:	0f b6       	in	r0, 0x3f	; 63
    12f8:	0f 92       	push	r0
    12fa:	11 24       	eor	r1, r1
    12fc:	ff 92       	push	r15
    12fe:	0f 93       	push	r16
    1300:	1f 93       	push	r17
    1302:	2f 93       	push	r18
    1304:	3f 93       	push	r19
    1306:	4f 93       	push	r20
    1308:	5f 93       	push	r21
    130a:	6f 93       	push	r22
    130c:	7f 93       	push	r23
    130e:	8f 93       	push	r24
    1310:	9f 93       	push	r25
    1312:	af 93       	push	r26
    1314:	bf 93       	push	r27
    1316:	cf 93       	push	r28
    1318:	df 93       	push	r29
    131a:	ef 93       	push	r30
    131c:	ff 93       	push	r31
	TIMER2.Flags.OverFlow = ENABLE;
    131e:	88 b7       	in	r24, 0x38	; 56
    1320:	80 64       	ori	r24, 0x40	; 64
    1322:	88 bf       	out	0x38, r24	; 56
	OverFlows[Timer2]++;
    1324:	50 91 a0 00 	lds	r21, 0x00A0
    1328:	40 91 a1 00 	lds	r20, 0x00A1
    132c:	30 91 a2 00 	lds	r19, 0x00A2
    1330:	20 91 a3 00 	lds	r18, 0x00A3
    1334:	90 91 a4 00 	lds	r25, 0x00A4
    1338:	f0 91 a5 00 	lds	r31, 0x00A5
    133c:	e0 91 a6 00 	lds	r30, 0x00A6
    1340:	a0 91 a7 00 	lds	r26, 0x00A7
    1344:	75 2f       	mov	r23, r21
    1346:	7f 5f       	subi	r23, 0xFF	; 255
    1348:	61 e0       	ldi	r22, 0x01	; 1
    134a:	75 17       	cp	r23, r21
    134c:	08 f0       	brcs	.+2      	; 0x1350 <__vector_5+0x5e>
    134e:	60 e0       	ldi	r22, 0x00	; 0
    1350:	84 2f       	mov	r24, r20
    1352:	50 e0       	ldi	r21, 0x00	; 0
    1354:	64 0f       	add	r22, r20
    1356:	41 e0       	ldi	r20, 0x01	; 1
    1358:	68 17       	cp	r22, r24
    135a:	08 f0       	brcs	.+2      	; 0x135e <__vector_5+0x6c>
    135c:	40 e0       	ldi	r20, 0x00	; 0
    135e:	54 2b       	or	r21, r20
    1360:	83 2f       	mov	r24, r19
    1362:	40 e0       	ldi	r20, 0x00	; 0
    1364:	53 0f       	add	r21, r19
    1366:	31 e0       	ldi	r19, 0x01	; 1
    1368:	58 17       	cp	r21, r24
    136a:	08 f0       	brcs	.+2      	; 0x136e <__vector_5+0x7c>
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	43 2b       	or	r20, r19
    1370:	82 2f       	mov	r24, r18
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	42 0f       	add	r20, r18
    1376:	21 e0       	ldi	r18, 0x01	; 1
    1378:	48 17       	cp	r20, r24
    137a:	08 f0       	brcs	.+2      	; 0x137e <__vector_5+0x8c>
    137c:	20 e0       	ldi	r18, 0x00	; 0
    137e:	32 2b       	or	r19, r18
    1380:	89 2f       	mov	r24, r25
    1382:	20 e0       	ldi	r18, 0x00	; 0
    1384:	39 0f       	add	r19, r25
    1386:	91 e0       	ldi	r25, 0x01	; 1
    1388:	38 17       	cp	r19, r24
    138a:	08 f0       	brcs	.+2      	; 0x138e <__vector_5+0x9c>
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	29 2b       	or	r18, r25
    1390:	8f 2f       	mov	r24, r31
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	2f 0f       	add	r18, r31
    1396:	f1 e0       	ldi	r31, 0x01	; 1
    1398:	28 17       	cp	r18, r24
    139a:	08 f0       	brcs	.+2      	; 0x139e <__vector_5+0xac>
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	9f 2b       	or	r25, r31
    13a0:	fe 2f       	mov	r31, r30
    13a2:	80 e0       	ldi	r24, 0x00	; 0
    13a4:	9e 0f       	add	r25, r30
    13a6:	e1 e0       	ldi	r30, 0x01	; 1
    13a8:	9f 17       	cp	r25, r31
    13aa:	08 f0       	brcs	.+2      	; 0x13ae <__vector_5+0xbc>
    13ac:	e0 e0       	ldi	r30, 0x00	; 0
    13ae:	8e 2b       	or	r24, r30
    13b0:	8a 0f       	add	r24, r26
    13b2:	70 93 a0 00 	sts	0x00A0, r23
    13b6:	60 93 a1 00 	sts	0x00A1, r22
    13ba:	50 93 a2 00 	sts	0x00A2, r21
    13be:	40 93 a3 00 	sts	0x00A3, r20
    13c2:	30 93 a4 00 	sts	0x00A4, r19
    13c6:	20 93 a5 00 	sts	0x00A5, r18
    13ca:	90 93 a6 00 	sts	0x00A6, r25
    13ce:	80 93 a7 00 	sts	0x00A7, r24
	if(OverFlows[Timer2] == Duty[Timer2][Cycle[Timer2]])
    13d2:	90 91 a0 00 	lds	r25, 0x00A0
    13d6:	30 91 a1 00 	lds	r19, 0x00A1
    13da:	50 91 a2 00 	lds	r21, 0x00A2
    13de:	70 91 a3 00 	lds	r23, 0x00A3
    13e2:	f0 90 a4 00 	lds	r15, 0x00A4
    13e6:	10 91 a5 00 	lds	r17, 0x00A5
    13ea:	c0 91 a6 00 	lds	r28, 0x00A6
    13ee:	a0 91 a7 00 	lds	r26, 0x00A7
    13f2:	e0 91 73 00 	lds	r30, 0x0073
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	ee 0f       	add	r30, r30
    13fa:	ff 1f       	adc	r31, r31
    13fc:	ee 0f       	add	r30, r30
    13fe:	ff 1f       	adc	r31, r31
    1400:	ee 0f       	add	r30, r30
    1402:	ff 1f       	adc	r31, r31
    1404:	e8 57       	subi	r30, 0x78	; 120
    1406:	ff 4f       	sbci	r31, 0xFF	; 255
    1408:	80 81       	ld	r24, Z
    140a:	21 81       	ldd	r18, Z+1	; 0x01
    140c:	42 81       	ldd	r20, Z+2	; 0x02
    140e:	63 81       	ldd	r22, Z+3	; 0x03
    1410:	04 81       	ldd	r16, Z+4	; 0x04
    1412:	d5 81       	ldd	r29, Z+5	; 0x05
    1414:	b6 81       	ldd	r27, Z+6	; 0x06
    1416:	e7 81       	ldd	r30, Z+7	; 0x07
    1418:	98 17       	cp	r25, r24
    141a:	09 f0       	breq	.+2      	; 0x141e <__vector_5+0x12c>
    141c:	65 c0       	rjmp	.+202    	; 0x14e8 <__vector_5+0x1f6>
    141e:	32 17       	cp	r19, r18
    1420:	09 f0       	breq	.+2      	; 0x1424 <__vector_5+0x132>
    1422:	62 c0       	rjmp	.+196    	; 0x14e8 <__vector_5+0x1f6>
    1424:	54 17       	cp	r21, r20
    1426:	09 f0       	breq	.+2      	; 0x142a <__vector_5+0x138>
    1428:	5f c0       	rjmp	.+190    	; 0x14e8 <__vector_5+0x1f6>
    142a:	76 17       	cp	r23, r22
    142c:	09 f0       	breq	.+2      	; 0x1430 <__vector_5+0x13e>
    142e:	5c c0       	rjmp	.+184    	; 0x14e8 <__vector_5+0x1f6>
    1430:	f0 16       	cp	r15, r16
    1432:	09 f0       	breq	.+2      	; 0x1436 <__vector_5+0x144>
    1434:	59 c0       	rjmp	.+178    	; 0x14e8 <__vector_5+0x1f6>
    1436:	1d 17       	cp	r17, r29
    1438:	09 f0       	breq	.+2      	; 0x143c <__vector_5+0x14a>
    143a:	56 c0       	rjmp	.+172    	; 0x14e8 <__vector_5+0x1f6>
    143c:	cb 17       	cp	r28, r27
    143e:	09 f0       	breq	.+2      	; 0x1442 <__vector_5+0x150>
    1440:	53 c0       	rjmp	.+166    	; 0x14e8 <__vector_5+0x1f6>
    1442:	ae 17       	cp	r26, r30
    1444:	09 f0       	breq	.+2      	; 0x1448 <__vector_5+0x156>
    1446:	50 c0       	rjmp	.+160    	; 0x14e8 <__vector_5+0x1f6>
	{
		OverFlows[Timer2] = RESET;
    1448:	10 92 a0 00 	sts	0x00A0, r1
    144c:	10 92 a1 00 	sts	0x00A1, r1
    1450:	10 92 a2 00 	sts	0x00A2, r1
    1454:	10 92 a3 00 	sts	0x00A3, r1
    1458:	10 92 a4 00 	sts	0x00A4, r1
    145c:	10 92 a5 00 	sts	0x00A5, r1
    1460:	10 92 a6 00 	sts	0x00A6, r1
    1464:	10 92 a7 00 	sts	0x00A7, r1
		NotifierAction[Timer2]();
    1468:	e0 91 aa 00 	lds	r30, 0x00AA
    146c:	f0 91 ab 00 	lds	r31, 0x00AB
    1470:	09 95       	icall
		if(Cycle[Timer2] == ON_Cycle)
    1472:	80 91 73 00 	lds	r24, 0x0073
    1476:	88 23       	and	r24, r24
    1478:	d1 f4       	brne	.+52     	; 0x14ae <__vector_5+0x1bc>
		{
			Cycle[Timer2] = OFF_Cycle;
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	80 93 73 00 	sts	0x0073, r24
			TIMER0.Counter  = 256 - ((Duty[Timer2][OFF_Cycle] * 1000UL)%256 -1);
    1480:	20 91 90 00 	lds	r18, 0x0090
    1484:	90 91 91 00 	lds	r25, 0x0091
    1488:	90 91 92 00 	lds	r25, 0x0092
    148c:	90 91 93 00 	lds	r25, 0x0093
    1490:	90 91 94 00 	lds	r25, 0x0094
    1494:	90 91 95 00 	lds	r25, 0x0095
    1498:	90 91 96 00 	lds	r25, 0x0096
    149c:	90 91 97 00 	lds	r25, 0x0097
    14a0:	98 ee       	ldi	r25, 0xE8	; 232
    14a2:	29 9f       	mul	r18, r25
    14a4:	90 2d       	mov	r25, r0
    14a6:	11 24       	eor	r1, r1
    14a8:	89 1b       	sub	r24, r25
    14aa:	82 bf       	out	0x32, r24	; 50
    14ac:	1d c0       	rjmp	.+58     	; 0x14e8 <__vector_5+0x1f6>
		}
		else if(Cycle[Timer2] == OFF_Cycle)
    14ae:	80 91 73 00 	lds	r24, 0x0073
    14b2:	81 30       	cpi	r24, 0x01	; 1
    14b4:	c9 f4       	brne	.+50     	; 0x14e8 <__vector_5+0x1f6>
		{
			Cycle[Timer2] = ON_Cycle;
    14b6:	10 92 73 00 	sts	0x0073, r1
			TIMER2.Counter  = 256 - ((Duty[Timer2][ON_Cycle] * 1000UL)%256 -1);
    14ba:	90 91 88 00 	lds	r25, 0x0088
    14be:	80 91 89 00 	lds	r24, 0x0089
    14c2:	80 91 8a 00 	lds	r24, 0x008A
    14c6:	80 91 8b 00 	lds	r24, 0x008B
    14ca:	80 91 8c 00 	lds	r24, 0x008C
    14ce:	80 91 8d 00 	lds	r24, 0x008D
    14d2:	80 91 8e 00 	lds	r24, 0x008E
    14d6:	80 91 8f 00 	lds	r24, 0x008F
    14da:	88 ee       	ldi	r24, 0xE8	; 232
    14dc:	98 9f       	mul	r25, r24
    14de:	90 2d       	mov	r25, r0
    14e0:	11 24       	eor	r1, r1
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	89 1b       	sub	r24, r25
    14e6:	84 bd       	out	0x24, r24	; 36
		}
	}
}
    14e8:	ff 91       	pop	r31
    14ea:	ef 91       	pop	r30
    14ec:	df 91       	pop	r29
    14ee:	cf 91       	pop	r28
    14f0:	bf 91       	pop	r27
    14f2:	af 91       	pop	r26
    14f4:	9f 91       	pop	r25
    14f6:	8f 91       	pop	r24
    14f8:	7f 91       	pop	r23
    14fa:	6f 91       	pop	r22
    14fc:	5f 91       	pop	r21
    14fe:	4f 91       	pop	r20
    1500:	3f 91       	pop	r19
    1502:	2f 91       	pop	r18
    1504:	1f 91       	pop	r17
    1506:	0f 91       	pop	r16
    1508:	ff 90       	pop	r15
    150a:	0f 90       	pop	r0
    150c:	0f be       	out	0x3f, r0	; 63
    150e:	0f 90       	pop	r0
    1510:	1f 90       	pop	r1
    1512:	18 95       	reti

00001514 <__vector_10>:
ISR(TIMER0_COMP_vect)
{
    1514:	1f 92       	push	r1
    1516:	0f 92       	push	r0
    1518:	0f b6       	in	r0, 0x3f	; 63
    151a:	0f 92       	push	r0
    151c:	11 24       	eor	r1, r1
    151e:	2f 93       	push	r18
    1520:	3f 93       	push	r19
    1522:	4f 93       	push	r20
    1524:	5f 93       	push	r21
    1526:	6f 93       	push	r22
    1528:	7f 93       	push	r23
    152a:	8f 93       	push	r24
    152c:	9f 93       	push	r25
    152e:	af 93       	push	r26
    1530:	bf 93       	push	r27
    1532:	ef 93       	push	r30
    1534:	ff 93       	push	r31
	TIMER0.Flags.Comp_Match = ENABLE;
    1536:	88 b7       	in	r24, 0x38	; 56
    1538:	82 60       	ori	r24, 0x02	; 2
    153a:	88 bf       	out	0x38, r24	; 56
	if(CounterAction != NULL)
    153c:	80 91 ac 00 	lds	r24, 0x00AC
    1540:	90 91 ad 00 	lds	r25, 0x00AD
    1544:	00 97       	sbiw	r24, 0x00	; 0
    1546:	41 f0       	breq	.+16     	; 0x1558 <__vector_10+0x44>
	{
		CounterAction();
    1548:	e0 91 ac 00 	lds	r30, 0x00AC
    154c:	f0 91 ad 00 	lds	r31, 0x00AD
    1550:	09 95       	icall
		Timer_ResetCounter(Timer0);
    1552:	80 e0       	ldi	r24, 0x00	; 0
    1554:	0e 94 46 04 	call	0x88c	; 0x88c <Timer_ResetCounter>
	}
	PWMAction[Timer0]();
    1558:	e0 91 74 00 	lds	r30, 0x0074
    155c:	f0 91 75 00 	lds	r31, 0x0075
    1560:	09 95       	icall
}
    1562:	ff 91       	pop	r31
    1564:	ef 91       	pop	r30
    1566:	bf 91       	pop	r27
    1568:	af 91       	pop	r26
    156a:	9f 91       	pop	r25
    156c:	8f 91       	pop	r24
    156e:	7f 91       	pop	r23
    1570:	6f 91       	pop	r22
    1572:	5f 91       	pop	r21
    1574:	4f 91       	pop	r20
    1576:	3f 91       	pop	r19
    1578:	2f 91       	pop	r18
    157a:	0f 90       	pop	r0
    157c:	0f be       	out	0x3f, r0	; 63
    157e:	0f 90       	pop	r0
    1580:	1f 90       	pop	r1
    1582:	18 95       	reti

00001584 <__vector_4>:
ISR(TIMER2_COMP_vect)
{
    1584:	1f 92       	push	r1
    1586:	0f 92       	push	r0
    1588:	0f b6       	in	r0, 0x3f	; 63
    158a:	0f 92       	push	r0
    158c:	11 24       	eor	r1, r1
    158e:	2f 93       	push	r18
    1590:	3f 93       	push	r19
    1592:	4f 93       	push	r20
    1594:	5f 93       	push	r21
    1596:	6f 93       	push	r22
    1598:	7f 93       	push	r23
    159a:	8f 93       	push	r24
    159c:	9f 93       	push	r25
    159e:	af 93       	push	r26
    15a0:	bf 93       	push	r27
    15a2:	ef 93       	push	r30
    15a4:	ff 93       	push	r31
	TIMER2.Flags.Comp_Match = ENABLE;
    15a6:	88 b7       	in	r24, 0x38	; 56
    15a8:	80 68       	ori	r24, 0x80	; 128
    15aa:	88 bf       	out	0x38, r24	; 56
	PWMAction[Timer2]();
    15ac:	e0 91 76 00 	lds	r30, 0x0076
    15b0:	f0 91 77 00 	lds	r31, 0x0077
    15b4:	09 95       	icall
    15b6:	ff 91       	pop	r31
    15b8:	ef 91       	pop	r30
    15ba:	bf 91       	pop	r27
    15bc:	af 91       	pop	r26
    15be:	9f 91       	pop	r25
    15c0:	8f 91       	pop	r24
    15c2:	7f 91       	pop	r23
    15c4:	6f 91       	pop	r22
    15c6:	5f 91       	pop	r21
    15c8:	4f 91       	pop	r20
    15ca:	3f 91       	pop	r19
    15cc:	2f 91       	pop	r18
    15ce:	0f 90       	pop	r0
    15d0:	0f be       	out	0x3f, r0	; 63
    15d2:	0f 90       	pop	r0
    15d4:	1f 90       	pop	r1
    15d6:	18 95       	reti

000015d8 <__ashldi3>:
    15d8:	cf 92       	push	r12
    15da:	df 92       	push	r13
    15dc:	ef 92       	push	r14
    15de:	ff 92       	push	r15
    15e0:	0f 93       	push	r16
    15e2:	cf 93       	push	r28
    15e4:	df 93       	push	r29
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62
    15ea:	60 97       	sbiw	r28, 0x10	; 16
    15ec:	0f b6       	in	r0, 0x3f	; 63
    15ee:	f8 94       	cli
    15f0:	de bf       	out	0x3e, r29	; 62
    15f2:	0f be       	out	0x3f, r0	; 63
    15f4:	cd bf       	out	0x3d, r28	; 61
    15f6:	00 23       	and	r16, r16
    15f8:	09 f4       	brne	.+2      	; 0x15fc <__ashldi3+0x24>
    15fa:	5a c0       	rjmp	.+180    	; 0x16b0 <__ashldi3+0xd8>
    15fc:	29 87       	std	Y+9, r18	; 0x09
    15fe:	3a 87       	std	Y+10, r19	; 0x0a
    1600:	4b 87       	std	Y+11, r20	; 0x0b
    1602:	5c 87       	std	Y+12, r21	; 0x0c
    1604:	6d 87       	std	Y+13, r22	; 0x0d
    1606:	7e 87       	std	Y+14, r23	; 0x0e
    1608:	8f 87       	std	Y+15, r24	; 0x0f
    160a:	98 8b       	std	Y+16, r25	; 0x10
    160c:	80 e2       	ldi	r24, 0x20	; 32
    160e:	80 1b       	sub	r24, r16
    1610:	49 85       	ldd	r20, Y+9	; 0x09
    1612:	5a 85       	ldd	r21, Y+10	; 0x0a
    1614:	6b 85       	ldd	r22, Y+11	; 0x0b
    1616:	7c 85       	ldd	r23, Y+12	; 0x0c
    1618:	18 16       	cp	r1, r24
    161a:	b4 f0       	brlt	.+44     	; 0x1648 <__ashldi3+0x70>
    161c:	19 82       	std	Y+1, r1	; 0x01
    161e:	1a 82       	std	Y+2, r1	; 0x02
    1620:	1b 82       	std	Y+3, r1	; 0x03
    1622:	1c 82       	std	Y+4, r1	; 0x04
    1624:	99 27       	eor	r25, r25
    1626:	87 fd       	sbrc	r24, 7
    1628:	90 95       	com	r25
    162a:	90 95       	com	r25
    162c:	81 95       	neg	r24
    162e:	9f 4f       	sbci	r25, 0xFF	; 255
    1630:	04 c0       	rjmp	.+8      	; 0x163a <__ashldi3+0x62>
    1632:	44 0f       	add	r20, r20
    1634:	55 1f       	adc	r21, r21
    1636:	66 1f       	adc	r22, r22
    1638:	77 1f       	adc	r23, r23
    163a:	8a 95       	dec	r24
    163c:	d2 f7       	brpl	.-12     	; 0x1632 <__ashldi3+0x5a>
    163e:	4d 83       	std	Y+5, r20	; 0x05
    1640:	5e 83       	std	Y+6, r21	; 0x06
    1642:	6f 83       	std	Y+7, r22	; 0x07
    1644:	78 87       	std	Y+8, r23	; 0x08
    1646:	2c c0       	rjmp	.+88     	; 0x16a0 <__ashldi3+0xc8>
    1648:	6a 01       	movw	r12, r20
    164a:	7b 01       	movw	r14, r22
    164c:	00 2e       	mov	r0, r16
    164e:	04 c0       	rjmp	.+8      	; 0x1658 <__ashldi3+0x80>
    1650:	cc 0c       	add	r12, r12
    1652:	dd 1c       	adc	r13, r13
    1654:	ee 1c       	adc	r14, r14
    1656:	ff 1c       	adc	r15, r15
    1658:	0a 94       	dec	r0
    165a:	d2 f7       	brpl	.-12     	; 0x1650 <__ashldi3+0x78>
    165c:	c9 82       	std	Y+1, r12	; 0x01
    165e:	da 82       	std	Y+2, r13	; 0x02
    1660:	eb 82       	std	Y+3, r14	; 0x03
    1662:	fc 82       	std	Y+4, r15	; 0x04
    1664:	6a 01       	movw	r12, r20
    1666:	7b 01       	movw	r14, r22
    1668:	04 c0       	rjmp	.+8      	; 0x1672 <__ashldi3+0x9a>
    166a:	f6 94       	lsr	r15
    166c:	e7 94       	ror	r14
    166e:	d7 94       	ror	r13
    1670:	c7 94       	ror	r12
    1672:	8a 95       	dec	r24
    1674:	d2 f7       	brpl	.-12     	; 0x166a <__ashldi3+0x92>
    1676:	d7 01       	movw	r26, r14
    1678:	c6 01       	movw	r24, r12
    167a:	4d 85       	ldd	r20, Y+13	; 0x0d
    167c:	5e 85       	ldd	r21, Y+14	; 0x0e
    167e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1680:	78 89       	ldd	r23, Y+16	; 0x10
    1682:	04 c0       	rjmp	.+8      	; 0x168c <__ashldi3+0xb4>
    1684:	44 0f       	add	r20, r20
    1686:	55 1f       	adc	r21, r21
    1688:	66 1f       	adc	r22, r22
    168a:	77 1f       	adc	r23, r23
    168c:	0a 95       	dec	r16
    168e:	d2 f7       	brpl	.-12     	; 0x1684 <__ashldi3+0xac>
    1690:	84 2b       	or	r24, r20
    1692:	95 2b       	or	r25, r21
    1694:	a6 2b       	or	r26, r22
    1696:	b7 2b       	or	r27, r23
    1698:	8d 83       	std	Y+5, r24	; 0x05
    169a:	9e 83       	std	Y+6, r25	; 0x06
    169c:	af 83       	std	Y+7, r26	; 0x07
    169e:	b8 87       	std	Y+8, r27	; 0x08
    16a0:	29 81       	ldd	r18, Y+1	; 0x01
    16a2:	3a 81       	ldd	r19, Y+2	; 0x02
    16a4:	4b 81       	ldd	r20, Y+3	; 0x03
    16a6:	5c 81       	ldd	r21, Y+4	; 0x04
    16a8:	6d 81       	ldd	r22, Y+5	; 0x05
    16aa:	7e 81       	ldd	r23, Y+6	; 0x06
    16ac:	8f 81       	ldd	r24, Y+7	; 0x07
    16ae:	98 85       	ldd	r25, Y+8	; 0x08
    16b0:	60 96       	adiw	r28, 0x10	; 16
    16b2:	0f b6       	in	r0, 0x3f	; 63
    16b4:	f8 94       	cli
    16b6:	de bf       	out	0x3e, r29	; 62
    16b8:	0f be       	out	0x3f, r0	; 63
    16ba:	cd bf       	out	0x3d, r28	; 61
    16bc:	df 91       	pop	r29
    16be:	cf 91       	pop	r28
    16c0:	0f 91       	pop	r16
    16c2:	ff 90       	pop	r15
    16c4:	ef 90       	pop	r14
    16c6:	df 90       	pop	r13
    16c8:	cf 90       	pop	r12
    16ca:	08 95       	ret

000016cc <__divsf3>:
    16cc:	0c d0       	rcall	.+24     	; 0x16e6 <__divsf3x>
    16ce:	e6 c0       	rjmp	.+460    	; 0x189c <__fp_round>
    16d0:	de d0       	rcall	.+444    	; 0x188e <__fp_pscB>
    16d2:	40 f0       	brcs	.+16     	; 0x16e4 <__divsf3+0x18>
    16d4:	d5 d0       	rcall	.+426    	; 0x1880 <__fp_pscA>
    16d6:	30 f0       	brcs	.+12     	; 0x16e4 <__divsf3+0x18>
    16d8:	21 f4       	brne	.+8      	; 0x16e2 <__divsf3+0x16>
    16da:	5f 3f       	cpi	r21, 0xFF	; 255
    16dc:	19 f0       	breq	.+6      	; 0x16e4 <__divsf3+0x18>
    16de:	c7 c0       	rjmp	.+398    	; 0x186e <__fp_inf>
    16e0:	51 11       	cpse	r21, r1
    16e2:	10 c1       	rjmp	.+544    	; 0x1904 <__fp_szero>
    16e4:	ca c0       	rjmp	.+404    	; 0x187a <__fp_nan>

000016e6 <__divsf3x>:
    16e6:	eb d0       	rcall	.+470    	; 0x18be <__fp_split3>
    16e8:	98 f3       	brcs	.-26     	; 0x16d0 <__divsf3+0x4>

000016ea <__divsf3_pse>:
    16ea:	99 23       	and	r25, r25
    16ec:	c9 f3       	breq	.-14     	; 0x16e0 <__divsf3+0x14>
    16ee:	55 23       	and	r21, r21
    16f0:	b1 f3       	breq	.-20     	; 0x16de <__divsf3+0x12>
    16f2:	95 1b       	sub	r25, r21
    16f4:	55 0b       	sbc	r21, r21
    16f6:	bb 27       	eor	r27, r27
    16f8:	aa 27       	eor	r26, r26
    16fa:	62 17       	cp	r22, r18
    16fc:	73 07       	cpc	r23, r19
    16fe:	84 07       	cpc	r24, r20
    1700:	38 f0       	brcs	.+14     	; 0x1710 <__divsf3_pse+0x26>
    1702:	9f 5f       	subi	r25, 0xFF	; 255
    1704:	5f 4f       	sbci	r21, 0xFF	; 255
    1706:	22 0f       	add	r18, r18
    1708:	33 1f       	adc	r19, r19
    170a:	44 1f       	adc	r20, r20
    170c:	aa 1f       	adc	r26, r26
    170e:	a9 f3       	breq	.-22     	; 0x16fa <__divsf3_pse+0x10>
    1710:	33 d0       	rcall	.+102    	; 0x1778 <__divsf3_pse+0x8e>
    1712:	0e 2e       	mov	r0, r30
    1714:	3a f0       	brmi	.+14     	; 0x1724 <__divsf3_pse+0x3a>
    1716:	e0 e8       	ldi	r30, 0x80	; 128
    1718:	30 d0       	rcall	.+96     	; 0x177a <__divsf3_pse+0x90>
    171a:	91 50       	subi	r25, 0x01	; 1
    171c:	50 40       	sbci	r21, 0x00	; 0
    171e:	e6 95       	lsr	r30
    1720:	00 1c       	adc	r0, r0
    1722:	ca f7       	brpl	.-14     	; 0x1716 <__divsf3_pse+0x2c>
    1724:	29 d0       	rcall	.+82     	; 0x1778 <__divsf3_pse+0x8e>
    1726:	fe 2f       	mov	r31, r30
    1728:	27 d0       	rcall	.+78     	; 0x1778 <__divsf3_pse+0x8e>
    172a:	66 0f       	add	r22, r22
    172c:	77 1f       	adc	r23, r23
    172e:	88 1f       	adc	r24, r24
    1730:	bb 1f       	adc	r27, r27
    1732:	26 17       	cp	r18, r22
    1734:	37 07       	cpc	r19, r23
    1736:	48 07       	cpc	r20, r24
    1738:	ab 07       	cpc	r26, r27
    173a:	b0 e8       	ldi	r27, 0x80	; 128
    173c:	09 f0       	breq	.+2      	; 0x1740 <__divsf3_pse+0x56>
    173e:	bb 0b       	sbc	r27, r27
    1740:	80 2d       	mov	r24, r0
    1742:	bf 01       	movw	r22, r30
    1744:	ff 27       	eor	r31, r31
    1746:	93 58       	subi	r25, 0x83	; 131
    1748:	5f 4f       	sbci	r21, 0xFF	; 255
    174a:	2a f0       	brmi	.+10     	; 0x1756 <__divsf3_pse+0x6c>
    174c:	9e 3f       	cpi	r25, 0xFE	; 254
    174e:	51 05       	cpc	r21, r1
    1750:	68 f0       	brcs	.+26     	; 0x176c <__divsf3_pse+0x82>
    1752:	8d c0       	rjmp	.+282    	; 0x186e <__fp_inf>
    1754:	d7 c0       	rjmp	.+430    	; 0x1904 <__fp_szero>
    1756:	5f 3f       	cpi	r21, 0xFF	; 255
    1758:	ec f3       	brlt	.-6      	; 0x1754 <__divsf3_pse+0x6a>
    175a:	98 3e       	cpi	r25, 0xE8	; 232
    175c:	dc f3       	brlt	.-10     	; 0x1754 <__divsf3_pse+0x6a>
    175e:	86 95       	lsr	r24
    1760:	77 95       	ror	r23
    1762:	67 95       	ror	r22
    1764:	b7 95       	ror	r27
    1766:	f7 95       	ror	r31
    1768:	9f 5f       	subi	r25, 0xFF	; 255
    176a:	c9 f7       	brne	.-14     	; 0x175e <__divsf3_pse+0x74>
    176c:	88 0f       	add	r24, r24
    176e:	91 1d       	adc	r25, r1
    1770:	96 95       	lsr	r25
    1772:	87 95       	ror	r24
    1774:	97 f9       	bld	r25, 7
    1776:	08 95       	ret
    1778:	e1 e0       	ldi	r30, 0x01	; 1
    177a:	66 0f       	add	r22, r22
    177c:	77 1f       	adc	r23, r23
    177e:	88 1f       	adc	r24, r24
    1780:	bb 1f       	adc	r27, r27
    1782:	62 17       	cp	r22, r18
    1784:	73 07       	cpc	r23, r19
    1786:	84 07       	cpc	r24, r20
    1788:	ba 07       	cpc	r27, r26
    178a:	20 f0       	brcs	.+8      	; 0x1794 <__divsf3_pse+0xaa>
    178c:	62 1b       	sub	r22, r18
    178e:	73 0b       	sbc	r23, r19
    1790:	84 0b       	sbc	r24, r20
    1792:	ba 0b       	sbc	r27, r26
    1794:	ee 1f       	adc	r30, r30
    1796:	88 f7       	brcc	.-30     	; 0x177a <__divsf3_pse+0x90>
    1798:	e0 95       	com	r30
    179a:	08 95       	ret

0000179c <__fixunssfsi>:
    179c:	98 d0       	rcall	.+304    	; 0x18ce <__fp_splitA>
    179e:	88 f0       	brcs	.+34     	; 0x17c2 <__fixunssfsi+0x26>
    17a0:	9f 57       	subi	r25, 0x7F	; 127
    17a2:	90 f0       	brcs	.+36     	; 0x17c8 <__fixunssfsi+0x2c>
    17a4:	b9 2f       	mov	r27, r25
    17a6:	99 27       	eor	r25, r25
    17a8:	b7 51       	subi	r27, 0x17	; 23
    17aa:	a0 f0       	brcs	.+40     	; 0x17d4 <__fixunssfsi+0x38>
    17ac:	d1 f0       	breq	.+52     	; 0x17e2 <__fixunssfsi+0x46>
    17ae:	66 0f       	add	r22, r22
    17b0:	77 1f       	adc	r23, r23
    17b2:	88 1f       	adc	r24, r24
    17b4:	99 1f       	adc	r25, r25
    17b6:	1a f0       	brmi	.+6      	; 0x17be <__fixunssfsi+0x22>
    17b8:	ba 95       	dec	r27
    17ba:	c9 f7       	brne	.-14     	; 0x17ae <__fixunssfsi+0x12>
    17bc:	12 c0       	rjmp	.+36     	; 0x17e2 <__fixunssfsi+0x46>
    17be:	b1 30       	cpi	r27, 0x01	; 1
    17c0:	81 f0       	breq	.+32     	; 0x17e2 <__fixunssfsi+0x46>
    17c2:	9f d0       	rcall	.+318    	; 0x1902 <__fp_zero>
    17c4:	b1 e0       	ldi	r27, 0x01	; 1
    17c6:	08 95       	ret
    17c8:	9c c0       	rjmp	.+312    	; 0x1902 <__fp_zero>
    17ca:	67 2f       	mov	r22, r23
    17cc:	78 2f       	mov	r23, r24
    17ce:	88 27       	eor	r24, r24
    17d0:	b8 5f       	subi	r27, 0xF8	; 248
    17d2:	39 f0       	breq	.+14     	; 0x17e2 <__fixunssfsi+0x46>
    17d4:	b9 3f       	cpi	r27, 0xF9	; 249
    17d6:	cc f3       	brlt	.-14     	; 0x17ca <__fixunssfsi+0x2e>
    17d8:	86 95       	lsr	r24
    17da:	77 95       	ror	r23
    17dc:	67 95       	ror	r22
    17de:	b3 95       	inc	r27
    17e0:	d9 f7       	brne	.-10     	; 0x17d8 <__fixunssfsi+0x3c>
    17e2:	3e f4       	brtc	.+14     	; 0x17f2 <__fixunssfsi+0x56>
    17e4:	90 95       	com	r25
    17e6:	80 95       	com	r24
    17e8:	70 95       	com	r23
    17ea:	61 95       	neg	r22
    17ec:	7f 4f       	sbci	r23, 0xFF	; 255
    17ee:	8f 4f       	sbci	r24, 0xFF	; 255
    17f0:	9f 4f       	sbci	r25, 0xFF	; 255
    17f2:	08 95       	ret

000017f4 <__floatunsisf>:
    17f4:	e8 94       	clt
    17f6:	09 c0       	rjmp	.+18     	; 0x180a <__floatsisf+0x12>

000017f8 <__floatsisf>:
    17f8:	97 fb       	bst	r25, 7
    17fa:	3e f4       	brtc	.+14     	; 0x180a <__floatsisf+0x12>
    17fc:	90 95       	com	r25
    17fe:	80 95       	com	r24
    1800:	70 95       	com	r23
    1802:	61 95       	neg	r22
    1804:	7f 4f       	sbci	r23, 0xFF	; 255
    1806:	8f 4f       	sbci	r24, 0xFF	; 255
    1808:	9f 4f       	sbci	r25, 0xFF	; 255
    180a:	99 23       	and	r25, r25
    180c:	a9 f0       	breq	.+42     	; 0x1838 <__floatsisf+0x40>
    180e:	f9 2f       	mov	r31, r25
    1810:	96 e9       	ldi	r25, 0x96	; 150
    1812:	bb 27       	eor	r27, r27
    1814:	93 95       	inc	r25
    1816:	f6 95       	lsr	r31
    1818:	87 95       	ror	r24
    181a:	77 95       	ror	r23
    181c:	67 95       	ror	r22
    181e:	b7 95       	ror	r27
    1820:	f1 11       	cpse	r31, r1
    1822:	f8 cf       	rjmp	.-16     	; 0x1814 <__floatsisf+0x1c>
    1824:	fa f4       	brpl	.+62     	; 0x1864 <__floatsisf+0x6c>
    1826:	bb 0f       	add	r27, r27
    1828:	11 f4       	brne	.+4      	; 0x182e <__floatsisf+0x36>
    182a:	60 ff       	sbrs	r22, 0
    182c:	1b c0       	rjmp	.+54     	; 0x1864 <__floatsisf+0x6c>
    182e:	6f 5f       	subi	r22, 0xFF	; 255
    1830:	7f 4f       	sbci	r23, 0xFF	; 255
    1832:	8f 4f       	sbci	r24, 0xFF	; 255
    1834:	9f 4f       	sbci	r25, 0xFF	; 255
    1836:	16 c0       	rjmp	.+44     	; 0x1864 <__floatsisf+0x6c>
    1838:	88 23       	and	r24, r24
    183a:	11 f0       	breq	.+4      	; 0x1840 <__floatsisf+0x48>
    183c:	96 e9       	ldi	r25, 0x96	; 150
    183e:	11 c0       	rjmp	.+34     	; 0x1862 <__floatsisf+0x6a>
    1840:	77 23       	and	r23, r23
    1842:	21 f0       	breq	.+8      	; 0x184c <__floatsisf+0x54>
    1844:	9e e8       	ldi	r25, 0x8E	; 142
    1846:	87 2f       	mov	r24, r23
    1848:	76 2f       	mov	r23, r22
    184a:	05 c0       	rjmp	.+10     	; 0x1856 <__floatsisf+0x5e>
    184c:	66 23       	and	r22, r22
    184e:	71 f0       	breq	.+28     	; 0x186c <__floatsisf+0x74>
    1850:	96 e8       	ldi	r25, 0x86	; 134
    1852:	86 2f       	mov	r24, r22
    1854:	70 e0       	ldi	r23, 0x00	; 0
    1856:	60 e0       	ldi	r22, 0x00	; 0
    1858:	2a f0       	brmi	.+10     	; 0x1864 <__floatsisf+0x6c>
    185a:	9a 95       	dec	r25
    185c:	66 0f       	add	r22, r22
    185e:	77 1f       	adc	r23, r23
    1860:	88 1f       	adc	r24, r24
    1862:	da f7       	brpl	.-10     	; 0x185a <__floatsisf+0x62>
    1864:	88 0f       	add	r24, r24
    1866:	96 95       	lsr	r25
    1868:	87 95       	ror	r24
    186a:	97 f9       	bld	r25, 7
    186c:	08 95       	ret

0000186e <__fp_inf>:
    186e:	97 f9       	bld	r25, 7
    1870:	9f 67       	ori	r25, 0x7F	; 127
    1872:	80 e8       	ldi	r24, 0x80	; 128
    1874:	70 e0       	ldi	r23, 0x00	; 0
    1876:	60 e0       	ldi	r22, 0x00	; 0
    1878:	08 95       	ret

0000187a <__fp_nan>:
    187a:	9f ef       	ldi	r25, 0xFF	; 255
    187c:	80 ec       	ldi	r24, 0xC0	; 192
    187e:	08 95       	ret

00001880 <__fp_pscA>:
    1880:	00 24       	eor	r0, r0
    1882:	0a 94       	dec	r0
    1884:	16 16       	cp	r1, r22
    1886:	17 06       	cpc	r1, r23
    1888:	18 06       	cpc	r1, r24
    188a:	09 06       	cpc	r0, r25
    188c:	08 95       	ret

0000188e <__fp_pscB>:
    188e:	00 24       	eor	r0, r0
    1890:	0a 94       	dec	r0
    1892:	12 16       	cp	r1, r18
    1894:	13 06       	cpc	r1, r19
    1896:	14 06       	cpc	r1, r20
    1898:	05 06       	cpc	r0, r21
    189a:	08 95       	ret

0000189c <__fp_round>:
    189c:	09 2e       	mov	r0, r25
    189e:	03 94       	inc	r0
    18a0:	00 0c       	add	r0, r0
    18a2:	11 f4       	brne	.+4      	; 0x18a8 <__fp_round+0xc>
    18a4:	88 23       	and	r24, r24
    18a6:	52 f0       	brmi	.+20     	; 0x18bc <__fp_round+0x20>
    18a8:	bb 0f       	add	r27, r27
    18aa:	40 f4       	brcc	.+16     	; 0x18bc <__fp_round+0x20>
    18ac:	bf 2b       	or	r27, r31
    18ae:	11 f4       	brne	.+4      	; 0x18b4 <__fp_round+0x18>
    18b0:	60 ff       	sbrs	r22, 0
    18b2:	04 c0       	rjmp	.+8      	; 0x18bc <__fp_round+0x20>
    18b4:	6f 5f       	subi	r22, 0xFF	; 255
    18b6:	7f 4f       	sbci	r23, 0xFF	; 255
    18b8:	8f 4f       	sbci	r24, 0xFF	; 255
    18ba:	9f 4f       	sbci	r25, 0xFF	; 255
    18bc:	08 95       	ret

000018be <__fp_split3>:
    18be:	57 fd       	sbrc	r21, 7
    18c0:	90 58       	subi	r25, 0x80	; 128
    18c2:	44 0f       	add	r20, r20
    18c4:	55 1f       	adc	r21, r21
    18c6:	59 f0       	breq	.+22     	; 0x18de <__fp_splitA+0x10>
    18c8:	5f 3f       	cpi	r21, 0xFF	; 255
    18ca:	71 f0       	breq	.+28     	; 0x18e8 <__fp_splitA+0x1a>
    18cc:	47 95       	ror	r20

000018ce <__fp_splitA>:
    18ce:	88 0f       	add	r24, r24
    18d0:	97 fb       	bst	r25, 7
    18d2:	99 1f       	adc	r25, r25
    18d4:	61 f0       	breq	.+24     	; 0x18ee <__fp_splitA+0x20>
    18d6:	9f 3f       	cpi	r25, 0xFF	; 255
    18d8:	79 f0       	breq	.+30     	; 0x18f8 <__fp_splitA+0x2a>
    18da:	87 95       	ror	r24
    18dc:	08 95       	ret
    18de:	12 16       	cp	r1, r18
    18e0:	13 06       	cpc	r1, r19
    18e2:	14 06       	cpc	r1, r20
    18e4:	55 1f       	adc	r21, r21
    18e6:	f2 cf       	rjmp	.-28     	; 0x18cc <__fp_split3+0xe>
    18e8:	46 95       	lsr	r20
    18ea:	f1 df       	rcall	.-30     	; 0x18ce <__fp_splitA>
    18ec:	08 c0       	rjmp	.+16     	; 0x18fe <__fp_splitA+0x30>
    18ee:	16 16       	cp	r1, r22
    18f0:	17 06       	cpc	r1, r23
    18f2:	18 06       	cpc	r1, r24
    18f4:	99 1f       	adc	r25, r25
    18f6:	f1 cf       	rjmp	.-30     	; 0x18da <__fp_splitA+0xc>
    18f8:	86 95       	lsr	r24
    18fa:	71 05       	cpc	r23, r1
    18fc:	61 05       	cpc	r22, r1
    18fe:	08 94       	sec
    1900:	08 95       	ret

00001902 <__fp_zero>:
    1902:	e8 94       	clt

00001904 <__fp_szero>:
    1904:	bb 27       	eor	r27, r27
    1906:	66 27       	eor	r22, r22
    1908:	77 27       	eor	r23, r23
    190a:	cb 01       	movw	r24, r22
    190c:	97 f9       	bld	r25, 7
    190e:	08 95       	ret

00001910 <__mulsi3>:
    1910:	62 9f       	mul	r22, r18
    1912:	d0 01       	movw	r26, r0
    1914:	73 9f       	mul	r23, r19
    1916:	f0 01       	movw	r30, r0
    1918:	82 9f       	mul	r24, r18
    191a:	e0 0d       	add	r30, r0
    191c:	f1 1d       	adc	r31, r1
    191e:	64 9f       	mul	r22, r20
    1920:	e0 0d       	add	r30, r0
    1922:	f1 1d       	adc	r31, r1
    1924:	92 9f       	mul	r25, r18
    1926:	f0 0d       	add	r31, r0
    1928:	83 9f       	mul	r24, r19
    192a:	f0 0d       	add	r31, r0
    192c:	74 9f       	mul	r23, r20
    192e:	f0 0d       	add	r31, r0
    1930:	65 9f       	mul	r22, r21
    1932:	f0 0d       	add	r31, r0
    1934:	99 27       	eor	r25, r25
    1936:	72 9f       	mul	r23, r18
    1938:	b0 0d       	add	r27, r0
    193a:	e1 1d       	adc	r30, r1
    193c:	f9 1f       	adc	r31, r25
    193e:	63 9f       	mul	r22, r19
    1940:	b0 0d       	add	r27, r0
    1942:	e1 1d       	adc	r30, r1
    1944:	f9 1f       	adc	r31, r25
    1946:	bd 01       	movw	r22, r26
    1948:	cf 01       	movw	r24, r30
    194a:	11 24       	eor	r1, r1
    194c:	08 95       	ret

0000194e <_exit>:
    194e:	f8 94       	cli

00001950 <__stop_program>:
    1950:	ff cf       	rjmp	.-2      	; 0x1950 <__stop_program>
