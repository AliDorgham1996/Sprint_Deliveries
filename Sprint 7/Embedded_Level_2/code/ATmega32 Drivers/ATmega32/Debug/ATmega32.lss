
ATmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000009da  00000a6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800074  00800074  00000a82  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a82  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ab4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  00000af0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000261c  00000000  00000000  00000cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dcd  00000000  00000000  000032dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011f2  00000000  00000000  000040a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004b0  00000000  00000000  0000529c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010de  00000000  00000000  0000574c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000014ed  00000000  00000000  0000682a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  00007d17  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 91 04 	jmp	0x922	; 0x922 <__vector_4>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 4f 04 	jmp	0x89e	; 0x89e <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ed       	ldi	r30, 0xDA	; 218
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 38       	cpi	r26, 0x83	; 131
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 eb 04 	jmp	0x9d6	; 0x9d6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <avr/interrupt.h>



int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	1f 92       	push	r1
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
	uint8_t key = KEYPAD_INVALID_KEY;
  9c:	19 82       	std	Y+1, r1	; 0x01
	uint8_t Flag_String = 0;
	Keypad_Init();
  9e:	0e 94 e7 00 	call	0x1ce	; 0x1ce <Keypad_Init>
	sei();
  a2:	78 94       	sei


int main(void)
{
	uint8_t key = KEYPAD_INVALID_KEY;
	uint8_t Flag_String = 0;
  a4:	10 e0       	ldi	r17, 0x00	; 0
	Keypad_Init();
	sei();
	while(1)
	{
		if(Flag_String == 0)
  a6:	11 11       	cpse	r17, r1
  a8:	0d c0       	rjmp	.+26     	; 0xc4 <main+0x32>
		{
			if(LCD_DISPLAY_OK == LCD_init())
  aa:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LCD_init>
  ae:	81 11       	cpse	r24, r1
  b0:	09 c0       	rjmp	.+18     	; 0xc4 <main+0x32>
			{
				if(LCD_DISPLAY_OK == LCD_Display_StringXY(LCD_EN_ROW_1, LCD_EN_COL_1, (uint8_t*)"Sprint 7"))
  b2:	4a e6       	ldi	r20, 0x6A	; 106
  b4:	50 e0       	ldi	r21, 0x00	; 0
  b6:	60 e0       	ldi	r22, 0x00	; 0
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	0e 94 90 02 	call	0x520	; 0x520 <LCD_Display_StringXY>
  be:	11 e0       	ldi	r17, 0x01	; 1
  c0:	81 11       	cpse	r24, r1
  c2:	10 e0       	ldi	r17, 0x00	; 0
					Flag_String = 1;
				}
			}
		}
		
		Keypad_GetKey(&key);
  c4:	ce 01       	movw	r24, r28
  c6:	01 96       	adiw	r24, 0x01	; 1
  c8:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <Keypad_GetKey>
		if(KEYPAD_INVALID_KEY != key)
  cc:	49 81       	ldd	r20, Y+1	; 0x01
  ce:	44 23       	and	r20, r20
  d0:	51 f3       	breq	.-44     	; 0xa6 <main+0x14>
		{
			LCD_Display_CharXY(LCD_EN_ROW_2, LCD_EN_COL_1, key);
  d2:	60 e0       	ldi	r22, 0x00	; 0
  d4:	82 e0       	ldi	r24, 0x02	; 2
  d6:	0e 94 83 02 	call	0x506	; 0x506 <LCD_Display_CharXY>
  da:	e5 cf       	rjmp	.-54     	; 0xa6 <main+0x14>

000000dc <Update_Flag>:
* Static Functions
*********************************************************/

_S void		Update_Flag		(void)
{
	Key_Flag = Flag_Pending;
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <Key_Flag>
  e2:	08 95       	ret

000000e4 <GetKey>:
}
_S void		GetKey			(uint8_t* Key)
{
  e4:	5f 92       	push	r5
  e6:	6f 92       	push	r6
  e8:	7f 92       	push	r7
  ea:	8f 92       	push	r8
  ec:	9f 92       	push	r9
  ee:	af 92       	push	r10
  f0:	bf 92       	push	r11
  f2:	cf 92       	push	r12
  f4:	df 92       	push	r13
  f6:	ef 92       	push	r14
  f8:	ff 92       	push	r15
  fa:	0f 93       	push	r16
  fc:	1f 93       	push	r17
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
 102:	1f 92       	push	r1
 104:	cd b7       	in	r28, 0x3d	; 61
 106:	de b7       	in	r29, 0x3e	; 62
 108:	4c 01       	movw	r8, r24
	uint8_t row = 0;
	uint8_t col = 0;
	uint8_t pin = 0;
 10a:	19 82       	std	Y+1, r1	; 0x01
	uint8_t Local_Flag = 0;
	*Key = KEYPAD_INVALID_KEY;
 10c:	fc 01       	movw	r30, r24
 10e:	10 82       	st	Z, r1
 110:	e1 2c       	mov	r14, r1
 112:	f1 2c       	mov	r15, r1
	for (row = 0; row < KEYPAD_ROW; row++)
	{
		Dio_GroupWrite(KEY_ROWS_PORT, (KEY_ROWS_MSK)&(1<<(row+KEY_ROWS_START)), DIO_EN_W_Low);
 114:	cc 24       	eor	r12, r12
 116:	c3 94       	inc	r12
 118:	d1 2c       	mov	r13, r1
 11a:	37 01       	movw	r6, r14
 11c:	c7 01       	movw	r24, r14
 11e:	02 96       	adiw	r24, 0x02	; 2
 120:	96 01       	movw	r18, r12
 122:	02 c0       	rjmp	.+4      	; 0x128 <GetKey+0x44>
 124:	22 0f       	add	r18, r18
 126:	33 1f       	adc	r19, r19
 128:	8a 95       	dec	r24
 12a:	e2 f7       	brpl	.-8      	; 0x124 <GetKey+0x40>
 12c:	2c 71       	andi	r18, 0x1C	; 28
 12e:	52 2e       	mov	r5, r18
 130:	40 e0       	ldi	r20, 0x00	; 0
 132:	62 2f       	mov	r22, r18
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	0e 94 bc 03 	call	0x778	; 0x778 <Dio_GroupWrite>
 13a:	00 e0       	ldi	r16, 0x00	; 0
 13c:	10 e0       	ldi	r17, 0x00	; 0
		for (col = 0; col < KEYPAD_COL; col++)
		{
			Dio_GroupRead(KEY_COLS_PORT, (KEY_COLS_MSK)&(1<<(col+KEY_COLS_START)), &pin);
 13e:	c8 01       	movw	r24, r16
 140:	05 96       	adiw	r24, 0x05	; 5
 142:	b6 01       	movw	r22, r12
 144:	02 c0       	rjmp	.+4      	; 0x14a <GetKey+0x66>
 146:	66 0f       	add	r22, r22
 148:	77 1f       	adc	r23, r23
 14a:	8a 95       	dec	r24
 14c:	e2 f7       	brpl	.-8      	; 0x146 <GetKey+0x62>
 14e:	60 7e       	andi	r22, 0xE0	; 224
 150:	ae 01       	movw	r20, r28
 152:	4f 5f       	subi	r20, 0xFF	; 255
 154:	5f 4f       	sbci	r21, 0xFF	; 255
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <Dio_GroupRead>
			if(pin == 0)
 15c:	89 81       	ldd	r24, Y+1	; 0x01
 15e:	81 11       	cpse	r24, r1
 160:	13 c0       	rjmp	.+38     	; 0x188 <GetKey+0xa4>
			{
				*Key = Keypad_keys[row][col];
 162:	c3 01       	movw	r24, r6
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	86 0d       	add	r24, r6
 16a:	97 1d       	adc	r25, r7
 16c:	80 5a       	subi	r24, 0xA0	; 160
 16e:	9f 4f       	sbci	r25, 0xFF	; 255
 170:	fc 01       	movw	r30, r24
 172:	e0 0f       	add	r30, r16
 174:	f1 1f       	adc	r31, r17
 176:	80 81       	ld	r24, Z
 178:	f4 01       	movw	r30, r8
 17a:	80 83       	st	Z, r24
				Local_Flag = 1;
				break;
			}
			else{/* MISRA C */}
		}
		Dio_GroupWrite(KEY_ROWS_PORT, (KEY_ROWS_MSK)&(1<<(row+KEY_ROWS_START)), DIO_EN_W_High);
 17c:	41 e0       	ldi	r20, 0x01	; 1
 17e:	65 2d       	mov	r22, r5
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	0e 94 bc 03 	call	0x778	; 0x778 <Dio_GroupWrite>
 186:	12 c0       	rjmp	.+36     	; 0x1ac <GetKey+0xc8>
 188:	0f 5f       	subi	r16, 0xFF	; 255
 18a:	1f 4f       	sbci	r17, 0xFF	; 255
	uint8_t Local_Flag = 0;
	*Key = KEYPAD_INVALID_KEY;
	for (row = 0; row < KEYPAD_ROW; row++)
	{
		Dio_GroupWrite(KEY_ROWS_PORT, (KEY_ROWS_MSK)&(1<<(row+KEY_ROWS_START)), DIO_EN_W_Low);
		for (col = 0; col < KEYPAD_COL; col++)
 18c:	03 30       	cpi	r16, 0x03	; 3
 18e:	11 05       	cpc	r17, r1
 190:	b1 f6       	brne	.-84     	; 0x13e <GetKey+0x5a>
				Local_Flag = 1;
				break;
			}
			else{/* MISRA C */}
		}
		Dio_GroupWrite(KEY_ROWS_PORT, (KEY_ROWS_MSK)&(1<<(row+KEY_ROWS_START)), DIO_EN_W_High);
 192:	41 e0       	ldi	r20, 0x01	; 1
 194:	65 2d       	mov	r22, r5
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	0e 94 bc 03 	call	0x778	; 0x778 <Dio_GroupWrite>
 19c:	ff ef       	ldi	r31, 0xFF	; 255
 19e:	ef 1a       	sub	r14, r31
 1a0:	ff 0a       	sbc	r15, r31
	uint8_t row = 0;
	uint8_t col = 0;
	uint8_t pin = 0;
	uint8_t Local_Flag = 0;
	*Key = KEYPAD_INVALID_KEY;
	for (row = 0; row < KEYPAD_ROW; row++)
 1a2:	23 e0       	ldi	r18, 0x03	; 3
 1a4:	e2 16       	cp	r14, r18
 1a6:	f1 04       	cpc	r15, r1
 1a8:	09 f0       	breq	.+2      	; 0x1ac <GetKey+0xc8>
 1aa:	b7 cf       	rjmp	.-146    	; 0x11a <GetKey+0x36>
		{
			break;
		}
		else{/*MISRA C*/}
	}
 1ac:	0f 90       	pop	r0
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	1f 91       	pop	r17
 1b4:	0f 91       	pop	r16
 1b6:	ff 90       	pop	r15
 1b8:	ef 90       	pop	r14
 1ba:	df 90       	pop	r13
 1bc:	cf 90       	pop	r12
 1be:	bf 90       	pop	r11
 1c0:	af 90       	pop	r10
 1c2:	9f 90       	pop	r9
 1c4:	8f 90       	pop	r8
 1c6:	7f 90       	pop	r7
 1c8:	6f 90       	pop	r6
 1ca:	5f 90       	pop	r5
 1cc:	08 95       	ret

000001ce <Keypad_Init>:
* KeyPad APIs 
***************************************************/
void		Keypad_Init     (void)
{
	/* Rows Out */
	Dio_GroupMode(KEY_ROWS_PORT, KEY_ROWS_MSK, DIO_EN_M_Output);
 1ce:	41 e0       	ldi	r20, 0x01	; 1
 1d0:	6c e1       	ldi	r22, 0x1C	; 28
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	0e 94 9b 03 	call	0x736	; 0x736 <Dio_GroupMode>
	/* Default deactivated */
	Dio_GroupWrite(KEY_ROWS_PORT, KEY_ROWS_MSK, DIO_EN_W_High);
 1d8:	41 e0       	ldi	r20, 0x01	; 1
 1da:	6c e1       	ldi	r22, 0x1C	; 28
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	0e 94 bc 03 	call	0x778	; 0x778 <Dio_GroupWrite>
	/* Cols Input */
	Dio_GroupMode(KEY_COLS_PORT, KEY_COLS_MSK, DIO_EN_M_Input);
 1e2:	40 e0       	ldi	r20, 0x00	; 0
 1e4:	60 ee       	ldi	r22, 0xE0	; 224
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	0e 94 9b 03 	call	0x736	; 0x736 <Dio_GroupMode>
	/* Cols Pull-up */
	Dio_GroupWrite(KEY_COLS_PORT, KEY_COLS_MSK, DIO_EN_W_High);
 1ec:	41 e0       	ldi	r20, 0x01	; 1
 1ee:	60 ee       	ldi	r22, 0xE0	; 224
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	0e 94 bc 03 	call	0x778	; 0x778 <Dio_GroupWrite>
 1f6:	08 95       	ret

000001f8 <Keypad_GetKey>:
}
Flag_t		Keypad_GetKey   (uint8_t* Key)
{
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	ec 01       	movw	r28, r24
	_S uint8_t PreviousKey = KEYPAD_INVALID_KEY;
	_S uint8_t Local_Key   = KEYPAD_INVALID_KEY;
	switch(Key_Flag)
 1fe:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <Key_Flag>
 202:	81 30       	cpi	r24, 0x01	; 1
 204:	01 f1       	breq	.+64     	; 0x246 <Keypad_GetKey+0x4e>
 206:	18 f0       	brcs	.+6      	; 0x20e <Keypad_GetKey+0x16>
 208:	82 30       	cpi	r24, 0x02	; 2
 20a:	c9 f1       	breq	.+114    	; 0x27e <Keypad_GetKey+0x86>
 20c:	3f c0       	rjmp	.+126    	; 0x28c <Keypad_GetKey+0x94>
		{
			//wait until flag become pending
		}break;
		case Flag_Available:
		{
			if(TMR_EN_valid_inti == Timer_SetTrigger(Timer_0, Update_Flag, KEYPAD_DEBOUNCING_MS))
 20e:	44 e1       	ldi	r20, 0x14	; 20
 210:	6e e6       	ldi	r22, 0x6E	; 110
 212:	70 e0       	ldi	r23, 0x00	; 0
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	0e 94 06 04 	call	0x80c	; 0x80c <Timer_SetTrigger>
 21a:	81 11       	cpse	r24, r1
 21c:	10 c0       	rjmp	.+32     	; 0x23e <Keypad_GetKey+0x46>
			{
				GetKey(&PreviousKey);
 21e:	85 e7       	ldi	r24, 0x75	; 117
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 72 00 	call	0xe4	; 0xe4 <GetKey>
				if(PreviousKey != KEYPAD_INVALID_KEY)
 226:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <PreviousKey.2152>
 22a:	88 23       	and	r24, r24
 22c:	21 f0       	breq	.+8      	; 0x236 <Keypad_GetKey+0x3e>
				{
					Key_Flag = Flag_Init;
 22e:	83 e0       	ldi	r24, 0x03	; 3
 230:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <Key_Flag>
 234:	2b c0       	rjmp	.+86     	; 0x28c <Keypad_GetKey+0x94>
				}
				else
				{
					Key_Flag = Flag_Busy;
 236:	82 e0       	ldi	r24, 0x02	; 2
 238:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <Key_Flag>
 23c:	27 c0       	rjmp	.+78     	; 0x28c <Keypad_GetKey+0x94>
				}
			}
			else
			{
				Key_Flag = Flag_Busy;
 23e:	82 e0       	ldi	r24, 0x02	; 2
 240:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <Key_Flag>
 244:	23 c0       	rjmp	.+70     	; 0x28c <Keypad_GetKey+0x94>
			}	
		}break;
		case Flag_Pending:
		{
			GetKey(&Local_Key);
 246:	84 e7       	ldi	r24, 0x74	; 116
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	0e 94 72 00 	call	0xe4	; 0xe4 <GetKey>
			if(Local_Key == PreviousKey)
 24e:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 252:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <PreviousKey.2152>
 256:	89 13       	cpse	r24, r25
 258:	0e c0       	rjmp	.+28     	; 0x276 <Keypad_GetKey+0x7e>
			{
				if(PreviousKey != KEYPAD_INVALID_KEY)
 25a:	88 23       	and	r24, r24
 25c:	41 f0       	breq	.+16     	; 0x26e <Keypad_GetKey+0x76>
				{
					*Key = Local_Key;
 25e:	88 83       	st	Y, r24
					Local_Key = PreviousKey = KEYPAD_INVALID_KEY;
 260:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <PreviousKey.2152>
 264:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__data_end>
					Key_Flag = Flag_Available;
 268:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <Key_Flag>
 26c:	0f c0       	rjmp	.+30     	; 0x28c <Keypad_GetKey+0x94>
				}
				else
				{
					Key_Flag = Flag_Busy;
 26e:	82 e0       	ldi	r24, 0x02	; 2
 270:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <Key_Flag>
 274:	0b c0       	rjmp	.+22     	; 0x28c <Keypad_GetKey+0x94>
				}
			}
			else
			{
				Key_Flag = Flag_Busy;
 276:	82 e0       	ldi	r24, 0x02	; 2
 278:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <Key_Flag>
 27c:	07 c0       	rjmp	.+14     	; 0x28c <Keypad_GetKey+0x94>
			}		
		}break;
		case Flag_Busy:
		{
			if(Flag_Available == Timer_Status(Timer_0))
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	0e 94 00 04 	call	0x800	; 0x800 <Timer_Status>
 284:	81 11       	cpse	r24, r1
 286:	02 c0       	rjmp	.+4      	; 0x28c <Keypad_GetKey+0x94>
			{
				Key_Flag = Flag_Available;
 288:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <Key_Flag>
			}
			else{/*MISRA C*/}	
		}break;
	}
	return Key_Flag;
 28c:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <Key_Flag>
}
 290:	df 91       	pop	r29
 292:	cf 91       	pop	r28
 294:	08 95       	ret

00000296 <Update_LocalFlag>:
uint8_t		LCD_Display_Num			(int32_t int32_tNum)
{
	uint8_t buffer [20] = {0};
	ltoa(int32_tNum, (char*)buffer, 10);
	return LCD_Display_String(buffer);
}
 296:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <LCD_Local_Flag>
 29a:	08 95       	ret

0000029c <LCD_Latch>:
 29c:	61 e0       	ldi	r22, 0x01	; 1
 29e:	8b e1       	ldi	r24, 0x1B	; 27
 2a0:	0e 94 25 03 	call	0x64a	; 0x64a <Dio_ChannelWrite>
 2a4:	60 e0       	ldi	r22, 0x00	; 0
 2a6:	8b e1       	ldi	r24, 0x1B	; 27
 2a8:	0e 94 25 03 	call	0x64a	; 0x64a <Dio_ChannelWrite>
 2ac:	08 95       	ret

000002ae <LCD_sendInst>:
 2ae:	cf 93       	push	r28
 2b0:	df 93       	push	r29
 2b2:	d0 91 69 00 	lds	r29, 0x0069	; 0x800069 <LCD_Flag>
 2b6:	d1 11       	cpse	r29, r1
 2b8:	25 c0       	rjmp	.+74     	; 0x304 <LCD_sendInst+0x56>
 2ba:	c8 2f       	mov	r28, r24
 2bc:	60 e0       	ldi	r22, 0x00	; 0
 2be:	89 e1       	ldi	r24, 0x19	; 25
 2c0:	0e 94 25 03 	call	0x64a	; 0x64a <Dio_ChannelWrite>
 2c4:	60 e0       	ldi	r22, 0x00	; 0
 2c6:	8a e1       	ldi	r24, 0x1A	; 26
 2c8:	0e 94 25 03 	call	0x64a	; 0x64a <Dio_ChannelWrite>
 2cc:	9c 2f       	mov	r25, r28
 2ce:	90 7f       	andi	r25, 0xF0	; 240
 2d0:	8b b3       	in	r24, 0x1b	; 27
 2d2:	8f 70       	andi	r24, 0x0F	; 15
 2d4:	89 2b       	or	r24, r25
 2d6:	8b bb       	out	0x1b, r24	; 27
 2d8:	0e 94 4e 01 	call	0x29c	; 0x29c <LCD_Latch>
 2dc:	8c 2f       	mov	r24, r28
 2de:	82 95       	swap	r24
 2e0:	80 7f       	andi	r24, 0xF0	; 240
 2e2:	cb b3       	in	r28, 0x1b	; 27
 2e4:	cf 70       	andi	r28, 0x0F	; 15
 2e6:	8c 2b       	or	r24, r28
 2e8:	8b bb       	out	0x1b, r24	; 27
 2ea:	0e 94 4e 01 	call	0x29c	; 0x29c <LCD_Latch>
 2ee:	28 e2       	ldi	r18, 0x28	; 40
 2f0:	30 e0       	ldi	r19, 0x00	; 0
 2f2:	40 e0       	ldi	r20, 0x00	; 0
 2f4:	50 e0       	ldi	r21, 0x00	; 0
 2f6:	60 e0       	ldi	r22, 0x00	; 0
 2f8:	70 e0       	ldi	r23, 0x00	; 0
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 9f 02 	call	0x53e	; 0x53e <Delay_Us>
 302:	01 c0       	rjmp	.+2      	; 0x306 <LCD_sendInst+0x58>
 304:	d1 e0       	ldi	r29, 0x01	; 1
 306:	8d 2f       	mov	r24, r29
 308:	df 91       	pop	r29
 30a:	cf 91       	pop	r28
 30c:	08 95       	ret

0000030e <LCD_GoToXY>:
 30e:	81 30       	cpi	r24, 0x01	; 1
 310:	29 f4       	brne	.+10     	; 0x31c <LCD_GoToXY+0xe>
 312:	80 e8       	ldi	r24, 0x80	; 128
 314:	86 0f       	add	r24, r22
 316:	0e 94 57 01 	call	0x2ae	; 0x2ae <LCD_sendInst>
 31a:	08 95       	ret
 31c:	82 30       	cpi	r24, 0x02	; 2
 31e:	29 f4       	brne	.+10     	; 0x32a <LCD_GoToXY+0x1c>
 320:	80 ec       	ldi	r24, 0xC0	; 192
 322:	86 0f       	add	r24, r22
 324:	0e 94 57 01 	call	0x2ae	; 0x2ae <LCD_sendInst>
 328:	08 95       	ret
 32a:	83 30       	cpi	r24, 0x03	; 3
 32c:	29 f4       	brne	.+10     	; 0x338 <LCD_GoToXY+0x2a>
 32e:	80 e9       	ldi	r24, 0x90	; 144
 330:	86 0f       	add	r24, r22
 332:	0e 94 57 01 	call	0x2ae	; 0x2ae <LCD_sendInst>
 336:	08 95       	ret
 338:	84 30       	cpi	r24, 0x04	; 4
 33a:	29 f4       	brne	.+10     	; 0x346 <LCD_GoToXY+0x38>
 33c:	80 ed       	ldi	r24, 0xD0	; 208
 33e:	86 0f       	add	r24, r22
 340:	0e 94 57 01 	call	0x2ae	; 0x2ae <LCD_sendInst>
 344:	08 95       	ret
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	08 95       	ret

0000034a <LCD_sendData>:
 34a:	cf 93       	push	r28
 34c:	df 93       	push	r29
 34e:	d0 91 69 00 	lds	r29, 0x0069	; 0x800069 <LCD_Flag>
 352:	d1 11       	cpse	r29, r1
 354:	25 c0       	rjmp	.+74     	; 0x3a0 <LCD_sendData+0x56>
 356:	c8 2f       	mov	r28, r24
 358:	61 e0       	ldi	r22, 0x01	; 1
 35a:	89 e1       	ldi	r24, 0x19	; 25
 35c:	0e 94 25 03 	call	0x64a	; 0x64a <Dio_ChannelWrite>
 360:	60 e0       	ldi	r22, 0x00	; 0
 362:	8a e1       	ldi	r24, 0x1A	; 26
 364:	0e 94 25 03 	call	0x64a	; 0x64a <Dio_ChannelWrite>
 368:	9c 2f       	mov	r25, r28
 36a:	90 7f       	andi	r25, 0xF0	; 240
 36c:	8b b3       	in	r24, 0x1b	; 27
 36e:	8f 70       	andi	r24, 0x0F	; 15
 370:	89 2b       	or	r24, r25
 372:	8b bb       	out	0x1b, r24	; 27
 374:	0e 94 4e 01 	call	0x29c	; 0x29c <LCD_Latch>
 378:	8c 2f       	mov	r24, r28
 37a:	82 95       	swap	r24
 37c:	80 7f       	andi	r24, 0xF0	; 240
 37e:	cb b3       	in	r28, 0x1b	; 27
 380:	cf 70       	andi	r28, 0x0F	; 15
 382:	8c 2b       	or	r24, r28
 384:	8b bb       	out	0x1b, r24	; 27
 386:	0e 94 4e 01 	call	0x29c	; 0x29c <LCD_Latch>
 38a:	28 e2       	ldi	r18, 0x28	; 40
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	40 e0       	ldi	r20, 0x00	; 0
 390:	50 e0       	ldi	r21, 0x00	; 0
 392:	60 e0       	ldi	r22, 0x00	; 0
 394:	70 e0       	ldi	r23, 0x00	; 0
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	0e 94 9f 02 	call	0x53e	; 0x53e <Delay_Us>
 39e:	01 c0       	rjmp	.+2      	; 0x3a2 <LCD_sendData+0x58>
 3a0:	d1 e0       	ldi	r29, 0x01	; 1
 3a2:	8d 2f       	mov	r24, r29
 3a4:	df 91       	pop	r29
 3a6:	cf 91       	pop	r28
 3a8:	08 95       	ret

000003aa <LCD_init>:
 3aa:	cf 93       	push	r28
 3ac:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <LCD_Local_Flag>
 3b0:	8f 3f       	cpi	r24, 0xFF	; 255
 3b2:	09 f4       	brne	.+2      	; 0x3b6 <LCD_init+0xc>
 3b4:	87 c0       	rjmp	.+270    	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
 3b6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <LCD_Local_Flag>
 3ba:	81 11       	cpse	r24, r1
 3bc:	85 c0       	rjmp	.+266    	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <LCD_Local_Flag>
 3c4:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <LCD_Event_Group>
 3c8:	82 30       	cpi	r24, 0x02	; 2
 3ca:	e1 f1       	breq	.+120    	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 3cc:	28 f4       	brcc	.+10     	; 0x3d8 <LCD_init+0x2e>
 3ce:	88 23       	and	r24, r24
 3d0:	61 f0       	breq	.+24     	; 0x3ea <LCD_init+0x40>
 3d2:	81 30       	cpi	r24, 0x01	; 1
 3d4:	29 f1       	breq	.+74     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 3d6:	7a c0       	rjmp	.+244    	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
 3d8:	84 30       	cpi	r24, 0x04	; 4
 3da:	09 f4       	brne	.+2      	; 0x3de <LCD_init+0x34>
 3dc:	59 c0       	rjmp	.+178    	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 3de:	08 f4       	brcc	.+2      	; 0x3e2 <LCD_init+0x38>
 3e0:	44 c0       	rjmp	.+136    	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 3e2:	8f 3f       	cpi	r24, 0xFF	; 255
 3e4:	09 f4       	brne	.+2      	; 0x3e8 <LCD_init+0x3e>
 3e6:	67 c0       	rjmp	.+206    	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
 3e8:	71 c0       	rjmp	.+226    	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
 3ea:	41 e0       	ldi	r20, 0x01	; 1
 3ec:	60 ef       	ldi	r22, 0xF0	; 240
 3ee:	83 e0       	ldi	r24, 0x03	; 3
 3f0:	0e 94 9b 03 	call	0x736	; 0x736 <Dio_GroupMode>
 3f4:	61 e0       	ldi	r22, 0x01	; 1
 3f6:	8a e1       	ldi	r24, 0x1A	; 26
 3f8:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <Dio_ChannelMode>
 3fc:	61 e0       	ldi	r22, 0x01	; 1
 3fe:	89 e1       	ldi	r24, 0x19	; 25
 400:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <Dio_ChannelMode>
 404:	61 e0       	ldi	r22, 0x01	; 1
 406:	8b e1       	ldi	r24, 0x1B	; 27
 408:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <Dio_ChannelMode>
 40c:	44 e6       	ldi	r20, 0x64	; 100
 40e:	6b e4       	ldi	r22, 0x4B	; 75
 410:	71 e0       	ldi	r23, 0x01	; 1
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	0e 94 06 04 	call	0x80c	; 0x80c <Timer_SetTrigger>
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <LCD_Event_Group>
 41e:	57 c0       	rjmp	.+174    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
 420:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <LCD_Flag>
 424:	82 e0       	ldi	r24, 0x02	; 2
 426:	0e 94 57 01 	call	0x2ae	; 0x2ae <LCD_sendInst>
 42a:	c2 e0       	ldi	r28, 0x02	; 2
 42c:	c0 93 69 00 	sts	0x0069, r28	; 0x800069 <LCD_Flag>
 430:	41 e0       	ldi	r20, 0x01	; 1
 432:	6b e4       	ldi	r22, 0x4B	; 75
 434:	71 e0       	ldi	r23, 0x01	; 1
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	0e 94 06 04 	call	0x80c	; 0x80c <Timer_SetTrigger>
 43c:	c0 93 77 00 	sts	0x0077, r28	; 0x800077 <LCD_Event_Group>
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	45 c0       	rjmp	.+138    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
 444:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <LCD_Flag>
 448:	88 e2       	ldi	r24, 0x28	; 40
 44a:	0e 94 57 01 	call	0x2ae	; 0x2ae <LCD_sendInst>
 44e:	82 e0       	ldi	r24, 0x02	; 2
 450:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <LCD_Flag>
 454:	41 e0       	ldi	r20, 0x01	; 1
 456:	6b e4       	ldi	r22, 0x4B	; 75
 458:	71 e0       	ldi	r23, 0x01	; 1
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	0e 94 06 04 	call	0x80c	; 0x80c <Timer_SetTrigger>
 460:	83 e0       	ldi	r24, 0x03	; 3
 462:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <LCD_Event_Group>
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	32 c0       	rjmp	.+100    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
 46a:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <LCD_Flag>
 46e:	8c e0       	ldi	r24, 0x0C	; 12
 470:	0e 94 57 01 	call	0x2ae	; 0x2ae <LCD_sendInst>
 474:	82 e0       	ldi	r24, 0x02	; 2
 476:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <LCD_Flag>
 47a:	41 e0       	ldi	r20, 0x01	; 1
 47c:	6b e4       	ldi	r22, 0x4B	; 75
 47e:	71 e0       	ldi	r23, 0x01	; 1
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	0e 94 06 04 	call	0x80c	; 0x80c <Timer_SetTrigger>
 486:	84 e0       	ldi	r24, 0x04	; 4
 488:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <LCD_Event_Group>
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	1f c0       	rjmp	.+62     	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
 490:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <LCD_Flag>
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	0e 94 57 01 	call	0x2ae	; 0x2ae <LCD_sendInst>
 49a:	82 e0       	ldi	r24, 0x02	; 2
 49c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <LCD_Flag>
 4a0:	45 e0       	ldi	r20, 0x05	; 5
 4a2:	6b e4       	ldi	r22, 0x4B	; 75
 4a4:	71 e0       	ldi	r23, 0x01	; 1
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	0e 94 06 04 	call	0x80c	; 0x80c <Timer_SetTrigger>
 4ac:	8f ef       	ldi	r24, 0xFF	; 255
 4ae:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <LCD_Event_Group>
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	0c c0       	rjmp	.+24     	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
 4b6:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <LCD_Flag>
 4ba:	8f ef       	ldi	r24, 0xFF	; 255
 4bc:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <LCD_Local_Flag>
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	05 c0       	rjmp	.+10     	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
 4c4:	80 e0       	ldi	r24, 0x00	; 0
 4c6:	03 c0       	rjmp	.+6      	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	01 c0       	rjmp	.+2      	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	cf 91       	pop	r28
 4d0:	08 95       	ret

000004d2 <LCD_Display_String>:
 4d2:	0f 93       	push	r16
 4d4:	1f 93       	push	r17
 4d6:	cf 93       	push	r28
 4d8:	fc 01       	movw	r30, r24
 4da:	80 81       	ld	r24, Z
 4dc:	88 23       	and	r24, r24
 4de:	79 f0       	breq	.+30     	; 0x4fe <LCD_Display_String+0x2c>
 4e0:	8f 01       	movw	r16, r30
 4e2:	c0 e0       	ldi	r28, 0x00	; 0
 4e4:	0e 94 a5 01 	call	0x34a	; 0x34a <LCD_sendData>
 4e8:	81 11       	cpse	r24, r1
 4ea:	08 c0       	rjmp	.+16     	; 0x4fc <LCD_Display_String+0x2a>
 4ec:	cf 5f       	subi	r28, 0xFF	; 255
 4ee:	f8 01       	movw	r30, r16
 4f0:	ec 0f       	add	r30, r28
 4f2:	f1 1d       	adc	r31, r1
 4f4:	80 81       	ld	r24, Z
 4f6:	81 11       	cpse	r24, r1
 4f8:	f5 cf       	rjmp	.-22     	; 0x4e4 <LCD_Display_String+0x12>
 4fa:	01 c0       	rjmp	.+2      	; 0x4fe <LCD_Display_String+0x2c>
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	cf 91       	pop	r28
 500:	1f 91       	pop	r17
 502:	0f 91       	pop	r16
 504:	08 95       	ret

00000506 <LCD_Display_CharXY>:
uint8_t     LCD_Display_CharXY      (LCD_Row_t row, LCD_Col_t col, uint8_t uint8_tChar)
{
 506:	cf 93       	push	r28
 508:	c4 2f       	mov	r28, r20
	if(LCD_DISPLAY_OK == LCD_GoToXY(row,col))
 50a:	0e 94 87 01 	call	0x30e	; 0x30e <LCD_GoToXY>
 50e:	81 11       	cpse	r24, r1
 510:	04 c0       	rjmp	.+8      	; 0x51a <LCD_Display_CharXY+0x14>
	{
		return LCD_sendData(uint8_tChar);
 512:	8c 2f       	mov	r24, r28
 514:	0e 94 a5 01 	call	0x34a	; 0x34a <LCD_sendData>
 518:	01 c0       	rjmp	.+2      	; 0x51c <LCD_Display_CharXY+0x16>
	}
	return LCD_DISPLAY_NOK;
 51a:	81 e0       	ldi	r24, 0x01	; 1
}
 51c:	cf 91       	pop	r28
 51e:	08 95       	ret

00000520 <LCD_Display_StringXY>:
uint8_t     LCD_Display_StringXY    (LCD_Row_t row, LCD_Col_t col, uint8_t* puint8_tString)
{
 520:	cf 93       	push	r28
 522:	df 93       	push	r29
 524:	ea 01       	movw	r28, r20
	if(LCD_DISPLAY_OK == LCD_GoToXY(row,col))
 526:	0e 94 87 01 	call	0x30e	; 0x30e <LCD_GoToXY>
 52a:	81 11       	cpse	r24, r1
 52c:	04 c0       	rjmp	.+8      	; 0x536 <LCD_Display_StringXY+0x16>
	{
		return LCD_Display_String(puint8_tString);
 52e:	ce 01       	movw	r24, r28
 530:	0e 94 69 02 	call	0x4d2	; 0x4d2 <LCD_Display_String>
 534:	01 c0       	rjmp	.+2      	; 0x538 <LCD_Display_StringXY+0x18>
	}
	return LCD_DISPLAY_NOK;
 536:	81 e0       	ldi	r24, 0x01	; 1
}
 538:	df 91       	pop	r29
 53a:	cf 91       	pop	r28
 53c:	08 95       	ret

0000053e <Delay_Us>:
		--Delay;
	}
}

void Delay_Us(uint64_t Delay)
{
 53e:	ff 92       	push	r15
 540:	0f 93       	push	r16
 542:	1f 93       	push	r17
 544:	cf 93       	push	r28
 546:	df 93       	push	r29
 548:	f2 2e       	mov	r15, r18
 54a:	03 2f       	mov	r16, r19
 54c:	14 2f       	mov	r17, r20
 54e:	d5 2f       	mov	r29, r21
 550:	c6 2f       	mov	r28, r22
 552:	b7 2f       	mov	r27, r23
 554:	f8 2f       	mov	r31, r24
 556:	e9 2f       	mov	r30, r25
	while (0 < Delay)
 558:	a0 e0       	ldi	r26, 0x00	; 0
 55a:	0e 94 df 04 	call	0x9be	; 0x9be <__cmpdi2_s8>
 55e:	d9 f0       	breq	.+54     	; 0x596 <Delay_Us+0x58>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 560:	82 e0       	ldi	r24, 0x02	; 2
 562:	8a 95       	dec	r24
 564:	f1 f7       	brne	.-4      	; 0x562 <Delay_Us+0x24>
 566:	00 c0       	rjmp	.+0      	; 0x568 <Delay_Us+0x2a>
	{
		_delay_us(1);
		--Delay;
 568:	2f 2d       	mov	r18, r15
 56a:	30 2f       	mov	r19, r16
 56c:	41 2f       	mov	r20, r17
 56e:	5d 2f       	mov	r21, r29
 570:	6c 2f       	mov	r22, r28
 572:	7b 2f       	mov	r23, r27
 574:	8f 2f       	mov	r24, r31
 576:	9e 2f       	mov	r25, r30
 578:	af ef       	ldi	r26, 0xFF	; 255
 57a:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <__adddi3_s8>
 57e:	f2 2e       	mov	r15, r18
 580:	03 2f       	mov	r16, r19
 582:	14 2f       	mov	r17, r20
 584:	d5 2f       	mov	r29, r21
 586:	c6 2f       	mov	r28, r22
 588:	b7 2f       	mov	r27, r23
 58a:	f8 2f       	mov	r31, r24
 58c:	e9 2f       	mov	r30, r25
	}
}

void Delay_Us(uint64_t Delay)
{
	while (0 < Delay)
 58e:	a0 e0       	ldi	r26, 0x00	; 0
 590:	0e 94 df 04 	call	0x9be	; 0x9be <__cmpdi2_s8>
 594:	29 f7       	brne	.-54     	; 0x560 <Delay_Us+0x22>
	{
		_delay_us(1);
		--Delay;
	}
 596:	df 91       	pop	r29
 598:	cf 91       	pop	r28
 59a:	1f 91       	pop	r17
 59c:	0f 91       	pop	r16
 59e:	ff 90       	pop	r15
 5a0:	08 95       	ret

000005a2 <Dio_ChannelMode>:
	else
	{
		return_value = DIO_EN_invalidChannel;
	}
	return return_value;
}
 5a2:	ef 92       	push	r14
 5a4:	ff 92       	push	r15
 5a6:	0f 93       	push	r16
 5a8:	1f 93       	push	r17
 5aa:	80 32       	cpi	r24, 0x20	; 32
 5ac:	08 f0       	brcs	.+2      	; 0x5b0 <Dio_ChannelMode+0xe>
 5ae:	45 c0       	rjmp	.+138    	; 0x63a <Dio_ChannelMode+0x98>
 5b0:	61 11       	cpse	r22, r1
 5b2:	21 c0       	rjmp	.+66     	; 0x5f6 <Dio_ChannelMode+0x54>
 5b4:	e8 2f       	mov	r30, r24
 5b6:	e6 95       	lsr	r30
 5b8:	e6 95       	lsr	r30
 5ba:	e6 95       	lsr	r30
 5bc:	2e 2f       	mov	r18, r30
 5be:	30 e0       	ldi	r19, 0x00	; 0
 5c0:	f9 01       	movw	r30, r18
 5c2:	ee 0f       	add	r30, r30
 5c4:	ff 1f       	adc	r31, r31
 5c6:	e2 0f       	add	r30, r18
 5c8:	f3 1f       	adc	r31, r19
 5ca:	21 a9       	ldd	r18, Z+49	; 0x31
 5cc:	87 70       	andi	r24, 0x07	; 7
 5ce:	41 e0       	ldi	r20, 0x01	; 1
 5d0:	50 e0       	ldi	r21, 0x00	; 0
 5d2:	60 e0       	ldi	r22, 0x00	; 0
 5d4:	70 e0       	ldi	r23, 0x00	; 0
 5d6:	7a 01       	movw	r14, r20
 5d8:	8b 01       	movw	r16, r22
 5da:	04 c0       	rjmp	.+8      	; 0x5e4 <Dio_ChannelMode+0x42>
 5dc:	ee 0c       	add	r14, r14
 5de:	ff 1c       	adc	r15, r15
 5e0:	00 1f       	adc	r16, r16
 5e2:	11 1f       	adc	r17, r17
 5e4:	8a 95       	dec	r24
 5e6:	d2 f7       	brpl	.-12     	; 0x5dc <Dio_ChannelMode+0x3a>
 5e8:	d8 01       	movw	r26, r16
 5ea:	c7 01       	movw	r24, r14
 5ec:	80 95       	com	r24
 5ee:	82 23       	and	r24, r18
 5f0:	81 ab       	std	Z+49, r24	; 0x31
 5f2:	80 e0       	ldi	r24, 0x00	; 0
 5f4:	25 c0       	rjmp	.+74     	; 0x640 <Dio_ChannelMode+0x9e>
 5f6:	61 30       	cpi	r22, 0x01	; 1
 5f8:	11 f5       	brne	.+68     	; 0x63e <Dio_ChannelMode+0x9c>
 5fa:	e8 2f       	mov	r30, r24
 5fc:	e6 95       	lsr	r30
 5fe:	e6 95       	lsr	r30
 600:	e6 95       	lsr	r30
 602:	2e 2f       	mov	r18, r30
 604:	30 e0       	ldi	r19, 0x00	; 0
 606:	f9 01       	movw	r30, r18
 608:	ee 0f       	add	r30, r30
 60a:	ff 1f       	adc	r31, r31
 60c:	e2 0f       	add	r30, r18
 60e:	f3 1f       	adc	r31, r19
 610:	21 a9       	ldd	r18, Z+49	; 0x31
 612:	87 70       	andi	r24, 0x07	; 7
 614:	41 e0       	ldi	r20, 0x01	; 1
 616:	50 e0       	ldi	r21, 0x00	; 0
 618:	60 e0       	ldi	r22, 0x00	; 0
 61a:	70 e0       	ldi	r23, 0x00	; 0
 61c:	7a 01       	movw	r14, r20
 61e:	8b 01       	movw	r16, r22
 620:	04 c0       	rjmp	.+8      	; 0x62a <Dio_ChannelMode+0x88>
 622:	ee 0c       	add	r14, r14
 624:	ff 1c       	adc	r15, r15
 626:	00 1f       	adc	r16, r16
 628:	11 1f       	adc	r17, r17
 62a:	8a 95       	dec	r24
 62c:	d2 f7       	brpl	.-12     	; 0x622 <Dio_ChannelMode+0x80>
 62e:	d8 01       	movw	r26, r16
 630:	c7 01       	movw	r24, r14
 632:	82 2b       	or	r24, r18
 634:	81 ab       	std	Z+49, r24	; 0x31
 636:	80 e0       	ldi	r24, 0x00	; 0
 638:	03 c0       	rjmp	.+6      	; 0x640 <Dio_ChannelMode+0x9e>
 63a:	82 e0       	ldi	r24, 0x02	; 2
 63c:	01 c0       	rjmp	.+2      	; 0x640 <Dio_ChannelMode+0x9e>
 63e:	83 e0       	ldi	r24, 0x03	; 3
 640:	1f 91       	pop	r17
 642:	0f 91       	pop	r16
 644:	ff 90       	pop	r15
 646:	ef 90       	pop	r14
 648:	08 95       	ret

0000064a <Dio_ChannelWrite>:
 64a:	ef 92       	push	r14
 64c:	ff 92       	push	r15
 64e:	0f 93       	push	r16
 650:	1f 93       	push	r17
 652:	80 32       	cpi	r24, 0x20	; 32
 654:	08 f0       	brcs	.+2      	; 0x658 <Dio_ChannelWrite+0xe>
 656:	67 c0       	rjmp	.+206    	; 0x726 <Dio_ChannelWrite+0xdc>
 658:	61 11       	cpse	r22, r1
 65a:	21 c0       	rjmp	.+66     	; 0x69e <Dio_ChannelWrite+0x54>
 65c:	e8 2f       	mov	r30, r24
 65e:	e6 95       	lsr	r30
 660:	e6 95       	lsr	r30
 662:	e6 95       	lsr	r30
 664:	2e 2f       	mov	r18, r30
 666:	30 e0       	ldi	r19, 0x00	; 0
 668:	f9 01       	movw	r30, r18
 66a:	ee 0f       	add	r30, r30
 66c:	ff 1f       	adc	r31, r31
 66e:	e2 0f       	add	r30, r18
 670:	f3 1f       	adc	r31, r19
 672:	22 a9       	ldd	r18, Z+50	; 0x32
 674:	87 70       	andi	r24, 0x07	; 7
 676:	41 e0       	ldi	r20, 0x01	; 1
 678:	50 e0       	ldi	r21, 0x00	; 0
 67a:	60 e0       	ldi	r22, 0x00	; 0
 67c:	70 e0       	ldi	r23, 0x00	; 0
 67e:	7a 01       	movw	r14, r20
 680:	8b 01       	movw	r16, r22
 682:	04 c0       	rjmp	.+8      	; 0x68c <Dio_ChannelWrite+0x42>
 684:	ee 0c       	add	r14, r14
 686:	ff 1c       	adc	r15, r15
 688:	00 1f       	adc	r16, r16
 68a:	11 1f       	adc	r17, r17
 68c:	8a 95       	dec	r24
 68e:	d2 f7       	brpl	.-12     	; 0x684 <Dio_ChannelWrite+0x3a>
 690:	d8 01       	movw	r26, r16
 692:	c7 01       	movw	r24, r14
 694:	80 95       	com	r24
 696:	82 23       	and	r24, r18
 698:	82 ab       	std	Z+50, r24	; 0x32
 69a:	80 e0       	ldi	r24, 0x00	; 0
 69c:	47 c0       	rjmp	.+142    	; 0x72c <Dio_ChannelWrite+0xe2>
 69e:	61 30       	cpi	r22, 0x01	; 1
 6a0:	01 f5       	brne	.+64     	; 0x6e2 <Dio_ChannelWrite+0x98>
 6a2:	e8 2f       	mov	r30, r24
 6a4:	e6 95       	lsr	r30
 6a6:	e6 95       	lsr	r30
 6a8:	e6 95       	lsr	r30
 6aa:	2e 2f       	mov	r18, r30
 6ac:	30 e0       	ldi	r19, 0x00	; 0
 6ae:	f9 01       	movw	r30, r18
 6b0:	ee 0f       	add	r30, r30
 6b2:	ff 1f       	adc	r31, r31
 6b4:	e2 0f       	add	r30, r18
 6b6:	f3 1f       	adc	r31, r19
 6b8:	22 a9       	ldd	r18, Z+50	; 0x32
 6ba:	87 70       	andi	r24, 0x07	; 7
 6bc:	41 e0       	ldi	r20, 0x01	; 1
 6be:	50 e0       	ldi	r21, 0x00	; 0
 6c0:	60 e0       	ldi	r22, 0x00	; 0
 6c2:	70 e0       	ldi	r23, 0x00	; 0
 6c4:	7a 01       	movw	r14, r20
 6c6:	8b 01       	movw	r16, r22
 6c8:	04 c0       	rjmp	.+8      	; 0x6d2 <Dio_ChannelWrite+0x88>
 6ca:	ee 0c       	add	r14, r14
 6cc:	ff 1c       	adc	r15, r15
 6ce:	00 1f       	adc	r16, r16
 6d0:	11 1f       	adc	r17, r17
 6d2:	8a 95       	dec	r24
 6d4:	d2 f7       	brpl	.-12     	; 0x6ca <Dio_ChannelWrite+0x80>
 6d6:	d8 01       	movw	r26, r16
 6d8:	c7 01       	movw	r24, r14
 6da:	82 2b       	or	r24, r18
 6dc:	82 ab       	std	Z+50, r24	; 0x32
 6de:	80 e0       	ldi	r24, 0x00	; 0
 6e0:	25 c0       	rjmp	.+74     	; 0x72c <Dio_ChannelWrite+0xe2>
 6e2:	62 30       	cpi	r22, 0x02	; 2
 6e4:	11 f5       	brne	.+68     	; 0x72a <Dio_ChannelWrite+0xe0>
 6e6:	e8 2f       	mov	r30, r24
 6e8:	e6 95       	lsr	r30
 6ea:	e6 95       	lsr	r30
 6ec:	e6 95       	lsr	r30
 6ee:	2e 2f       	mov	r18, r30
 6f0:	30 e0       	ldi	r19, 0x00	; 0
 6f2:	f9 01       	movw	r30, r18
 6f4:	ee 0f       	add	r30, r30
 6f6:	ff 1f       	adc	r31, r31
 6f8:	e2 0f       	add	r30, r18
 6fa:	f3 1f       	adc	r31, r19
 6fc:	22 a9       	ldd	r18, Z+50	; 0x32
 6fe:	87 70       	andi	r24, 0x07	; 7
 700:	41 e0       	ldi	r20, 0x01	; 1
 702:	50 e0       	ldi	r21, 0x00	; 0
 704:	60 e0       	ldi	r22, 0x00	; 0
 706:	70 e0       	ldi	r23, 0x00	; 0
 708:	7a 01       	movw	r14, r20
 70a:	8b 01       	movw	r16, r22
 70c:	04 c0       	rjmp	.+8      	; 0x716 <Dio_ChannelWrite+0xcc>
 70e:	ee 0c       	add	r14, r14
 710:	ff 1c       	adc	r15, r15
 712:	00 1f       	adc	r16, r16
 714:	11 1f       	adc	r17, r17
 716:	8a 95       	dec	r24
 718:	d2 f7       	brpl	.-12     	; 0x70e <Dio_ChannelWrite+0xc4>
 71a:	d8 01       	movw	r26, r16
 71c:	c7 01       	movw	r24, r14
 71e:	82 27       	eor	r24, r18
 720:	82 ab       	std	Z+50, r24	; 0x32
 722:	80 e0       	ldi	r24, 0x00	; 0
 724:	03 c0       	rjmp	.+6      	; 0x72c <Dio_ChannelWrite+0xe2>
 726:	82 e0       	ldi	r24, 0x02	; 2
 728:	01 c0       	rjmp	.+2      	; 0x72c <Dio_ChannelWrite+0xe2>
 72a:	84 e0       	ldi	r24, 0x04	; 4
 72c:	1f 91       	pop	r17
 72e:	0f 91       	pop	r16
 730:	ff 90       	pop	r15
 732:	ef 90       	pop	r14
 734:	08 95       	ret

00000736 <Dio_GroupMode>:

DioError_t			Dio_GroupMode			(DioPort_t Port, DioGroupBits_t Group, DioMode_t  Mode)
{
	DioError_t return_value = DIO_EN_valid_inti;
	if((Port >= DIO_EN_MIN_PORT) && (Port < DIO_EN_MAX_PORT))
 736:	84 30       	cpi	r24, 0x04	; 4
 738:	d8 f4       	brcc	.+54     	; 0x770 <Dio_GroupMode+0x3a>
	{
		if(DIO_EN_M_Input == Mode)
 73a:	41 11       	cpse	r20, r1
 73c:	0c c0       	rjmp	.+24     	; 0x756 <Dio_GroupMode+0x20>
		{
			ClearMaskBits(DIO[Port].DDR.Register, Group);
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	fc 01       	movw	r30, r24
 742:	ee 0f       	add	r30, r30
 744:	ff 1f       	adc	r31, r31
 746:	e8 0f       	add	r30, r24
 748:	f9 1f       	adc	r31, r25
 74a:	81 a9       	ldd	r24, Z+49	; 0x31
 74c:	60 95       	com	r22
 74e:	68 23       	and	r22, r24
 750:	61 ab       	std	Z+49, r22	; 0x31
	return return_value;
}

DioError_t			Dio_GroupMode			(DioPort_t Port, DioGroupBits_t Group, DioMode_t  Mode)
{
	DioError_t return_value = DIO_EN_valid_inti;
 752:	80 e0       	ldi	r24, 0x00	; 0
 754:	08 95       	ret
	{
		if(DIO_EN_M_Input == Mode)
		{
			ClearMaskBits(DIO[Port].DDR.Register, Group);
		}
		else if(DIO_EN_M_Output == Mode)
 756:	41 30       	cpi	r20, 0x01	; 1
 758:	69 f4       	brne	.+26     	; 0x774 <Dio_GroupMode+0x3e>
		{
			SetMaskBits(DIO[Port].DDR.Register, Group);
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	fc 01       	movw	r30, r24
 75e:	ee 0f       	add	r30, r30
 760:	ff 1f       	adc	r31, r31
 762:	e8 0f       	add	r30, r24
 764:	f9 1f       	adc	r31, r25
 766:	81 a9       	ldd	r24, Z+49	; 0x31
 768:	68 2b       	or	r22, r24
 76a:	61 ab       	std	Z+49, r22	; 0x31
	return return_value;
}

DioError_t			Dio_GroupMode			(DioPort_t Port, DioGroupBits_t Group, DioMode_t  Mode)
{
	DioError_t return_value = DIO_EN_valid_inti;
 76c:	80 e0       	ldi	r24, 0x00	; 0
 76e:	08 95       	ret
			return_value = DIO_EN_invalidMode;
		}
	}
	else
	{
		return_value = DIO_EN_invalidChannel;
 770:	82 e0       	ldi	r24, 0x02	; 2
 772:	08 95       	ret
		{
			SetMaskBits(DIO[Port].DDR.Register, Group);
		}
		else
		{
			return_value = DIO_EN_invalidMode;
 774:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		return_value = DIO_EN_invalidChannel;
	}
	return return_value;
}
 776:	08 95       	ret

00000778 <Dio_GroupWrite>:


DioError_t			Dio_GroupWrite			(DioPort_t Port, DioGroupBits_t Group, DioWrite_t Output)
{
	DioError_t return_value = DIO_EN_valid_inti;
	if((Port >= DIO_EN_MIN_PORT) && (Port < DIO_EN_MAX_PORT))
 778:	84 30       	cpi	r24, 0x04	; 4
 77a:	40 f5       	brcc	.+80     	; 0x7cc <Dio_GroupWrite+0x54>
	{
		if(DIO_EN_W_Low == Output)
 77c:	41 11       	cpse	r20, r1
 77e:	0c c0       	rjmp	.+24     	; 0x798 <Dio_GroupWrite+0x20>
		{
			ClearMaskBits(DIO[Port].PORT.Register, Group);
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	fc 01       	movw	r30, r24
 784:	ee 0f       	add	r30, r30
 786:	ff 1f       	adc	r31, r31
 788:	e8 0f       	add	r30, r24
 78a:	f9 1f       	adc	r31, r25
 78c:	82 a9       	ldd	r24, Z+50	; 0x32
 78e:	60 95       	com	r22
 790:	68 23       	and	r22, r24
 792:	62 ab       	std	Z+50, r22	; 0x32



DioError_t			Dio_GroupWrite			(DioPort_t Port, DioGroupBits_t Group, DioWrite_t Output)
{
	DioError_t return_value = DIO_EN_valid_inti;
 794:	80 e0       	ldi	r24, 0x00	; 0
 796:	08 95       	ret
	{
		if(DIO_EN_W_Low == Output)
		{
			ClearMaskBits(DIO[Port].PORT.Register, Group);
		}
		else if(DIO_EN_W_High == Output)
 798:	41 30       	cpi	r20, 0x01	; 1
 79a:	59 f4       	brne	.+22     	; 0x7b2 <Dio_GroupWrite+0x3a>
		{
			SetMaskBits(DIO[Port].PORT.Register, Group);
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	fc 01       	movw	r30, r24
 7a0:	ee 0f       	add	r30, r30
 7a2:	ff 1f       	adc	r31, r31
 7a4:	e8 0f       	add	r30, r24
 7a6:	f9 1f       	adc	r31, r25
 7a8:	82 a9       	ldd	r24, Z+50	; 0x32
 7aa:	68 2b       	or	r22, r24
 7ac:	62 ab       	std	Z+50, r22	; 0x32



DioError_t			Dio_GroupWrite			(DioPort_t Port, DioGroupBits_t Group, DioWrite_t Output)
{
	DioError_t return_value = DIO_EN_valid_inti;
 7ae:	80 e0       	ldi	r24, 0x00	; 0
 7b0:	08 95       	ret
		}
		else if(DIO_EN_W_High == Output)
		{
			SetMaskBits(DIO[Port].PORT.Register, Group);
		}
		else if(DIO_EN_W_Toggle == Output)
 7b2:	42 30       	cpi	r20, 0x02	; 2
 7b4:	69 f4       	brne	.+26     	; 0x7d0 <Dio_GroupWrite+0x58>
		{
			ToggleMaskBits(DIO[Port].PORT.Register, Group);
 7b6:	90 e0       	ldi	r25, 0x00	; 0
 7b8:	fc 01       	movw	r30, r24
 7ba:	ee 0f       	add	r30, r30
 7bc:	ff 1f       	adc	r31, r31
 7be:	e8 0f       	add	r30, r24
 7c0:	f9 1f       	adc	r31, r25
 7c2:	82 a9       	ldd	r24, Z+50	; 0x32
 7c4:	68 27       	eor	r22, r24
 7c6:	62 ab       	std	Z+50, r22	; 0x32



DioError_t			Dio_GroupWrite			(DioPort_t Port, DioGroupBits_t Group, DioWrite_t Output)
{
	DioError_t return_value = DIO_EN_valid_inti;
 7c8:	80 e0       	ldi	r24, 0x00	; 0
 7ca:	08 95       	ret
			return_value = DIO_EN_invalidState;
		}
	}
	else
	{
		return_value = DIO_EN_invalidChannel;
 7cc:	82 e0       	ldi	r24, 0x02	; 2
 7ce:	08 95       	ret
		{
			ToggleMaskBits(DIO[Port].PORT.Register, Group);
		}
		else
		{
			return_value = DIO_EN_invalidState;
 7d0:	84 e0       	ldi	r24, 0x04	; 4
	else
	{
		return_value = DIO_EN_invalidChannel;
	}
	return return_value;
}
 7d2:	08 95       	ret

000007d4 <Dio_GroupRead>:


DioError_t			Dio_GroupRead			(DioPort_t Port, DioGroupBits_t Group, DioGroupValue_t * State)
{
	DioError_t return_value = DIO_EN_valid_inti;
	if((Port >= DIO_EN_MIN_PORT) && (Port < DIO_EN_MAX_PORT))
 7d4:	84 30       	cpi	r24, 0x04	; 4
 7d6:	80 f4       	brcc	.+32     	; 0x7f8 <Dio_GroupRead+0x24>
	{
		if(NULL != State)
 7d8:	41 15       	cp	r20, r1
 7da:	51 05       	cpc	r21, r1
 7dc:	79 f0       	breq	.+30     	; 0x7fc <Dio_GroupRead+0x28>
		{
			*State = GetMaskBits(DIO[Port].PIN.Register, Group);
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	9c 01       	movw	r18, r24
 7e2:	22 0f       	add	r18, r18
 7e4:	33 1f       	adc	r19, r19
 7e6:	f9 01       	movw	r30, r18
 7e8:	e8 0f       	add	r30, r24
 7ea:	f9 1f       	adc	r31, r25
 7ec:	80 a9       	ldd	r24, Z+48	; 0x30
 7ee:	68 23       	and	r22, r24
 7f0:	fa 01       	movw	r30, r20
 7f2:	60 83       	st	Z, r22
}


DioError_t			Dio_GroupRead			(DioPort_t Port, DioGroupBits_t Group, DioGroupValue_t * State)
{
	DioError_t return_value = DIO_EN_valid_inti;
 7f4:	80 e0       	ldi	r24, 0x00	; 0
 7f6:	08 95       	ret
			return_value = DIO_EN_invalidPointer;
		}
	}
	else
	{
		return_value = DIO_EN_invalidChannel;
 7f8:	82 e0       	ldi	r24, 0x02	; 2
 7fa:	08 95       	ret
		{
			*State = GetMaskBits(DIO[Port].PIN.Register, Group);
		}
		else
		{
			return_value = DIO_EN_invalidPointer;
 7fc:	85 e0       	ldi	r24, 0x05	; 5
	else
	{
		return_value = DIO_EN_invalidChannel;
	}
	return return_value;
}
 7fe:	08 95       	ret

00000800 <Timer_Status>:
_V _S uint8_t        Overflows		[2]  = {0, 0};
_V _S uint8_t        Flag           [2]  = {Flag_Available, Flag_Available};

Flag_t			  Timer_Status          (Timer_t Timer)
{
	return Flag[Timer];
 800:	e8 2f       	mov	r30, r24
 802:	f0 e0       	ldi	r31, 0x00	; 0
 804:	e7 58       	subi	r30, 0x87	; 135
 806:	ff 4f       	sbci	r31, 0xFF	; 255
 808:	80 81       	ld	r24, Z
}
 80a:	08 95       	ret

0000080c <Timer_SetTrigger>:
TimerError_t      Timer_SetTrigger		(Timer_t Timer, V_CallBack_V_t Notifier, uint8_t Time_MS)
{
	TimerError_t return_value = TMR_EN_valid_inti;
	if((Notifier != NULL))
 80c:	61 15       	cp	r22, r1
 80e:	71 05       	cpc	r23, r1
 810:	09 f4       	brne	.+2      	; 0x814 <Timer_SetTrigger+0x8>
 812:	3f c0       	rjmp	.+126    	; 0x892 <__stack+0x33>
	{
		if(Flag[Timer] == Flag_Available)
 814:	e8 2f       	mov	r30, r24
 816:	f0 e0       	ldi	r31, 0x00	; 0
 818:	e7 58       	subi	r30, 0x87	; 135
 81a:	ff 4f       	sbci	r31, 0xFF	; 255
 81c:	90 81       	ld	r25, Z
 81e:	91 11       	cpse	r25, r1
 820:	3a c0       	rjmp	.+116    	; 0x896 <__stack+0x37>
		{
			if(Timer == Timer_0)
 822:	81 11       	cpse	r24, r1
 824:	1a c0       	rjmp	.+52     	; 0x85a <Timer_SetTrigger+0x4e>
			{
				Flag[Timer_0]						 = Flag_Busy;
 826:	82 e0       	ldi	r24, 0x02	; 2
 828:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <Flag>
				TIMER.T0.Control.CTC_wave_generation = ENABLE;
 82c:	83 b7       	in	r24, 0x33	; 51
 82e:	88 60       	ori	r24, 0x08	; 8
 830:	83 bf       	out	0x33, r24	; 51
				TIMER.T0.CompareValue                = TIMER0_1_ms_P_64_F_8MHz;
 832:	8d e7       	ldi	r24, 0x7D	; 125
 834:	8c bf       	out	0x3c, r24	; 60
				Timer_Triggers[Timer_0]				 = Notifier;
 836:	70 93 80 00 	sts	0x0080, r23	; 0x800080 <Timer_Triggers+0x1>
 83a:	60 93 7f 00 	sts	0x007F, r22	; 0x80007f <Timer_Triggers>
				Triggers[Timer_0]					 = Time_MS;
 83e:	40 93 7d 00 	sts	0x007D, r20	; 0x80007d <Triggers>
				Overflows[Timer_0]                   = 0;
 842:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <Overflows>
				TIMER.T0.Counter                     = 0;
 846:	12 be       	out	0x32, r1	; 50
				TIMER.T0.Interrupts.Comp_Match	     = ENABLE;
 848:	89 b7       	in	r24, 0x39	; 57
 84a:	82 60       	ori	r24, 0x02	; 2
 84c:	89 bf       	out	0x39, r24	; 57
				TIMER.T0.Control.Clock               = TIMER0_Prescal;
 84e:	83 b7       	in	r24, 0x33	; 51
 850:	88 7f       	andi	r24, 0xF8	; 248
 852:	83 60       	ori	r24, 0x03	; 3
 854:	83 bf       	out	0x33, r24	; 51
{
	return Flag[Timer];
}
TimerError_t      Timer_SetTrigger		(Timer_t Timer, V_CallBack_V_t Notifier, uint8_t Time_MS)
{
	TimerError_t return_value = TMR_EN_valid_inti;
 856:	80 e0       	ldi	r24, 0x00	; 0
 858:	08 95       	ret
				Overflows[Timer_0]                   = 0;
				TIMER.T0.Counter                     = 0;
				TIMER.T0.Interrupts.Comp_Match	     = ENABLE;
				TIMER.T0.Control.Clock               = TIMER0_Prescal;
			}
			else if(Timer == Timer_2)
 85a:	81 30       	cpi	r24, 0x01	; 1
 85c:	f1 f4       	brne	.+60     	; 0x89a <__stack+0x3b>
			{
				Flag[Timer_2]						 = Flag_Busy;
 85e:	82 e0       	ldi	r24, 0x02	; 2
 860:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <Flag+0x1>
				TIMER.T2.Control.CTC_wave_generation = ENABLE;
 864:	85 b5       	in	r24, 0x25	; 37
 866:	88 60       	ori	r24, 0x08	; 8
 868:	85 bd       	out	0x25, r24	; 37
				TIMER.T2.CompareValue                = TIMER2_1_ms_P_64_F_8MHz;
 86a:	8d e7       	ldi	r24, 0x7D	; 125
 86c:	83 bd       	out	0x23, r24	; 35
				Timer_Triggers[Timer_2]				 = Notifier;
 86e:	70 93 82 00 	sts	0x0082, r23	; 0x800082 <Timer_Triggers+0x3>
 872:	60 93 81 00 	sts	0x0081, r22	; 0x800081 <Timer_Triggers+0x2>
				Triggers[Timer_2]					 = Time_MS;
 876:	40 93 7e 00 	sts	0x007E, r20	; 0x80007e <Triggers+0x1>
				Overflows[Timer_2]                   = 0;
 87a:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <Overflows+0x1>
				TIMER.T2.Counter                     = 0;
 87e:	14 bc       	out	0x24, r1	; 36
				TIMER.T2.Interrupts.Comp_Match	     = ENABLE;
 880:	89 b7       	in	r24, 0x39	; 57
 882:	80 68       	ori	r24, 0x80	; 128
 884:	89 bf       	out	0x39, r24	; 57
				TIMER.T2.Control.Clock               = TIMER2_Prescal;
 886:	85 b5       	in	r24, 0x25	; 37
 888:	88 7f       	andi	r24, 0xF8	; 248
 88a:	84 60       	ori	r24, 0x04	; 4
 88c:	85 bd       	out	0x25, r24	; 37
{
	return Flag[Timer];
}
TimerError_t      Timer_SetTrigger		(Timer_t Timer, V_CallBack_V_t Notifier, uint8_t Time_MS)
{
	TimerError_t return_value = TMR_EN_valid_inti;
 88e:	80 e0       	ldi	r24, 0x00	; 0
 890:	08 95       	ret
			return_value = TMR_EN_TimerBusy;
		}
	}
	else
	{
		return_value = TMR_EN_InvalidPointer;
 892:	81 e0       	ldi	r24, 0x01	; 1
 894:	08 95       	ret
			}
			else{/*MISRA C*/}
		}
		else
		{
			return_value = TMR_EN_TimerBusy;
 896:	82 e0       	ldi	r24, 0x02	; 2
 898:	08 95       	ret
{
	return Flag[Timer];
}
TimerError_t      Timer_SetTrigger		(Timer_t Timer, V_CallBack_V_t Notifier, uint8_t Time_MS)
{
	TimerError_t return_value = TMR_EN_valid_inti;
 89a:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		return_value = TMR_EN_InvalidPointer;
	}
	return return_value;
}
 89c:	08 95       	ret

0000089e <__vector_10>:
ISR(TIMER0_COMP_vect)
{
 89e:	1f 92       	push	r1
 8a0:	0f 92       	push	r0
 8a2:	0f b6       	in	r0, 0x3f	; 63
 8a4:	0f 92       	push	r0
 8a6:	11 24       	eor	r1, r1
 8a8:	2f 93       	push	r18
 8aa:	3f 93       	push	r19
 8ac:	4f 93       	push	r20
 8ae:	5f 93       	push	r21
 8b0:	6f 93       	push	r22
 8b2:	7f 93       	push	r23
 8b4:	8f 93       	push	r24
 8b6:	9f 93       	push	r25
 8b8:	af 93       	push	r26
 8ba:	bf 93       	push	r27
 8bc:	ef 93       	push	r30
 8be:	ff 93       	push	r31
	TIMER.T0.Flags.Comp_Match = ENABLE;
 8c0:	88 b7       	in	r24, 0x38	; 56
 8c2:	82 60       	ori	r24, 0x02	; 2
 8c4:	88 bf       	out	0x38, r24	; 56
	Overflows[Timer_0]++;
 8c6:	eb e7       	ldi	r30, 0x7B	; 123
 8c8:	f0 e0       	ldi	r31, 0x00	; 0
 8ca:	80 81       	ld	r24, Z
 8cc:	8f 5f       	subi	r24, 0xFF	; 255
 8ce:	80 83       	st	Z, r24
	if(Overflows[Timer_0] >= Triggers[Timer_0])
 8d0:	90 81       	ld	r25, Z
 8d2:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <Triggers>
 8d6:	98 17       	cp	r25, r24
 8d8:	98 f0       	brcs	.+38     	; 0x900 <__vector_10+0x62>
	{
		TIMER.T0.Interrupts.Comp_Match = DISABLE;
 8da:	89 b7       	in	r24, 0x39	; 57
 8dc:	8d 7f       	andi	r24, 0xFD	; 253
 8de:	89 bf       	out	0x39, r24	; 57
		TIMER.T0.Control.Clock         = TMR_EN_NoClock;
 8e0:	83 b7       	in	r24, 0x33	; 51
 8e2:	88 7f       	andi	r24, 0xF8	; 248
 8e4:	83 bf       	out	0x33, r24	; 51
		Flag[Timer_0] = Flag_Available;
 8e6:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <Flag>
		if(Timer_Triggers[Timer_0] != NULL)
 8ea:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <Timer_Triggers>
 8ee:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <Timer_Triggers+0x1>
 8f2:	89 2b       	or	r24, r25
 8f4:	29 f0       	breq	.+10     	; 0x900 <__vector_10+0x62>
		{
			Timer_Triggers[Timer_0]();
 8f6:	e0 91 7f 00 	lds	r30, 0x007F	; 0x80007f <Timer_Triggers>
 8fa:	f0 91 80 00 	lds	r31, 0x0080	; 0x800080 <Timer_Triggers+0x1>
 8fe:	09 95       	icall
		}
	}
}
 900:	ff 91       	pop	r31
 902:	ef 91       	pop	r30
 904:	bf 91       	pop	r27
 906:	af 91       	pop	r26
 908:	9f 91       	pop	r25
 90a:	8f 91       	pop	r24
 90c:	7f 91       	pop	r23
 90e:	6f 91       	pop	r22
 910:	5f 91       	pop	r21
 912:	4f 91       	pop	r20
 914:	3f 91       	pop	r19
 916:	2f 91       	pop	r18
 918:	0f 90       	pop	r0
 91a:	0f be       	out	0x3f, r0	; 63
 91c:	0f 90       	pop	r0
 91e:	1f 90       	pop	r1
 920:	18 95       	reti

00000922 <__vector_4>:
ISR(TIMER2_COMP_vect)
{
 922:	1f 92       	push	r1
 924:	0f 92       	push	r0
 926:	0f b6       	in	r0, 0x3f	; 63
 928:	0f 92       	push	r0
 92a:	11 24       	eor	r1, r1
 92c:	2f 93       	push	r18
 92e:	3f 93       	push	r19
 930:	4f 93       	push	r20
 932:	5f 93       	push	r21
 934:	6f 93       	push	r22
 936:	7f 93       	push	r23
 938:	8f 93       	push	r24
 93a:	9f 93       	push	r25
 93c:	af 93       	push	r26
 93e:	bf 93       	push	r27
 940:	ef 93       	push	r30
 942:	ff 93       	push	r31
	TIMER.T2.Flags.Comp_Match = ENABLE;
 944:	88 b7       	in	r24, 0x38	; 56
 946:	80 68       	ori	r24, 0x80	; 128
 948:	88 bf       	out	0x38, r24	; 56
	Overflows[Timer_2]++;
 94a:	eb e7       	ldi	r30, 0x7B	; 123
 94c:	f0 e0       	ldi	r31, 0x00	; 0
 94e:	81 81       	ldd	r24, Z+1	; 0x01
 950:	8f 5f       	subi	r24, 0xFF	; 255
 952:	81 83       	std	Z+1, r24	; 0x01
	if(Overflows[Timer_2] >= Triggers[Timer_2])
 954:	91 81       	ldd	r25, Z+1	; 0x01
 956:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <Triggers+0x1>
 95a:	98 17       	cp	r25, r24
 95c:	98 f0       	brcs	.+38     	; 0x984 <__vector_4+0x62>
	{
		TIMER.T2.Interrupts.Comp_Match = DISABLE;
 95e:	89 b7       	in	r24, 0x39	; 57
 960:	8f 77       	andi	r24, 0x7F	; 127
 962:	89 bf       	out	0x39, r24	; 57
		TIMER.T2.Control.Clock         = TMR_EN_NoClock;
 964:	85 b5       	in	r24, 0x25	; 37
 966:	88 7f       	andi	r24, 0xF8	; 248
 968:	85 bd       	out	0x25, r24	; 37
		Flag[Timer_2] = Flag_Available;
 96a:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <Flag+0x1>
		if(Timer_Triggers[Timer_2] != NULL)
 96e:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <Timer_Triggers+0x2>
 972:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <Timer_Triggers+0x3>
 976:	89 2b       	or	r24, r25
 978:	29 f0       	breq	.+10     	; 0x984 <__vector_4+0x62>
		{
			Timer_Triggers[Timer_2]();
 97a:	e0 91 81 00 	lds	r30, 0x0081	; 0x800081 <Timer_Triggers+0x2>
 97e:	f0 91 82 00 	lds	r31, 0x0082	; 0x800082 <Timer_Triggers+0x3>
 982:	09 95       	icall
		}
	}
 984:	ff 91       	pop	r31
 986:	ef 91       	pop	r30
 988:	bf 91       	pop	r27
 98a:	af 91       	pop	r26
 98c:	9f 91       	pop	r25
 98e:	8f 91       	pop	r24
 990:	7f 91       	pop	r23
 992:	6f 91       	pop	r22
 994:	5f 91       	pop	r21
 996:	4f 91       	pop	r20
 998:	3f 91       	pop	r19
 99a:	2f 91       	pop	r18
 99c:	0f 90       	pop	r0
 99e:	0f be       	out	0x3f, r0	; 63
 9a0:	0f 90       	pop	r0
 9a2:	1f 90       	pop	r1
 9a4:	18 95       	reti

000009a6 <__adddi3_s8>:
 9a6:	00 24       	eor	r0, r0
 9a8:	a7 fd       	sbrc	r26, 7
 9aa:	00 94       	com	r0
 9ac:	2a 0f       	add	r18, r26
 9ae:	30 1d       	adc	r19, r0
 9b0:	40 1d       	adc	r20, r0
 9b2:	50 1d       	adc	r21, r0
 9b4:	60 1d       	adc	r22, r0
 9b6:	70 1d       	adc	r23, r0
 9b8:	80 1d       	adc	r24, r0
 9ba:	90 1d       	adc	r25, r0
 9bc:	08 95       	ret

000009be <__cmpdi2_s8>:
 9be:	00 24       	eor	r0, r0
 9c0:	a7 fd       	sbrc	r26, 7
 9c2:	00 94       	com	r0
 9c4:	2a 17       	cp	r18, r26
 9c6:	30 05       	cpc	r19, r0
 9c8:	40 05       	cpc	r20, r0
 9ca:	50 05       	cpc	r21, r0
 9cc:	60 05       	cpc	r22, r0
 9ce:	70 05       	cpc	r23, r0
 9d0:	80 05       	cpc	r24, r0
 9d2:	90 05       	cpc	r25, r0
 9d4:	08 95       	ret

000009d6 <_exit>:
 9d6:	f8 94       	cli

000009d8 <__stop_program>:
 9d8:	ff cf       	rjmp	.-2      	; 0x9d8 <__stop_program>
