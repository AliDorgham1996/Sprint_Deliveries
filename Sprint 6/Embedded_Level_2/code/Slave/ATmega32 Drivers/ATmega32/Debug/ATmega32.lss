
ATmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b8a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000b8a  00000c1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000072  0080006e  0080006e  00000c2c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c2c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000328  00000000  00000000  00000c98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000384c  00000000  00000000  00000fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001015  00000000  00000000  0000480c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000207a  00000000  00000000  00005821  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ae0  00000000  00000000  0000789c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001954  00000000  00000000  0000837c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002e52  00000000  00000000  00009cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f8  00000000  00000000  0000cb22  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__vector_1>
   8:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__vector_2>
   c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__vector_3>
  10:	0c 94 89 02 	jmp	0x512	; 0x512 <__vector_4>
  14:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 3a 04 	jmp	0x874	; 0x874 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__vector_10>
  2c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__vector_13>
  38:	0c 94 b3 02 	jmp	0x566	; 0x566 <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e8       	ldi	r30, 0x8A	; 138
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3e       	cpi	r26, 0xE0	; 224
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  8a:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UART_Driver>:
void UART_Driver(void)
{
  92:	08 95       	ret

00000094 <main>:
#define Running_Task  Task_UART_Driver

int main(void)
{
#if (Running_Task == Task_UART_Driver)
	UART_Driver();
  94:	0e 94 49 00 	call	0x92	; 0x92 <UART_Driver>
#elif (Running_Task == Task_I2C_Driver)
	I2C_Driver();
#elif (Running_Task == Task_I2C_EEPROM)
	I2C_EEPROM();
#endif /* Task */
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	08 95       	ret

0000009e <__vector_1>:
		break;
	}
	return return_value;	
}
ISR(INT0_vect)
{
  9e:	1f 92       	push	r1
  a0:	0f 92       	push	r0
  a2:	0f b6       	in	r0, 0x3f	; 63
  a4:	0f 92       	push	r0
  a6:	11 24       	eor	r1, r1
  a8:	2f 93       	push	r18
  aa:	3f 93       	push	r19
  ac:	4f 93       	push	r20
  ae:	5f 93       	push	r21
  b0:	6f 93       	push	r22
  b2:	7f 93       	push	r23
  b4:	8f 93       	push	r24
  b6:	9f 93       	push	r25
  b8:	af 93       	push	r26
  ba:	bf 93       	push	r27
  bc:	ef 93       	push	r30
  be:	ff 93       	push	r31
	EXTI.Flag.INT_0 = ENABLE;
  c0:	8a b7       	in	r24, 0x3a	; 58
  c2:	80 64       	ori	r24, 0x40	; 64
  c4:	8a bf       	out	0x3a, r24	; 58
	if(ExtI_Callbacks[0] != NULL)
  c6:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
  ca:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <__data_end+0x1>
  ce:	89 2b       	or	r24, r25
  d0:	29 f0       	breq	.+10     	; 0xdc <__vector_1+0x3e>
	{
		ExtI_Callbacks[0]();
  d2:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <__data_end>
  d6:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <__data_end+0x1>
  da:	09 95       	icall
	}
}
  dc:	ff 91       	pop	r31
  de:	ef 91       	pop	r30
  e0:	bf 91       	pop	r27
  e2:	af 91       	pop	r26
  e4:	9f 91       	pop	r25
  e6:	8f 91       	pop	r24
  e8:	7f 91       	pop	r23
  ea:	6f 91       	pop	r22
  ec:	5f 91       	pop	r21
  ee:	4f 91       	pop	r20
  f0:	3f 91       	pop	r19
  f2:	2f 91       	pop	r18
  f4:	0f 90       	pop	r0
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	0f 90       	pop	r0
  fa:	1f 90       	pop	r1
  fc:	18 95       	reti

000000fe <__vector_2>:
ISR(INT1_vect)
{
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
 108:	2f 93       	push	r18
 10a:	3f 93       	push	r19
 10c:	4f 93       	push	r20
 10e:	5f 93       	push	r21
 110:	6f 93       	push	r22
 112:	7f 93       	push	r23
 114:	8f 93       	push	r24
 116:	9f 93       	push	r25
 118:	af 93       	push	r26
 11a:	bf 93       	push	r27
 11c:	ef 93       	push	r30
 11e:	ff 93       	push	r31
	EXTI.Flag.INT_1 = ENABLE;
 120:	8a b7       	in	r24, 0x3a	; 58
 122:	80 68       	ori	r24, 0x80	; 128
 124:	8a bf       	out	0x3a, r24	; 58
	if(ExtI_Callbacks[1] != NULL)
 126:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end+0x2>
 12a:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__data_end+0x3>
 12e:	89 2b       	or	r24, r25
 130:	29 f0       	breq	.+10     	; 0x13c <__vector_2+0x3e>
	{
		ExtI_Callbacks[1]();
 132:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <__data_end+0x2>
 136:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <__data_end+0x3>
 13a:	09 95       	icall
	}
}
 13c:	ff 91       	pop	r31
 13e:	ef 91       	pop	r30
 140:	bf 91       	pop	r27
 142:	af 91       	pop	r26
 144:	9f 91       	pop	r25
 146:	8f 91       	pop	r24
 148:	7f 91       	pop	r23
 14a:	6f 91       	pop	r22
 14c:	5f 91       	pop	r21
 14e:	4f 91       	pop	r20
 150:	3f 91       	pop	r19
 152:	2f 91       	pop	r18
 154:	0f 90       	pop	r0
 156:	0f be       	out	0x3f, r0	; 63
 158:	0f 90       	pop	r0
 15a:	1f 90       	pop	r1
 15c:	18 95       	reti

0000015e <__vector_3>:
ISR(INT2_vect)
{
 15e:	1f 92       	push	r1
 160:	0f 92       	push	r0
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	0f 92       	push	r0
 166:	11 24       	eor	r1, r1
 168:	2f 93       	push	r18
 16a:	3f 93       	push	r19
 16c:	4f 93       	push	r20
 16e:	5f 93       	push	r21
 170:	6f 93       	push	r22
 172:	7f 93       	push	r23
 174:	8f 93       	push	r24
 176:	9f 93       	push	r25
 178:	af 93       	push	r26
 17a:	bf 93       	push	r27
 17c:	ef 93       	push	r30
 17e:	ff 93       	push	r31
	EXTI.Flag.INT_2 = ENABLE;
 180:	8a b7       	in	r24, 0x3a	; 58
 182:	80 62       	ori	r24, 0x20	; 32
 184:	8a bf       	out	0x3a, r24	; 58
	if(ExtI_Callbacks[2] != NULL)
 186:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end+0x4>
 18a:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <__data_end+0x5>
 18e:	89 2b       	or	r24, r25
 190:	29 f0       	breq	.+10     	; 0x19c <__vector_3+0x3e>
	{
		ExtI_Callbacks[2]();
 192:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <__data_end+0x4>
 196:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <__data_end+0x5>
 19a:	09 95       	icall
	}
 19c:	ff 91       	pop	r31
 19e:	ef 91       	pop	r30
 1a0:	bf 91       	pop	r27
 1a2:	af 91       	pop	r26
 1a4:	9f 91       	pop	r25
 1a6:	8f 91       	pop	r24
 1a8:	7f 91       	pop	r23
 1aa:	6f 91       	pop	r22
 1ac:	5f 91       	pop	r21
 1ae:	4f 91       	pop	r20
 1b0:	3f 91       	pop	r19
 1b2:	2f 91       	pop	r18
 1b4:	0f 90       	pop	r0
 1b6:	0f be       	out	0x3f, r0	; 63
 1b8:	0f 90       	pop	r0
 1ba:	1f 90       	pop	r1
 1bc:	18 95       	reti

000001be <Timer_ResetCounter>:
		TIMER2.Interrupts.Comp_Match       = ENABLE;
		TIMER2.Interrupts.OverFlow		   = ENABLE;
		TIMER2.Control.Clock = Clock;
	}
	else{/*MISRA C*/}
}
 1be:	81 11       	cpse	r24, r1
 1c0:	0c c0       	rjmp	.+24     	; 0x1da <Timer_ResetCounter+0x1c>
 1c2:	e8 e9       	ldi	r30, 0x98	; 152
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	10 82       	st	Z, r1
 1c8:	11 82       	std	Z+1, r1	; 0x01
 1ca:	12 82       	std	Z+2, r1	; 0x02
 1cc:	13 82       	std	Z+3, r1	; 0x03
 1ce:	14 82       	std	Z+4, r1	; 0x04
 1d0:	15 82       	std	Z+5, r1	; 0x05
 1d2:	16 82       	std	Z+6, r1	; 0x06
 1d4:	17 82       	std	Z+7, r1	; 0x07
 1d6:	12 be       	out	0x32, r1	; 50
 1d8:	08 95       	ret
 1da:	81 30       	cpi	r24, 0x01	; 1
 1dc:	59 f4       	brne	.+22     	; 0x1f4 <Timer_ResetCounter+0x36>
 1de:	e8 e9       	ldi	r30, 0x98	; 152
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	10 86       	std	Z+8, r1	; 0x08
 1e4:	11 86       	std	Z+9, r1	; 0x09
 1e6:	12 86       	std	Z+10, r1	; 0x0a
 1e8:	13 86       	std	Z+11, r1	; 0x0b
 1ea:	14 86       	std	Z+12, r1	; 0x0c
 1ec:	15 86       	std	Z+13, r1	; 0x0d
 1ee:	16 86       	std	Z+14, r1	; 0x0e
 1f0:	17 86       	std	Z+15, r1	; 0x0f
 1f2:	14 bc       	out	0x24, r1	; 36
 1f4:	08 95       	ret

000001f6 <__vector_11>:
ISR(TIMER0_OVF_vect)
{
 1f6:	1f 92       	push	r1
 1f8:	0f 92       	push	r0
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	0f 92       	push	r0
 1fe:	11 24       	eor	r1, r1
 200:	af 92       	push	r10
 202:	bf 92       	push	r11
 204:	cf 92       	push	r12
 206:	df 92       	push	r13
 208:	ef 92       	push	r14
 20a:	ff 92       	push	r15
 20c:	0f 93       	push	r16
 20e:	1f 93       	push	r17
 210:	2f 93       	push	r18
 212:	3f 93       	push	r19
 214:	4f 93       	push	r20
 216:	5f 93       	push	r21
 218:	6f 93       	push	r22
 21a:	7f 93       	push	r23
 21c:	8f 93       	push	r24
 21e:	9f 93       	push	r25
 220:	af 93       	push	r26
 222:	bf 93       	push	r27
 224:	cf 93       	push	r28
 226:	df 93       	push	r29
 228:	ef 93       	push	r30
 22a:	ff 93       	push	r31
	TIMER0.Flags.OverFlow = ENABLE;
 22c:	88 b7       	in	r24, 0x38	; 56
 22e:	81 60       	ori	r24, 0x01	; 1
 230:	88 bf       	out	0x38, r24	; 56
	OverFlows[Timer0]++;
 232:	c8 e9       	ldi	r28, 0x98	; 152
 234:	d0 e0       	ldi	r29, 0x00	; 0
 236:	28 81       	ld	r18, Y
 238:	39 81       	ldd	r19, Y+1	; 0x01
 23a:	4a 81       	ldd	r20, Y+2	; 0x02
 23c:	5b 81       	ldd	r21, Y+3	; 0x03
 23e:	6c 81       	ldd	r22, Y+4	; 0x04
 240:	7d 81       	ldd	r23, Y+5	; 0x05
 242:	8e 81       	ldd	r24, Y+6	; 0x06
 244:	9f 81       	ldd	r25, Y+7	; 0x07
 246:	a1 e0       	ldi	r26, 0x01	; 1
 248:	0e 94 9a 05 	call	0xb34	; 0xb34 <__adddi3_s8>
 24c:	28 83       	st	Y, r18
 24e:	39 83       	std	Y+1, r19	; 0x01
 250:	4a 83       	std	Y+2, r20	; 0x02
 252:	5b 83       	std	Y+3, r21	; 0x03
 254:	6c 83       	std	Y+4, r22	; 0x04
 256:	7d 83       	std	Y+5, r23	; 0x05
 258:	8e 83       	std	Y+6, r24	; 0x06
 25a:	9f 83       	std	Y+7, r25	; 0x07
	PWMAction[Timer0]();
 25c:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <PWMAction>
 260:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <PWMAction+0x1>
 264:	09 95       	icall
	if(OverFlows[Timer0] == Duty[Timer0][Cycle[Timer0]])
 266:	28 81       	ld	r18, Y
 268:	39 81       	ldd	r19, Y+1	; 0x01
 26a:	4a 81       	ldd	r20, Y+2	; 0x02
 26c:	5b 81       	ldd	r21, Y+3	; 0x03
 26e:	6c 81       	ldd	r22, Y+4	; 0x04
 270:	7d 81       	ldd	r23, Y+5	; 0x05
 272:	8e 81       	ldd	r24, Y+6	; 0x06
 274:	9f 81       	ldd	r25, Y+7	; 0x07
 276:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	ee 0f       	add	r30, r30
 27e:	ff 1f       	adc	r31, r31
 280:	ee 0f       	add	r30, r30
 282:	ff 1f       	adc	r31, r31
 284:	ee 0f       	add	r30, r30
 286:	ff 1f       	adc	r31, r31
 288:	e8 58       	subi	r30, 0x88	; 136
 28a:	ff 4f       	sbci	r31, 0xFF	; 255
 28c:	a0 80       	ld	r10, Z
 28e:	b1 80       	ldd	r11, Z+1	; 0x01
 290:	c2 80       	ldd	r12, Z+2	; 0x02
 292:	d3 80       	ldd	r13, Z+3	; 0x03
 294:	e4 80       	ldd	r14, Z+4	; 0x04
 296:	f5 80       	ldd	r15, Z+5	; 0x05
 298:	06 81       	ldd	r16, Z+6	; 0x06
 29a:	17 81       	ldd	r17, Z+7	; 0x07
 29c:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__cmpdi2>
 2a0:	d1 f5       	brne	.+116    	; 0x316 <__vector_11+0x120>
	{
		OverFlows[Timer0] = RESET;
 2a2:	18 82       	st	Y, r1
 2a4:	19 82       	std	Y+1, r1	; 0x01
 2a6:	1a 82       	std	Y+2, r1	; 0x02
 2a8:	1b 82       	std	Y+3, r1	; 0x03
 2aa:	1c 82       	std	Y+4, r1	; 0x04
 2ac:	1d 82       	std	Y+5, r1	; 0x05
 2ae:	1e 82       	std	Y+6, r1	; 0x06
 2b0:	1f 82       	std	Y+7, r1	; 0x07
		NotifierAction[Timer0]();
 2b2:	e0 91 a8 00 	lds	r30, 0x00A8	; 0x8000a8 <NotifierAction>
 2b6:	f0 91 a9 00 	lds	r31, 0x00A9	; 0x8000a9 <NotifierAction+0x1>
 2ba:	09 95       	icall
		if(Cycle[Timer0] == ON_Cycle)
 2bc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2c0:	81 11       	cpse	r24, r1
 2c2:	13 c0       	rjmp	.+38     	; 0x2ea <__vector_11+0xf4>
		{
			Cycle[Timer0] = OFF_Cycle;
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			TIMER0.Counter  = 256 - ((Duty[Timer0][OFF_Cycle] * 1000UL)%256 -1);
 2ca:	e8 e7       	ldi	r30, 0x78	; 120
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	90 85       	ldd	r25, Z+8	; 0x08
 2d0:	21 85       	ldd	r18, Z+9	; 0x09
 2d2:	22 85       	ldd	r18, Z+10	; 0x0a
 2d4:	23 85       	ldd	r18, Z+11	; 0x0b
 2d6:	24 85       	ldd	r18, Z+12	; 0x0c
 2d8:	25 85       	ldd	r18, Z+13	; 0x0d
 2da:	26 85       	ldd	r18, Z+14	; 0x0e
 2dc:	27 85       	ldd	r18, Z+15	; 0x0f
 2de:	28 e1       	ldi	r18, 0x18	; 24
 2e0:	92 9f       	mul	r25, r18
 2e2:	80 0d       	add	r24, r0
 2e4:	11 24       	eor	r1, r1
 2e6:	82 bf       	out	0x32, r24	; 50
 2e8:	16 c0       	rjmp	.+44     	; 0x316 <__vector_11+0x120>
		}
		else if(Cycle[Timer0] == OFF_Cycle)
 2ea:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2ee:	81 30       	cpi	r24, 0x01	; 1
 2f0:	91 f4       	brne	.+36     	; 0x316 <__vector_11+0x120>
		{
			Cycle[Timer0] = ON_Cycle;
 2f2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			TIMER0.Counter  = 256 - ((Duty[Timer0][ON_Cycle] * 1000UL)%256 -1);
 2f6:	e8 e7       	ldi	r30, 0x78	; 120
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	90 81       	ld	r25, Z
 2fc:	81 81       	ldd	r24, Z+1	; 0x01
 2fe:	82 81       	ldd	r24, Z+2	; 0x02
 300:	83 81       	ldd	r24, Z+3	; 0x03
 302:	84 81       	ldd	r24, Z+4	; 0x04
 304:	85 81       	ldd	r24, Z+5	; 0x05
 306:	86 81       	ldd	r24, Z+6	; 0x06
 308:	87 81       	ldd	r24, Z+7	; 0x07
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	28 e1       	ldi	r18, 0x18	; 24
 30e:	92 9f       	mul	r25, r18
 310:	80 0d       	add	r24, r0
 312:	11 24       	eor	r1, r1
 314:	82 bf       	out	0x32, r24	; 50
		}
	}
}
 316:	ff 91       	pop	r31
 318:	ef 91       	pop	r30
 31a:	df 91       	pop	r29
 31c:	cf 91       	pop	r28
 31e:	bf 91       	pop	r27
 320:	af 91       	pop	r26
 322:	9f 91       	pop	r25
 324:	8f 91       	pop	r24
 326:	7f 91       	pop	r23
 328:	6f 91       	pop	r22
 32a:	5f 91       	pop	r21
 32c:	4f 91       	pop	r20
 32e:	3f 91       	pop	r19
 330:	2f 91       	pop	r18
 332:	1f 91       	pop	r17
 334:	0f 91       	pop	r16
 336:	ff 90       	pop	r15
 338:	ef 90       	pop	r14
 33a:	df 90       	pop	r13
 33c:	cf 90       	pop	r12
 33e:	bf 90       	pop	r11
 340:	af 90       	pop	r10
 342:	0f 90       	pop	r0
 344:	0f be       	out	0x3f, r0	; 63
 346:	0f 90       	pop	r0
 348:	1f 90       	pop	r1
 34a:	18 95       	reti

0000034c <__vector_5>:
ISR(TIMER2_OVF_vect)
{
 34c:	1f 92       	push	r1
 34e:	0f 92       	push	r0
 350:	0f b6       	in	r0, 0x3f	; 63
 352:	0f 92       	push	r0
 354:	11 24       	eor	r1, r1
 356:	af 92       	push	r10
 358:	bf 92       	push	r11
 35a:	cf 92       	push	r12
 35c:	df 92       	push	r13
 35e:	ef 92       	push	r14
 360:	ff 92       	push	r15
 362:	0f 93       	push	r16
 364:	1f 93       	push	r17
 366:	2f 93       	push	r18
 368:	3f 93       	push	r19
 36a:	4f 93       	push	r20
 36c:	5f 93       	push	r21
 36e:	6f 93       	push	r22
 370:	7f 93       	push	r23
 372:	8f 93       	push	r24
 374:	9f 93       	push	r25
 376:	af 93       	push	r26
 378:	bf 93       	push	r27
 37a:	cf 93       	push	r28
 37c:	df 93       	push	r29
 37e:	ef 93       	push	r30
 380:	ff 93       	push	r31
	TIMER2.Flags.OverFlow = ENABLE;
 382:	88 b7       	in	r24, 0x38	; 56
 384:	80 64       	ori	r24, 0x40	; 64
 386:	88 bf       	out	0x38, r24	; 56
	OverFlows[Timer2]++;
 388:	c8 e9       	ldi	r28, 0x98	; 152
 38a:	d0 e0       	ldi	r29, 0x00	; 0
 38c:	28 85       	ldd	r18, Y+8	; 0x08
 38e:	39 85       	ldd	r19, Y+9	; 0x09
 390:	4a 85       	ldd	r20, Y+10	; 0x0a
 392:	5b 85       	ldd	r21, Y+11	; 0x0b
 394:	6c 85       	ldd	r22, Y+12	; 0x0c
 396:	7d 85       	ldd	r23, Y+13	; 0x0d
 398:	8e 85       	ldd	r24, Y+14	; 0x0e
 39a:	9f 85       	ldd	r25, Y+15	; 0x0f
 39c:	a1 e0       	ldi	r26, 0x01	; 1
 39e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__adddi3_s8>
 3a2:	28 87       	std	Y+8, r18	; 0x08
 3a4:	39 87       	std	Y+9, r19	; 0x09
 3a6:	4a 87       	std	Y+10, r20	; 0x0a
 3a8:	5b 87       	std	Y+11, r21	; 0x0b
 3aa:	6c 87       	std	Y+12, r22	; 0x0c
 3ac:	7d 87       	std	Y+13, r23	; 0x0d
 3ae:	8e 87       	std	Y+14, r24	; 0x0e
 3b0:	9f 87       	std	Y+15, r25	; 0x0f
	PWMAction[Timer2]();
 3b2:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <PWMAction+0x2>
 3b6:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <PWMAction+0x3>
 3ba:	09 95       	icall
	if(OverFlows[Timer2] == Duty[Timer2][Cycle[Timer2]])
 3bc:	28 85       	ldd	r18, Y+8	; 0x08
 3be:	39 85       	ldd	r19, Y+9	; 0x09
 3c0:	4a 85       	ldd	r20, Y+10	; 0x0a
 3c2:	5b 85       	ldd	r21, Y+11	; 0x0b
 3c4:	6c 85       	ldd	r22, Y+12	; 0x0c
 3c6:	7d 85       	ldd	r23, Y+13	; 0x0d
 3c8:	8e 85       	ldd	r24, Y+14	; 0x0e
 3ca:	9f 85       	ldd	r25, Y+15	; 0x0f
 3cc:	e0 91 61 00 	lds	r30, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	ee 0f       	add	r30, r30
 3d4:	ff 1f       	adc	r31, r31
 3d6:	ee 0f       	add	r30, r30
 3d8:	ff 1f       	adc	r31, r31
 3da:	ee 0f       	add	r30, r30
 3dc:	ff 1f       	adc	r31, r31
 3de:	e8 57       	subi	r30, 0x78	; 120
 3e0:	ff 4f       	sbci	r31, 0xFF	; 255
 3e2:	a0 80       	ld	r10, Z
 3e4:	b1 80       	ldd	r11, Z+1	; 0x01
 3e6:	c2 80       	ldd	r12, Z+2	; 0x02
 3e8:	d3 80       	ldd	r13, Z+3	; 0x03
 3ea:	e4 80       	ldd	r14, Z+4	; 0x04
 3ec:	f5 80       	ldd	r15, Z+5	; 0x05
 3ee:	06 81       	ldd	r16, Z+6	; 0x06
 3f0:	17 81       	ldd	r17, Z+7	; 0x07
 3f2:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__cmpdi2>
 3f6:	d1 f5       	brne	.+116    	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
	{
		OverFlows[Timer2] = RESET;
 3f8:	18 86       	std	Y+8, r1	; 0x08
 3fa:	19 86       	std	Y+9, r1	; 0x09
 3fc:	1a 86       	std	Y+10, r1	; 0x0a
 3fe:	1b 86       	std	Y+11, r1	; 0x0b
 400:	1c 86       	std	Y+12, r1	; 0x0c
 402:	1d 86       	std	Y+13, r1	; 0x0d
 404:	1e 86       	std	Y+14, r1	; 0x0e
 406:	1f 86       	std	Y+15, r1	; 0x0f
		NotifierAction[Timer2]();
 408:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <NotifierAction+0x2>
 40c:	f0 91 ab 00 	lds	r31, 0x00AB	; 0x8000ab <NotifierAction+0x3>
 410:	09 95       	icall
		if(Cycle[Timer2] == ON_Cycle)
 412:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 416:	81 11       	cpse	r24, r1
 418:	13 c0       	rjmp	.+38     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
		{
			Cycle[Timer2] = OFF_Cycle;
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
			TIMER0.Counter  = 256 - ((Duty[Timer2][OFF_Cycle] * 1000UL)%256 -1);
 420:	e8 e7       	ldi	r30, 0x78	; 120
 422:	f0 e0       	ldi	r31, 0x00	; 0
 424:	90 8d       	ldd	r25, Z+24	; 0x18
 426:	21 8d       	ldd	r18, Z+25	; 0x19
 428:	22 8d       	ldd	r18, Z+26	; 0x1a
 42a:	23 8d       	ldd	r18, Z+27	; 0x1b
 42c:	24 8d       	ldd	r18, Z+28	; 0x1c
 42e:	25 8d       	ldd	r18, Z+29	; 0x1d
 430:	26 8d       	ldd	r18, Z+30	; 0x1e
 432:	27 8d       	ldd	r18, Z+31	; 0x1f
 434:	28 e1       	ldi	r18, 0x18	; 24
 436:	92 9f       	mul	r25, r18
 438:	80 0d       	add	r24, r0
 43a:	11 24       	eor	r1, r1
 43c:	82 bf       	out	0x32, r24	; 50
 43e:	16 c0       	rjmp	.+44     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
		}
		else if(Cycle[Timer2] == OFF_Cycle)
 440:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 444:	81 30       	cpi	r24, 0x01	; 1
 446:	91 f4       	brne	.+36     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
		{
			Cycle[Timer2] = ON_Cycle;
 448:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
			TIMER2.Counter  = 256 - ((Duty[Timer2][ON_Cycle] * 1000UL)%256 -1);
 44c:	e8 e7       	ldi	r30, 0x78	; 120
 44e:	f0 e0       	ldi	r31, 0x00	; 0
 450:	90 89       	ldd	r25, Z+16	; 0x10
 452:	81 89       	ldd	r24, Z+17	; 0x11
 454:	82 89       	ldd	r24, Z+18	; 0x12
 456:	83 89       	ldd	r24, Z+19	; 0x13
 458:	84 89       	ldd	r24, Z+20	; 0x14
 45a:	85 89       	ldd	r24, Z+21	; 0x15
 45c:	86 89       	ldd	r24, Z+22	; 0x16
 45e:	87 89       	ldd	r24, Z+23	; 0x17
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	28 e1       	ldi	r18, 0x18	; 24
 464:	92 9f       	mul	r25, r18
 466:	80 0d       	add	r24, r0
 468:	11 24       	eor	r1, r1
 46a:	84 bd       	out	0x24, r24	; 36
		}
	}
}
 46c:	ff 91       	pop	r31
 46e:	ef 91       	pop	r30
 470:	df 91       	pop	r29
 472:	cf 91       	pop	r28
 474:	bf 91       	pop	r27
 476:	af 91       	pop	r26
 478:	9f 91       	pop	r25
 47a:	8f 91       	pop	r24
 47c:	7f 91       	pop	r23
 47e:	6f 91       	pop	r22
 480:	5f 91       	pop	r21
 482:	4f 91       	pop	r20
 484:	3f 91       	pop	r19
 486:	2f 91       	pop	r18
 488:	1f 91       	pop	r17
 48a:	0f 91       	pop	r16
 48c:	ff 90       	pop	r15
 48e:	ef 90       	pop	r14
 490:	df 90       	pop	r13
 492:	cf 90       	pop	r12
 494:	bf 90       	pop	r11
 496:	af 90       	pop	r10
 498:	0f 90       	pop	r0
 49a:	0f be       	out	0x3f, r0	; 63
 49c:	0f 90       	pop	r0
 49e:	1f 90       	pop	r1
 4a0:	18 95       	reti

000004a2 <__vector_10>:
ISR(TIMER0_COMP_vect)
{
 4a2:	1f 92       	push	r1
 4a4:	0f 92       	push	r0
 4a6:	0f b6       	in	r0, 0x3f	; 63
 4a8:	0f 92       	push	r0
 4aa:	11 24       	eor	r1, r1
 4ac:	2f 93       	push	r18
 4ae:	3f 93       	push	r19
 4b0:	4f 93       	push	r20
 4b2:	5f 93       	push	r21
 4b4:	6f 93       	push	r22
 4b6:	7f 93       	push	r23
 4b8:	8f 93       	push	r24
 4ba:	9f 93       	push	r25
 4bc:	af 93       	push	r26
 4be:	bf 93       	push	r27
 4c0:	ef 93       	push	r30
 4c2:	ff 93       	push	r31
	TIMER0.Flags.Comp_Match = ENABLE;
 4c4:	88 b7       	in	r24, 0x38	; 56
 4c6:	82 60       	ori	r24, 0x02	; 2
 4c8:	88 bf       	out	0x38, r24	; 56
	if(CounterAction != NULL)
 4ca:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <CounterAction>
 4ce:	90 91 ad 00 	lds	r25, 0x00AD	; 0x8000ad <CounterAction+0x1>
 4d2:	89 2b       	or	r24, r25
 4d4:	41 f0       	breq	.+16     	; 0x4e6 <__vector_10+0x44>
	{
		CounterAction();
 4d6:	e0 91 ac 00 	lds	r30, 0x00AC	; 0x8000ac <CounterAction>
 4da:	f0 91 ad 00 	lds	r31, 0x00AD	; 0x8000ad <CounterAction+0x1>
 4de:	09 95       	icall
		Timer_ResetCounter(Timer0);
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	0e 94 df 00 	call	0x1be	; 0x1be <Timer_ResetCounter>
	}
	PWMAction[Timer0]();
 4e6:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <PWMAction>
 4ea:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <PWMAction+0x1>
 4ee:	09 95       	icall
}
 4f0:	ff 91       	pop	r31
 4f2:	ef 91       	pop	r30
 4f4:	bf 91       	pop	r27
 4f6:	af 91       	pop	r26
 4f8:	9f 91       	pop	r25
 4fa:	8f 91       	pop	r24
 4fc:	7f 91       	pop	r23
 4fe:	6f 91       	pop	r22
 500:	5f 91       	pop	r21
 502:	4f 91       	pop	r20
 504:	3f 91       	pop	r19
 506:	2f 91       	pop	r18
 508:	0f 90       	pop	r0
 50a:	0f be       	out	0x3f, r0	; 63
 50c:	0f 90       	pop	r0
 50e:	1f 90       	pop	r1
 510:	18 95       	reti

00000512 <__vector_4>:
ISR(TIMER2_COMP_vect)
{
 512:	1f 92       	push	r1
 514:	0f 92       	push	r0
 516:	0f b6       	in	r0, 0x3f	; 63
 518:	0f 92       	push	r0
 51a:	11 24       	eor	r1, r1
 51c:	2f 93       	push	r18
 51e:	3f 93       	push	r19
 520:	4f 93       	push	r20
 522:	5f 93       	push	r21
 524:	6f 93       	push	r22
 526:	7f 93       	push	r23
 528:	8f 93       	push	r24
 52a:	9f 93       	push	r25
 52c:	af 93       	push	r26
 52e:	bf 93       	push	r27
 530:	ef 93       	push	r30
 532:	ff 93       	push	r31
	TIMER2.Flags.Comp_Match = ENABLE;
 534:	88 b7       	in	r24, 0x38	; 56
 536:	80 68       	ori	r24, 0x80	; 128
 538:	88 bf       	out	0x38, r24	; 56
	PWMAction[Timer2]();
 53a:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <PWMAction+0x2>
 53e:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <PWMAction+0x3>
 542:	09 95       	icall
 544:	ff 91       	pop	r31
 546:	ef 91       	pop	r30
 548:	bf 91       	pop	r27
 54a:	af 91       	pop	r26
 54c:	9f 91       	pop	r25
 54e:	8f 91       	pop	r24
 550:	7f 91       	pop	r23
 552:	6f 91       	pop	r22
 554:	5f 91       	pop	r21
 556:	4f 91       	pop	r20
 558:	3f 91       	pop	r19
 55a:	2f 91       	pop	r18
 55c:	0f 90       	pop	r0
 55e:	0f be       	out	0x3f, r0	; 63
 560:	0f 90       	pop	r0
 562:	1f 90       	pop	r1
 564:	18 95       	reti

00000566 <__vector_14>:
		UART.Enables.rcivCompIntrrpt = ENABLE;
		return_value = UART_EN_Buffer_Empty;
	}
	else{/*MISRA C*/}
	return return_value;
}
 566:	1f 92       	push	r1
 568:	0f 92       	push	r0
 56a:	0f b6       	in	r0, 0x3f	; 63
 56c:	0f 92       	push	r0
 56e:	11 24       	eor	r1, r1
 570:	2f 93       	push	r18
 572:	3f 93       	push	r19
 574:	4f 93       	push	r20
 576:	5f 93       	push	r21
 578:	6f 93       	push	r22
 57a:	7f 93       	push	r23
 57c:	8f 93       	push	r24
 57e:	9f 93       	push	r25
 580:	af 93       	push	r26
 582:	bf 93       	push	r27
 584:	ef 93       	push	r30
 586:	ff 93       	push	r31
 588:	cf 93       	push	r28
 58a:	df 93       	push	r29
 58c:	1f 92       	push	r1
 58e:	cd b7       	in	r28, 0x3d	; 61
 590:	de b7       	in	r29, 0x3e	; 62
 592:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <T_Flag>
 596:	82 30       	cpi	r24, 0x02	; 2
 598:	79 f4       	brne	.+30     	; 0x5b8 <__vector_14+0x52>
 59a:	19 82       	std	Y+1, r1	; 0x01
 59c:	be 01       	movw	r22, r28
 59e:	6f 5f       	subi	r22, 0xFF	; 255
 5a0:	7f 4f       	sbci	r23, 0xFF	; 255
 5a2:	82 e6       	ldi	r24, 0x62	; 98
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	0e 94 6e 03 	call	0x6dc	; 0x6dc <DeQueue>
 5aa:	82 30       	cpi	r24, 0x02	; 2
 5ac:	19 f4       	brne	.+6      	; 0x5b4 <__vector_14+0x4e>
 5ae:	55 98       	cbi	0x0a, 5	; 10
 5b0:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <T_Flag>
 5b4:	89 81       	ldd	r24, Y+1	; 0x01
 5b6:	8c b9       	out	0x0c, r24	; 12
 5b8:	0f 90       	pop	r0
 5ba:	df 91       	pop	r29
 5bc:	cf 91       	pop	r28
 5be:	ff 91       	pop	r31
 5c0:	ef 91       	pop	r30
 5c2:	bf 91       	pop	r27
 5c4:	af 91       	pop	r26
 5c6:	9f 91       	pop	r25
 5c8:	8f 91       	pop	r24
 5ca:	7f 91       	pop	r23
 5cc:	6f 91       	pop	r22
 5ce:	5f 91       	pop	r21
 5d0:	4f 91       	pop	r20
 5d2:	3f 91       	pop	r19
 5d4:	2f 91       	pop	r18
 5d6:	0f 90       	pop	r0
 5d8:	0f be       	out	0x3f, r0	; 63
 5da:	0f 90       	pop	r0
 5dc:	1f 90       	pop	r1
 5de:	18 95       	reti

000005e0 <__vector_13>:
ISR(USART_RXC_vect)
{
 5e0:	1f 92       	push	r1
 5e2:	0f 92       	push	r0
 5e4:	0f b6       	in	r0, 0x3f	; 63
 5e6:	0f 92       	push	r0
 5e8:	11 24       	eor	r1, r1
 5ea:	2f 93       	push	r18
 5ec:	3f 93       	push	r19
 5ee:	4f 93       	push	r20
 5f0:	5f 93       	push	r21
 5f2:	6f 93       	push	r22
 5f4:	7f 93       	push	r23
 5f6:	8f 93       	push	r24
 5f8:	9f 93       	push	r25
 5fa:	af 93       	push	r26
 5fc:	bf 93       	push	r27
 5fe:	ef 93       	push	r30
 600:	ff 93       	push	r31
	UART.Flags.rciv_cmplt = ENABLE;
 602:	5f 9a       	sbi	0x0b, 7	; 11
	if(UART_EN_Buffer_Full ==EnQueue(&R_Buffer, UART.Data))
 604:	6c b1       	in	r22, 0x0c	; 12
 606:	87 e6       	ldi	r24, 0x67	; 103
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	0e 94 1b 03 	call	0x636	; 0x636 <EnQueue>
 60e:	81 30       	cpi	r24, 0x01	; 1
 610:	09 f4       	brne	.+2      	; 0x614 <__vector_13+0x34>
	{
		UART.Enables.rcivCompIntrrpt = DISABLE;
 612:	57 98       	cbi	0x0a, 7	; 10
	}
	else{/*MISRA C*/}
 614:	ff 91       	pop	r31
 616:	ef 91       	pop	r30
 618:	bf 91       	pop	r27
 61a:	af 91       	pop	r26
 61c:	9f 91       	pop	r25
 61e:	8f 91       	pop	r24
 620:	7f 91       	pop	r23
 622:	6f 91       	pop	r22
 624:	5f 91       	pop	r21
 626:	4f 91       	pop	r20
 628:	3f 91       	pop	r19
 62a:	2f 91       	pop	r18
 62c:	0f 90       	pop	r0
 62e:	0f be       	out	0x3f, r0	; 63
 630:	0f 90       	pop	r0
 632:	1f 90       	pop	r1
 634:	18 95       	reti

00000636 <EnQueue>:
		return_value = Queue_EN_InvalidPointer;
	}
	return return_value;
}
Queue_Error_t	EnQueue			(Queue_t* queue, uint8_t  Data)
{
 636:	0f 93       	push	r16
 638:	1f 93       	push	r17
 63a:	cf 93       	push	r28
 63c:	df 93       	push	r29
 63e:	fc 01       	movw	r30, r24
 640:	46 2f       	mov	r20, r22
	Queue_Error_t return_value = Queue_EN_valid;
	
	if (((queue->front==0)&&(queue->rear==queue->size-1))||(queue->rear==((queue->front-1)%(queue->size-1))))
 642:	32 81       	ldd	r19, Z+2	; 0x02
 644:	31 11       	cpse	r19, r1
 646:	0d c0       	rjmp	.+26     	; 0x662 <EnQueue+0x2c>
 648:	23 81       	ldd	r18, Z+3	; 0x03
 64a:	c2 2f       	mov	r28, r18
 64c:	02 2e       	mov	r0, r18
 64e:	00 0c       	add	r0, r0
 650:	dd 0b       	sbc	r29, r29
 652:	64 81       	ldd	r22, Z+4	; 0x04
 654:	70 e0       	ldi	r23, 0x00	; 0
 656:	61 50       	subi	r22, 0x01	; 1
 658:	71 09       	sbc	r23, r1
 65a:	c6 17       	cp	r28, r22
 65c:	d7 07       	cpc	r29, r23
 65e:	89 f5       	brne	.+98     	; 0x6c2 <EnQueue+0x8c>
 660:	2a c0       	rjmp	.+84     	; 0x6b6 <EnQueue+0x80>
 662:	23 81       	ldd	r18, Z+3	; 0x03
 664:	02 2f       	mov	r16, r18
 666:	02 2e       	mov	r0, r18
 668:	00 0c       	add	r0, r0
 66a:	11 0b       	sbc	r17, r17
 66c:	c4 81       	ldd	r28, Z+4	; 0x04
 66e:	d0 e0       	ldi	r29, 0x00	; 0
 670:	21 97       	sbiw	r28, 0x01	; 1
 672:	83 2f       	mov	r24, r19
 674:	03 2e       	mov	r0, r19
 676:	00 0c       	add	r0, r0
 678:	99 0b       	sbc	r25, r25
 67a:	01 97       	sbiw	r24, 0x01	; 1
 67c:	be 01       	movw	r22, r28
 67e:	0e 94 86 05 	call	0xb0c	; 0xb0c <__divmodhi4>
 682:	08 17       	cp	r16, r24
 684:	19 07       	cpc	r17, r25
 686:	c9 f0       	breq	.+50     	; 0x6ba <EnQueue+0x84>
	{
		return Queue_EN_Full;
	}
	else
	{
		if(queue->front == -1)
 688:	3f 3f       	cpi	r19, 0xFF	; 255
 68a:	19 f4       	brne	.+6      	; 0x692 <EnQueue+0x5c>
		{
			queue->front = 0;
 68c:	12 82       	std	Z+2, r1	; 0x02
			queue->rear  = 0;
 68e:	13 82       	std	Z+3, r1	; 0x03
 690:	07 c0       	rjmp	.+14     	; 0x6a0 <EnQueue+0x6a>
		}
		else if (queue->rear == queue->size-1 && queue->front != 0)
 692:	0c 17       	cp	r16, r28
 694:	1d 07       	cpc	r17, r29
 696:	11 f4       	brne	.+4      	; 0x69c <EnQueue+0x66>
		{
			queue->rear = 0;
 698:	13 82       	std	Z+3, r1	; 0x03
 69a:	02 c0       	rjmp	.+4      	; 0x6a0 <EnQueue+0x6a>
		}
		else
		{
			queue->rear++;
 69c:	2f 5f       	subi	r18, 0xFF	; 255
 69e:	23 83       	std	Z+3, r18	; 0x03
		}
		queue->buffer[queue->rear] = Data;
 6a0:	83 81       	ldd	r24, Z+3	; 0x03
 6a2:	01 90       	ld	r0, Z+
 6a4:	f0 81       	ld	r31, Z
 6a6:	e0 2d       	mov	r30, r0
 6a8:	e8 0f       	add	r30, r24
 6aa:	f1 1d       	adc	r31, r1
 6ac:	87 fd       	sbrc	r24, 7
 6ae:	fa 95       	dec	r31
 6b0:	40 83       	st	Z, r20
	} 	
	return return_value;
 6b2:	80 e0       	ldi	r24, 0x00	; 0
 6b4:	0e c0       	rjmp	.+28     	; 0x6d2 <EnQueue+0x9c>
{
	Queue_Error_t return_value = Queue_EN_valid;
	
	if (((queue->front==0)&&(queue->rear==queue->size-1))||(queue->rear==((queue->front-1)%(queue->size-1))))
	{
		return Queue_EN_Full;
 6b6:	81 e0       	ldi	r24, 0x01	; 1
 6b8:	0c c0       	rjmp	.+24     	; 0x6d2 <EnQueue+0x9c>
 6ba:	81 e0       	ldi	r24, 0x01	; 1
 6bc:	0a c0       	rjmp	.+20     	; 0x6d2 <EnQueue+0x9c>
 6be:	81 e0       	ldi	r24, 0x01	; 1
 6c0:	08 c0       	rjmp	.+16     	; 0x6d2 <EnQueue+0x9c>
}
Queue_Error_t	EnQueue			(Queue_t* queue, uint8_t  Data)
{
	Queue_Error_t return_value = Queue_EN_valid;
	
	if (((queue->front==0)&&(queue->rear==queue->size-1))||(queue->rear==((queue->front-1)%(queue->size-1))))
 6c2:	8f ef       	ldi	r24, 0xFF	; 255
 6c4:	9f ef       	ldi	r25, 0xFF	; 255
 6c6:	0e 94 86 05 	call	0xb0c	; 0xb0c <__divmodhi4>
 6ca:	c8 17       	cp	r28, r24
 6cc:	d9 07       	cpc	r29, r25
 6ce:	31 f7       	brne	.-52     	; 0x69c <EnQueue+0x66>
 6d0:	f6 cf       	rjmp	.-20     	; 0x6be <EnQueue+0x88>
			queue->rear++;
		}
		queue->buffer[queue->rear] = Data;
	} 	
	return return_value;
}
 6d2:	df 91       	pop	r29
 6d4:	cf 91       	pop	r28
 6d6:	1f 91       	pop	r17
 6d8:	0f 91       	pop	r16
 6da:	08 95       	ret

000006dc <DeQueue>:
Queue_Error_t	DeQueue			(Queue_t* queue, uint8_t* Data)
{
 6dc:	fc 01       	movw	r30, r24
	Queue_Error_t return_value = Queue_EN_valid;
	
	if (queue->front == -1)
 6de:	82 81       	ldd	r24, Z+2	; 0x02
 6e0:	8f 3f       	cpi	r24, 0xFF	; 255
 6e2:	19 f1       	breq	.+70     	; 0x72a <DeQueue+0x4e>
	{
		return_value = Queue_EN_Empty;
	}
	else
	{
		*Data = queue->buffer[queue->front];
 6e4:	a0 81       	ld	r26, Z
 6e6:	b1 81       	ldd	r27, Z+1	; 0x01
 6e8:	a8 0f       	add	r26, r24
 6ea:	b1 1d       	adc	r27, r1
 6ec:	87 fd       	sbrc	r24, 7
 6ee:	ba 95       	dec	r27
 6f0:	8c 91       	ld	r24, X
 6f2:	db 01       	movw	r26, r22
 6f4:	8c 93       	st	X, r24
		if (queue->front == queue->rear)
 6f6:	22 81       	ldd	r18, Z+2	; 0x02
 6f8:	83 81       	ldd	r24, Z+3	; 0x03
 6fa:	28 13       	cpse	r18, r24
 6fc:	05 c0       	rjmp	.+10     	; 0x708 <DeQueue+0x2c>
		{
			queue->front = -1;
 6fe:	8f ef       	ldi	r24, 0xFF	; 255
 700:	82 83       	std	Z+2, r24	; 0x02
			queue->rear  = -1;
 702:	83 83       	std	Z+3, r24	; 0x03
	} 	
	return return_value;
}
Queue_Error_t	DeQueue			(Queue_t* queue, uint8_t* Data)
{
	Queue_Error_t return_value = Queue_EN_valid;
 704:	80 e0       	ldi	r24, 0x00	; 0
 706:	08 95       	ret
		if (queue->front == queue->rear)
		{
			queue->front = -1;
			queue->rear  = -1;
		}
		else if (queue->front == queue->size-1)
 708:	84 81       	ldd	r24, Z+4	; 0x04
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	01 97       	sbiw	r24, 0x01	; 1
 70e:	42 2f       	mov	r20, r18
 710:	02 2e       	mov	r0, r18
 712:	00 0c       	add	r0, r0
 714:	55 0b       	sbc	r21, r21
 716:	48 17       	cp	r20, r24
 718:	59 07       	cpc	r21, r25
 71a:	19 f4       	brne	.+6      	; 0x722 <DeQueue+0x46>
		{
			queue->front = 0;
 71c:	12 82       	std	Z+2, r1	; 0x02
	} 	
	return return_value;
}
Queue_Error_t	DeQueue			(Queue_t* queue, uint8_t* Data)
{
	Queue_Error_t return_value = Queue_EN_valid;
 71e:	80 e0       	ldi	r24, 0x00	; 0
 720:	08 95       	ret
		{
			queue->front = 0;
		}
		else
		{
			queue->front++;	
 722:	2f 5f       	subi	r18, 0xFF	; 255
 724:	22 83       	std	Z+2, r18	; 0x02
	} 	
	return return_value;
}
Queue_Error_t	DeQueue			(Queue_t* queue, uint8_t* Data)
{
	Queue_Error_t return_value = Queue_EN_valid;
 726:	80 e0       	ldi	r24, 0x00	; 0
 728:	08 95       	ret
	
	if (queue->front == -1)
	{
		return_value = Queue_EN_Empty;
 72a:	82 e0       	ldi	r24, 0x02	; 2
		{
			queue->front++;	
		}
	}
	return return_value;
 72c:	08 95       	ret

0000072e <vListInsertEnd>:
	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
}
 72e:	cf 93       	push	r28
 730:	df 93       	push	r29
 732:	9c 01       	movw	r18, r24
 734:	fb 01       	movw	r30, r22
 736:	dc 01       	movw	r26, r24
 738:	11 96       	adiw	r26, 0x01	; 1
 73a:	cd 91       	ld	r28, X+
 73c:	dc 91       	ld	r29, X
 73e:	12 97       	sbiw	r26, 0x02	; 2
 740:	d3 83       	std	Z+3, r29	; 0x03
 742:	c2 83       	std	Z+2, r28	; 0x02
 744:	8c 81       	ldd	r24, Y+4	; 0x04
 746:	9d 81       	ldd	r25, Y+5	; 0x05
 748:	95 83       	std	Z+5, r25	; 0x05
 74a:	84 83       	std	Z+4, r24	; 0x04
 74c:	8c 81       	ldd	r24, Y+4	; 0x04
 74e:	9d 81       	ldd	r25, Y+5	; 0x05
 750:	dc 01       	movw	r26, r24
 752:	13 96       	adiw	r26, 0x03	; 3
 754:	7c 93       	st	X, r23
 756:	6e 93       	st	-X, r22
 758:	12 97       	sbiw	r26, 0x02	; 2
 75a:	7d 83       	std	Y+5, r23	; 0x05
 75c:	6c 83       	std	Y+4, r22	; 0x04
 75e:	31 87       	std	Z+9, r19	; 0x09
 760:	20 87       	std	Z+8, r18	; 0x08
 762:	f9 01       	movw	r30, r18
 764:	80 81       	ld	r24, Z
 766:	8f 5f       	subi	r24, 0xFF	; 255
 768:	80 83       	st	Z, r24
 76a:	df 91       	pop	r29
 76c:	cf 91       	pop	r28
 76e:	08 95       	ret

00000770 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 770:	cf 93       	push	r28
 772:	df 93       	push	r29
 774:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 776:	a0 85       	ldd	r26, Z+8	; 0x08
 778:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 77a:	c2 81       	ldd	r28, Z+2	; 0x02
 77c:	d3 81       	ldd	r29, Z+3	; 0x03
 77e:	84 81       	ldd	r24, Z+4	; 0x04
 780:	95 81       	ldd	r25, Z+5	; 0x05
 782:	9d 83       	std	Y+5, r25	; 0x05
 784:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 786:	c4 81       	ldd	r28, Z+4	; 0x04
 788:	d5 81       	ldd	r29, Z+5	; 0x05
 78a:	82 81       	ldd	r24, Z+2	; 0x02
 78c:	93 81       	ldd	r25, Z+3	; 0x03
 78e:	9b 83       	std	Y+3, r25	; 0x03
 790:	8a 83       	std	Y+2, r24	; 0x02

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 792:	11 96       	adiw	r26, 0x01	; 1
 794:	8d 91       	ld	r24, X+
 796:	9c 91       	ld	r25, X
 798:	12 97       	sbiw	r26, 0x02	; 2
 79a:	e8 17       	cp	r30, r24
 79c:	f9 07       	cpc	r31, r25
 79e:	31 f4       	brne	.+12     	; 0x7ac <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 7a0:	84 81       	ldd	r24, Z+4	; 0x04
 7a2:	95 81       	ldd	r25, Z+5	; 0x05
 7a4:	12 96       	adiw	r26, 0x02	; 2
 7a6:	9c 93       	st	X, r25
 7a8:	8e 93       	st	-X, r24
 7aa:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 7ac:	11 86       	std	Z+9, r1	; 0x09
 7ae:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 7b0:	8c 91       	ld	r24, X
 7b2:	81 50       	subi	r24, 0x01	; 1
 7b4:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
 7b6:	df 91       	pop	r29
 7b8:	cf 91       	pop	r28
 7ba:	08 95       	ret

000007bc <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 7bc:	0f 92       	push	r0
 7be:	0f b6       	in	r0, 0x3f	; 63
 7c0:	f8 94       	cli
 7c2:	0f 92       	push	r0
 7c4:	1f 92       	push	r1
 7c6:	11 24       	eor	r1, r1
 7c8:	2f 92       	push	r2
 7ca:	3f 92       	push	r3
 7cc:	4f 92       	push	r4
 7ce:	5f 92       	push	r5
 7d0:	6f 92       	push	r6
 7d2:	7f 92       	push	r7
 7d4:	8f 92       	push	r8
 7d6:	9f 92       	push	r9
 7d8:	af 92       	push	r10
 7da:	bf 92       	push	r11
 7dc:	cf 92       	push	r12
 7de:	df 92       	push	r13
 7e0:	ef 92       	push	r14
 7e2:	ff 92       	push	r15
 7e4:	0f 93       	push	r16
 7e6:	1f 93       	push	r17
 7e8:	2f 93       	push	r18
 7ea:	3f 93       	push	r19
 7ec:	4f 93       	push	r20
 7ee:	5f 93       	push	r21
 7f0:	6f 93       	push	r22
 7f2:	7f 93       	push	r23
 7f4:	8f 93       	push	r24
 7f6:	9f 93       	push	r25
 7f8:	af 93       	push	r26
 7fa:	bf 93       	push	r27
 7fc:	cf 93       	push	r28
 7fe:	df 93       	push	r29
 800:	ef 93       	push	r30
 802:	ff 93       	push	r31
 804:	a0 91 de 00 	lds	r26, 0x00DE	; 0x8000de <pxCurrentTCB>
 808:	b0 91 df 00 	lds	r27, 0x00DF	; 0x8000df <pxCurrentTCB+0x1>
 80c:	0d b6       	in	r0, 0x3d	; 61
 80e:	0d 92       	st	X+, r0
 810:	0e b6       	in	r0, 0x3e	; 62
 812:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
 814:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <xTaskIncrementTick>
 818:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
 81a:	0e 94 19 05 	call	0xa32	; 0xa32 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
 81e:	a0 91 de 00 	lds	r26, 0x00DE	; 0x8000de <pxCurrentTCB>
 822:	b0 91 df 00 	lds	r27, 0x00DF	; 0x8000df <pxCurrentTCB+0x1>
 826:	cd 91       	ld	r28, X+
 828:	cd bf       	out	0x3d, r28	; 61
 82a:	dd 91       	ld	r29, X+
 82c:	de bf       	out	0x3e, r29	; 62
 82e:	ff 91       	pop	r31
 830:	ef 91       	pop	r30
 832:	df 91       	pop	r29
 834:	cf 91       	pop	r28
 836:	bf 91       	pop	r27
 838:	af 91       	pop	r26
 83a:	9f 91       	pop	r25
 83c:	8f 91       	pop	r24
 83e:	7f 91       	pop	r23
 840:	6f 91       	pop	r22
 842:	5f 91       	pop	r21
 844:	4f 91       	pop	r20
 846:	3f 91       	pop	r19
 848:	2f 91       	pop	r18
 84a:	1f 91       	pop	r17
 84c:	0f 91       	pop	r16
 84e:	ff 90       	pop	r15
 850:	ef 90       	pop	r14
 852:	df 90       	pop	r13
 854:	cf 90       	pop	r12
 856:	bf 90       	pop	r11
 858:	af 90       	pop	r10
 85a:	9f 90       	pop	r9
 85c:	8f 90       	pop	r8
 85e:	7f 90       	pop	r7
 860:	6f 90       	pop	r6
 862:	5f 90       	pop	r5
 864:	4f 90       	pop	r4
 866:	3f 90       	pop	r3
 868:	2f 90       	pop	r2
 86a:	1f 90       	pop	r1
 86c:	0f 90       	pop	r0
 86e:	0f be       	out	0x3f, r0	; 63
 870:	0f 90       	pop	r0

	asm volatile ( "ret" );
 872:	08 95       	ret

00000874 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
 874:	0e 94 de 03 	call	0x7bc	; 0x7bc <vPortYieldFromTick>
		asm volatile ( "reti" );
 878:	18 95       	reti

0000087a <prvResetNextTaskUnblockTime>:
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
			{
				taskYIELD();
 87a:	e0 91 b8 00 	lds	r30, 0x00B8	; 0x8000b8 <pxDelayedTaskList>
 87e:	f0 91 b9 00 	lds	r31, 0x00B9	; 0x8000b9 <pxDelayedTaskList+0x1>
 882:	80 81       	ld	r24, Z
 884:	81 11       	cpse	r24, r1
 886:	07 c0       	rjmp	.+14     	; 0x896 <prvResetNextTaskUnblockTime+0x1c>
 888:	8f ef       	ldi	r24, 0xFF	; 255
 88a:	9f ef       	ldi	r25, 0xFF	; 255
 88c:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <xNextTaskUnblockTime+0x1>
 890:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <xNextTaskUnblockTime>
 894:	08 95       	ret
 896:	e0 91 b8 00 	lds	r30, 0x00B8	; 0x8000b8 <pxDelayedTaskList>
 89a:	f0 91 b9 00 	lds	r31, 0x00B9	; 0x8000b9 <pxDelayedTaskList+0x1>
 89e:	05 80       	ldd	r0, Z+5	; 0x05
 8a0:	f6 81       	ldd	r31, Z+6	; 0x06
 8a2:	e0 2d       	mov	r30, r0
 8a4:	06 80       	ldd	r0, Z+6	; 0x06
 8a6:	f7 81       	ldd	r31, Z+7	; 0x07
 8a8:	e0 2d       	mov	r30, r0
 8aa:	82 81       	ldd	r24, Z+2	; 0x02
 8ac:	93 81       	ldd	r25, Z+3	; 0x03
 8ae:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <xNextTaskUnblockTime+0x1>
 8b2:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <xNextTaskUnblockTime>
 8b6:	08 95       	ret

000008b8 <xTaskIncrementTick>:
 8b8:	cf 92       	push	r12
 8ba:	df 92       	push	r13
 8bc:	ef 92       	push	r14
 8be:	ff 92       	push	r15
 8c0:	0f 93       	push	r16
 8c2:	1f 93       	push	r17
 8c4:	cf 93       	push	r28
 8c6:	df 93       	push	r29
 8c8:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <uxSchedulerSuspended>
 8cc:	81 11       	cpse	r24, r1
 8ce:	9b c0       	rjmp	.+310    	; 0xa06 <xTaskIncrementTick+0x14e>
 8d0:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <xTickCount>
 8d4:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <xTickCount+0x1>
 8d8:	01 96       	adiw	r24, 0x01	; 1
 8da:	90 93 b5 00 	sts	0x00B5, r25	; 0x8000b5 <xTickCount+0x1>
 8de:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <xTickCount>
 8e2:	e0 90 b4 00 	lds	r14, 0x00B4	; 0x8000b4 <xTickCount>
 8e6:	f0 90 b5 00 	lds	r15, 0x00B5	; 0x8000b5 <xTickCount+0x1>
 8ea:	e1 14       	cp	r14, r1
 8ec:	f1 04       	cpc	r15, r1
 8ee:	b9 f4       	brne	.+46     	; 0x91e <xTaskIncrementTick+0x66>
 8f0:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <pxDelayedTaskList>
 8f4:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <pxDelayedTaskList+0x1>
 8f8:	20 91 b6 00 	lds	r18, 0x00B6	; 0x8000b6 <pxOverflowDelayedTaskList>
 8fc:	30 91 b7 00 	lds	r19, 0x00B7	; 0x8000b7 <pxOverflowDelayedTaskList+0x1>
 900:	30 93 b9 00 	sts	0x00B9, r19	; 0x8000b9 <pxDelayedTaskList+0x1>
 904:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <pxDelayedTaskList>
 908:	90 93 b7 00 	sts	0x00B7, r25	; 0x8000b7 <pxOverflowDelayedTaskList+0x1>
 90c:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <pxOverflowDelayedTaskList>
 910:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <xNumOfOverflows>
 914:	8f 5f       	subi	r24, 0xFF	; 255
 916:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <xNumOfOverflows>
 91a:	0e 94 3d 04 	call	0x87a	; 0x87a <prvResetNextTaskUnblockTime>
 91e:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <xNextTaskUnblockTime>
 922:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <xNextTaskUnblockTime+0x1>
 926:	e8 16       	cp	r14, r24
 928:	f9 06       	cpc	r15, r25
 92a:	10 f4       	brcc	.+4      	; 0x930 <xTaskIncrementTick+0x78>
 92c:	d1 2c       	mov	r13, r1
 92e:	53 c0       	rjmp	.+166    	; 0x9d6 <xTaskIncrementTick+0x11e>
 930:	d1 2c       	mov	r13, r1
 932:	cc 24       	eor	r12, r12
 934:	c3 94       	inc	r12
 936:	e0 91 b8 00 	lds	r30, 0x00B8	; 0x8000b8 <pxDelayedTaskList>
 93a:	f0 91 b9 00 	lds	r31, 0x00B9	; 0x8000b9 <pxDelayedTaskList+0x1>
 93e:	80 81       	ld	r24, Z
 940:	81 11       	cpse	r24, r1
 942:	07 c0       	rjmp	.+14     	; 0x952 <xTaskIncrementTick+0x9a>
 944:	8f ef       	ldi	r24, 0xFF	; 255
 946:	9f ef       	ldi	r25, 0xFF	; 255
 948:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <xNextTaskUnblockTime+0x1>
 94c:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <xNextTaskUnblockTime>
 950:	42 c0       	rjmp	.+132    	; 0x9d6 <xTaskIncrementTick+0x11e>
 952:	e0 91 b8 00 	lds	r30, 0x00B8	; 0x8000b8 <pxDelayedTaskList>
 956:	f0 91 b9 00 	lds	r31, 0x00B9	; 0x8000b9 <pxDelayedTaskList+0x1>
 95a:	05 80       	ldd	r0, Z+5	; 0x05
 95c:	f6 81       	ldd	r31, Z+6	; 0x06
 95e:	e0 2d       	mov	r30, r0
 960:	c6 81       	ldd	r28, Z+6	; 0x06
 962:	d7 81       	ldd	r29, Z+7	; 0x07
 964:	8a 81       	ldd	r24, Y+2	; 0x02
 966:	9b 81       	ldd	r25, Y+3	; 0x03
 968:	e8 16       	cp	r14, r24
 96a:	f9 06       	cpc	r15, r25
 96c:	28 f4       	brcc	.+10     	; 0x978 <xTaskIncrementTick+0xc0>
 96e:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <xNextTaskUnblockTime+0x1>
 972:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <xNextTaskUnblockTime>
 976:	2f c0       	rjmp	.+94     	; 0x9d6 <xTaskIncrementTick+0x11e>
 978:	8e 01       	movw	r16, r28
 97a:	0e 5f       	subi	r16, 0xFE	; 254
 97c:	1f 4f       	sbci	r17, 0xFF	; 255
 97e:	c8 01       	movw	r24, r16
 980:	0e 94 b8 03 	call	0x770	; 0x770 <uxListRemove>
 984:	8c 89       	ldd	r24, Y+20	; 0x14
 986:	9d 89       	ldd	r25, Y+21	; 0x15
 988:	89 2b       	or	r24, r25
 98a:	21 f0       	breq	.+8      	; 0x994 <xTaskIncrementTick+0xdc>
 98c:	ce 01       	movw	r24, r28
 98e:	0c 96       	adiw	r24, 0x0c	; 12
 990:	0e 94 b8 03 	call	0x770	; 0x770 <uxListRemove>
 994:	8e 89       	ldd	r24, Y+22	; 0x16
 996:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <uxTopReadyPriority>
 99a:	98 17       	cp	r25, r24
 99c:	10 f4       	brcc	.+4      	; 0x9a2 <xTaskIncrementTick+0xea>
 99e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <uxTopReadyPriority>
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	9c 01       	movw	r18, r24
 9a6:	22 0f       	add	r18, r18
 9a8:	33 1f       	adc	r19, r19
 9aa:	22 0f       	add	r18, r18
 9ac:	33 1f       	adc	r19, r19
 9ae:	22 0f       	add	r18, r18
 9b0:	33 1f       	adc	r19, r19
 9b2:	82 0f       	add	r24, r18
 9b4:	93 1f       	adc	r25, r19
 9b6:	b8 01       	movw	r22, r16
 9b8:	86 54       	subi	r24, 0x46	; 70
 9ba:	9f 4f       	sbci	r25, 0xFF	; 255
 9bc:	0e 94 97 03 	call	0x72e	; 0x72e <vListInsertEnd>
 9c0:	e0 91 de 00 	lds	r30, 0x00DE	; 0x8000de <pxCurrentTCB>
 9c4:	f0 91 df 00 	lds	r31, 0x00DF	; 0x8000df <pxCurrentTCB+0x1>
 9c8:	9e 89       	ldd	r25, Y+22	; 0x16
 9ca:	86 89       	ldd	r24, Z+22	; 0x16
 9cc:	98 17       	cp	r25, r24
 9ce:	08 f4       	brcc	.+2      	; 0x9d2 <xTaskIncrementTick+0x11a>
 9d0:	b2 cf       	rjmp	.-156    	; 0x936 <xTaskIncrementTick+0x7e>
 9d2:	dc 2c       	mov	r13, r12
 9d4:	b0 cf       	rjmp	.-160    	; 0x936 <xTaskIncrementTick+0x7e>
 9d6:	e0 91 de 00 	lds	r30, 0x00DE	; 0x8000de <pxCurrentTCB>
 9da:	f0 91 df 00 	lds	r31, 0x00DF	; 0x8000df <pxCurrentTCB+0x1>
 9de:	86 89       	ldd	r24, Z+22	; 0x16
 9e0:	90 e0       	ldi	r25, 0x00	; 0
 9e2:	fc 01       	movw	r30, r24
 9e4:	ee 0f       	add	r30, r30
 9e6:	ff 1f       	adc	r31, r31
 9e8:	ee 0f       	add	r30, r30
 9ea:	ff 1f       	adc	r31, r31
 9ec:	ee 0f       	add	r30, r30
 9ee:	ff 1f       	adc	r31, r31
 9f0:	8e 0f       	add	r24, r30
 9f2:	9f 1f       	adc	r25, r31
 9f4:	fc 01       	movw	r30, r24
 9f6:	e6 54       	subi	r30, 0x46	; 70
 9f8:	ff 4f       	sbci	r31, 0xFF	; 255
 9fa:	80 81       	ld	r24, Z
 9fc:	82 30       	cpi	r24, 0x02	; 2
 9fe:	48 f0       	brcs	.+18     	; 0xa12 <xTaskIncrementTick+0x15a>
 a00:	dd 24       	eor	r13, r13
 a02:	d3 94       	inc	r13
 a04:	06 c0       	rjmp	.+12     	; 0xa12 <xTaskIncrementTick+0x15a>
 a06:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <uxPendedTicks>
 a0a:	8f 5f       	subi	r24, 0xFF	; 255
 a0c:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <uxPendedTicks>
 a10:	d1 2c       	mov	r13, r1
 a12:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <xYieldPending>
 a16:	88 23       	and	r24, r24
 a18:	11 f0       	breq	.+4      	; 0xa1e <xTaskIncrementTick+0x166>
 a1a:	dd 24       	eor	r13, r13
 a1c:	d3 94       	inc	r13
 a1e:	8d 2d       	mov	r24, r13
 a20:	df 91       	pop	r29
 a22:	cf 91       	pop	r28
 a24:	1f 91       	pop	r17
 a26:	0f 91       	pop	r16
 a28:	ff 90       	pop	r15
 a2a:	ef 90       	pop	r14
 a2c:	df 90       	pop	r13
 a2e:	cf 90       	pop	r12
 a30:	08 95       	ret

00000a32 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 a32:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <uxSchedulerSuspended>
 a36:	88 23       	and	r24, r24
 a38:	21 f0       	breq	.+8      	; 0xa42 <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 a3a:	81 e0       	ldi	r24, 0x01	; 1
 a3c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <xYieldPending>
 a40:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
 a42:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <xYieldPending>
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 a46:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <uxTopReadyPriority>
 a4a:	90 e0       	ldi	r25, 0x00	; 0
 a4c:	fc 01       	movw	r30, r24
 a4e:	ee 0f       	add	r30, r30
 a50:	ff 1f       	adc	r31, r31
 a52:	ee 0f       	add	r30, r30
 a54:	ff 1f       	adc	r31, r31
 a56:	ee 0f       	add	r30, r30
 a58:	ff 1f       	adc	r31, r31
 a5a:	8e 0f       	add	r24, r30
 a5c:	9f 1f       	adc	r25, r31
 a5e:	fc 01       	movw	r30, r24
 a60:	e6 54       	subi	r30, 0x46	; 70
 a62:	ff 4f       	sbci	r31, 0xFF	; 255
 a64:	80 81       	ld	r24, Z
 a66:	81 11       	cpse	r24, r1
 a68:	17 c0       	rjmp	.+46     	; 0xa98 <vTaskSwitchContext+0x66>
 a6a:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <uxTopReadyPriority>
 a6e:	81 50       	subi	r24, 0x01	; 1
 a70:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <uxTopReadyPriority>
 a74:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <uxTopReadyPriority>
 a78:	90 e0       	ldi	r25, 0x00	; 0
 a7a:	fc 01       	movw	r30, r24
 a7c:	ee 0f       	add	r30, r30
 a7e:	ff 1f       	adc	r31, r31
 a80:	ee 0f       	add	r30, r30
 a82:	ff 1f       	adc	r31, r31
 a84:	ee 0f       	add	r30, r30
 a86:	ff 1f       	adc	r31, r31
 a88:	8e 0f       	add	r24, r30
 a8a:	9f 1f       	adc	r25, r31
 a8c:	fc 01       	movw	r30, r24
 a8e:	e6 54       	subi	r30, 0x46	; 70
 a90:	ff 4f       	sbci	r31, 0xFF	; 255
 a92:	80 81       	ld	r24, Z
 a94:	88 23       	and	r24, r24
 a96:	49 f3       	breq	.-46     	; 0xa6a <vTaskSwitchContext+0x38>
 a98:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <uxTopReadyPriority>
 a9c:	90 e0       	ldi	r25, 0x00	; 0
 a9e:	9c 01       	movw	r18, r24
 aa0:	22 0f       	add	r18, r18
 aa2:	33 1f       	adc	r19, r19
 aa4:	22 0f       	add	r18, r18
 aa6:	33 1f       	adc	r19, r19
 aa8:	22 0f       	add	r18, r18
 aaa:	33 1f       	adc	r19, r19
 aac:	28 0f       	add	r18, r24
 aae:	39 1f       	adc	r19, r25
 ab0:	d9 01       	movw	r26, r18
 ab2:	a6 54       	subi	r26, 0x46	; 70
 ab4:	bf 4f       	sbci	r27, 0xFF	; 255
 ab6:	11 96       	adiw	r26, 0x01	; 1
 ab8:	ed 91       	ld	r30, X+
 aba:	fc 91       	ld	r31, X
 abc:	12 97       	sbiw	r26, 0x02	; 2
 abe:	02 80       	ldd	r0, Z+2	; 0x02
 ac0:	f3 81       	ldd	r31, Z+3	; 0x03
 ac2:	e0 2d       	mov	r30, r0
 ac4:	12 96       	adiw	r26, 0x02	; 2
 ac6:	fc 93       	st	X, r31
 ac8:	ee 93       	st	-X, r30
 aca:	11 97       	sbiw	r26, 0x01	; 1
 acc:	23 54       	subi	r18, 0x43	; 67
 ace:	3f 4f       	sbci	r19, 0xFF	; 255
 ad0:	e2 17       	cp	r30, r18
 ad2:	f3 07       	cpc	r31, r19
 ad4:	29 f4       	brne	.+10     	; 0xae0 <vTaskSwitchContext+0xae>
 ad6:	22 81       	ldd	r18, Z+2	; 0x02
 ad8:	33 81       	ldd	r19, Z+3	; 0x03
 ada:	fd 01       	movw	r30, r26
 adc:	32 83       	std	Z+2, r19	; 0x02
 ade:	21 83       	std	Z+1, r18	; 0x01
 ae0:	fc 01       	movw	r30, r24
 ae2:	ee 0f       	add	r30, r30
 ae4:	ff 1f       	adc	r31, r31
 ae6:	ee 0f       	add	r30, r30
 ae8:	ff 1f       	adc	r31, r31
 aea:	ee 0f       	add	r30, r30
 aec:	ff 1f       	adc	r31, r31
 aee:	8e 0f       	add	r24, r30
 af0:	9f 1f       	adc	r25, r31
 af2:	fc 01       	movw	r30, r24
 af4:	e6 54       	subi	r30, 0x46	; 70
 af6:	ff 4f       	sbci	r31, 0xFF	; 255
 af8:	01 80       	ldd	r0, Z+1	; 0x01
 afa:	f2 81       	ldd	r31, Z+2	; 0x02
 afc:	e0 2d       	mov	r30, r0
 afe:	86 81       	ldd	r24, Z+6	; 0x06
 b00:	97 81       	ldd	r25, Z+7	; 0x07
 b02:	90 93 df 00 	sts	0x00DF, r25	; 0x8000df <pxCurrentTCB+0x1>
 b06:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <pxCurrentTCB>
 b0a:	08 95       	ret

00000b0c <__divmodhi4>:
 b0c:	97 fb       	bst	r25, 7
 b0e:	07 2e       	mov	r0, r23
 b10:	16 f4       	brtc	.+4      	; 0xb16 <__divmodhi4+0xa>
 b12:	00 94       	com	r0
 b14:	07 d0       	rcall	.+14     	; 0xb24 <__divmodhi4_neg1>
 b16:	77 fd       	sbrc	r23, 7
 b18:	09 d0       	rcall	.+18     	; 0xb2c <__divmodhi4_neg2>
 b1a:	0e 94 af 05 	call	0xb5e	; 0xb5e <__udivmodhi4>
 b1e:	07 fc       	sbrc	r0, 7
 b20:	05 d0       	rcall	.+10     	; 0xb2c <__divmodhi4_neg2>
 b22:	3e f4       	brtc	.+14     	; 0xb32 <__divmodhi4_exit>

00000b24 <__divmodhi4_neg1>:
 b24:	90 95       	com	r25
 b26:	81 95       	neg	r24
 b28:	9f 4f       	sbci	r25, 0xFF	; 255
 b2a:	08 95       	ret

00000b2c <__divmodhi4_neg2>:
 b2c:	70 95       	com	r23
 b2e:	61 95       	neg	r22
 b30:	7f 4f       	sbci	r23, 0xFF	; 255

00000b32 <__divmodhi4_exit>:
 b32:	08 95       	ret

00000b34 <__adddi3_s8>:
 b34:	00 24       	eor	r0, r0
 b36:	a7 fd       	sbrc	r26, 7
 b38:	00 94       	com	r0
 b3a:	2a 0f       	add	r18, r26
 b3c:	30 1d       	adc	r19, r0
 b3e:	40 1d       	adc	r20, r0
 b40:	50 1d       	adc	r21, r0
 b42:	60 1d       	adc	r22, r0
 b44:	70 1d       	adc	r23, r0
 b46:	80 1d       	adc	r24, r0
 b48:	90 1d       	adc	r25, r0
 b4a:	08 95       	ret

00000b4c <__cmpdi2>:
 b4c:	2a 15       	cp	r18, r10
 b4e:	3b 05       	cpc	r19, r11
 b50:	4c 05       	cpc	r20, r12
 b52:	5d 05       	cpc	r21, r13
 b54:	6e 05       	cpc	r22, r14
 b56:	7f 05       	cpc	r23, r15
 b58:	80 07       	cpc	r24, r16
 b5a:	91 07       	cpc	r25, r17
 b5c:	08 95       	ret

00000b5e <__udivmodhi4>:
 b5e:	aa 1b       	sub	r26, r26
 b60:	bb 1b       	sub	r27, r27
 b62:	51 e1       	ldi	r21, 0x11	; 17
 b64:	07 c0       	rjmp	.+14     	; 0xb74 <__udivmodhi4_ep>

00000b66 <__udivmodhi4_loop>:
 b66:	aa 1f       	adc	r26, r26
 b68:	bb 1f       	adc	r27, r27
 b6a:	a6 17       	cp	r26, r22
 b6c:	b7 07       	cpc	r27, r23
 b6e:	10 f0       	brcs	.+4      	; 0xb74 <__udivmodhi4_ep>
 b70:	a6 1b       	sub	r26, r22
 b72:	b7 0b       	sbc	r27, r23

00000b74 <__udivmodhi4_ep>:
 b74:	88 1f       	adc	r24, r24
 b76:	99 1f       	adc	r25, r25
 b78:	5a 95       	dec	r21
 b7a:	a9 f7       	brne	.-22     	; 0xb66 <__udivmodhi4_loop>
 b7c:	80 95       	com	r24
 b7e:	90 95       	com	r25
 b80:	bc 01       	movw	r22, r24
 b82:	cd 01       	movw	r24, r26
 b84:	08 95       	ret

00000b86 <_exit>:
 b86:	f8 94       	cli

00000b88 <__stop_program>:
 b88:	ff cf       	rjmp	.-2      	; 0xb88 <__stop_program>
