
ATmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001182  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00001182  00001216  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000077  00800074  00800074  0000122a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000122a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000125c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003a0  00000000  00000000  00001298  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000418d  00000000  00000000  00001638  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013bd  00000000  00000000  000057c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002649  00000000  00000000  00006b82  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c4c  00000000  00000000  000091cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001c9c  00000000  00000000  00009e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000037cf  00000000  00000000  0000bab4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000350  00000000  00000000  0000f283  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 cb 00 	jmp	0x196	; 0x196 <__vector_1>
       8:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__vector_2>
       c:	0c 94 2b 01 	jmp	0x256	; 0x256 <__vector_3>
      10:	0c 94 3c 03 	jmp	0x678	; 0x678 <__vector_4>
      14:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 04 03 	jmp	0x608	; 0x608 <__vector_10>
      2c:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 58 04 	jmp	0x8b0	; 0x8b0 <__vector_13>
      38:	0c 94 1a 04 	jmp	0x834	; 0x834 <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e8       	ldi	r30, 0x82	; 130
      68:	f1 e1       	ldi	r31, 0x11	; 17
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 3e       	cpi	r26, 0xEB	; 235
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 92 00 	call	0x124	; 0x124 <main>
      8a:	0c 94 bf 08 	jmp	0x117e	; 0x117e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <SPI_UART>:

_S void clean_arr (uint8_t* arr);


void SPI_UART(void)
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	cf 5f       	subi	r28, 0xFF	; 255
      9c:	d1 09       	sbc	r29, r1
      9e:	0f b6       	in	r0, 0x3f	; 63
      a0:	f8 94       	cli
      a2:	de bf       	out	0x3e, r29	; 62
      a4:	0f be       	out	0x3f, r0	; 63
      a6:	cd bf       	out	0x3d, r28	; 61
	uint8_t arr [MAX_SIZE_CONSTRAIN] = {0};
      a8:	fe 01       	movw	r30, r28
      aa:	31 96       	adiw	r30, 0x01	; 1
      ac:	8f ef       	ldi	r24, 0xFF	; 255
      ae:	df 01       	movw	r26, r30
      b0:	1d 92       	st	X+, r1
      b2:	8a 95       	dec	r24
      b4:	e9 f7       	brne	.-6      	; 0xb0 <SPI_UART+0x1e>
	SPI_Init(SPI_EN_Slave);
      b6:	80 e0       	ldi	r24, 0x00	; 0
      b8:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <SPI_Init>
	Uart_init(9600);
      bc:	60 e8       	ldi	r22, 0x80	; 128
      be:	75 e2       	ldi	r23, 0x25	; 37
      c0:	80 e0       	ldi	r24, 0x00	; 0
      c2:	90 e0       	ldi	r25, 0x00	; 0
      c4:	0e 94 66 03 	call	0x6cc	; 0x6cc <Uart_init>
	sei();
      c8:	78 94       	sei
	while(1)
	{
		SPI_RecieveString(arr, '\0');
      ca:	8e 01       	movw	r16, r28
      cc:	0f 5f       	subi	r16, 0xFF	; 255
      ce:	1f 4f       	sbci	r17, 0xFF	; 255
      d0:	60 e0       	ldi	r22, 0x00	; 0
      d2:	c8 01       	movw	r24, r16
      d4:	0e 94 7f 01 	call	0x2fe	; 0x2fe <SPI_RecieveString>
		Uart_SendStringPooling(arr);
      d8:	c8 01       	movw	r24, r16
      da:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <Uart_SendStringPooling>
		Uart_SendPooling('\r');
      de:	8d e0       	ldi	r24, 0x0D	; 13
      e0:	0e 94 b4 03 	call	0x768	; 0x768 <Uart_SendPooling>
		Delay_Ms(100);
      e4:	24 e6       	ldi	r18, 0x64	; 100
      e6:	30 e0       	ldi	r19, 0x00	; 0
      e8:	40 e0       	ldi	r20, 0x00	; 0
      ea:	50 e0       	ldi	r21, 0x00	; 0
      ec:	60 e0       	ldi	r22, 0x00	; 0
      ee:	70 e0       	ldi	r23, 0x00	; 0
      f0:	80 e0       	ldi	r24, 0x00	; 0
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	0e 94 97 00 	call	0x12e	; 0x12e <Delay_Ms>
	}
}
_S void clean_arr (uint8_t* arr)
{
	uint8_t index = 0;
	uint8_t size = strlen(arr);
      f8:	f8 01       	movw	r30, r16
      fa:	01 90       	ld	r0, Z+
      fc:	00 20       	and	r0, r0
      fe:	e9 f7       	brne	.-6      	; 0xfa <SPI_UART+0x68>
     100:	31 97       	sbiw	r30, 0x01	; 1
     102:	cf 01       	movw	r24, r30
     104:	80 1b       	sub	r24, r16
     106:	91 0b       	sbc	r25, r17
	for(index = 0; index < size; index++)
     108:	88 23       	and	r24, r24
     10a:	11 f3       	breq	.-60     	; 0xd0 <SPI_UART+0x3e>
     10c:	fe 01       	movw	r30, r28
     10e:	31 96       	adiw	r30, 0x01	; 1
     110:	81 50       	subi	r24, 0x01	; 1
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	01 96       	adiw	r24, 0x01	; 1
     116:	8e 0f       	add	r24, r30
     118:	9f 1f       	adc	r25, r31
	{
		arr [index] = 0;
     11a:	11 92       	st	Z+, r1
}
_S void clean_arr (uint8_t* arr)
{
	uint8_t index = 0;
	uint8_t size = strlen(arr);
	for(index = 0; index < size; index++)
     11c:	e8 17       	cp	r30, r24
     11e:	f9 07       	cpc	r31, r25
     120:	e1 f7       	brne	.-8      	; 0x11a <SPI_UART+0x88>
     122:	d6 cf       	rjmp	.-84     	; 0xd0 <SPI_UART+0x3e>

00000124 <main>:
int main(void)
{
#if (Running_Task == Task_SPI_Driver)
	SPI_Driver();
#elif (Running_Task == Task_SPI_UART)
	SPI_UART();
     124:	0e 94 49 00 	call	0x92	; 0x92 <SPI_UART>
#elif (Running_Task == Task_I2C_Driver)
	I2C_Driver();
#elif (Running_Task == Task_IDLE)
	IDLE();
#endif /* Task */
     128:	80 e0       	ldi	r24, 0x00	; 0
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	08 95       	ret

0000012e <Delay_Ms>:
     12e:	ff 92       	push	r15
     130:	0f 93       	push	r16
     132:	1f 93       	push	r17
     134:	cf 93       	push	r28
     136:	df 93       	push	r29
     138:	f2 2e       	mov	r15, r18
     13a:	03 2f       	mov	r16, r19
     13c:	14 2f       	mov	r17, r20
     13e:	d5 2f       	mov	r29, r21
     140:	c6 2f       	mov	r28, r22
     142:	b7 2f       	mov	r27, r23
     144:	f8 2f       	mov	r31, r24
     146:	e9 2f       	mov	r30, r25
     148:	a0 e0       	ldi	r26, 0x00	; 0
     14a:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <__cmpdi2_s8>
     14e:	e9 f0       	breq	.+58     	; 0x18a <Delay_Ms+0x5c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     150:	8f ec       	ldi	r24, 0xCF	; 207
     152:	97 e0       	ldi	r25, 0x07	; 7
     154:	01 97       	sbiw	r24, 0x01	; 1
     156:	f1 f7       	brne	.-4      	; 0x154 <Delay_Ms+0x26>
     158:	00 c0       	rjmp	.+0      	; 0x15a <Delay_Ms+0x2c>
     15a:	00 00       	nop
     15c:	2f 2d       	mov	r18, r15
     15e:	30 2f       	mov	r19, r16
     160:	41 2f       	mov	r20, r17
     162:	5d 2f       	mov	r21, r29
     164:	6c 2f       	mov	r22, r28
     166:	7b 2f       	mov	r23, r27
     168:	8f 2f       	mov	r24, r31
     16a:	9e 2f       	mov	r25, r30
     16c:	af ef       	ldi	r26, 0xFF	; 255
     16e:	0e 94 46 07 	call	0xe8c	; 0xe8c <__adddi3_s8>
     172:	f2 2e       	mov	r15, r18
     174:	03 2f       	mov	r16, r19
     176:	14 2f       	mov	r17, r20
     178:	d5 2f       	mov	r29, r21
     17a:	c6 2f       	mov	r28, r22
     17c:	b7 2f       	mov	r27, r23
     17e:	f8 2f       	mov	r31, r24
     180:	e9 2f       	mov	r30, r25
     182:	a0 e0       	ldi	r26, 0x00	; 0
     184:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <__cmpdi2_s8>
     188:	19 f7       	brne	.-58     	; 0x150 <Delay_Ms+0x22>
     18a:	df 91       	pop	r29
     18c:	cf 91       	pop	r28
     18e:	1f 91       	pop	r17
     190:	0f 91       	pop	r16
     192:	ff 90       	pop	r15
     194:	08 95       	ret

00000196 <__vector_1>:
     196:	1f 92       	push	r1
     198:	0f 92       	push	r0
     19a:	0f b6       	in	r0, 0x3f	; 63
     19c:	0f 92       	push	r0
     19e:	11 24       	eor	r1, r1
     1a0:	2f 93       	push	r18
     1a2:	3f 93       	push	r19
     1a4:	4f 93       	push	r20
     1a6:	5f 93       	push	r21
     1a8:	6f 93       	push	r22
     1aa:	7f 93       	push	r23
     1ac:	8f 93       	push	r24
     1ae:	9f 93       	push	r25
     1b0:	af 93       	push	r26
     1b2:	bf 93       	push	r27
     1b4:	ef 93       	push	r30
     1b6:	ff 93       	push	r31
     1b8:	8a b7       	in	r24, 0x3a	; 58
     1ba:	80 64       	ori	r24, 0x40	; 64
     1bc:	8a bf       	out	0x3a, r24	; 58
     1be:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
     1c2:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <__data_end+0x1>
     1c6:	89 2b       	or	r24, r25
     1c8:	29 f0       	breq	.+10     	; 0x1d4 <__vector_1+0x3e>
     1ca:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <__data_end>
     1ce:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <__data_end+0x1>
     1d2:	09 95       	icall
     1d4:	ff 91       	pop	r31
     1d6:	ef 91       	pop	r30
     1d8:	bf 91       	pop	r27
     1da:	af 91       	pop	r26
     1dc:	9f 91       	pop	r25
     1de:	8f 91       	pop	r24
     1e0:	7f 91       	pop	r23
     1e2:	6f 91       	pop	r22
     1e4:	5f 91       	pop	r21
     1e6:	4f 91       	pop	r20
     1e8:	3f 91       	pop	r19
     1ea:	2f 91       	pop	r18
     1ec:	0f 90       	pop	r0
     1ee:	0f be       	out	0x3f, r0	; 63
     1f0:	0f 90       	pop	r0
     1f2:	1f 90       	pop	r1
     1f4:	18 95       	reti

000001f6 <__vector_2>:
     1f6:	1f 92       	push	r1
     1f8:	0f 92       	push	r0
     1fa:	0f b6       	in	r0, 0x3f	; 63
     1fc:	0f 92       	push	r0
     1fe:	11 24       	eor	r1, r1
     200:	2f 93       	push	r18
     202:	3f 93       	push	r19
     204:	4f 93       	push	r20
     206:	5f 93       	push	r21
     208:	6f 93       	push	r22
     20a:	7f 93       	push	r23
     20c:	8f 93       	push	r24
     20e:	9f 93       	push	r25
     210:	af 93       	push	r26
     212:	bf 93       	push	r27
     214:	ef 93       	push	r30
     216:	ff 93       	push	r31
     218:	8a b7       	in	r24, 0x3a	; 58
     21a:	80 68       	ori	r24, 0x80	; 128
     21c:	8a bf       	out	0x3a, r24	; 58
     21e:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end+0x2>
     222:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <__data_end+0x3>
     226:	89 2b       	or	r24, r25
     228:	29 f0       	breq	.+10     	; 0x234 <__vector_2+0x3e>
     22a:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <__data_end+0x2>
     22e:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <__data_end+0x3>
     232:	09 95       	icall
     234:	ff 91       	pop	r31
     236:	ef 91       	pop	r30
     238:	bf 91       	pop	r27
     23a:	af 91       	pop	r26
     23c:	9f 91       	pop	r25
     23e:	8f 91       	pop	r24
     240:	7f 91       	pop	r23
     242:	6f 91       	pop	r22
     244:	5f 91       	pop	r21
     246:	4f 91       	pop	r20
     248:	3f 91       	pop	r19
     24a:	2f 91       	pop	r18
     24c:	0f 90       	pop	r0
     24e:	0f be       	out	0x3f, r0	; 63
     250:	0f 90       	pop	r0
     252:	1f 90       	pop	r1
     254:	18 95       	reti

00000256 <__vector_3>:
     256:	1f 92       	push	r1
     258:	0f 92       	push	r0
     25a:	0f b6       	in	r0, 0x3f	; 63
     25c:	0f 92       	push	r0
     25e:	11 24       	eor	r1, r1
     260:	2f 93       	push	r18
     262:	3f 93       	push	r19
     264:	4f 93       	push	r20
     266:	5f 93       	push	r21
     268:	6f 93       	push	r22
     26a:	7f 93       	push	r23
     26c:	8f 93       	push	r24
     26e:	9f 93       	push	r25
     270:	af 93       	push	r26
     272:	bf 93       	push	r27
     274:	ef 93       	push	r30
     276:	ff 93       	push	r31
     278:	8a b7       	in	r24, 0x3a	; 58
     27a:	80 62       	ori	r24, 0x20	; 32
     27c:	8a bf       	out	0x3a, r24	; 58
     27e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end+0x4>
     282:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__data_end+0x5>
     286:	89 2b       	or	r24, r25
     288:	29 f0       	breq	.+10     	; 0x294 <__vector_3+0x3e>
     28a:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <__data_end+0x4>
     28e:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <__data_end+0x5>
     292:	09 95       	icall
     294:	ff 91       	pop	r31
     296:	ef 91       	pop	r30
     298:	bf 91       	pop	r27
     29a:	af 91       	pop	r26
     29c:	9f 91       	pop	r25
     29e:	8f 91       	pop	r24
     2a0:	7f 91       	pop	r23
     2a2:	6f 91       	pop	r22
     2a4:	5f 91       	pop	r21
     2a6:	4f 91       	pop	r20
     2a8:	3f 91       	pop	r19
     2aa:	2f 91       	pop	r18
     2ac:	0f 90       	pop	r0
     2ae:	0f be       	out	0x3f, r0	; 63
     2b0:	0f 90       	pop	r0
     2b2:	1f 90       	pop	r1
     2b4:	18 95       	reti

000002b6 <SPI_Init>:
	else
	{
		return_value = SPI_EN_InvalidPointer;
	}
	return return_value;
}
     2b6:	98 2f       	mov	r25, r24
     2b8:	91 70       	andi	r25, 0x01	; 1
     2ba:	90 fd       	sbrc	r25, 0
     2bc:	bf 9a       	sbi	0x17, 7	; 23
     2be:	90 ff       	sbrs	r25, 0
     2c0:	bf 98       	cbi	0x17, 7	; 23
     2c2:	8f 5f       	subi	r24, 0xFF	; 255
     2c4:	80 fd       	sbrc	r24, 0
     2c6:	be 9a       	sbi	0x17, 6	; 23
     2c8:	80 ff       	sbrs	r24, 0
     2ca:	be 98       	cbi	0x17, 6	; 23
     2cc:	90 fd       	sbrc	r25, 0
     2ce:	bd 9a       	sbi	0x17, 5	; 23
     2d0:	90 ff       	sbrs	r25, 0
     2d2:	bd 98       	cbi	0x17, 5	; 23
     2d4:	90 fd       	sbrc	r25, 0
     2d6:	bc 9a       	sbi	0x17, 4	; 23
     2d8:	90 ff       	sbrs	r25, 0
     2da:	bc 98       	cbi	0x17, 4	; 23
     2dc:	8d b1       	in	r24, 0x0d	; 13
     2de:	8c 7f       	andi	r24, 0xFC	; 252
     2e0:	8d b9       	out	0x0d, r24	; 13
     2e2:	70 98       	cbi	0x0e, 0	; 14
     2e4:	6d 98       	cbi	0x0d, 5	; 13
     2e6:	6a 98       	cbi	0x0d, 2	; 13
     2e8:	6b 98       	cbi	0x0d, 3	; 13
     2ea:	90 fd       	sbrc	r25, 0
     2ec:	6c 9a       	sbi	0x0d, 4	; 13
     2ee:	90 ff       	sbrs	r25, 0
     2f0:	6c 98       	cbi	0x0d, 4	; 13
     2f2:	6e 9a       	sbi	0x0d, 6	; 13
     2f4:	08 95       	ret

000002f6 <SPI_Receive>:
     2f6:	77 9b       	sbis	0x0e, 7	; 14
     2f8:	fe cf       	rjmp	.-4      	; 0x2f6 <SPI_Receive>
     2fa:	8f b1       	in	r24, 0x0f	; 15
     2fc:	08 95       	ret

000002fe <SPI_RecieveString>:
SPI_Error_t	   SPI_RecieveString		(uint8_t* Data, uint8_t term)
{
     2fe:	1f 93       	push	r17
     300:	cf 93       	push	r28
     302:	df 93       	push	r29
	SPI_Error_t return_value = SPI_EN_valid;
	uint32_t index   = 0;
	if(Data != NULL)
     304:	00 97       	sbiw	r24, 0x00	; 0
     306:	49 f0       	breq	.+18     	; 0x31a <SPI_RecieveString+0x1c>
     308:	16 2f       	mov	r17, r22
     30a:	ec 01       	movw	r28, r24
	{
		for(index = 0; ; index++)
		{
			Data[index] = SPI_Receive();
     30c:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <SPI_Receive>
     310:	89 93       	st	Y+, r24
			if(Data[index] == term)
     312:	81 13       	cpse	r24, r17
     314:	fb cf       	rjmp	.-10     	; 0x30c <SPI_RecieveString+0xe>
	}
	return return_value;
}
SPI_Error_t	   SPI_RecieveString		(uint8_t* Data, uint8_t term)
{
	SPI_Error_t return_value = SPI_EN_valid;
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	01 c0       	rjmp	.+2      	; 0x31c <SPI_RecieveString+0x1e>
			}
		}
	}
	else
	{
		return_value = SPI_EN_InvalidPointer;
     31a:	81 e0       	ldi	r24, 0x01	; 1
	}
	return return_value;
     31c:	df 91       	pop	r29
     31e:	cf 91       	pop	r28
     320:	1f 91       	pop	r17
     322:	08 95       	ret

00000324 <Timer_ResetCounter>:
     324:	81 11       	cpse	r24, r1
     326:	0c c0       	rjmp	.+24     	; 0x340 <Timer_ResetCounter+0x1c>
     328:	ee e9       	ldi	r30, 0x9E	; 158
     32a:	f0 e0       	ldi	r31, 0x00	; 0
     32c:	10 82       	st	Z, r1
     32e:	11 82       	std	Z+1, r1	; 0x01
     330:	12 82       	std	Z+2, r1	; 0x02
     332:	13 82       	std	Z+3, r1	; 0x03
     334:	14 82       	std	Z+4, r1	; 0x04
     336:	15 82       	std	Z+5, r1	; 0x05
     338:	16 82       	std	Z+6, r1	; 0x06
     33a:	17 82       	std	Z+7, r1	; 0x07
     33c:	12 be       	out	0x32, r1	; 50
     33e:	08 95       	ret
     340:	81 30       	cpi	r24, 0x01	; 1
     342:	59 f4       	brne	.+22     	; 0x35a <Timer_ResetCounter+0x36>
     344:	ee e9       	ldi	r30, 0x9E	; 158
     346:	f0 e0       	ldi	r31, 0x00	; 0
     348:	10 86       	std	Z+8, r1	; 0x08
     34a:	11 86       	std	Z+9, r1	; 0x09
     34c:	12 86       	std	Z+10, r1	; 0x0a
     34e:	13 86       	std	Z+11, r1	; 0x0b
     350:	14 86       	std	Z+12, r1	; 0x0c
     352:	15 86       	std	Z+13, r1	; 0x0d
     354:	16 86       	std	Z+14, r1	; 0x0e
     356:	17 86       	std	Z+15, r1	; 0x0f
     358:	14 bc       	out	0x24, r1	; 36
     35a:	08 95       	ret

0000035c <__vector_11>:
     35c:	1f 92       	push	r1
     35e:	0f 92       	push	r0
     360:	0f b6       	in	r0, 0x3f	; 63
     362:	0f 92       	push	r0
     364:	11 24       	eor	r1, r1
     366:	af 92       	push	r10
     368:	bf 92       	push	r11
     36a:	cf 92       	push	r12
     36c:	df 92       	push	r13
     36e:	ef 92       	push	r14
     370:	ff 92       	push	r15
     372:	0f 93       	push	r16
     374:	1f 93       	push	r17
     376:	2f 93       	push	r18
     378:	3f 93       	push	r19
     37a:	4f 93       	push	r20
     37c:	5f 93       	push	r21
     37e:	6f 93       	push	r22
     380:	7f 93       	push	r23
     382:	8f 93       	push	r24
     384:	9f 93       	push	r25
     386:	af 93       	push	r26
     388:	bf 93       	push	r27
     38a:	cf 93       	push	r28
     38c:	df 93       	push	r29
     38e:	ef 93       	push	r30
     390:	ff 93       	push	r31
     392:	88 b7       	in	r24, 0x38	; 56
     394:	81 60       	ori	r24, 0x01	; 1
     396:	88 bf       	out	0x38, r24	; 56
     398:	ce e9       	ldi	r28, 0x9E	; 158
     39a:	d0 e0       	ldi	r29, 0x00	; 0
     39c:	28 81       	ld	r18, Y
     39e:	39 81       	ldd	r19, Y+1	; 0x01
     3a0:	4a 81       	ldd	r20, Y+2	; 0x02
     3a2:	5b 81       	ldd	r21, Y+3	; 0x03
     3a4:	6c 81       	ldd	r22, Y+4	; 0x04
     3a6:	7d 81       	ldd	r23, Y+5	; 0x05
     3a8:	8e 81       	ldd	r24, Y+6	; 0x06
     3aa:	9f 81       	ldd	r25, Y+7	; 0x07
     3ac:	a1 e0       	ldi	r26, 0x01	; 1
     3ae:	0e 94 46 07 	call	0xe8c	; 0xe8c <__adddi3_s8>
     3b2:	28 83       	st	Y, r18
     3b4:	39 83       	std	Y+1, r19	; 0x01
     3b6:	4a 83       	std	Y+2, r20	; 0x02
     3b8:	5b 83       	std	Y+3, r21	; 0x03
     3ba:	6c 83       	std	Y+4, r22	; 0x04
     3bc:	7d 83       	std	Y+5, r23	; 0x05
     3be:	8e 83       	std	Y+6, r24	; 0x06
     3c0:	9f 83       	std	Y+7, r25	; 0x07
     3c2:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <PWMAction>
     3c6:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <PWMAction+0x1>
     3ca:	09 95       	icall
     3cc:	28 81       	ld	r18, Y
     3ce:	39 81       	ldd	r19, Y+1	; 0x01
     3d0:	4a 81       	ldd	r20, Y+2	; 0x02
     3d2:	5b 81       	ldd	r21, Y+3	; 0x03
     3d4:	6c 81       	ldd	r22, Y+4	; 0x04
     3d6:	7d 81       	ldd	r23, Y+5	; 0x05
     3d8:	8e 81       	ldd	r24, Y+6	; 0x06
     3da:	9f 81       	ldd	r25, Y+7	; 0x07
     3dc:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <Cycle>
     3e0:	f0 e0       	ldi	r31, 0x00	; 0
     3e2:	ee 0f       	add	r30, r30
     3e4:	ff 1f       	adc	r31, r31
     3e6:	ee 0f       	add	r30, r30
     3e8:	ff 1f       	adc	r31, r31
     3ea:	ee 0f       	add	r30, r30
     3ec:	ff 1f       	adc	r31, r31
     3ee:	e2 58       	subi	r30, 0x82	; 130
     3f0:	ff 4f       	sbci	r31, 0xFF	; 255
     3f2:	a0 80       	ld	r10, Z
     3f4:	b1 80       	ldd	r11, Z+1	; 0x01
     3f6:	c2 80       	ldd	r12, Z+2	; 0x02
     3f8:	d3 80       	ldd	r13, Z+3	; 0x03
     3fa:	e4 80       	ldd	r14, Z+4	; 0x04
     3fc:	f5 80       	ldd	r15, Z+5	; 0x05
     3fe:	06 81       	ldd	r16, Z+6	; 0x06
     400:	17 81       	ldd	r17, Z+7	; 0x07
     402:	0e 94 52 07 	call	0xea4	; 0xea4 <__cmpdi2>
     406:	d1 f5       	brne	.+116    	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
     408:	18 82       	st	Y, r1
     40a:	19 82       	std	Y+1, r1	; 0x01
     40c:	1a 82       	std	Y+2, r1	; 0x02
     40e:	1b 82       	std	Y+3, r1	; 0x03
     410:	1c 82       	std	Y+4, r1	; 0x04
     412:	1d 82       	std	Y+5, r1	; 0x05
     414:	1e 82       	std	Y+6, r1	; 0x06
     416:	1f 82       	std	Y+7, r1	; 0x07
     418:	e0 91 ae 00 	lds	r30, 0x00AE	; 0x8000ae <NotifierAction>
     41c:	f0 91 af 00 	lds	r31, 0x00AF	; 0x8000af <NotifierAction+0x1>
     420:	09 95       	icall
     422:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Cycle>
     426:	81 11       	cpse	r24, r1
     428:	13 c0       	rjmp	.+38     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
     42a:	81 e0       	ldi	r24, 0x01	; 1
     42c:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <Cycle>
     430:	ee e7       	ldi	r30, 0x7E	; 126
     432:	f0 e0       	ldi	r31, 0x00	; 0
     434:	90 85       	ldd	r25, Z+8	; 0x08
     436:	21 85       	ldd	r18, Z+9	; 0x09
     438:	22 85       	ldd	r18, Z+10	; 0x0a
     43a:	23 85       	ldd	r18, Z+11	; 0x0b
     43c:	24 85       	ldd	r18, Z+12	; 0x0c
     43e:	25 85       	ldd	r18, Z+13	; 0x0d
     440:	26 85       	ldd	r18, Z+14	; 0x0e
     442:	27 85       	ldd	r18, Z+15	; 0x0f
     444:	28 e1       	ldi	r18, 0x18	; 24
     446:	92 9f       	mul	r25, r18
     448:	80 0d       	add	r24, r0
     44a:	11 24       	eor	r1, r1
     44c:	82 bf       	out	0x32, r24	; 50
     44e:	16 c0       	rjmp	.+44     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
     450:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Cycle>
     454:	81 30       	cpi	r24, 0x01	; 1
     456:	91 f4       	brne	.+36     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
     458:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <Cycle>
     45c:	ee e7       	ldi	r30, 0x7E	; 126
     45e:	f0 e0       	ldi	r31, 0x00	; 0
     460:	90 81       	ld	r25, Z
     462:	81 81       	ldd	r24, Z+1	; 0x01
     464:	82 81       	ldd	r24, Z+2	; 0x02
     466:	83 81       	ldd	r24, Z+3	; 0x03
     468:	84 81       	ldd	r24, Z+4	; 0x04
     46a:	85 81       	ldd	r24, Z+5	; 0x05
     46c:	86 81       	ldd	r24, Z+6	; 0x06
     46e:	87 81       	ldd	r24, Z+7	; 0x07
     470:	81 e0       	ldi	r24, 0x01	; 1
     472:	28 e1       	ldi	r18, 0x18	; 24
     474:	92 9f       	mul	r25, r18
     476:	80 0d       	add	r24, r0
     478:	11 24       	eor	r1, r1
     47a:	82 bf       	out	0x32, r24	; 50
     47c:	ff 91       	pop	r31
     47e:	ef 91       	pop	r30
     480:	df 91       	pop	r29
     482:	cf 91       	pop	r28
     484:	bf 91       	pop	r27
     486:	af 91       	pop	r26
     488:	9f 91       	pop	r25
     48a:	8f 91       	pop	r24
     48c:	7f 91       	pop	r23
     48e:	6f 91       	pop	r22
     490:	5f 91       	pop	r21
     492:	4f 91       	pop	r20
     494:	3f 91       	pop	r19
     496:	2f 91       	pop	r18
     498:	1f 91       	pop	r17
     49a:	0f 91       	pop	r16
     49c:	ff 90       	pop	r15
     49e:	ef 90       	pop	r14
     4a0:	df 90       	pop	r13
     4a2:	cf 90       	pop	r12
     4a4:	bf 90       	pop	r11
     4a6:	af 90       	pop	r10
     4a8:	0f 90       	pop	r0
     4aa:	0f be       	out	0x3f, r0	; 63
     4ac:	0f 90       	pop	r0
     4ae:	1f 90       	pop	r1
     4b0:	18 95       	reti

000004b2 <__vector_5>:
     4b2:	1f 92       	push	r1
     4b4:	0f 92       	push	r0
     4b6:	0f b6       	in	r0, 0x3f	; 63
     4b8:	0f 92       	push	r0
     4ba:	11 24       	eor	r1, r1
     4bc:	af 92       	push	r10
     4be:	bf 92       	push	r11
     4c0:	cf 92       	push	r12
     4c2:	df 92       	push	r13
     4c4:	ef 92       	push	r14
     4c6:	ff 92       	push	r15
     4c8:	0f 93       	push	r16
     4ca:	1f 93       	push	r17
     4cc:	2f 93       	push	r18
     4ce:	3f 93       	push	r19
     4d0:	4f 93       	push	r20
     4d2:	5f 93       	push	r21
     4d4:	6f 93       	push	r22
     4d6:	7f 93       	push	r23
     4d8:	8f 93       	push	r24
     4da:	9f 93       	push	r25
     4dc:	af 93       	push	r26
     4de:	bf 93       	push	r27
     4e0:	cf 93       	push	r28
     4e2:	df 93       	push	r29
     4e4:	ef 93       	push	r30
     4e6:	ff 93       	push	r31
     4e8:	88 b7       	in	r24, 0x38	; 56
     4ea:	80 64       	ori	r24, 0x40	; 64
     4ec:	88 bf       	out	0x38, r24	; 56
     4ee:	ce e9       	ldi	r28, 0x9E	; 158
     4f0:	d0 e0       	ldi	r29, 0x00	; 0
     4f2:	28 85       	ldd	r18, Y+8	; 0x08
     4f4:	39 85       	ldd	r19, Y+9	; 0x09
     4f6:	4a 85       	ldd	r20, Y+10	; 0x0a
     4f8:	5b 85       	ldd	r21, Y+11	; 0x0b
     4fa:	6c 85       	ldd	r22, Y+12	; 0x0c
     4fc:	7d 85       	ldd	r23, Y+13	; 0x0d
     4fe:	8e 85       	ldd	r24, Y+14	; 0x0e
     500:	9f 85       	ldd	r25, Y+15	; 0x0f
     502:	a1 e0       	ldi	r26, 0x01	; 1
     504:	0e 94 46 07 	call	0xe8c	; 0xe8c <__adddi3_s8>
     508:	28 87       	std	Y+8, r18	; 0x08
     50a:	39 87       	std	Y+9, r19	; 0x09
     50c:	4a 87       	std	Y+10, r20	; 0x0a
     50e:	5b 87       	std	Y+11, r21	; 0x0b
     510:	6c 87       	std	Y+12, r22	; 0x0c
     512:	7d 87       	std	Y+13, r23	; 0x0d
     514:	8e 87       	std	Y+14, r24	; 0x0e
     516:	9f 87       	std	Y+15, r25	; 0x0f
     518:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <PWMAction+0x2>
     51c:	f0 91 7d 00 	lds	r31, 0x007D	; 0x80007d <PWMAction+0x3>
     520:	09 95       	icall
     522:	28 85       	ldd	r18, Y+8	; 0x08
     524:	39 85       	ldd	r19, Y+9	; 0x09
     526:	4a 85       	ldd	r20, Y+10	; 0x0a
     528:	5b 85       	ldd	r21, Y+11	; 0x0b
     52a:	6c 85       	ldd	r22, Y+12	; 0x0c
     52c:	7d 85       	ldd	r23, Y+13	; 0x0d
     52e:	8e 85       	ldd	r24, Y+14	; 0x0e
     530:	9f 85       	ldd	r25, Y+15	; 0x0f
     532:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <Cycle+0x1>
     536:	f0 e0       	ldi	r31, 0x00	; 0
     538:	ee 0f       	add	r30, r30
     53a:	ff 1f       	adc	r31, r31
     53c:	ee 0f       	add	r30, r30
     53e:	ff 1f       	adc	r31, r31
     540:	ee 0f       	add	r30, r30
     542:	ff 1f       	adc	r31, r31
     544:	e2 57       	subi	r30, 0x72	; 114
     546:	ff 4f       	sbci	r31, 0xFF	; 255
     548:	a0 80       	ld	r10, Z
     54a:	b1 80       	ldd	r11, Z+1	; 0x01
     54c:	c2 80       	ldd	r12, Z+2	; 0x02
     54e:	d3 80       	ldd	r13, Z+3	; 0x03
     550:	e4 80       	ldd	r14, Z+4	; 0x04
     552:	f5 80       	ldd	r15, Z+5	; 0x05
     554:	06 81       	ldd	r16, Z+6	; 0x06
     556:	17 81       	ldd	r17, Z+7	; 0x07
     558:	0e 94 52 07 	call	0xea4	; 0xea4 <__cmpdi2>
     55c:	d1 f5       	brne	.+116    	; 0x5d2 <__vector_5+0x120>
     55e:	18 86       	std	Y+8, r1	; 0x08
     560:	19 86       	std	Y+9, r1	; 0x09
     562:	1a 86       	std	Y+10, r1	; 0x0a
     564:	1b 86       	std	Y+11, r1	; 0x0b
     566:	1c 86       	std	Y+12, r1	; 0x0c
     568:	1d 86       	std	Y+13, r1	; 0x0d
     56a:	1e 86       	std	Y+14, r1	; 0x0e
     56c:	1f 86       	std	Y+15, r1	; 0x0f
     56e:	e0 91 b0 00 	lds	r30, 0x00B0	; 0x8000b0 <NotifierAction+0x2>
     572:	f0 91 b1 00 	lds	r31, 0x00B1	; 0x8000b1 <NotifierAction+0x3>
     576:	09 95       	icall
     578:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Cycle+0x1>
     57c:	81 11       	cpse	r24, r1
     57e:	13 c0       	rjmp	.+38     	; 0x5a6 <__vector_5+0xf4>
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <Cycle+0x1>
     586:	ee e7       	ldi	r30, 0x7E	; 126
     588:	f0 e0       	ldi	r31, 0x00	; 0
     58a:	90 8d       	ldd	r25, Z+24	; 0x18
     58c:	21 8d       	ldd	r18, Z+25	; 0x19
     58e:	22 8d       	ldd	r18, Z+26	; 0x1a
     590:	23 8d       	ldd	r18, Z+27	; 0x1b
     592:	24 8d       	ldd	r18, Z+28	; 0x1c
     594:	25 8d       	ldd	r18, Z+29	; 0x1d
     596:	26 8d       	ldd	r18, Z+30	; 0x1e
     598:	27 8d       	ldd	r18, Z+31	; 0x1f
     59a:	28 e1       	ldi	r18, 0x18	; 24
     59c:	92 9f       	mul	r25, r18
     59e:	80 0d       	add	r24, r0
     5a0:	11 24       	eor	r1, r1
     5a2:	82 bf       	out	0x32, r24	; 50
     5a4:	16 c0       	rjmp	.+44     	; 0x5d2 <__vector_5+0x120>
     5a6:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Cycle+0x1>
     5aa:	81 30       	cpi	r24, 0x01	; 1
     5ac:	91 f4       	brne	.+36     	; 0x5d2 <__vector_5+0x120>
     5ae:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <Cycle+0x1>
     5b2:	ee e7       	ldi	r30, 0x7E	; 126
     5b4:	f0 e0       	ldi	r31, 0x00	; 0
     5b6:	90 89       	ldd	r25, Z+16	; 0x10
     5b8:	81 89       	ldd	r24, Z+17	; 0x11
     5ba:	82 89       	ldd	r24, Z+18	; 0x12
     5bc:	83 89       	ldd	r24, Z+19	; 0x13
     5be:	84 89       	ldd	r24, Z+20	; 0x14
     5c0:	85 89       	ldd	r24, Z+21	; 0x15
     5c2:	86 89       	ldd	r24, Z+22	; 0x16
     5c4:	87 89       	ldd	r24, Z+23	; 0x17
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	28 e1       	ldi	r18, 0x18	; 24
     5ca:	92 9f       	mul	r25, r18
     5cc:	80 0d       	add	r24, r0
     5ce:	11 24       	eor	r1, r1
     5d0:	84 bd       	out	0x24, r24	; 36
     5d2:	ff 91       	pop	r31
     5d4:	ef 91       	pop	r30
     5d6:	df 91       	pop	r29
     5d8:	cf 91       	pop	r28
     5da:	bf 91       	pop	r27
     5dc:	af 91       	pop	r26
     5de:	9f 91       	pop	r25
     5e0:	8f 91       	pop	r24
     5e2:	7f 91       	pop	r23
     5e4:	6f 91       	pop	r22
     5e6:	5f 91       	pop	r21
     5e8:	4f 91       	pop	r20
     5ea:	3f 91       	pop	r19
     5ec:	2f 91       	pop	r18
     5ee:	1f 91       	pop	r17
     5f0:	0f 91       	pop	r16
     5f2:	ff 90       	pop	r15
     5f4:	ef 90       	pop	r14
     5f6:	df 90       	pop	r13
     5f8:	cf 90       	pop	r12
     5fa:	bf 90       	pop	r11
     5fc:	af 90       	pop	r10
     5fe:	0f 90       	pop	r0
     600:	0f be       	out	0x3f, r0	; 63
     602:	0f 90       	pop	r0
     604:	1f 90       	pop	r1
     606:	18 95       	reti

00000608 <__vector_10>:
     608:	1f 92       	push	r1
     60a:	0f 92       	push	r0
     60c:	0f b6       	in	r0, 0x3f	; 63
     60e:	0f 92       	push	r0
     610:	11 24       	eor	r1, r1
     612:	2f 93       	push	r18
     614:	3f 93       	push	r19
     616:	4f 93       	push	r20
     618:	5f 93       	push	r21
     61a:	6f 93       	push	r22
     61c:	7f 93       	push	r23
     61e:	8f 93       	push	r24
     620:	9f 93       	push	r25
     622:	af 93       	push	r26
     624:	bf 93       	push	r27
     626:	ef 93       	push	r30
     628:	ff 93       	push	r31
     62a:	88 b7       	in	r24, 0x38	; 56
     62c:	82 60       	ori	r24, 0x02	; 2
     62e:	88 bf       	out	0x38, r24	; 56
     630:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <CounterAction>
     634:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <CounterAction+0x1>
     638:	89 2b       	or	r24, r25
     63a:	41 f0       	breq	.+16     	; 0x64c <__vector_10+0x44>
     63c:	e0 91 b2 00 	lds	r30, 0x00B2	; 0x8000b2 <CounterAction>
     640:	f0 91 b3 00 	lds	r31, 0x00B3	; 0x8000b3 <CounterAction+0x1>
     644:	09 95       	icall
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	0e 94 92 01 	call	0x324	; 0x324 <Timer_ResetCounter>
     64c:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <PWMAction>
     650:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <PWMAction+0x1>
     654:	09 95       	icall
     656:	ff 91       	pop	r31
     658:	ef 91       	pop	r30
     65a:	bf 91       	pop	r27
     65c:	af 91       	pop	r26
     65e:	9f 91       	pop	r25
     660:	8f 91       	pop	r24
     662:	7f 91       	pop	r23
     664:	6f 91       	pop	r22
     666:	5f 91       	pop	r21
     668:	4f 91       	pop	r20
     66a:	3f 91       	pop	r19
     66c:	2f 91       	pop	r18
     66e:	0f 90       	pop	r0
     670:	0f be       	out	0x3f, r0	; 63
     672:	0f 90       	pop	r0
     674:	1f 90       	pop	r1
     676:	18 95       	reti

00000678 <__vector_4>:
     678:	1f 92       	push	r1
     67a:	0f 92       	push	r0
     67c:	0f b6       	in	r0, 0x3f	; 63
     67e:	0f 92       	push	r0
     680:	11 24       	eor	r1, r1
     682:	2f 93       	push	r18
     684:	3f 93       	push	r19
     686:	4f 93       	push	r20
     688:	5f 93       	push	r21
     68a:	6f 93       	push	r22
     68c:	7f 93       	push	r23
     68e:	8f 93       	push	r24
     690:	9f 93       	push	r25
     692:	af 93       	push	r26
     694:	bf 93       	push	r27
     696:	ef 93       	push	r30
     698:	ff 93       	push	r31
     69a:	88 b7       	in	r24, 0x38	; 56
     69c:	80 68       	ori	r24, 0x80	; 128
     69e:	88 bf       	out	0x38, r24	; 56
     6a0:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <PWMAction+0x2>
     6a4:	f0 91 7d 00 	lds	r31, 0x007D	; 0x80007d <PWMAction+0x3>
     6a8:	09 95       	icall
     6aa:	ff 91       	pop	r31
     6ac:	ef 91       	pop	r30
     6ae:	bf 91       	pop	r27
     6b0:	af 91       	pop	r26
     6b2:	9f 91       	pop	r25
     6b4:	8f 91       	pop	r24
     6b6:	7f 91       	pop	r23
     6b8:	6f 91       	pop	r22
     6ba:	5f 91       	pop	r21
     6bc:	4f 91       	pop	r20
     6be:	3f 91       	pop	r19
     6c0:	2f 91       	pop	r18
     6c2:	0f 90       	pop	r0
     6c4:	0f be       	out	0x3f, r0	; 63
     6c6:	0f 90       	pop	r0
     6c8:	1f 90       	pop	r1
     6ca:	18 95       	reti

000006cc <Uart_init>:
			break;
		}
		else{/*MISRA C*/}
	}
	return return_value;
}
     6cc:	cf 92       	push	r12
     6ce:	df 92       	push	r13
     6d0:	ef 92       	push	r14
     6d2:	ff 92       	push	r15
     6d4:	cf 93       	push	r28
     6d6:	6b 01       	movw	r12, r22
     6d8:	7c 01       	movw	r14, r24
     6da:	8d e6       	ldi	r24, 0x6D	; 109
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	0e 94 87 04 	call	0x90e	; 0x90e <Queue_Init>
     6e2:	c8 2f       	mov	r28, r24
     6e4:	88 e6       	ldi	r24, 0x68	; 104
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	0e 94 87 04 	call	0x90e	; 0x90e <Queue_Init>
     6ec:	c8 2b       	or	r28, r24
     6ee:	91 f5       	brne	.+100    	; 0x754 <Uart_init+0x88>
     6f0:	c1 14       	cp	r12, r1
     6f2:	d1 04       	cpc	r13, r1
     6f4:	e1 04       	cpc	r14, r1
     6f6:	f1 04       	cpc	r15, r1
     6f8:	79 f1       	breq	.+94     	; 0x758 <Uart_init+0x8c>
     6fa:	d7 01       	movw	r26, r14
     6fc:	c6 01       	movw	r24, r12
     6fe:	88 0f       	add	r24, r24
     700:	99 1f       	adc	r25, r25
     702:	aa 1f       	adc	r26, r26
     704:	bb 1f       	adc	r27, r27
     706:	88 0f       	add	r24, r24
     708:	99 1f       	adc	r25, r25
     70a:	aa 1f       	adc	r26, r26
     70c:	bb 1f       	adc	r27, r27
     70e:	9c 01       	movw	r18, r24
     710:	ad 01       	movw	r20, r26
     712:	22 0f       	add	r18, r18
     714:	33 1f       	adc	r19, r19
     716:	44 1f       	adc	r20, r20
     718:	55 1f       	adc	r21, r21
     71a:	22 0f       	add	r18, r18
     71c:	33 1f       	adc	r19, r19
     71e:	44 1f       	adc	r20, r20
     720:	55 1f       	adc	r21, r21
     722:	60 e0       	ldi	r22, 0x00	; 0
     724:	72 e1       	ldi	r23, 0x12	; 18
     726:	8a e7       	ldi	r24, 0x7A	; 122
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	0e 94 24 07 	call	0xe48	; 0xe48 <__udivmodsi4>
     72e:	ba 01       	movw	r22, r20
     730:	a9 01       	movw	r20, r18
     732:	41 50       	subi	r20, 0x01	; 1
     734:	51 09       	sbc	r21, r1
     736:	61 09       	sbc	r22, r1
     738:	71 09       	sbc	r23, r1
     73a:	bb 27       	eor	r27, r27
     73c:	a7 2f       	mov	r26, r23
     73e:	96 2f       	mov	r25, r22
     740:	85 2f       	mov	r24, r21
     742:	80 bd       	out	0x20, r24	; 32
     744:	49 b9       	out	0x09, r20	; 9
     746:	54 9a       	sbi	0x0a, 4	; 10
     748:	53 9a       	sbi	0x0a, 3	; 10
     74a:	57 9a       	sbi	0x0a, 7	; 10
     74c:	80 b5       	in	r24, 0x20	; 32
     74e:	86 68       	ori	r24, 0x86	; 134
     750:	80 bd       	out	0x20, r24	; 32
     752:	03 c0       	rjmp	.+6      	; 0x75a <Uart_init+0x8e>
     754:	c3 e0       	ldi	r28, 0x03	; 3
     756:	01 c0       	rjmp	.+2      	; 0x75a <Uart_init+0x8e>
     758:	c5 e0       	ldi	r28, 0x05	; 5
     75a:	8c 2f       	mov	r24, r28
     75c:	cf 91       	pop	r28
     75e:	ff 90       	pop	r15
     760:	ef 90       	pop	r14
     762:	df 90       	pop	r13
     764:	cf 90       	pop	r12
     766:	08 95       	ret

00000768 <Uart_SendPooling>:
     768:	90 91 b4 00 	lds	r25, 0x00B4	; 0x8000b4 <T_Flag>
     76c:	91 11       	cpse	r25, r1
     76e:	19 c0       	rjmp	.+50     	; 0x7a2 <Uart_SendPooling+0x3a>
     770:	91 e0       	ldi	r25, 0x01	; 1
     772:	90 93 b4 00 	sts	0x00B4, r25	; 0x8000b4 <T_Flag>
     776:	5d 99       	sbic	0x0b, 5	; 11
     778:	0b c0       	rjmp	.+22     	; 0x790 <Uart_SendPooling+0x28>
     77a:	40 e0       	ldi	r20, 0x00	; 0
     77c:	50 e0       	ldi	r21, 0x00	; 0
     77e:	60 e0       	ldi	r22, 0x00	; 0
     780:	71 e0       	ldi	r23, 0x01	; 1
     782:	5d 99       	sbic	0x0b, 5	; 11
     784:	05 c0       	rjmp	.+10     	; 0x790 <Uart_SendPooling+0x28>
     786:	41 50       	subi	r20, 0x01	; 1
     788:	51 09       	sbc	r21, r1
     78a:	61 09       	sbc	r22, r1
     78c:	71 09       	sbc	r23, r1
     78e:	c9 f7       	brne	.-14     	; 0x782 <Uart_SendPooling+0x1a>
     790:	5d 9b       	sbis	0x0b, 5	; 11
     792:	03 c0       	rjmp	.+6      	; 0x79a <Uart_SendPooling+0x32>
     794:	8c b9       	out	0x0c, r24	; 12
     796:	80 e0       	ldi	r24, 0x00	; 0
     798:	01 c0       	rjmp	.+2      	; 0x79c <Uart_SendPooling+0x34>
     79a:	88 e0       	ldi	r24, 0x08	; 8
     79c:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <T_Flag>
     7a0:	08 95       	ret
     7a2:	87 e0       	ldi	r24, 0x07	; 7
     7a4:	08 95       	ret

000007a6 <Uart_SendStringPooling>:
     7a6:	0f 93       	push	r16
     7a8:	1f 93       	push	r17
     7aa:	fc 01       	movw	r30, r24
     7ac:	01 90       	ld	r0, Z+
     7ae:	00 20       	and	r0, r0
     7b0:	e9 f7       	brne	.-6      	; 0x7ac <Uart_SendStringPooling+0x6>
     7b2:	31 97       	sbiw	r30, 0x01	; 1
     7b4:	8f 01       	movw	r16, r30
     7b6:	08 1b       	sub	r16, r24
     7b8:	19 0b       	sbc	r17, r25
     7ba:	00 97       	sbiw	r24, 0x00	; 0
     7bc:	a9 f1       	breq	.+106    	; 0x828 <__DATA_REGION_LENGTH__+0x28>
     7be:	20 91 b4 00 	lds	r18, 0x00B4	; 0x8000b4 <T_Flag>
     7c2:	21 11       	cpse	r18, r1
     7c4:	33 c0       	rjmp	.+102    	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
     7c6:	20 e0       	ldi	r18, 0x00	; 0
     7c8:	30 e0       	ldi	r19, 0x00	; 0
     7ca:	41 e0       	ldi	r20, 0x01	; 1
     7cc:	40 93 b4 00 	sts	0x00B4, r20	; 0x8000b4 <T_Flag>
     7d0:	01 15       	cp	r16, r1
     7d2:	11 05       	cpc	r17, r1
     7d4:	21 05       	cpc	r18, r1
     7d6:	31 05       	cpc	r19, r1
     7d8:	f9 f0       	breq	.+62     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     7da:	fc 01       	movw	r30, r24
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	dc 01       	movw	r26, r24
     7e2:	13 c0       	rjmp	.+38     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
     7e4:	5d 99       	sbic	0x0b, 5	; 11
     7e6:	05 c0       	rjmp	.+10     	; 0x7f2 <Uart_SendStringPooling+0x4c>
     7e8:	41 50       	subi	r20, 0x01	; 1
     7ea:	51 09       	sbc	r21, r1
     7ec:	61 09       	sbc	r22, r1
     7ee:	71 09       	sbc	r23, r1
     7f0:	c9 f7       	brne	.-14     	; 0x7e4 <Uart_SendStringPooling+0x3e>
     7f2:	5d 9b       	sbis	0x0b, 5	; 11
     7f4:	13 c0       	rjmp	.+38     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     7f6:	41 91       	ld	r20, Z+
     7f8:	4c b9       	out	0x0c, r20	; 12
     7fa:	01 96       	adiw	r24, 0x01	; 1
     7fc:	a1 1d       	adc	r26, r1
     7fe:	b1 1d       	adc	r27, r1
     800:	80 17       	cp	r24, r16
     802:	91 07       	cpc	r25, r17
     804:	a2 07       	cpc	r26, r18
     806:	b3 07       	cpc	r27, r19
     808:	58 f4       	brcc	.+22     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
     80a:	5d 99       	sbic	0x0b, 5	; 11
     80c:	f2 cf       	rjmp	.-28     	; 0x7f2 <Uart_SendStringPooling+0x4c>
     80e:	40 e0       	ldi	r20, 0x00	; 0
     810:	50 e0       	ldi	r21, 0x00	; 0
     812:	60 e0       	ldi	r22, 0x00	; 0
     814:	71 e0       	ldi	r23, 0x01	; 1
     816:	e6 cf       	rjmp	.-52     	; 0x7e4 <Uart_SendStringPooling+0x3e>
     818:	80 e0       	ldi	r24, 0x00	; 0
     81a:	03 c0       	rjmp	.+6      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
     81c:	88 e0       	ldi	r24, 0x08	; 8
     81e:	01 c0       	rjmp	.+2      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <T_Flag>
     826:	03 c0       	rjmp	.+6      	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
     828:	84 e0       	ldi	r24, 0x04	; 4
     82a:	01 c0       	rjmp	.+2      	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
     82c:	87 e0       	ldi	r24, 0x07	; 7
     82e:	1f 91       	pop	r17
     830:	0f 91       	pop	r16
     832:	08 95       	ret

00000834 <__vector_14>:
     834:	1f 92       	push	r1
     836:	0f 92       	push	r0
     838:	0f b6       	in	r0, 0x3f	; 63
     83a:	0f 92       	push	r0
     83c:	11 24       	eor	r1, r1
     83e:	2f 93       	push	r18
     840:	3f 93       	push	r19
     842:	4f 93       	push	r20
     844:	5f 93       	push	r21
     846:	6f 93       	push	r22
     848:	7f 93       	push	r23
     84a:	8f 93       	push	r24
     84c:	9f 93       	push	r25
     84e:	af 93       	push	r26
     850:	bf 93       	push	r27
     852:	ef 93       	push	r30
     854:	ff 93       	push	r31
     856:	cf 93       	push	r28
     858:	df 93       	push	r29
     85a:	1f 92       	push	r1
     85c:	cd b7       	in	r28, 0x3d	; 61
     85e:	de b7       	in	r29, 0x3e	; 62
     860:	5d 9a       	sbi	0x0b, 5	; 11
     862:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <T_Flag>
     866:	82 30       	cpi	r24, 0x02	; 2
     868:	79 f4       	brne	.+30     	; 0x888 <__stack+0x29>
     86a:	19 82       	std	Y+1, r1	; 0x01
     86c:	be 01       	movw	r22, r28
     86e:	6f 5f       	subi	r22, 0xFF	; 255
     870:	7f 4f       	sbci	r23, 0xFF	; 255
     872:	88 e6       	ldi	r24, 0x68	; 104
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	0e 94 f6 04 	call	0x9ec	; 0x9ec <DeQueue>
     87a:	82 30       	cpi	r24, 0x02	; 2
     87c:	19 f4       	brne	.+6      	; 0x884 <__stack+0x25>
     87e:	55 98       	cbi	0x0a, 5	; 10
     880:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <T_Flag>
     884:	89 81       	ldd	r24, Y+1	; 0x01
     886:	8c b9       	out	0x0c, r24	; 12
     888:	0f 90       	pop	r0
     88a:	df 91       	pop	r29
     88c:	cf 91       	pop	r28
     88e:	ff 91       	pop	r31
     890:	ef 91       	pop	r30
     892:	bf 91       	pop	r27
     894:	af 91       	pop	r26
     896:	9f 91       	pop	r25
     898:	8f 91       	pop	r24
     89a:	7f 91       	pop	r23
     89c:	6f 91       	pop	r22
     89e:	5f 91       	pop	r21
     8a0:	4f 91       	pop	r20
     8a2:	3f 91       	pop	r19
     8a4:	2f 91       	pop	r18
     8a6:	0f 90       	pop	r0
     8a8:	0f be       	out	0x3f, r0	; 63
     8aa:	0f 90       	pop	r0
     8ac:	1f 90       	pop	r1
     8ae:	18 95       	reti

000008b0 <__vector_13>:
ISR(USART_RXC_vect)
{
     8b0:	1f 92       	push	r1
     8b2:	0f 92       	push	r0
     8b4:	0f b6       	in	r0, 0x3f	; 63
     8b6:	0f 92       	push	r0
     8b8:	11 24       	eor	r1, r1
     8ba:	2f 93       	push	r18
     8bc:	3f 93       	push	r19
     8be:	4f 93       	push	r20
     8c0:	5f 93       	push	r21
     8c2:	6f 93       	push	r22
     8c4:	7f 93       	push	r23
     8c6:	8f 93       	push	r24
     8c8:	9f 93       	push	r25
     8ca:	af 93       	push	r26
     8cc:	bf 93       	push	r27
     8ce:	ef 93       	push	r30
     8d0:	ff 93       	push	r31
	UART.Flags.rciv_cmplt = ENABLE;
     8d2:	5f 9a       	sbi	0x0b, 7	; 11
	if(R_Flag == Available)
     8d4:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <R_Flag>
     8d8:	81 11       	cpse	r24, r1
     8da:	08 c0       	rjmp	.+16     	; 0x8ec <__vector_13+0x3c>
	{
		uint8_t Data = UART.Data;
     8dc:	6c b1       	in	r22, 0x0c	; 12
		if(UART_EN_Buffer_Full == EnQueue(&R_Buffer, Data))
     8de:	8d e6       	ldi	r24, 0x6D	; 109
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	0e 94 9f 04 	call	0x93e	; 0x93e <EnQueue>
     8e6:	81 30       	cpi	r24, 0x01	; 1
     8e8:	09 f4       	brne	.+2      	; 0x8ec <__vector_13+0x3c>
		{
			UART.Enables.rcivCompIntrrpt = DISABLE;
     8ea:	57 98       	cbi	0x0a, 7	; 10
		}
		else{/*MISRA C*/}
	}
	else{/*MISRA C*/}
     8ec:	ff 91       	pop	r31
     8ee:	ef 91       	pop	r30
     8f0:	bf 91       	pop	r27
     8f2:	af 91       	pop	r26
     8f4:	9f 91       	pop	r25
     8f6:	8f 91       	pop	r24
     8f8:	7f 91       	pop	r23
     8fa:	6f 91       	pop	r22
     8fc:	5f 91       	pop	r21
     8fe:	4f 91       	pop	r20
     900:	3f 91       	pop	r19
     902:	2f 91       	pop	r18
     904:	0f 90       	pop	r0
     906:	0f be       	out	0x3f, r0	; 63
     908:	0f 90       	pop	r0
     90a:	1f 90       	pop	r1
     90c:	18 95       	reti

0000090e <Queue_Init>:
     90e:	cf 93       	push	r28
     910:	df 93       	push	r29
     912:	00 97       	sbiw	r24, 0x00	; 0
     914:	81 f0       	breq	.+32     	; 0x936 <Queue_Init+0x28>
     916:	ec 01       	movw	r28, r24
     918:	8c 81       	ldd	r24, Y+4	; 0x04
     91a:	61 e0       	ldi	r22, 0x01	; 1
     91c:	70 e0       	ldi	r23, 0x00	; 0
     91e:	08 2e       	mov	r0, r24
     920:	00 0c       	add	r0, r0
     922:	99 0b       	sbc	r25, r25
     924:	0e 94 7b 07 	call	0xef6	; 0xef6 <calloc>
     928:	99 83       	std	Y+1, r25	; 0x01
     92a:	88 83       	st	Y, r24
     92c:	8f ef       	ldi	r24, 0xFF	; 255
     92e:	8a 83       	std	Y+2, r24	; 0x02
     930:	8b 83       	std	Y+3, r24	; 0x03
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	01 c0       	rjmp	.+2      	; 0x938 <Queue_Init+0x2a>
     936:	83 e0       	ldi	r24, 0x03	; 3
     938:	df 91       	pop	r29
     93a:	cf 91       	pop	r28
     93c:	08 95       	ret

0000093e <EnQueue>:
     93e:	0f 93       	push	r16
     940:	1f 93       	push	r17
     942:	cf 93       	push	r28
     944:	df 93       	push	r29
     946:	fc 01       	movw	r30, r24
     948:	46 2f       	mov	r20, r22
     94a:	32 81       	ldd	r19, Z+2	; 0x02
     94c:	31 11       	cpse	r19, r1
     94e:	0f c0       	rjmp	.+30     	; 0x96e <EnQueue+0x30>
     950:	23 81       	ldd	r18, Z+3	; 0x03
     952:	c2 2f       	mov	r28, r18
     954:	02 2e       	mov	r0, r18
     956:	00 0c       	add	r0, r0
     958:	dd 0b       	sbc	r29, r29
     95a:	64 81       	ldd	r22, Z+4	; 0x04
     95c:	06 2e       	mov	r0, r22
     95e:	00 0c       	add	r0, r0
     960:	77 0b       	sbc	r23, r23
     962:	61 50       	subi	r22, 0x01	; 1
     964:	71 09       	sbc	r23, r1
     966:	c6 17       	cp	r28, r22
     968:	d7 07       	cpc	r29, r23
     96a:	99 f5       	brne	.+102    	; 0x9d2 <EnQueue+0x94>
     96c:	2c c0       	rjmp	.+88     	; 0x9c6 <EnQueue+0x88>
     96e:	23 81       	ldd	r18, Z+3	; 0x03
     970:	02 2f       	mov	r16, r18
     972:	02 2e       	mov	r0, r18
     974:	00 0c       	add	r0, r0
     976:	11 0b       	sbc	r17, r17
     978:	c4 81       	ldd	r28, Z+4	; 0x04
     97a:	0c 2e       	mov	r0, r28
     97c:	00 0c       	add	r0, r0
     97e:	dd 0b       	sbc	r29, r29
     980:	21 97       	sbiw	r28, 0x01	; 1
     982:	83 2f       	mov	r24, r19
     984:	03 2e       	mov	r0, r19
     986:	00 0c       	add	r0, r0
     988:	99 0b       	sbc	r25, r25
     98a:	01 97       	sbiw	r24, 0x01	; 1
     98c:	be 01       	movw	r22, r28
     98e:	0e 94 10 07 	call	0xe20	; 0xe20 <__divmodhi4>
     992:	08 17       	cp	r16, r24
     994:	19 07       	cpc	r17, r25
     996:	c9 f0       	breq	.+50     	; 0x9ca <EnQueue+0x8c>
     998:	3f 3f       	cpi	r19, 0xFF	; 255
     99a:	19 f4       	brne	.+6      	; 0x9a2 <EnQueue+0x64>
     99c:	12 82       	std	Z+2, r1	; 0x02
     99e:	13 82       	std	Z+3, r1	; 0x03
     9a0:	07 c0       	rjmp	.+14     	; 0x9b0 <EnQueue+0x72>
     9a2:	0c 17       	cp	r16, r28
     9a4:	1d 07       	cpc	r17, r29
     9a6:	11 f4       	brne	.+4      	; 0x9ac <EnQueue+0x6e>
     9a8:	13 82       	std	Z+3, r1	; 0x03
     9aa:	02 c0       	rjmp	.+4      	; 0x9b0 <EnQueue+0x72>
     9ac:	2f 5f       	subi	r18, 0xFF	; 255
     9ae:	23 83       	std	Z+3, r18	; 0x03
     9b0:	83 81       	ldd	r24, Z+3	; 0x03
     9b2:	01 90       	ld	r0, Z+
     9b4:	f0 81       	ld	r31, Z
     9b6:	e0 2d       	mov	r30, r0
     9b8:	e8 0f       	add	r30, r24
     9ba:	f1 1d       	adc	r31, r1
     9bc:	87 fd       	sbrc	r24, 7
     9be:	fa 95       	dec	r31
     9c0:	40 83       	st	Z, r20
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	0e c0       	rjmp	.+28     	; 0x9e2 <EnQueue+0xa4>
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	0c c0       	rjmp	.+24     	; 0x9e2 <EnQueue+0xa4>
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	0a c0       	rjmp	.+20     	; 0x9e2 <EnQueue+0xa4>
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	08 c0       	rjmp	.+16     	; 0x9e2 <EnQueue+0xa4>
     9d2:	8f ef       	ldi	r24, 0xFF	; 255
     9d4:	9f ef       	ldi	r25, 0xFF	; 255
     9d6:	0e 94 10 07 	call	0xe20	; 0xe20 <__divmodhi4>
     9da:	c8 17       	cp	r28, r24
     9dc:	d9 07       	cpc	r29, r25
     9de:	31 f7       	brne	.-52     	; 0x9ac <EnQueue+0x6e>
     9e0:	f6 cf       	rjmp	.-20     	; 0x9ce <EnQueue+0x90>
     9e2:	df 91       	pop	r29
     9e4:	cf 91       	pop	r28
     9e6:	1f 91       	pop	r17
     9e8:	0f 91       	pop	r16
     9ea:	08 95       	ret

000009ec <DeQueue>:
     9ec:	fc 01       	movw	r30, r24
     9ee:	82 81       	ldd	r24, Z+2	; 0x02
     9f0:	8f 3f       	cpi	r24, 0xFF	; 255
     9f2:	29 f1       	breq	.+74     	; 0xa3e <DeQueue+0x52>
     9f4:	a0 81       	ld	r26, Z
     9f6:	b1 81       	ldd	r27, Z+1	; 0x01
     9f8:	a8 0f       	add	r26, r24
     9fa:	b1 1d       	adc	r27, r1
     9fc:	87 fd       	sbrc	r24, 7
     9fe:	ba 95       	dec	r27
     a00:	8c 91       	ld	r24, X
     a02:	db 01       	movw	r26, r22
     a04:	8c 93       	st	X, r24
     a06:	22 81       	ldd	r18, Z+2	; 0x02
     a08:	83 81       	ldd	r24, Z+3	; 0x03
     a0a:	28 13       	cpse	r18, r24
     a0c:	05 c0       	rjmp	.+10     	; 0xa18 <DeQueue+0x2c>
     a0e:	8f ef       	ldi	r24, 0xFF	; 255
     a10:	82 83       	std	Z+2, r24	; 0x02
     a12:	83 83       	std	Z+3, r24	; 0x03
     a14:	80 e0       	ldi	r24, 0x00	; 0
     a16:	08 95       	ret
     a18:	84 81       	ldd	r24, Z+4	; 0x04
     a1a:	08 2e       	mov	r0, r24
     a1c:	00 0c       	add	r0, r0
     a1e:	99 0b       	sbc	r25, r25
     a20:	01 97       	sbiw	r24, 0x01	; 1
     a22:	42 2f       	mov	r20, r18
     a24:	02 2e       	mov	r0, r18
     a26:	00 0c       	add	r0, r0
     a28:	55 0b       	sbc	r21, r21
     a2a:	48 17       	cp	r20, r24
     a2c:	59 07       	cpc	r21, r25
     a2e:	19 f4       	brne	.+6      	; 0xa36 <DeQueue+0x4a>
     a30:	12 82       	std	Z+2, r1	; 0x02
     a32:	80 e0       	ldi	r24, 0x00	; 0
     a34:	08 95       	ret
     a36:	2f 5f       	subi	r18, 0xFF	; 255
     a38:	22 83       	std	Z+2, r18	; 0x02
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	08 95       	ret
     a3e:	82 e0       	ldi	r24, 0x02	; 2
     a40:	08 95       	ret

00000a42 <vListInsertEnd>:
     a42:	cf 93       	push	r28
     a44:	df 93       	push	r29
     a46:	9c 01       	movw	r18, r24
     a48:	fb 01       	movw	r30, r22
     a4a:	dc 01       	movw	r26, r24
     a4c:	11 96       	adiw	r26, 0x01	; 1
     a4e:	cd 91       	ld	r28, X+
     a50:	dc 91       	ld	r29, X
     a52:	12 97       	sbiw	r26, 0x02	; 2
     a54:	d3 83       	std	Z+3, r29	; 0x03
     a56:	c2 83       	std	Z+2, r28	; 0x02
     a58:	8c 81       	ldd	r24, Y+4	; 0x04
     a5a:	9d 81       	ldd	r25, Y+5	; 0x05
     a5c:	95 83       	std	Z+5, r25	; 0x05
     a5e:	84 83       	std	Z+4, r24	; 0x04
     a60:	8c 81       	ldd	r24, Y+4	; 0x04
     a62:	9d 81       	ldd	r25, Y+5	; 0x05
     a64:	dc 01       	movw	r26, r24
     a66:	13 96       	adiw	r26, 0x03	; 3
     a68:	7c 93       	st	X, r23
     a6a:	6e 93       	st	-X, r22
     a6c:	12 97       	sbiw	r26, 0x02	; 2
     a6e:	7d 83       	std	Y+5, r23	; 0x05
     a70:	6c 83       	std	Y+4, r22	; 0x04
     a72:	31 87       	std	Z+9, r19	; 0x09
     a74:	20 87       	std	Z+8, r18	; 0x08
     a76:	f9 01       	movw	r30, r18
     a78:	80 81       	ld	r24, Z
     a7a:	8f 5f       	subi	r24, 0xFF	; 255
     a7c:	80 83       	st	Z, r24
     a7e:	df 91       	pop	r29
     a80:	cf 91       	pop	r28
     a82:	08 95       	ret

00000a84 <uxListRemove>:
     a84:	cf 93       	push	r28
     a86:	df 93       	push	r29
     a88:	fc 01       	movw	r30, r24
     a8a:	a0 85       	ldd	r26, Z+8	; 0x08
     a8c:	b1 85       	ldd	r27, Z+9	; 0x09
     a8e:	c2 81       	ldd	r28, Z+2	; 0x02
     a90:	d3 81       	ldd	r29, Z+3	; 0x03
     a92:	84 81       	ldd	r24, Z+4	; 0x04
     a94:	95 81       	ldd	r25, Z+5	; 0x05
     a96:	9d 83       	std	Y+5, r25	; 0x05
     a98:	8c 83       	std	Y+4, r24	; 0x04
     a9a:	c4 81       	ldd	r28, Z+4	; 0x04
     a9c:	d5 81       	ldd	r29, Z+5	; 0x05
     a9e:	82 81       	ldd	r24, Z+2	; 0x02
     aa0:	93 81       	ldd	r25, Z+3	; 0x03
     aa2:	9b 83       	std	Y+3, r25	; 0x03
     aa4:	8a 83       	std	Y+2, r24	; 0x02
     aa6:	11 96       	adiw	r26, 0x01	; 1
     aa8:	8d 91       	ld	r24, X+
     aaa:	9c 91       	ld	r25, X
     aac:	12 97       	sbiw	r26, 0x02	; 2
     aae:	e8 17       	cp	r30, r24
     ab0:	f9 07       	cpc	r31, r25
     ab2:	31 f4       	brne	.+12     	; 0xac0 <uxListRemove+0x3c>
     ab4:	84 81       	ldd	r24, Z+4	; 0x04
     ab6:	95 81       	ldd	r25, Z+5	; 0x05
     ab8:	12 96       	adiw	r26, 0x02	; 2
     aba:	9c 93       	st	X, r25
     abc:	8e 93       	st	-X, r24
     abe:	11 97       	sbiw	r26, 0x01	; 1
     ac0:	11 86       	std	Z+9, r1	; 0x09
     ac2:	10 86       	std	Z+8, r1	; 0x08
     ac4:	8c 91       	ld	r24, X
     ac6:	81 50       	subi	r24, 0x01	; 1
     ac8:	8c 93       	st	X, r24
     aca:	df 91       	pop	r29
     acc:	cf 91       	pop	r28
     ace:	08 95       	ret

00000ad0 <vPortYieldFromTick>:
     ad0:	0f 92       	push	r0
     ad2:	0f b6       	in	r0, 0x3f	; 63
     ad4:	f8 94       	cli
     ad6:	0f 92       	push	r0
     ad8:	1f 92       	push	r1
     ada:	11 24       	eor	r1, r1
     adc:	2f 92       	push	r2
     ade:	3f 92       	push	r3
     ae0:	4f 92       	push	r4
     ae2:	5f 92       	push	r5
     ae4:	6f 92       	push	r6
     ae6:	7f 92       	push	r7
     ae8:	8f 92       	push	r8
     aea:	9f 92       	push	r9
     aec:	af 92       	push	r10
     aee:	bf 92       	push	r11
     af0:	cf 92       	push	r12
     af2:	df 92       	push	r13
     af4:	ef 92       	push	r14
     af6:	ff 92       	push	r15
     af8:	0f 93       	push	r16
     afa:	1f 93       	push	r17
     afc:	2f 93       	push	r18
     afe:	3f 93       	push	r19
     b00:	4f 93       	push	r20
     b02:	5f 93       	push	r21
     b04:	6f 93       	push	r22
     b06:	7f 93       	push	r23
     b08:	8f 93       	push	r24
     b0a:	9f 93       	push	r25
     b0c:	af 93       	push	r26
     b0e:	bf 93       	push	r27
     b10:	cf 93       	push	r28
     b12:	df 93       	push	r29
     b14:	ef 93       	push	r30
     b16:	ff 93       	push	r31
     b18:	a0 91 e5 00 	lds	r26, 0x00E5	; 0x8000e5 <pxCurrentTCB>
     b1c:	b0 91 e6 00 	lds	r27, 0x00E6	; 0x8000e6 <pxCurrentTCB+0x1>
     b20:	0d b6       	in	r0, 0x3d	; 61
     b22:	0d 92       	st	X+, r0
     b24:	0e b6       	in	r0, 0x3e	; 62
     b26:	0d 92       	st	X+, r0
     b28:	0e 94 e6 05 	call	0xbcc	; 0xbcc <xTaskIncrementTick>
     b2c:	81 11       	cpse	r24, r1
     b2e:	0e 94 a3 06 	call	0xd46	; 0xd46 <vTaskSwitchContext>
     b32:	a0 91 e5 00 	lds	r26, 0x00E5	; 0x8000e5 <pxCurrentTCB>
     b36:	b0 91 e6 00 	lds	r27, 0x00E6	; 0x8000e6 <pxCurrentTCB+0x1>
     b3a:	cd 91       	ld	r28, X+
     b3c:	cd bf       	out	0x3d, r28	; 61
     b3e:	dd 91       	ld	r29, X+
     b40:	de bf       	out	0x3e, r29	; 62
     b42:	ff 91       	pop	r31
     b44:	ef 91       	pop	r30
     b46:	df 91       	pop	r29
     b48:	cf 91       	pop	r28
     b4a:	bf 91       	pop	r27
     b4c:	af 91       	pop	r26
     b4e:	9f 91       	pop	r25
     b50:	8f 91       	pop	r24
     b52:	7f 91       	pop	r23
     b54:	6f 91       	pop	r22
     b56:	5f 91       	pop	r21
     b58:	4f 91       	pop	r20
     b5a:	3f 91       	pop	r19
     b5c:	2f 91       	pop	r18
     b5e:	1f 91       	pop	r17
     b60:	0f 91       	pop	r16
     b62:	ff 90       	pop	r15
     b64:	ef 90       	pop	r14
     b66:	df 90       	pop	r13
     b68:	cf 90       	pop	r12
     b6a:	bf 90       	pop	r11
     b6c:	af 90       	pop	r10
     b6e:	9f 90       	pop	r9
     b70:	8f 90       	pop	r8
     b72:	7f 90       	pop	r7
     b74:	6f 90       	pop	r6
     b76:	5f 90       	pop	r5
     b78:	4f 90       	pop	r4
     b7a:	3f 90       	pop	r3
     b7c:	2f 90       	pop	r2
     b7e:	1f 90       	pop	r1
     b80:	0f 90       	pop	r0
     b82:	0f be       	out	0x3f, r0	; 63
     b84:	0f 90       	pop	r0
     b86:	08 95       	ret

00000b88 <__vector_7>:
     b88:	0e 94 68 05 	call	0xad0	; 0xad0 <vPortYieldFromTick>
     b8c:	18 95       	reti

00000b8e <prvResetNextTaskUnblockTime>:
     b8e:	e0 91 bf 00 	lds	r30, 0x00BF	; 0x8000bf <pxDelayedTaskList>
     b92:	f0 91 c0 00 	lds	r31, 0x00C0	; 0x8000c0 <pxDelayedTaskList+0x1>
     b96:	80 81       	ld	r24, Z
     b98:	81 11       	cpse	r24, r1
     b9a:	07 c0       	rjmp	.+14     	; 0xbaa <prvResetNextTaskUnblockTime+0x1c>
     b9c:	8f ef       	ldi	r24, 0xFF	; 255
     b9e:	9f ef       	ldi	r25, 0xFF	; 255
     ba0:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <xNextTaskUnblockTime+0x1>
     ba4:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <xNextTaskUnblockTime>
     ba8:	08 95       	ret
     baa:	e0 91 bf 00 	lds	r30, 0x00BF	; 0x8000bf <pxDelayedTaskList>
     bae:	f0 91 c0 00 	lds	r31, 0x00C0	; 0x8000c0 <pxDelayedTaskList+0x1>
     bb2:	05 80       	ldd	r0, Z+5	; 0x05
     bb4:	f6 81       	ldd	r31, Z+6	; 0x06
     bb6:	e0 2d       	mov	r30, r0
     bb8:	06 80       	ldd	r0, Z+6	; 0x06
     bba:	f7 81       	ldd	r31, Z+7	; 0x07
     bbc:	e0 2d       	mov	r30, r0
     bbe:	82 81       	ldd	r24, Z+2	; 0x02
     bc0:	93 81       	ldd	r25, Z+3	; 0x03
     bc2:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <xNextTaskUnblockTime+0x1>
     bc6:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <xNextTaskUnblockTime>
     bca:	08 95       	ret

00000bcc <xTaskIncrementTick>:
     bcc:	cf 92       	push	r12
     bce:	df 92       	push	r13
     bd0:	ef 92       	push	r14
     bd2:	ff 92       	push	r15
     bd4:	0f 93       	push	r16
     bd6:	1f 93       	push	r17
     bd8:	cf 93       	push	r28
     bda:	df 93       	push	r29
     bdc:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <uxSchedulerSuspended>
     be0:	81 11       	cpse	r24, r1
     be2:	9b c0       	rjmp	.+310    	; 0xd1a <xTaskIncrementTick+0x14e>
     be4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <xTickCount>
     be8:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <xTickCount+0x1>
     bec:	01 96       	adiw	r24, 0x01	; 1
     bee:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <xTickCount+0x1>
     bf2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <xTickCount>
     bf6:	e0 90 bb 00 	lds	r14, 0x00BB	; 0x8000bb <xTickCount>
     bfa:	f0 90 bc 00 	lds	r15, 0x00BC	; 0x8000bc <xTickCount+0x1>
     bfe:	e1 14       	cp	r14, r1
     c00:	f1 04       	cpc	r15, r1
     c02:	b9 f4       	brne	.+46     	; 0xc32 <xTaskIncrementTick+0x66>
     c04:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <pxDelayedTaskList>
     c08:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <pxDelayedTaskList+0x1>
     c0c:	20 91 bd 00 	lds	r18, 0x00BD	; 0x8000bd <pxOverflowDelayedTaskList>
     c10:	30 91 be 00 	lds	r19, 0x00BE	; 0x8000be <pxOverflowDelayedTaskList+0x1>
     c14:	30 93 c0 00 	sts	0x00C0, r19	; 0x8000c0 <pxDelayedTaskList+0x1>
     c18:	20 93 bf 00 	sts	0x00BF, r18	; 0x8000bf <pxDelayedTaskList>
     c1c:	90 93 be 00 	sts	0x00BE, r25	; 0x8000be <pxOverflowDelayedTaskList+0x1>
     c20:	80 93 bd 00 	sts	0x00BD, r24	; 0x8000bd <pxOverflowDelayedTaskList>
     c24:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <xNumOfOverflows>
     c28:	8f 5f       	subi	r24, 0xFF	; 255
     c2a:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <xNumOfOverflows>
     c2e:	0e 94 c7 05 	call	0xb8e	; 0xb8e <prvResetNextTaskUnblockTime>
     c32:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <xNextTaskUnblockTime>
     c36:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <xNextTaskUnblockTime+0x1>
     c3a:	e8 16       	cp	r14, r24
     c3c:	f9 06       	cpc	r15, r25
     c3e:	10 f4       	brcc	.+4      	; 0xc44 <xTaskIncrementTick+0x78>
     c40:	d1 2c       	mov	r13, r1
     c42:	53 c0       	rjmp	.+166    	; 0xcea <xTaskIncrementTick+0x11e>
     c44:	d1 2c       	mov	r13, r1
     c46:	cc 24       	eor	r12, r12
     c48:	c3 94       	inc	r12
     c4a:	e0 91 bf 00 	lds	r30, 0x00BF	; 0x8000bf <pxDelayedTaskList>
     c4e:	f0 91 c0 00 	lds	r31, 0x00C0	; 0x8000c0 <pxDelayedTaskList+0x1>
     c52:	80 81       	ld	r24, Z
     c54:	81 11       	cpse	r24, r1
     c56:	07 c0       	rjmp	.+14     	; 0xc66 <xTaskIncrementTick+0x9a>
     c58:	8f ef       	ldi	r24, 0xFF	; 255
     c5a:	9f ef       	ldi	r25, 0xFF	; 255
     c5c:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <xNextTaskUnblockTime+0x1>
     c60:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <xNextTaskUnblockTime>
     c64:	42 c0       	rjmp	.+132    	; 0xcea <xTaskIncrementTick+0x11e>
     c66:	e0 91 bf 00 	lds	r30, 0x00BF	; 0x8000bf <pxDelayedTaskList>
     c6a:	f0 91 c0 00 	lds	r31, 0x00C0	; 0x8000c0 <pxDelayedTaskList+0x1>
     c6e:	05 80       	ldd	r0, Z+5	; 0x05
     c70:	f6 81       	ldd	r31, Z+6	; 0x06
     c72:	e0 2d       	mov	r30, r0
     c74:	c6 81       	ldd	r28, Z+6	; 0x06
     c76:	d7 81       	ldd	r29, Z+7	; 0x07
     c78:	8a 81       	ldd	r24, Y+2	; 0x02
     c7a:	9b 81       	ldd	r25, Y+3	; 0x03
     c7c:	e8 16       	cp	r14, r24
     c7e:	f9 06       	cpc	r15, r25
     c80:	28 f4       	brcc	.+10     	; 0xc8c <xTaskIncrementTick+0xc0>
     c82:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <xNextTaskUnblockTime+0x1>
     c86:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <xNextTaskUnblockTime>
     c8a:	2f c0       	rjmp	.+94     	; 0xcea <xTaskIncrementTick+0x11e>
     c8c:	8e 01       	movw	r16, r28
     c8e:	0e 5f       	subi	r16, 0xFE	; 254
     c90:	1f 4f       	sbci	r17, 0xFF	; 255
     c92:	c8 01       	movw	r24, r16
     c94:	0e 94 42 05 	call	0xa84	; 0xa84 <uxListRemove>
     c98:	8c 89       	ldd	r24, Y+20	; 0x14
     c9a:	9d 89       	ldd	r25, Y+21	; 0x15
     c9c:	89 2b       	or	r24, r25
     c9e:	21 f0       	breq	.+8      	; 0xca8 <xTaskIncrementTick+0xdc>
     ca0:	ce 01       	movw	r24, r28
     ca2:	0c 96       	adiw	r24, 0x0c	; 12
     ca4:	0e 94 42 05 	call	0xa84	; 0xa84 <uxListRemove>
     ca8:	8e 89       	ldd	r24, Y+22	; 0x16
     caa:	90 91 ba 00 	lds	r25, 0x00BA	; 0x8000ba <uxTopReadyPriority>
     cae:	98 17       	cp	r25, r24
     cb0:	10 f4       	brcc	.+4      	; 0xcb6 <xTaskIncrementTick+0xea>
     cb2:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <uxTopReadyPriority>
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	9c 01       	movw	r18, r24
     cba:	22 0f       	add	r18, r18
     cbc:	33 1f       	adc	r19, r19
     cbe:	22 0f       	add	r18, r18
     cc0:	33 1f       	adc	r19, r19
     cc2:	22 0f       	add	r18, r18
     cc4:	33 1f       	adc	r19, r19
     cc6:	82 0f       	add	r24, r18
     cc8:	93 1f       	adc	r25, r19
     cca:	b8 01       	movw	r22, r16
     ccc:	8f 53       	subi	r24, 0x3F	; 63
     cce:	9f 4f       	sbci	r25, 0xFF	; 255
     cd0:	0e 94 21 05 	call	0xa42	; 0xa42 <vListInsertEnd>
     cd4:	e0 91 e5 00 	lds	r30, 0x00E5	; 0x8000e5 <pxCurrentTCB>
     cd8:	f0 91 e6 00 	lds	r31, 0x00E6	; 0x8000e6 <pxCurrentTCB+0x1>
     cdc:	9e 89       	ldd	r25, Y+22	; 0x16
     cde:	86 89       	ldd	r24, Z+22	; 0x16
     ce0:	98 17       	cp	r25, r24
     ce2:	08 f4       	brcc	.+2      	; 0xce6 <xTaskIncrementTick+0x11a>
     ce4:	b2 cf       	rjmp	.-156    	; 0xc4a <xTaskIncrementTick+0x7e>
     ce6:	dc 2c       	mov	r13, r12
     ce8:	b0 cf       	rjmp	.-160    	; 0xc4a <xTaskIncrementTick+0x7e>
     cea:	e0 91 e5 00 	lds	r30, 0x00E5	; 0x8000e5 <pxCurrentTCB>
     cee:	f0 91 e6 00 	lds	r31, 0x00E6	; 0x8000e6 <pxCurrentTCB+0x1>
     cf2:	86 89       	ldd	r24, Z+22	; 0x16
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	fc 01       	movw	r30, r24
     cf8:	ee 0f       	add	r30, r30
     cfa:	ff 1f       	adc	r31, r31
     cfc:	ee 0f       	add	r30, r30
     cfe:	ff 1f       	adc	r31, r31
     d00:	ee 0f       	add	r30, r30
     d02:	ff 1f       	adc	r31, r31
     d04:	8e 0f       	add	r24, r30
     d06:	9f 1f       	adc	r25, r31
     d08:	fc 01       	movw	r30, r24
     d0a:	ef 53       	subi	r30, 0x3F	; 63
     d0c:	ff 4f       	sbci	r31, 0xFF	; 255
     d0e:	80 81       	ld	r24, Z
     d10:	82 30       	cpi	r24, 0x02	; 2
     d12:	48 f0       	brcs	.+18     	; 0xd26 <xTaskIncrementTick+0x15a>
     d14:	dd 24       	eor	r13, r13
     d16:	d3 94       	inc	r13
     d18:	06 c0       	rjmp	.+12     	; 0xd26 <xTaskIncrementTick+0x15a>
     d1a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <uxPendedTicks>
     d1e:	8f 5f       	subi	r24, 0xFF	; 255
     d20:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <uxPendedTicks>
     d24:	d1 2c       	mov	r13, r1
     d26:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <xYieldPending>
     d2a:	88 23       	and	r24, r24
     d2c:	11 f0       	breq	.+4      	; 0xd32 <xTaskIncrementTick+0x166>
     d2e:	dd 24       	eor	r13, r13
     d30:	d3 94       	inc	r13
     d32:	8d 2d       	mov	r24, r13
     d34:	df 91       	pop	r29
     d36:	cf 91       	pop	r28
     d38:	1f 91       	pop	r17
     d3a:	0f 91       	pop	r16
     d3c:	ff 90       	pop	r15
     d3e:	ef 90       	pop	r14
     d40:	df 90       	pop	r13
     d42:	cf 90       	pop	r12
     d44:	08 95       	ret

00000d46 <vTaskSwitchContext>:
     d46:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <uxSchedulerSuspended>
     d4a:	88 23       	and	r24, r24
     d4c:	21 f0       	breq	.+8      	; 0xd56 <vTaskSwitchContext+0x10>
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <xYieldPending>
     d54:	08 95       	ret
     d56:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <xYieldPending>
     d5a:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <uxTopReadyPriority>
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	fc 01       	movw	r30, r24
     d62:	ee 0f       	add	r30, r30
     d64:	ff 1f       	adc	r31, r31
     d66:	ee 0f       	add	r30, r30
     d68:	ff 1f       	adc	r31, r31
     d6a:	ee 0f       	add	r30, r30
     d6c:	ff 1f       	adc	r31, r31
     d6e:	8e 0f       	add	r24, r30
     d70:	9f 1f       	adc	r25, r31
     d72:	fc 01       	movw	r30, r24
     d74:	ef 53       	subi	r30, 0x3F	; 63
     d76:	ff 4f       	sbci	r31, 0xFF	; 255
     d78:	80 81       	ld	r24, Z
     d7a:	81 11       	cpse	r24, r1
     d7c:	17 c0       	rjmp	.+46     	; 0xdac <vTaskSwitchContext+0x66>
     d7e:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <uxTopReadyPriority>
     d82:	81 50       	subi	r24, 0x01	; 1
     d84:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <uxTopReadyPriority>
     d88:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <uxTopReadyPriority>
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	fc 01       	movw	r30, r24
     d90:	ee 0f       	add	r30, r30
     d92:	ff 1f       	adc	r31, r31
     d94:	ee 0f       	add	r30, r30
     d96:	ff 1f       	adc	r31, r31
     d98:	ee 0f       	add	r30, r30
     d9a:	ff 1f       	adc	r31, r31
     d9c:	8e 0f       	add	r24, r30
     d9e:	9f 1f       	adc	r25, r31
     da0:	fc 01       	movw	r30, r24
     da2:	ef 53       	subi	r30, 0x3F	; 63
     da4:	ff 4f       	sbci	r31, 0xFF	; 255
     da6:	80 81       	ld	r24, Z
     da8:	88 23       	and	r24, r24
     daa:	49 f3       	breq	.-46     	; 0xd7e <vTaskSwitchContext+0x38>
     dac:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <uxTopReadyPriority>
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	9c 01       	movw	r18, r24
     db4:	22 0f       	add	r18, r18
     db6:	33 1f       	adc	r19, r19
     db8:	22 0f       	add	r18, r18
     dba:	33 1f       	adc	r19, r19
     dbc:	22 0f       	add	r18, r18
     dbe:	33 1f       	adc	r19, r19
     dc0:	28 0f       	add	r18, r24
     dc2:	39 1f       	adc	r19, r25
     dc4:	d9 01       	movw	r26, r18
     dc6:	af 53       	subi	r26, 0x3F	; 63
     dc8:	bf 4f       	sbci	r27, 0xFF	; 255
     dca:	11 96       	adiw	r26, 0x01	; 1
     dcc:	ed 91       	ld	r30, X+
     dce:	fc 91       	ld	r31, X
     dd0:	12 97       	sbiw	r26, 0x02	; 2
     dd2:	02 80       	ldd	r0, Z+2	; 0x02
     dd4:	f3 81       	ldd	r31, Z+3	; 0x03
     dd6:	e0 2d       	mov	r30, r0
     dd8:	12 96       	adiw	r26, 0x02	; 2
     dda:	fc 93       	st	X, r31
     ddc:	ee 93       	st	-X, r30
     dde:	11 97       	sbiw	r26, 0x01	; 1
     de0:	2c 53       	subi	r18, 0x3C	; 60
     de2:	3f 4f       	sbci	r19, 0xFF	; 255
     de4:	e2 17       	cp	r30, r18
     de6:	f3 07       	cpc	r31, r19
     de8:	29 f4       	brne	.+10     	; 0xdf4 <vTaskSwitchContext+0xae>
     dea:	22 81       	ldd	r18, Z+2	; 0x02
     dec:	33 81       	ldd	r19, Z+3	; 0x03
     dee:	fd 01       	movw	r30, r26
     df0:	32 83       	std	Z+2, r19	; 0x02
     df2:	21 83       	std	Z+1, r18	; 0x01
     df4:	fc 01       	movw	r30, r24
     df6:	ee 0f       	add	r30, r30
     df8:	ff 1f       	adc	r31, r31
     dfa:	ee 0f       	add	r30, r30
     dfc:	ff 1f       	adc	r31, r31
     dfe:	ee 0f       	add	r30, r30
     e00:	ff 1f       	adc	r31, r31
     e02:	8e 0f       	add	r24, r30
     e04:	9f 1f       	adc	r25, r31
     e06:	fc 01       	movw	r30, r24
     e08:	ef 53       	subi	r30, 0x3F	; 63
     e0a:	ff 4f       	sbci	r31, 0xFF	; 255
     e0c:	01 80       	ldd	r0, Z+1	; 0x01
     e0e:	f2 81       	ldd	r31, Z+2	; 0x02
     e10:	e0 2d       	mov	r30, r0
     e12:	86 81       	ldd	r24, Z+6	; 0x06
     e14:	97 81       	ldd	r25, Z+7	; 0x07
     e16:	90 93 e6 00 	sts	0x00E6, r25	; 0x8000e6 <pxCurrentTCB+0x1>
     e1a:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <pxCurrentTCB>
     e1e:	08 95       	ret

00000e20 <__divmodhi4>:
     e20:	97 fb       	bst	r25, 7
     e22:	07 2e       	mov	r0, r23
     e24:	16 f4       	brtc	.+4      	; 0xe2a <__divmodhi4+0xa>
     e26:	00 94       	com	r0
     e28:	07 d0       	rcall	.+14     	; 0xe38 <__divmodhi4_neg1>
     e2a:	77 fd       	sbrc	r23, 7
     e2c:	09 d0       	rcall	.+18     	; 0xe40 <__divmodhi4_neg2>
     e2e:	0e 94 67 07 	call	0xece	; 0xece <__udivmodhi4>
     e32:	07 fc       	sbrc	r0, 7
     e34:	05 d0       	rcall	.+10     	; 0xe40 <__divmodhi4_neg2>
     e36:	3e f4       	brtc	.+14     	; 0xe46 <__divmodhi4_exit>

00000e38 <__divmodhi4_neg1>:
     e38:	90 95       	com	r25
     e3a:	81 95       	neg	r24
     e3c:	9f 4f       	sbci	r25, 0xFF	; 255
     e3e:	08 95       	ret

00000e40 <__divmodhi4_neg2>:
     e40:	70 95       	com	r23
     e42:	61 95       	neg	r22
     e44:	7f 4f       	sbci	r23, 0xFF	; 255

00000e46 <__divmodhi4_exit>:
     e46:	08 95       	ret

00000e48 <__udivmodsi4>:
     e48:	a1 e2       	ldi	r26, 0x21	; 33
     e4a:	1a 2e       	mov	r1, r26
     e4c:	aa 1b       	sub	r26, r26
     e4e:	bb 1b       	sub	r27, r27
     e50:	fd 01       	movw	r30, r26
     e52:	0d c0       	rjmp	.+26     	; 0xe6e <__udivmodsi4_ep>

00000e54 <__udivmodsi4_loop>:
     e54:	aa 1f       	adc	r26, r26
     e56:	bb 1f       	adc	r27, r27
     e58:	ee 1f       	adc	r30, r30
     e5a:	ff 1f       	adc	r31, r31
     e5c:	a2 17       	cp	r26, r18
     e5e:	b3 07       	cpc	r27, r19
     e60:	e4 07       	cpc	r30, r20
     e62:	f5 07       	cpc	r31, r21
     e64:	20 f0       	brcs	.+8      	; 0xe6e <__udivmodsi4_ep>
     e66:	a2 1b       	sub	r26, r18
     e68:	b3 0b       	sbc	r27, r19
     e6a:	e4 0b       	sbc	r30, r20
     e6c:	f5 0b       	sbc	r31, r21

00000e6e <__udivmodsi4_ep>:
     e6e:	66 1f       	adc	r22, r22
     e70:	77 1f       	adc	r23, r23
     e72:	88 1f       	adc	r24, r24
     e74:	99 1f       	adc	r25, r25
     e76:	1a 94       	dec	r1
     e78:	69 f7       	brne	.-38     	; 0xe54 <__udivmodsi4_loop>
     e7a:	60 95       	com	r22
     e7c:	70 95       	com	r23
     e7e:	80 95       	com	r24
     e80:	90 95       	com	r25
     e82:	9b 01       	movw	r18, r22
     e84:	ac 01       	movw	r20, r24
     e86:	bd 01       	movw	r22, r26
     e88:	cf 01       	movw	r24, r30
     e8a:	08 95       	ret

00000e8c <__adddi3_s8>:
     e8c:	00 24       	eor	r0, r0
     e8e:	a7 fd       	sbrc	r26, 7
     e90:	00 94       	com	r0
     e92:	2a 0f       	add	r18, r26
     e94:	30 1d       	adc	r19, r0
     e96:	40 1d       	adc	r20, r0
     e98:	50 1d       	adc	r21, r0
     e9a:	60 1d       	adc	r22, r0
     e9c:	70 1d       	adc	r23, r0
     e9e:	80 1d       	adc	r24, r0
     ea0:	90 1d       	adc	r25, r0
     ea2:	08 95       	ret

00000ea4 <__cmpdi2>:
     ea4:	2a 15       	cp	r18, r10
     ea6:	3b 05       	cpc	r19, r11
     ea8:	4c 05       	cpc	r20, r12
     eaa:	5d 05       	cpc	r21, r13
     eac:	6e 05       	cpc	r22, r14
     eae:	7f 05       	cpc	r23, r15
     eb0:	80 07       	cpc	r24, r16
     eb2:	91 07       	cpc	r25, r17
     eb4:	08 95       	ret

00000eb6 <__cmpdi2_s8>:
     eb6:	00 24       	eor	r0, r0
     eb8:	a7 fd       	sbrc	r26, 7
     eba:	00 94       	com	r0
     ebc:	2a 17       	cp	r18, r26
     ebe:	30 05       	cpc	r19, r0
     ec0:	40 05       	cpc	r20, r0
     ec2:	50 05       	cpc	r21, r0
     ec4:	60 05       	cpc	r22, r0
     ec6:	70 05       	cpc	r23, r0
     ec8:	80 05       	cpc	r24, r0
     eca:	90 05       	cpc	r25, r0
     ecc:	08 95       	ret

00000ece <__udivmodhi4>:
     ece:	aa 1b       	sub	r26, r26
     ed0:	bb 1b       	sub	r27, r27
     ed2:	51 e1       	ldi	r21, 0x11	; 17
     ed4:	07 c0       	rjmp	.+14     	; 0xee4 <__udivmodhi4_ep>

00000ed6 <__udivmodhi4_loop>:
     ed6:	aa 1f       	adc	r26, r26
     ed8:	bb 1f       	adc	r27, r27
     eda:	a6 17       	cp	r26, r22
     edc:	b7 07       	cpc	r27, r23
     ede:	10 f0       	brcs	.+4      	; 0xee4 <__udivmodhi4_ep>
     ee0:	a6 1b       	sub	r26, r22
     ee2:	b7 0b       	sbc	r27, r23

00000ee4 <__udivmodhi4_ep>:
     ee4:	88 1f       	adc	r24, r24
     ee6:	99 1f       	adc	r25, r25
     ee8:	5a 95       	dec	r21
     eea:	a9 f7       	brne	.-22     	; 0xed6 <__udivmodhi4_loop>
     eec:	80 95       	com	r24
     eee:	90 95       	com	r25
     ef0:	bc 01       	movw	r22, r24
     ef2:	cd 01       	movw	r24, r26
     ef4:	08 95       	ret

00000ef6 <calloc>:
     ef6:	0f 93       	push	r16
     ef8:	1f 93       	push	r17
     efa:	cf 93       	push	r28
     efc:	df 93       	push	r29
     efe:	86 9f       	mul	r24, r22
     f00:	80 01       	movw	r16, r0
     f02:	87 9f       	mul	r24, r23
     f04:	10 0d       	add	r17, r0
     f06:	96 9f       	mul	r25, r22
     f08:	10 0d       	add	r17, r0
     f0a:	11 24       	eor	r1, r1
     f0c:	c8 01       	movw	r24, r16
     f0e:	0e 94 97 07 	call	0xf2e	; 0xf2e <malloc>
     f12:	ec 01       	movw	r28, r24
     f14:	00 97       	sbiw	r24, 0x00	; 0
     f16:	29 f0       	breq	.+10     	; 0xf22 <calloc+0x2c>
     f18:	a8 01       	movw	r20, r16
     f1a:	60 e0       	ldi	r22, 0x00	; 0
     f1c:	70 e0       	ldi	r23, 0x00	; 0
     f1e:	0e 94 b8 08 	call	0x1170	; 0x1170 <memset>
     f22:	ce 01       	movw	r24, r28
     f24:	df 91       	pop	r29
     f26:	cf 91       	pop	r28
     f28:	1f 91       	pop	r17
     f2a:	0f 91       	pop	r16
     f2c:	08 95       	ret

00000f2e <malloc>:
     f2e:	0f 93       	push	r16
     f30:	1f 93       	push	r17
     f32:	cf 93       	push	r28
     f34:	df 93       	push	r29
     f36:	82 30       	cpi	r24, 0x02	; 2
     f38:	91 05       	cpc	r25, r1
     f3a:	10 f4       	brcc	.+4      	; 0xf40 <malloc+0x12>
     f3c:	82 e0       	ldi	r24, 0x02	; 2
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	e0 91 e9 00 	lds	r30, 0x00E9	; 0x8000e9 <__flp>
     f44:	f0 91 ea 00 	lds	r31, 0x00EA	; 0x8000ea <__flp+0x1>
     f48:	20 e0       	ldi	r18, 0x00	; 0
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	a0 e0       	ldi	r26, 0x00	; 0
     f4e:	b0 e0       	ldi	r27, 0x00	; 0
     f50:	30 97       	sbiw	r30, 0x00	; 0
     f52:	19 f1       	breq	.+70     	; 0xf9a <malloc+0x6c>
     f54:	40 81       	ld	r20, Z
     f56:	51 81       	ldd	r21, Z+1	; 0x01
     f58:	02 81       	ldd	r16, Z+2	; 0x02
     f5a:	13 81       	ldd	r17, Z+3	; 0x03
     f5c:	48 17       	cp	r20, r24
     f5e:	59 07       	cpc	r21, r25
     f60:	c8 f0       	brcs	.+50     	; 0xf94 <malloc+0x66>
     f62:	84 17       	cp	r24, r20
     f64:	95 07       	cpc	r25, r21
     f66:	69 f4       	brne	.+26     	; 0xf82 <malloc+0x54>
     f68:	10 97       	sbiw	r26, 0x00	; 0
     f6a:	31 f0       	breq	.+12     	; 0xf78 <malloc+0x4a>
     f6c:	12 96       	adiw	r26, 0x02	; 2
     f6e:	0c 93       	st	X, r16
     f70:	12 97       	sbiw	r26, 0x02	; 2
     f72:	13 96       	adiw	r26, 0x03	; 3
     f74:	1c 93       	st	X, r17
     f76:	27 c0       	rjmp	.+78     	; 0xfc6 <malloc+0x98>
     f78:	00 93 e9 00 	sts	0x00E9, r16	; 0x8000e9 <__flp>
     f7c:	10 93 ea 00 	sts	0x00EA, r17	; 0x8000ea <__flp+0x1>
     f80:	22 c0       	rjmp	.+68     	; 0xfc6 <malloc+0x98>
     f82:	21 15       	cp	r18, r1
     f84:	31 05       	cpc	r19, r1
     f86:	19 f0       	breq	.+6      	; 0xf8e <malloc+0x60>
     f88:	42 17       	cp	r20, r18
     f8a:	53 07       	cpc	r21, r19
     f8c:	18 f4       	brcc	.+6      	; 0xf94 <malloc+0x66>
     f8e:	9a 01       	movw	r18, r20
     f90:	bd 01       	movw	r22, r26
     f92:	ef 01       	movw	r28, r30
     f94:	df 01       	movw	r26, r30
     f96:	f8 01       	movw	r30, r16
     f98:	db cf       	rjmp	.-74     	; 0xf50 <malloc+0x22>
     f9a:	21 15       	cp	r18, r1
     f9c:	31 05       	cpc	r19, r1
     f9e:	f9 f0       	breq	.+62     	; 0xfde <malloc+0xb0>
     fa0:	28 1b       	sub	r18, r24
     fa2:	39 0b       	sbc	r19, r25
     fa4:	24 30       	cpi	r18, 0x04	; 4
     fa6:	31 05       	cpc	r19, r1
     fa8:	80 f4       	brcc	.+32     	; 0xfca <malloc+0x9c>
     faa:	8a 81       	ldd	r24, Y+2	; 0x02
     fac:	9b 81       	ldd	r25, Y+3	; 0x03
     fae:	61 15       	cp	r22, r1
     fb0:	71 05       	cpc	r23, r1
     fb2:	21 f0       	breq	.+8      	; 0xfbc <malloc+0x8e>
     fb4:	fb 01       	movw	r30, r22
     fb6:	93 83       	std	Z+3, r25	; 0x03
     fb8:	82 83       	std	Z+2, r24	; 0x02
     fba:	04 c0       	rjmp	.+8      	; 0xfc4 <malloc+0x96>
     fbc:	90 93 ea 00 	sts	0x00EA, r25	; 0x8000ea <__flp+0x1>
     fc0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__flp>
     fc4:	fe 01       	movw	r30, r28
     fc6:	32 96       	adiw	r30, 0x02	; 2
     fc8:	44 c0       	rjmp	.+136    	; 0x1052 <malloc+0x124>
     fca:	fe 01       	movw	r30, r28
     fcc:	e2 0f       	add	r30, r18
     fce:	f3 1f       	adc	r31, r19
     fd0:	81 93       	st	Z+, r24
     fd2:	91 93       	st	Z+, r25
     fd4:	22 50       	subi	r18, 0x02	; 2
     fd6:	31 09       	sbc	r19, r1
     fd8:	39 83       	std	Y+1, r19	; 0x01
     fda:	28 83       	st	Y, r18
     fdc:	3a c0       	rjmp	.+116    	; 0x1052 <malloc+0x124>
     fde:	20 91 e7 00 	lds	r18, 0x00E7	; 0x8000e7 <__brkval>
     fe2:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <__brkval+0x1>
     fe6:	23 2b       	or	r18, r19
     fe8:	41 f4       	brne	.+16     	; 0xffa <malloc+0xcc>
     fea:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
     fee:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
     ff2:	30 93 e8 00 	sts	0x00E8, r19	; 0x8000e8 <__brkval+0x1>
     ff6:	20 93 e7 00 	sts	0x00E7, r18	; 0x8000e7 <__brkval>
     ffa:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     ffe:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1002:	21 15       	cp	r18, r1
    1004:	31 05       	cpc	r19, r1
    1006:	41 f4       	brne	.+16     	; 0x1018 <malloc+0xea>
    1008:	2d b7       	in	r18, 0x3d	; 61
    100a:	3e b7       	in	r19, 0x3e	; 62
    100c:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    1010:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    1014:	24 1b       	sub	r18, r20
    1016:	35 0b       	sbc	r19, r21
    1018:	e0 91 e7 00 	lds	r30, 0x00E7	; 0x8000e7 <__brkval>
    101c:	f0 91 e8 00 	lds	r31, 0x00E8	; 0x8000e8 <__brkval+0x1>
    1020:	e2 17       	cp	r30, r18
    1022:	f3 07       	cpc	r31, r19
    1024:	a0 f4       	brcc	.+40     	; 0x104e <malloc+0x120>
    1026:	2e 1b       	sub	r18, r30
    1028:	3f 0b       	sbc	r19, r31
    102a:	28 17       	cp	r18, r24
    102c:	39 07       	cpc	r19, r25
    102e:	78 f0       	brcs	.+30     	; 0x104e <malloc+0x120>
    1030:	ac 01       	movw	r20, r24
    1032:	4e 5f       	subi	r20, 0xFE	; 254
    1034:	5f 4f       	sbci	r21, 0xFF	; 255
    1036:	24 17       	cp	r18, r20
    1038:	35 07       	cpc	r19, r21
    103a:	48 f0       	brcs	.+18     	; 0x104e <malloc+0x120>
    103c:	4e 0f       	add	r20, r30
    103e:	5f 1f       	adc	r21, r31
    1040:	50 93 e8 00 	sts	0x00E8, r21	; 0x8000e8 <__brkval+0x1>
    1044:	40 93 e7 00 	sts	0x00E7, r20	; 0x8000e7 <__brkval>
    1048:	81 93       	st	Z+, r24
    104a:	91 93       	st	Z+, r25
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <malloc+0x124>
    104e:	e0 e0       	ldi	r30, 0x00	; 0
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	cf 01       	movw	r24, r30
    1054:	df 91       	pop	r29
    1056:	cf 91       	pop	r28
    1058:	1f 91       	pop	r17
    105a:	0f 91       	pop	r16
    105c:	08 95       	ret

0000105e <free>:
    105e:	cf 93       	push	r28
    1060:	df 93       	push	r29
    1062:	00 97       	sbiw	r24, 0x00	; 0
    1064:	09 f4       	brne	.+2      	; 0x1068 <free+0xa>
    1066:	81 c0       	rjmp	.+258    	; 0x116a <free+0x10c>
    1068:	fc 01       	movw	r30, r24
    106a:	32 97       	sbiw	r30, 0x02	; 2
    106c:	13 82       	std	Z+3, r1	; 0x03
    106e:	12 82       	std	Z+2, r1	; 0x02
    1070:	a0 91 e9 00 	lds	r26, 0x00E9	; 0x8000e9 <__flp>
    1074:	b0 91 ea 00 	lds	r27, 0x00EA	; 0x8000ea <__flp+0x1>
    1078:	10 97       	sbiw	r26, 0x00	; 0
    107a:	81 f4       	brne	.+32     	; 0x109c <free+0x3e>
    107c:	20 81       	ld	r18, Z
    107e:	31 81       	ldd	r19, Z+1	; 0x01
    1080:	82 0f       	add	r24, r18
    1082:	93 1f       	adc	r25, r19
    1084:	20 91 e7 00 	lds	r18, 0x00E7	; 0x8000e7 <__brkval>
    1088:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <__brkval+0x1>
    108c:	28 17       	cp	r18, r24
    108e:	39 07       	cpc	r19, r25
    1090:	51 f5       	brne	.+84     	; 0x10e6 <free+0x88>
    1092:	f0 93 e8 00 	sts	0x00E8, r31	; 0x8000e8 <__brkval+0x1>
    1096:	e0 93 e7 00 	sts	0x00E7, r30	; 0x8000e7 <__brkval>
    109a:	67 c0       	rjmp	.+206    	; 0x116a <free+0x10c>
    109c:	ed 01       	movw	r28, r26
    109e:	20 e0       	ldi	r18, 0x00	; 0
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	ce 17       	cp	r28, r30
    10a4:	df 07       	cpc	r29, r31
    10a6:	40 f4       	brcc	.+16     	; 0x10b8 <free+0x5a>
    10a8:	4a 81       	ldd	r20, Y+2	; 0x02
    10aa:	5b 81       	ldd	r21, Y+3	; 0x03
    10ac:	9e 01       	movw	r18, r28
    10ae:	41 15       	cp	r20, r1
    10b0:	51 05       	cpc	r21, r1
    10b2:	f1 f0       	breq	.+60     	; 0x10f0 <free+0x92>
    10b4:	ea 01       	movw	r28, r20
    10b6:	f5 cf       	rjmp	.-22     	; 0x10a2 <free+0x44>
    10b8:	d3 83       	std	Z+3, r29	; 0x03
    10ba:	c2 83       	std	Z+2, r28	; 0x02
    10bc:	40 81       	ld	r20, Z
    10be:	51 81       	ldd	r21, Z+1	; 0x01
    10c0:	84 0f       	add	r24, r20
    10c2:	95 1f       	adc	r25, r21
    10c4:	c8 17       	cp	r28, r24
    10c6:	d9 07       	cpc	r29, r25
    10c8:	59 f4       	brne	.+22     	; 0x10e0 <free+0x82>
    10ca:	88 81       	ld	r24, Y
    10cc:	99 81       	ldd	r25, Y+1	; 0x01
    10ce:	84 0f       	add	r24, r20
    10d0:	95 1f       	adc	r25, r21
    10d2:	02 96       	adiw	r24, 0x02	; 2
    10d4:	91 83       	std	Z+1, r25	; 0x01
    10d6:	80 83       	st	Z, r24
    10d8:	8a 81       	ldd	r24, Y+2	; 0x02
    10da:	9b 81       	ldd	r25, Y+3	; 0x03
    10dc:	93 83       	std	Z+3, r25	; 0x03
    10de:	82 83       	std	Z+2, r24	; 0x02
    10e0:	21 15       	cp	r18, r1
    10e2:	31 05       	cpc	r19, r1
    10e4:	29 f4       	brne	.+10     	; 0x10f0 <free+0x92>
    10e6:	f0 93 ea 00 	sts	0x00EA, r31	; 0x8000ea <__flp+0x1>
    10ea:	e0 93 e9 00 	sts	0x00E9, r30	; 0x8000e9 <__flp>
    10ee:	3d c0       	rjmp	.+122    	; 0x116a <free+0x10c>
    10f0:	e9 01       	movw	r28, r18
    10f2:	fb 83       	std	Y+3, r31	; 0x03
    10f4:	ea 83       	std	Y+2, r30	; 0x02
    10f6:	49 91       	ld	r20, Y+
    10f8:	59 91       	ld	r21, Y+
    10fa:	c4 0f       	add	r28, r20
    10fc:	d5 1f       	adc	r29, r21
    10fe:	ec 17       	cp	r30, r28
    1100:	fd 07       	cpc	r31, r29
    1102:	61 f4       	brne	.+24     	; 0x111c <free+0xbe>
    1104:	80 81       	ld	r24, Z
    1106:	91 81       	ldd	r25, Z+1	; 0x01
    1108:	84 0f       	add	r24, r20
    110a:	95 1f       	adc	r25, r21
    110c:	02 96       	adiw	r24, 0x02	; 2
    110e:	e9 01       	movw	r28, r18
    1110:	99 83       	std	Y+1, r25	; 0x01
    1112:	88 83       	st	Y, r24
    1114:	82 81       	ldd	r24, Z+2	; 0x02
    1116:	93 81       	ldd	r25, Z+3	; 0x03
    1118:	9b 83       	std	Y+3, r25	; 0x03
    111a:	8a 83       	std	Y+2, r24	; 0x02
    111c:	e0 e0       	ldi	r30, 0x00	; 0
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	12 96       	adiw	r26, 0x02	; 2
    1122:	8d 91       	ld	r24, X+
    1124:	9c 91       	ld	r25, X
    1126:	13 97       	sbiw	r26, 0x03	; 3
    1128:	00 97       	sbiw	r24, 0x00	; 0
    112a:	19 f0       	breq	.+6      	; 0x1132 <free+0xd4>
    112c:	fd 01       	movw	r30, r26
    112e:	dc 01       	movw	r26, r24
    1130:	f7 cf       	rjmp	.-18     	; 0x1120 <free+0xc2>
    1132:	8d 91       	ld	r24, X+
    1134:	9c 91       	ld	r25, X
    1136:	11 97       	sbiw	r26, 0x01	; 1
    1138:	9d 01       	movw	r18, r26
    113a:	2e 5f       	subi	r18, 0xFE	; 254
    113c:	3f 4f       	sbci	r19, 0xFF	; 255
    113e:	82 0f       	add	r24, r18
    1140:	93 1f       	adc	r25, r19
    1142:	20 91 e7 00 	lds	r18, 0x00E7	; 0x8000e7 <__brkval>
    1146:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <__brkval+0x1>
    114a:	28 17       	cp	r18, r24
    114c:	39 07       	cpc	r19, r25
    114e:	69 f4       	brne	.+26     	; 0x116a <free+0x10c>
    1150:	30 97       	sbiw	r30, 0x00	; 0
    1152:	29 f4       	brne	.+10     	; 0x115e <free+0x100>
    1154:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__flp+0x1>
    1158:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__flp>
    115c:	02 c0       	rjmp	.+4      	; 0x1162 <free+0x104>
    115e:	13 82       	std	Z+3, r1	; 0x03
    1160:	12 82       	std	Z+2, r1	; 0x02
    1162:	b0 93 e8 00 	sts	0x00E8, r27	; 0x8000e8 <__brkval+0x1>
    1166:	a0 93 e7 00 	sts	0x00E7, r26	; 0x8000e7 <__brkval>
    116a:	df 91       	pop	r29
    116c:	cf 91       	pop	r28
    116e:	08 95       	ret

00001170 <memset>:
    1170:	dc 01       	movw	r26, r24
    1172:	01 c0       	rjmp	.+2      	; 0x1176 <memset+0x6>
    1174:	6d 93       	st	X+, r22
    1176:	41 50       	subi	r20, 0x01	; 1
    1178:	50 40       	sbci	r21, 0x00	; 0
    117a:	e0 f7       	brcc	.-8      	; 0x1174 <memset+0x4>
    117c:	08 95       	ret

0000117e <_exit>:
    117e:	f8 94       	cli

00001180 <__stop_program>:
    1180:	ff cf       	rjmp	.-2      	; 0x1180 <__stop_program>
