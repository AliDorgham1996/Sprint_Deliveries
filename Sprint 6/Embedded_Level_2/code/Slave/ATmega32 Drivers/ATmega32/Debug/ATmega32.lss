
ATmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000d90  00000e24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000073  0080006e  0080006e  00000e32  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e32  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003b8  00000000  00000000  00000ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004262  00000000  00000000  00001258  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000138e  00000000  00000000  000054ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002699  00000000  00000000  00006848  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c7c  00000000  00000000  00008ee4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001e2a  00000000  00000000  00009b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000380f  00000000  00000000  0000b98a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000368  00000000  00000000  0000f199  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__vector_1>
   8:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__vector_2>
   c:	0c 94 06 01 	jmp	0x20c	; 0x20c <__vector_3>
  10:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__vector_4>
  14:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 1b 03 	jmp	0x636	; 0x636 <__vector_10>
  2c:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 bb 03 	jmp	0x776	; 0x776 <__vector_13>
  38:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e9       	ldi	r30, 0x90	; 144
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 3e       	cpi	r26, 0xE1	; 225
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6d 00 	call	0xda	; 0xda <main>
  8a:	0c 94 c6 06 	jmp	0xd8c	; 0xd8c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <I2C_Driver>:
#include "../MCAL/I2C/I2C.h"
#include "../Library/Registers.h"
#include "../Library/System_Delays/Delays.h"

void I2C_Driver(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	1f 92       	push	r1
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
	uint8_t Data = 0;
  9c:	19 82       	std	Y+1, r1	; 0x01
	I2C_Error_t result = I2C_EN_valid;
	DDRA = 0xFF;
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	8a bb       	out	0x1a, r24	; 26
	I2C_init(100000);
  a2:	60 ea       	ldi	r22, 0xA0	; 160
  a4:	76 e8       	ldi	r23, 0x86	; 134
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	0e 94 3a 01 	call	0x274	; 0x274 <I2C_init>
	Delay_Ms(10);
  ae:	2a e0       	ldi	r18, 0x0A	; 10
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	40 e0       	ldi	r20, 0x00	; 0
  b4:	50 e0       	ldi	r21, 0x00	; 0
  b6:	60 e0       	ldi	r22, 0x00	; 0
  b8:	70 e0       	ldi	r23, 0x00	; 0
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 72 00 	call	0xe4	; 0xe4 <Delay_Ms>
	while(1)
	{
		result = I2C_Listen();
  c2:	0e 94 57 01 	call	0x2ae	; 0x2ae <I2C_Listen>
		if(result == I2C_EN_SlaveReceive)
  c6:	86 30       	cpi	r24, 0x06	; 6
  c8:	e1 f7       	brne	.-8      	; 0xc2 <I2C_Driver+0x30>
		{
			I2C_Read(&Data, I2C_SR_DATA_ACK);
  ca:	60 e1       	ldi	r22, 0x10	; 16
  cc:	ce 01       	movw	r24, r28
  ce:	01 96       	adiw	r24, 0x01	; 1
  d0:	0e 94 7d 01 	call	0x2fa	; 0x2fa <I2C_Read>
			PORTA = Data;
  d4:	89 81       	ldd	r24, Y+1	; 0x01
  d6:	8b bb       	out	0x1b, r24	; 27
  d8:	f4 cf       	rjmp	.-24     	; 0xc2 <I2C_Driver+0x30>

000000da <main>:
#if (Running_Task == Task_SPI_Driver)
	SPI_Driver();
#elif (Running_Task == Task_SPI_UART)
	SPI_UART();
#elif (Running_Task == Task_I2C_Driver)
	I2C_Driver();
  da:	0e 94 49 00 	call	0x92	; 0x92 <I2C_Driver>
#elif (Running_Task == Task_IDLE)
	IDLE();
#endif /* Task */
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	08 95       	ret

000000e4 <Delay_Ms>:
  e4:	ff 92       	push	r15
  e6:	0f 93       	push	r16
  e8:	1f 93       	push	r17
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	f2 2e       	mov	r15, r18
  f0:	03 2f       	mov	r16, r19
  f2:	14 2f       	mov	r17, r20
  f4:	d5 2f       	mov	r29, r21
  f6:	c6 2f       	mov	r28, r22
  f8:	b7 2f       	mov	r27, r23
  fa:	f8 2f       	mov	r31, r24
  fc:	e9 2f       	mov	r30, r25
  fe:	a0 e0       	ldi	r26, 0x00	; 0
 100:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__cmpdi2_s8>
 104:	e9 f0       	breq	.+58     	; 0x140 <Delay_Ms+0x5c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 106:	8f ec       	ldi	r24, 0xCF	; 207
 108:	97 e0       	ldi	r25, 0x07	; 7
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <Delay_Ms+0x26>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <Delay_Ms+0x2c>
 110:	00 00       	nop
 112:	2f 2d       	mov	r18, r15
 114:	30 2f       	mov	r19, r16
 116:	41 2f       	mov	r20, r17
 118:	5d 2f       	mov	r21, r29
 11a:	6c 2f       	mov	r22, r28
 11c:	7b 2f       	mov	r23, r27
 11e:	8f 2f       	mov	r24, r31
 120:	9e 2f       	mov	r25, r30
 122:	af ef       	ldi	r26, 0xFF	; 255
 124:	0e 94 91 06 	call	0xd22	; 0xd22 <__adddi3_s8>
 128:	f2 2e       	mov	r15, r18
 12a:	03 2f       	mov	r16, r19
 12c:	14 2f       	mov	r17, r20
 12e:	d5 2f       	mov	r29, r21
 130:	c6 2f       	mov	r28, r22
 132:	b7 2f       	mov	r27, r23
 134:	f8 2f       	mov	r31, r24
 136:	e9 2f       	mov	r30, r25
 138:	a0 e0       	ldi	r26, 0x00	; 0
 13a:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__cmpdi2_s8>
 13e:	19 f7       	brne	.-58     	; 0x106 <Delay_Ms+0x22>
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	1f 91       	pop	r17
 146:	0f 91       	pop	r16
 148:	ff 90       	pop	r15
 14a:	08 95       	ret

0000014c <__vector_1>:
 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	0f 92       	push	r0
 154:	11 24       	eor	r1, r1
 156:	2f 93       	push	r18
 158:	3f 93       	push	r19
 15a:	4f 93       	push	r20
 15c:	5f 93       	push	r21
 15e:	6f 93       	push	r22
 160:	7f 93       	push	r23
 162:	8f 93       	push	r24
 164:	9f 93       	push	r25
 166:	af 93       	push	r26
 168:	bf 93       	push	r27
 16a:	ef 93       	push	r30
 16c:	ff 93       	push	r31
 16e:	8a b7       	in	r24, 0x3a	; 58
 170:	80 64       	ori	r24, 0x40	; 64
 172:	8a bf       	out	0x3a, r24	; 58
 174:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
 178:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <__data_end+0x1>
 17c:	89 2b       	or	r24, r25
 17e:	29 f0       	breq	.+10     	; 0x18a <__vector_1+0x3e>
 180:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <__data_end>
 184:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <__data_end+0x1>
 188:	09 95       	icall
 18a:	ff 91       	pop	r31
 18c:	ef 91       	pop	r30
 18e:	bf 91       	pop	r27
 190:	af 91       	pop	r26
 192:	9f 91       	pop	r25
 194:	8f 91       	pop	r24
 196:	7f 91       	pop	r23
 198:	6f 91       	pop	r22
 19a:	5f 91       	pop	r21
 19c:	4f 91       	pop	r20
 19e:	3f 91       	pop	r19
 1a0:	2f 91       	pop	r18
 1a2:	0f 90       	pop	r0
 1a4:	0f be       	out	0x3f, r0	; 63
 1a6:	0f 90       	pop	r0
 1a8:	1f 90       	pop	r1
 1aa:	18 95       	reti

000001ac <__vector_2>:
 1ac:	1f 92       	push	r1
 1ae:	0f 92       	push	r0
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	0f 92       	push	r0
 1b4:	11 24       	eor	r1, r1
 1b6:	2f 93       	push	r18
 1b8:	3f 93       	push	r19
 1ba:	4f 93       	push	r20
 1bc:	5f 93       	push	r21
 1be:	6f 93       	push	r22
 1c0:	7f 93       	push	r23
 1c2:	8f 93       	push	r24
 1c4:	9f 93       	push	r25
 1c6:	af 93       	push	r26
 1c8:	bf 93       	push	r27
 1ca:	ef 93       	push	r30
 1cc:	ff 93       	push	r31
 1ce:	8a b7       	in	r24, 0x3a	; 58
 1d0:	80 68       	ori	r24, 0x80	; 128
 1d2:	8a bf       	out	0x3a, r24	; 58
 1d4:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end+0x2>
 1d8:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__data_end+0x3>
 1dc:	89 2b       	or	r24, r25
 1de:	29 f0       	breq	.+10     	; 0x1ea <__vector_2+0x3e>
 1e0:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <__data_end+0x2>
 1e4:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <__data_end+0x3>
 1e8:	09 95       	icall
 1ea:	ff 91       	pop	r31
 1ec:	ef 91       	pop	r30
 1ee:	bf 91       	pop	r27
 1f0:	af 91       	pop	r26
 1f2:	9f 91       	pop	r25
 1f4:	8f 91       	pop	r24
 1f6:	7f 91       	pop	r23
 1f8:	6f 91       	pop	r22
 1fa:	5f 91       	pop	r21
 1fc:	4f 91       	pop	r20
 1fe:	3f 91       	pop	r19
 200:	2f 91       	pop	r18
 202:	0f 90       	pop	r0
 204:	0f be       	out	0x3f, r0	; 63
 206:	0f 90       	pop	r0
 208:	1f 90       	pop	r1
 20a:	18 95       	reti

0000020c <__vector_3>:
 20c:	1f 92       	push	r1
 20e:	0f 92       	push	r0
 210:	0f b6       	in	r0, 0x3f	; 63
 212:	0f 92       	push	r0
 214:	11 24       	eor	r1, r1
 216:	2f 93       	push	r18
 218:	3f 93       	push	r19
 21a:	4f 93       	push	r20
 21c:	5f 93       	push	r21
 21e:	6f 93       	push	r22
 220:	7f 93       	push	r23
 222:	8f 93       	push	r24
 224:	9f 93       	push	r25
 226:	af 93       	push	r26
 228:	bf 93       	push	r27
 22a:	ef 93       	push	r30
 22c:	ff 93       	push	r31
 22e:	8a b7       	in	r24, 0x3a	; 58
 230:	80 62       	ori	r24, 0x20	; 32
 232:	8a bf       	out	0x3a, r24	; 58
 234:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end+0x4>
 238:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <__data_end+0x5>
 23c:	89 2b       	or	r24, r25
 23e:	29 f0       	breq	.+10     	; 0x24a <__vector_3+0x3e>
 240:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <__data_end+0x4>
 244:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <__data_end+0x5>
 248:	09 95       	icall
 24a:	ff 91       	pop	r31
 24c:	ef 91       	pop	r30
 24e:	bf 91       	pop	r27
 250:	af 91       	pop	r26
 252:	9f 91       	pop	r25
 254:	8f 91       	pop	r24
 256:	7f 91       	pop	r23
 258:	6f 91       	pop	r22
 25a:	5f 91       	pop	r21
 25c:	4f 91       	pop	r20
 25e:	3f 91       	pop	r19
 260:	2f 91       	pop	r18
 262:	0f 90       	pop	r0
 264:	0f be       	out	0x3f, r0	; 63
 266:	0f 90       	pop	r0
 268:	1f 90       	pop	r1
 26a:	18 95       	reti

0000026c <I2C_Wait>:
	else
	{
		return_value = I2C_EN_InvalidCode;
	}
	return return_value;
}
 26c:	06 b6       	in	r0, 0x36	; 54
 26e:	07 fe       	sbrs	r0, 7
 270:	fd cf       	rjmp	.-6      	; 0x26c <I2C_Wait>
 272:	08 95       	ret

00000274 <I2C_init>:
 274:	9b 01       	movw	r18, r22
 276:	ac 01       	movw	r20, r24
 278:	81 b1       	in	r24, 0x01	; 1
 27a:	8c 7f       	andi	r24, 0xFC	; 252
 27c:	81 b9       	out	0x01, r24	; 1
 27e:	82 b1       	in	r24, 0x02	; 2
 280:	80 78       	andi	r24, 0x80	; 128
 282:	81 60       	ori	r24, 0x01	; 1
 284:	82 b9       	out	0x02, r24	; 2
 286:	60 e0       	ldi	r22, 0x00	; 0
 288:	72 e1       	ldi	r23, 0x12	; 18
 28a:	8a e7       	ldi	r24, 0x7A	; 122
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	0e 94 6f 06 	call	0xcde	; 0xcde <__udivmodsi4>
 292:	da 01       	movw	r26, r20
 294:	c9 01       	movw	r24, r18
 296:	40 97       	sbiw	r24, 0x10	; 16
 298:	a1 09       	sbc	r26, r1
 29a:	b1 09       	sbc	r27, r1
 29c:	b6 95       	lsr	r27
 29e:	a7 95       	ror	r26
 2a0:	97 95       	ror	r25
 2a2:	87 95       	ror	r24
 2a4:	80 b9       	out	0x00, r24	; 0
 2a6:	86 b7       	in	r24, 0x36	; 54
 2a8:	84 60       	ori	r24, 0x04	; 4
 2aa:	86 bf       	out	0x36, r24	; 54
 2ac:	08 95       	ret

000002ae <I2C_Listen>:
 2ae:	cf 93       	push	r28
 2b0:	c4 ec       	ldi	r28, 0xC4	; 196
 2b2:	c6 bf       	out	0x36, r28	; 54
 2b4:	0e 94 36 01 	call	0x26c	; 0x26c <I2C_Wait>
 2b8:	81 b1       	in	r24, 0x01	; 1
 2ba:	86 95       	lsr	r24
 2bc:	86 95       	lsr	r24
 2be:	86 95       	lsr	r24
 2c0:	85 31       	cpi	r24, 0x15	; 21
 2c2:	a1 f0       	breq	.+40     	; 0x2ec <I2C_Listen+0x3e>
 2c4:	81 b1       	in	r24, 0x01	; 1
 2c6:	86 95       	lsr	r24
 2c8:	86 95       	lsr	r24
 2ca:	86 95       	lsr	r24
 2cc:	86 31       	cpi	r24, 0x16	; 22
 2ce:	81 f0       	breq	.+32     	; 0x2f0 <I2C_Listen+0x42>
 2d0:	81 b1       	in	r24, 0x01	; 1
 2d2:	86 95       	lsr	r24
 2d4:	86 95       	lsr	r24
 2d6:	86 95       	lsr	r24
 2d8:	8c 30       	cpi	r24, 0x0C	; 12
 2da:	61 f0       	breq	.+24     	; 0x2f4 <I2C_Listen+0x46>
 2dc:	81 b1       	in	r24, 0x01	; 1
 2de:	86 95       	lsr	r24
 2e0:	86 95       	lsr	r24
 2e2:	86 95       	lsr	r24
 2e4:	8d 30       	cpi	r24, 0x0D	; 13
 2e6:	29 f7       	brne	.-54     	; 0x2b2 <I2C_Listen+0x4>
 2e8:	87 e0       	ldi	r24, 0x07	; 7
 2ea:	05 c0       	rjmp	.+10     	; 0x2f6 <I2C_Listen+0x48>
 2ec:	86 e0       	ldi	r24, 0x06	; 6
 2ee:	03 c0       	rjmp	.+6      	; 0x2f6 <I2C_Listen+0x48>
 2f0:	86 e0       	ldi	r24, 0x06	; 6
 2f2:	01 c0       	rjmp	.+2      	; 0x2f6 <I2C_Listen+0x48>
 2f4:	87 e0       	ldi	r24, 0x07	; 7
 2f6:	cf 91       	pop	r28
 2f8:	08 95       	ret

000002fa <I2C_Read>:
I2C_Error_t		I2C_Read		(uint8_t* Data, I2C_StatusCode_t Code)//done
{
 2fa:	0f 93       	push	r16
 2fc:	1f 93       	push	r17
 2fe:	cf 93       	push	r28
	I2C_Error_t return_value = I2C_EN_valid;
	if(Data != NULL)
 300:	00 97       	sbiw	r24, 0x00	; 0
 302:	01 f1       	breq	.+64     	; 0x344 <I2C_Read+0x4a>
	{
		I2C.Control.TWCR_Reg = (1<<TWEN)|(1<<TWINT)|(1<<TWEA);
 304:	24 ec       	ldi	r18, 0xC4	; 196
 306:	26 bf       	out	0x36, r18	; 54
		if(STATUS_CODE_ENABLE_ACK)
 308:	6a 30       	cpi	r22, 0x0A	; 10
 30a:	11 f0       	breq	.+4      	; 0x310 <I2C_Read+0x16>
 30c:	60 31       	cpi	r22, 0x10	; 16
 30e:	21 f4       	brne	.+8      	; 0x318 <I2C_Read+0x1e>
		{
			I2C.Control.TWCR_Bits.acknowledge = ENABLE;
 310:	26 b7       	in	r18, 0x36	; 54
 312:	20 64       	ori	r18, 0x40	; 64
 314:	26 bf       	out	0x36, r18	; 54
 316:	03 c0       	rjmp	.+6      	; 0x31e <I2C_Read+0x24>
		}
		else
		{
			I2C.Control.TWCR_Bits.acknowledge = DISABLE;
 318:	26 b7       	in	r18, 0x36	; 54
 31a:	2f 7b       	andi	r18, 0xBF	; 191
 31c:	26 bf       	out	0x36, r18	; 54
 31e:	c6 2f       	mov	r28, r22
 320:	8c 01       	movw	r16, r24
		}
		I2C_Wait();
 322:	0e 94 36 01 	call	0x26c	; 0x26c <I2C_Wait>
		if(I2C.Status.status_code == Code)
 326:	21 b1       	in	r18, 0x01	; 1
 328:	26 95       	lsr	r18
 32a:	26 95       	lsr	r18
 32c:	26 95       	lsr	r18
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	6c 2f       	mov	r22, r28
 332:	70 e0       	ldi	r23, 0x00	; 0
 334:	26 17       	cp	r18, r22
 336:	37 07       	cpc	r19, r23
 338:	39 f4       	brne	.+14     	; 0x348 <I2C_Read+0x4e>
		{
			*Data = I2C.Data;
 33a:	83 b1       	in	r24, 0x03	; 3
 33c:	f8 01       	movw	r30, r16
 33e:	80 83       	st	Z, r24
	}
	return return_value;
}
I2C_Error_t		I2C_Read		(uint8_t* Data, I2C_StatusCode_t Code)//done
{
	I2C_Error_t return_value = I2C_EN_valid;
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	03 c0       	rjmp	.+6      	; 0x34a <I2C_Read+0x50>
			return_value = I2C_EN_InvalidCode;
		}
	}
	else
	{
		return_value = I2C_EN_InvalidPointer;
 344:	83 e0       	ldi	r24, 0x03	; 3
 346:	01 c0       	rjmp	.+2      	; 0x34a <I2C_Read+0x50>
		{
			*Data = I2C.Data;
		}
		else
		{
			return_value = I2C_EN_InvalidCode;
 348:	84 e0       	ldi	r24, 0x04	; 4
	else
	{
		return_value = I2C_EN_InvalidPointer;
	}
	return return_value;
 34a:	cf 91       	pop	r28
 34c:	1f 91       	pop	r17
 34e:	0f 91       	pop	r16
 350:	08 95       	ret

00000352 <Timer_ResetCounter>:
 352:	81 11       	cpse	r24, r1
 354:	0c c0       	rjmp	.+24     	; 0x36e <Timer_ResetCounter+0x1c>
 356:	e8 e9       	ldi	r30, 0x98	; 152
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	10 82       	st	Z, r1
 35c:	11 82       	std	Z+1, r1	; 0x01
 35e:	12 82       	std	Z+2, r1	; 0x02
 360:	13 82       	std	Z+3, r1	; 0x03
 362:	14 82       	std	Z+4, r1	; 0x04
 364:	15 82       	std	Z+5, r1	; 0x05
 366:	16 82       	std	Z+6, r1	; 0x06
 368:	17 82       	std	Z+7, r1	; 0x07
 36a:	12 be       	out	0x32, r1	; 50
 36c:	08 95       	ret
 36e:	81 30       	cpi	r24, 0x01	; 1
 370:	59 f4       	brne	.+22     	; 0x388 <Timer_ResetCounter+0x36>
 372:	e8 e9       	ldi	r30, 0x98	; 152
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	10 86       	std	Z+8, r1	; 0x08
 378:	11 86       	std	Z+9, r1	; 0x09
 37a:	12 86       	std	Z+10, r1	; 0x0a
 37c:	13 86       	std	Z+11, r1	; 0x0b
 37e:	14 86       	std	Z+12, r1	; 0x0c
 380:	15 86       	std	Z+13, r1	; 0x0d
 382:	16 86       	std	Z+14, r1	; 0x0e
 384:	17 86       	std	Z+15, r1	; 0x0f
 386:	14 bc       	out	0x24, r1	; 36
 388:	08 95       	ret

0000038a <__vector_11>:
 38a:	1f 92       	push	r1
 38c:	0f 92       	push	r0
 38e:	0f b6       	in	r0, 0x3f	; 63
 390:	0f 92       	push	r0
 392:	11 24       	eor	r1, r1
 394:	af 92       	push	r10
 396:	bf 92       	push	r11
 398:	cf 92       	push	r12
 39a:	df 92       	push	r13
 39c:	ef 92       	push	r14
 39e:	ff 92       	push	r15
 3a0:	0f 93       	push	r16
 3a2:	1f 93       	push	r17
 3a4:	2f 93       	push	r18
 3a6:	3f 93       	push	r19
 3a8:	4f 93       	push	r20
 3aa:	5f 93       	push	r21
 3ac:	6f 93       	push	r22
 3ae:	7f 93       	push	r23
 3b0:	8f 93       	push	r24
 3b2:	9f 93       	push	r25
 3b4:	af 93       	push	r26
 3b6:	bf 93       	push	r27
 3b8:	cf 93       	push	r28
 3ba:	df 93       	push	r29
 3bc:	ef 93       	push	r30
 3be:	ff 93       	push	r31
 3c0:	88 b7       	in	r24, 0x38	; 56
 3c2:	81 60       	ori	r24, 0x01	; 1
 3c4:	88 bf       	out	0x38, r24	; 56
 3c6:	c8 e9       	ldi	r28, 0x98	; 152
 3c8:	d0 e0       	ldi	r29, 0x00	; 0
 3ca:	28 81       	ld	r18, Y
 3cc:	39 81       	ldd	r19, Y+1	; 0x01
 3ce:	4a 81       	ldd	r20, Y+2	; 0x02
 3d0:	5b 81       	ldd	r21, Y+3	; 0x03
 3d2:	6c 81       	ldd	r22, Y+4	; 0x04
 3d4:	7d 81       	ldd	r23, Y+5	; 0x05
 3d6:	8e 81       	ldd	r24, Y+6	; 0x06
 3d8:	9f 81       	ldd	r25, Y+7	; 0x07
 3da:	a1 e0       	ldi	r26, 0x01	; 1
 3dc:	0e 94 91 06 	call	0xd22	; 0xd22 <__adddi3_s8>
 3e0:	28 83       	st	Y, r18
 3e2:	39 83       	std	Y+1, r19	; 0x01
 3e4:	4a 83       	std	Y+2, r20	; 0x02
 3e6:	5b 83       	std	Y+3, r21	; 0x03
 3e8:	6c 83       	std	Y+4, r22	; 0x04
 3ea:	7d 83       	std	Y+5, r23	; 0x05
 3ec:	8e 83       	std	Y+6, r24	; 0x06
 3ee:	9f 83       	std	Y+7, r25	; 0x07
 3f0:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <PWMAction>
 3f4:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <PWMAction+0x1>
 3f8:	09 95       	icall
 3fa:	28 81       	ld	r18, Y
 3fc:	39 81       	ldd	r19, Y+1	; 0x01
 3fe:	4a 81       	ldd	r20, Y+2	; 0x02
 400:	5b 81       	ldd	r21, Y+3	; 0x03
 402:	6c 81       	ldd	r22, Y+4	; 0x04
 404:	7d 81       	ldd	r23, Y+5	; 0x05
 406:	8e 81       	ldd	r24, Y+6	; 0x06
 408:	9f 81       	ldd	r25, Y+7	; 0x07
 40a:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	ee 0f       	add	r30, r30
 412:	ff 1f       	adc	r31, r31
 414:	ee 0f       	add	r30, r30
 416:	ff 1f       	adc	r31, r31
 418:	ee 0f       	add	r30, r30
 41a:	ff 1f       	adc	r31, r31
 41c:	e8 58       	subi	r30, 0x88	; 136
 41e:	ff 4f       	sbci	r31, 0xFF	; 255
 420:	a0 80       	ld	r10, Z
 422:	b1 80       	ldd	r11, Z+1	; 0x01
 424:	c2 80       	ldd	r12, Z+2	; 0x02
 426:	d3 80       	ldd	r13, Z+3	; 0x03
 428:	e4 80       	ldd	r14, Z+4	; 0x04
 42a:	f5 80       	ldd	r15, Z+5	; 0x05
 42c:	06 81       	ldd	r16, Z+6	; 0x06
 42e:	17 81       	ldd	r17, Z+7	; 0x07
 430:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__cmpdi2>
 434:	d1 f5       	brne	.+116    	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
 436:	18 82       	st	Y, r1
 438:	19 82       	std	Y+1, r1	; 0x01
 43a:	1a 82       	std	Y+2, r1	; 0x02
 43c:	1b 82       	std	Y+3, r1	; 0x03
 43e:	1c 82       	std	Y+4, r1	; 0x04
 440:	1d 82       	std	Y+5, r1	; 0x05
 442:	1e 82       	std	Y+6, r1	; 0x06
 444:	1f 82       	std	Y+7, r1	; 0x07
 446:	e0 91 a8 00 	lds	r30, 0x00A8	; 0x8000a8 <NotifierAction>
 44a:	f0 91 a9 00 	lds	r31, 0x00A9	; 0x8000a9 <NotifierAction+0x1>
 44e:	09 95       	icall
 450:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 454:	81 11       	cpse	r24, r1
 456:	13 c0       	rjmp	.+38     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 45e:	e8 e7       	ldi	r30, 0x78	; 120
 460:	f0 e0       	ldi	r31, 0x00	; 0
 462:	90 85       	ldd	r25, Z+8	; 0x08
 464:	21 85       	ldd	r18, Z+9	; 0x09
 466:	22 85       	ldd	r18, Z+10	; 0x0a
 468:	23 85       	ldd	r18, Z+11	; 0x0b
 46a:	24 85       	ldd	r18, Z+12	; 0x0c
 46c:	25 85       	ldd	r18, Z+13	; 0x0d
 46e:	26 85       	ldd	r18, Z+14	; 0x0e
 470:	27 85       	ldd	r18, Z+15	; 0x0f
 472:	28 e1       	ldi	r18, 0x18	; 24
 474:	92 9f       	mul	r25, r18
 476:	80 0d       	add	r24, r0
 478:	11 24       	eor	r1, r1
 47a:	82 bf       	out	0x32, r24	; 50
 47c:	16 c0       	rjmp	.+44     	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
 47e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 482:	81 30       	cpi	r24, 0x01	; 1
 484:	91 f4       	brne	.+36     	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
 486:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 48a:	e8 e7       	ldi	r30, 0x78	; 120
 48c:	f0 e0       	ldi	r31, 0x00	; 0
 48e:	90 81       	ld	r25, Z
 490:	81 81       	ldd	r24, Z+1	; 0x01
 492:	82 81       	ldd	r24, Z+2	; 0x02
 494:	83 81       	ldd	r24, Z+3	; 0x03
 496:	84 81       	ldd	r24, Z+4	; 0x04
 498:	85 81       	ldd	r24, Z+5	; 0x05
 49a:	86 81       	ldd	r24, Z+6	; 0x06
 49c:	87 81       	ldd	r24, Z+7	; 0x07
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	28 e1       	ldi	r18, 0x18	; 24
 4a2:	92 9f       	mul	r25, r18
 4a4:	80 0d       	add	r24, r0
 4a6:	11 24       	eor	r1, r1
 4a8:	82 bf       	out	0x32, r24	; 50
 4aa:	ff 91       	pop	r31
 4ac:	ef 91       	pop	r30
 4ae:	df 91       	pop	r29
 4b0:	cf 91       	pop	r28
 4b2:	bf 91       	pop	r27
 4b4:	af 91       	pop	r26
 4b6:	9f 91       	pop	r25
 4b8:	8f 91       	pop	r24
 4ba:	7f 91       	pop	r23
 4bc:	6f 91       	pop	r22
 4be:	5f 91       	pop	r21
 4c0:	4f 91       	pop	r20
 4c2:	3f 91       	pop	r19
 4c4:	2f 91       	pop	r18
 4c6:	1f 91       	pop	r17
 4c8:	0f 91       	pop	r16
 4ca:	ff 90       	pop	r15
 4cc:	ef 90       	pop	r14
 4ce:	df 90       	pop	r13
 4d0:	cf 90       	pop	r12
 4d2:	bf 90       	pop	r11
 4d4:	af 90       	pop	r10
 4d6:	0f 90       	pop	r0
 4d8:	0f be       	out	0x3f, r0	; 63
 4da:	0f 90       	pop	r0
 4dc:	1f 90       	pop	r1
 4de:	18 95       	reti

000004e0 <__vector_5>:
 4e0:	1f 92       	push	r1
 4e2:	0f 92       	push	r0
 4e4:	0f b6       	in	r0, 0x3f	; 63
 4e6:	0f 92       	push	r0
 4e8:	11 24       	eor	r1, r1
 4ea:	af 92       	push	r10
 4ec:	bf 92       	push	r11
 4ee:	cf 92       	push	r12
 4f0:	df 92       	push	r13
 4f2:	ef 92       	push	r14
 4f4:	ff 92       	push	r15
 4f6:	0f 93       	push	r16
 4f8:	1f 93       	push	r17
 4fa:	2f 93       	push	r18
 4fc:	3f 93       	push	r19
 4fe:	4f 93       	push	r20
 500:	5f 93       	push	r21
 502:	6f 93       	push	r22
 504:	7f 93       	push	r23
 506:	8f 93       	push	r24
 508:	9f 93       	push	r25
 50a:	af 93       	push	r26
 50c:	bf 93       	push	r27
 50e:	cf 93       	push	r28
 510:	df 93       	push	r29
 512:	ef 93       	push	r30
 514:	ff 93       	push	r31
 516:	88 b7       	in	r24, 0x38	; 56
 518:	80 64       	ori	r24, 0x40	; 64
 51a:	88 bf       	out	0x38, r24	; 56
 51c:	c8 e9       	ldi	r28, 0x98	; 152
 51e:	d0 e0       	ldi	r29, 0x00	; 0
 520:	28 85       	ldd	r18, Y+8	; 0x08
 522:	39 85       	ldd	r19, Y+9	; 0x09
 524:	4a 85       	ldd	r20, Y+10	; 0x0a
 526:	5b 85       	ldd	r21, Y+11	; 0x0b
 528:	6c 85       	ldd	r22, Y+12	; 0x0c
 52a:	7d 85       	ldd	r23, Y+13	; 0x0d
 52c:	8e 85       	ldd	r24, Y+14	; 0x0e
 52e:	9f 85       	ldd	r25, Y+15	; 0x0f
 530:	a1 e0       	ldi	r26, 0x01	; 1
 532:	0e 94 91 06 	call	0xd22	; 0xd22 <__adddi3_s8>
 536:	28 87       	std	Y+8, r18	; 0x08
 538:	39 87       	std	Y+9, r19	; 0x09
 53a:	4a 87       	std	Y+10, r20	; 0x0a
 53c:	5b 87       	std	Y+11, r21	; 0x0b
 53e:	6c 87       	std	Y+12, r22	; 0x0c
 540:	7d 87       	std	Y+13, r23	; 0x0d
 542:	8e 87       	std	Y+14, r24	; 0x0e
 544:	9f 87       	std	Y+15, r25	; 0x0f
 546:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <PWMAction+0x2>
 54a:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <PWMAction+0x3>
 54e:	09 95       	icall
 550:	28 85       	ldd	r18, Y+8	; 0x08
 552:	39 85       	ldd	r19, Y+9	; 0x09
 554:	4a 85       	ldd	r20, Y+10	; 0x0a
 556:	5b 85       	ldd	r21, Y+11	; 0x0b
 558:	6c 85       	ldd	r22, Y+12	; 0x0c
 55a:	7d 85       	ldd	r23, Y+13	; 0x0d
 55c:	8e 85       	ldd	r24, Y+14	; 0x0e
 55e:	9f 85       	ldd	r25, Y+15	; 0x0f
 560:	e0 91 61 00 	lds	r30, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 564:	f0 e0       	ldi	r31, 0x00	; 0
 566:	ee 0f       	add	r30, r30
 568:	ff 1f       	adc	r31, r31
 56a:	ee 0f       	add	r30, r30
 56c:	ff 1f       	adc	r31, r31
 56e:	ee 0f       	add	r30, r30
 570:	ff 1f       	adc	r31, r31
 572:	e8 57       	subi	r30, 0x78	; 120
 574:	ff 4f       	sbci	r31, 0xFF	; 255
 576:	a0 80       	ld	r10, Z
 578:	b1 80       	ldd	r11, Z+1	; 0x01
 57a:	c2 80       	ldd	r12, Z+2	; 0x02
 57c:	d3 80       	ldd	r13, Z+3	; 0x03
 57e:	e4 80       	ldd	r14, Z+4	; 0x04
 580:	f5 80       	ldd	r15, Z+5	; 0x05
 582:	06 81       	ldd	r16, Z+6	; 0x06
 584:	17 81       	ldd	r17, Z+7	; 0x07
 586:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__cmpdi2>
 58a:	d1 f5       	brne	.+116    	; 0x600 <__vector_5+0x120>
 58c:	18 86       	std	Y+8, r1	; 0x08
 58e:	19 86       	std	Y+9, r1	; 0x09
 590:	1a 86       	std	Y+10, r1	; 0x0a
 592:	1b 86       	std	Y+11, r1	; 0x0b
 594:	1c 86       	std	Y+12, r1	; 0x0c
 596:	1d 86       	std	Y+13, r1	; 0x0d
 598:	1e 86       	std	Y+14, r1	; 0x0e
 59a:	1f 86       	std	Y+15, r1	; 0x0f
 59c:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <NotifierAction+0x2>
 5a0:	f0 91 ab 00 	lds	r31, 0x00AB	; 0x8000ab <NotifierAction+0x3>
 5a4:	09 95       	icall
 5a6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 5aa:	81 11       	cpse	r24, r1
 5ac:	13 c0       	rjmp	.+38     	; 0x5d4 <__vector_5+0xf4>
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 5b4:	e8 e7       	ldi	r30, 0x78	; 120
 5b6:	f0 e0       	ldi	r31, 0x00	; 0
 5b8:	90 8d       	ldd	r25, Z+24	; 0x18
 5ba:	21 8d       	ldd	r18, Z+25	; 0x19
 5bc:	22 8d       	ldd	r18, Z+26	; 0x1a
 5be:	23 8d       	ldd	r18, Z+27	; 0x1b
 5c0:	24 8d       	ldd	r18, Z+28	; 0x1c
 5c2:	25 8d       	ldd	r18, Z+29	; 0x1d
 5c4:	26 8d       	ldd	r18, Z+30	; 0x1e
 5c6:	27 8d       	ldd	r18, Z+31	; 0x1f
 5c8:	28 e1       	ldi	r18, 0x18	; 24
 5ca:	92 9f       	mul	r25, r18
 5cc:	80 0d       	add	r24, r0
 5ce:	11 24       	eor	r1, r1
 5d0:	82 bf       	out	0x32, r24	; 50
 5d2:	16 c0       	rjmp	.+44     	; 0x600 <__vector_5+0x120>
 5d4:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 5d8:	81 30       	cpi	r24, 0x01	; 1
 5da:	91 f4       	brne	.+36     	; 0x600 <__vector_5+0x120>
 5dc:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 5e0:	e8 e7       	ldi	r30, 0x78	; 120
 5e2:	f0 e0       	ldi	r31, 0x00	; 0
 5e4:	90 89       	ldd	r25, Z+16	; 0x10
 5e6:	81 89       	ldd	r24, Z+17	; 0x11
 5e8:	82 89       	ldd	r24, Z+18	; 0x12
 5ea:	83 89       	ldd	r24, Z+19	; 0x13
 5ec:	84 89       	ldd	r24, Z+20	; 0x14
 5ee:	85 89       	ldd	r24, Z+21	; 0x15
 5f0:	86 89       	ldd	r24, Z+22	; 0x16
 5f2:	87 89       	ldd	r24, Z+23	; 0x17
 5f4:	81 e0       	ldi	r24, 0x01	; 1
 5f6:	28 e1       	ldi	r18, 0x18	; 24
 5f8:	92 9f       	mul	r25, r18
 5fa:	80 0d       	add	r24, r0
 5fc:	11 24       	eor	r1, r1
 5fe:	84 bd       	out	0x24, r24	; 36
 600:	ff 91       	pop	r31
 602:	ef 91       	pop	r30
 604:	df 91       	pop	r29
 606:	cf 91       	pop	r28
 608:	bf 91       	pop	r27
 60a:	af 91       	pop	r26
 60c:	9f 91       	pop	r25
 60e:	8f 91       	pop	r24
 610:	7f 91       	pop	r23
 612:	6f 91       	pop	r22
 614:	5f 91       	pop	r21
 616:	4f 91       	pop	r20
 618:	3f 91       	pop	r19
 61a:	2f 91       	pop	r18
 61c:	1f 91       	pop	r17
 61e:	0f 91       	pop	r16
 620:	ff 90       	pop	r15
 622:	ef 90       	pop	r14
 624:	df 90       	pop	r13
 626:	cf 90       	pop	r12
 628:	bf 90       	pop	r11
 62a:	af 90       	pop	r10
 62c:	0f 90       	pop	r0
 62e:	0f be       	out	0x3f, r0	; 63
 630:	0f 90       	pop	r0
 632:	1f 90       	pop	r1
 634:	18 95       	reti

00000636 <__vector_10>:
 636:	1f 92       	push	r1
 638:	0f 92       	push	r0
 63a:	0f b6       	in	r0, 0x3f	; 63
 63c:	0f 92       	push	r0
 63e:	11 24       	eor	r1, r1
 640:	2f 93       	push	r18
 642:	3f 93       	push	r19
 644:	4f 93       	push	r20
 646:	5f 93       	push	r21
 648:	6f 93       	push	r22
 64a:	7f 93       	push	r23
 64c:	8f 93       	push	r24
 64e:	9f 93       	push	r25
 650:	af 93       	push	r26
 652:	bf 93       	push	r27
 654:	ef 93       	push	r30
 656:	ff 93       	push	r31
 658:	88 b7       	in	r24, 0x38	; 56
 65a:	82 60       	ori	r24, 0x02	; 2
 65c:	88 bf       	out	0x38, r24	; 56
 65e:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <CounterAction>
 662:	90 91 ad 00 	lds	r25, 0x00AD	; 0x8000ad <CounterAction+0x1>
 666:	89 2b       	or	r24, r25
 668:	41 f0       	breq	.+16     	; 0x67a <__vector_10+0x44>
 66a:	e0 91 ac 00 	lds	r30, 0x00AC	; 0x8000ac <CounterAction>
 66e:	f0 91 ad 00 	lds	r31, 0x00AD	; 0x8000ad <CounterAction+0x1>
 672:	09 95       	icall
 674:	80 e0       	ldi	r24, 0x00	; 0
 676:	0e 94 a9 01 	call	0x352	; 0x352 <Timer_ResetCounter>
 67a:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <PWMAction>
 67e:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <PWMAction+0x1>
 682:	09 95       	icall
 684:	ff 91       	pop	r31
 686:	ef 91       	pop	r30
 688:	bf 91       	pop	r27
 68a:	af 91       	pop	r26
 68c:	9f 91       	pop	r25
 68e:	8f 91       	pop	r24
 690:	7f 91       	pop	r23
 692:	6f 91       	pop	r22
 694:	5f 91       	pop	r21
 696:	4f 91       	pop	r20
 698:	3f 91       	pop	r19
 69a:	2f 91       	pop	r18
 69c:	0f 90       	pop	r0
 69e:	0f be       	out	0x3f, r0	; 63
 6a0:	0f 90       	pop	r0
 6a2:	1f 90       	pop	r1
 6a4:	18 95       	reti

000006a6 <__vector_4>:
 6a6:	1f 92       	push	r1
 6a8:	0f 92       	push	r0
 6aa:	0f b6       	in	r0, 0x3f	; 63
 6ac:	0f 92       	push	r0
 6ae:	11 24       	eor	r1, r1
 6b0:	2f 93       	push	r18
 6b2:	3f 93       	push	r19
 6b4:	4f 93       	push	r20
 6b6:	5f 93       	push	r21
 6b8:	6f 93       	push	r22
 6ba:	7f 93       	push	r23
 6bc:	8f 93       	push	r24
 6be:	9f 93       	push	r25
 6c0:	af 93       	push	r26
 6c2:	bf 93       	push	r27
 6c4:	ef 93       	push	r30
 6c6:	ff 93       	push	r31
 6c8:	88 b7       	in	r24, 0x38	; 56
 6ca:	80 68       	ori	r24, 0x80	; 128
 6cc:	88 bf       	out	0x38, r24	; 56
 6ce:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <PWMAction+0x2>
 6d2:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <PWMAction+0x3>
 6d6:	09 95       	icall
 6d8:	ff 91       	pop	r31
 6da:	ef 91       	pop	r30
 6dc:	bf 91       	pop	r27
 6de:	af 91       	pop	r26
 6e0:	9f 91       	pop	r25
 6e2:	8f 91       	pop	r24
 6e4:	7f 91       	pop	r23
 6e6:	6f 91       	pop	r22
 6e8:	5f 91       	pop	r21
 6ea:	4f 91       	pop	r20
 6ec:	3f 91       	pop	r19
 6ee:	2f 91       	pop	r18
 6f0:	0f 90       	pop	r0
 6f2:	0f be       	out	0x3f, r0	; 63
 6f4:	0f 90       	pop	r0
 6f6:	1f 90       	pop	r1
 6f8:	18 95       	reti

000006fa <__vector_14>:
			break;
		}
		else{/*MISRA C*/}
	}
	return return_value;
}
 6fa:	1f 92       	push	r1
 6fc:	0f 92       	push	r0
 6fe:	0f b6       	in	r0, 0x3f	; 63
 700:	0f 92       	push	r0
 702:	11 24       	eor	r1, r1
 704:	2f 93       	push	r18
 706:	3f 93       	push	r19
 708:	4f 93       	push	r20
 70a:	5f 93       	push	r21
 70c:	6f 93       	push	r22
 70e:	7f 93       	push	r23
 710:	8f 93       	push	r24
 712:	9f 93       	push	r25
 714:	af 93       	push	r26
 716:	bf 93       	push	r27
 718:	ef 93       	push	r30
 71a:	ff 93       	push	r31
 71c:	cf 93       	push	r28
 71e:	df 93       	push	r29
 720:	1f 92       	push	r1
 722:	cd b7       	in	r28, 0x3d	; 61
 724:	de b7       	in	r29, 0x3e	; 62
 726:	5d 9a       	sbi	0x0b, 5	; 11
 728:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <T_Flag>
 72c:	82 30       	cpi	r24, 0x02	; 2
 72e:	79 f4       	brne	.+30     	; 0x74e <__vector_14+0x54>
 730:	19 82       	std	Y+1, r1	; 0x01
 732:	be 01       	movw	r22, r28
 734:	6f 5f       	subi	r22, 0xFF	; 255
 736:	7f 4f       	sbci	r23, 0xFF	; 255
 738:	82 e6       	ldi	r24, 0x62	; 98
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	0e 94 41 04 	call	0x882	; 0x882 <DeQueue>
 740:	82 30       	cpi	r24, 0x02	; 2
 742:	19 f4       	brne	.+6      	; 0x74a <__vector_14+0x50>
 744:	55 98       	cbi	0x0a, 5	; 10
 746:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <T_Flag>
 74a:	89 81       	ldd	r24, Y+1	; 0x01
 74c:	8c b9       	out	0x0c, r24	; 12
 74e:	0f 90       	pop	r0
 750:	df 91       	pop	r29
 752:	cf 91       	pop	r28
 754:	ff 91       	pop	r31
 756:	ef 91       	pop	r30
 758:	bf 91       	pop	r27
 75a:	af 91       	pop	r26
 75c:	9f 91       	pop	r25
 75e:	8f 91       	pop	r24
 760:	7f 91       	pop	r23
 762:	6f 91       	pop	r22
 764:	5f 91       	pop	r21
 766:	4f 91       	pop	r20
 768:	3f 91       	pop	r19
 76a:	2f 91       	pop	r18
 76c:	0f 90       	pop	r0
 76e:	0f be       	out	0x3f, r0	; 63
 770:	0f 90       	pop	r0
 772:	1f 90       	pop	r1
 774:	18 95       	reti

00000776 <__vector_13>:
ISR(USART_RXC_vect)
{
 776:	1f 92       	push	r1
 778:	0f 92       	push	r0
 77a:	0f b6       	in	r0, 0x3f	; 63
 77c:	0f 92       	push	r0
 77e:	11 24       	eor	r1, r1
 780:	2f 93       	push	r18
 782:	3f 93       	push	r19
 784:	4f 93       	push	r20
 786:	5f 93       	push	r21
 788:	6f 93       	push	r22
 78a:	7f 93       	push	r23
 78c:	8f 93       	push	r24
 78e:	9f 93       	push	r25
 790:	af 93       	push	r26
 792:	bf 93       	push	r27
 794:	ef 93       	push	r30
 796:	ff 93       	push	r31
	UART.Flags.rciv_cmplt = ENABLE;
 798:	5f 9a       	sbi	0x0b, 7	; 11
	if(R_Flag == Available)
 79a:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <R_Flag>
 79e:	81 11       	cpse	r24, r1
 7a0:	08 c0       	rjmp	.+16     	; 0x7b2 <__vector_13+0x3c>
	{
		uint8_t Data = UART.Data;
 7a2:	6c b1       	in	r22, 0x0c	; 12
		if(UART_EN_Buffer_Full == EnQueue(&R_Buffer, Data))
 7a4:	87 e6       	ldi	r24, 0x67	; 103
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <EnQueue>
 7ac:	81 30       	cpi	r24, 0x01	; 1
 7ae:	09 f4       	brne	.+2      	; 0x7b2 <__vector_13+0x3c>
		{
			UART.Enables.rcivCompIntrrpt = DISABLE;
 7b0:	57 98       	cbi	0x0a, 7	; 10
		}
		else{/*MISRA C*/}
	}
	else{/*MISRA C*/}
 7b2:	ff 91       	pop	r31
 7b4:	ef 91       	pop	r30
 7b6:	bf 91       	pop	r27
 7b8:	af 91       	pop	r26
 7ba:	9f 91       	pop	r25
 7bc:	8f 91       	pop	r24
 7be:	7f 91       	pop	r23
 7c0:	6f 91       	pop	r22
 7c2:	5f 91       	pop	r21
 7c4:	4f 91       	pop	r20
 7c6:	3f 91       	pop	r19
 7c8:	2f 91       	pop	r18
 7ca:	0f 90       	pop	r0
 7cc:	0f be       	out	0x3f, r0	; 63
 7ce:	0f 90       	pop	r0
 7d0:	1f 90       	pop	r1
 7d2:	18 95       	reti

000007d4 <EnQueue>:
 7d4:	0f 93       	push	r16
 7d6:	1f 93       	push	r17
 7d8:	cf 93       	push	r28
 7da:	df 93       	push	r29
 7dc:	fc 01       	movw	r30, r24
 7de:	46 2f       	mov	r20, r22
 7e0:	32 81       	ldd	r19, Z+2	; 0x02
 7e2:	31 11       	cpse	r19, r1
 7e4:	0f c0       	rjmp	.+30     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7e6:	23 81       	ldd	r18, Z+3	; 0x03
 7e8:	c2 2f       	mov	r28, r18
 7ea:	02 2e       	mov	r0, r18
 7ec:	00 0c       	add	r0, r0
 7ee:	dd 0b       	sbc	r29, r29
 7f0:	64 81       	ldd	r22, Z+4	; 0x04
 7f2:	06 2e       	mov	r0, r22
 7f4:	00 0c       	add	r0, r0
 7f6:	77 0b       	sbc	r23, r23
 7f8:	61 50       	subi	r22, 0x01	; 1
 7fa:	71 09       	sbc	r23, r1
 7fc:	c6 17       	cp	r28, r22
 7fe:	d7 07       	cpc	r29, r23
 800:	99 f5       	brne	.+102    	; 0x868 <__stack+0x9>
 802:	2c c0       	rjmp	.+88     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 804:	23 81       	ldd	r18, Z+3	; 0x03
 806:	02 2f       	mov	r16, r18
 808:	02 2e       	mov	r0, r18
 80a:	00 0c       	add	r0, r0
 80c:	11 0b       	sbc	r17, r17
 80e:	c4 81       	ldd	r28, Z+4	; 0x04
 810:	0c 2e       	mov	r0, r28
 812:	00 0c       	add	r0, r0
 814:	dd 0b       	sbc	r29, r29
 816:	21 97       	sbiw	r28, 0x01	; 1
 818:	83 2f       	mov	r24, r19
 81a:	03 2e       	mov	r0, r19
 81c:	00 0c       	add	r0, r0
 81e:	99 0b       	sbc	r25, r25
 820:	01 97       	sbiw	r24, 0x01	; 1
 822:	be 01       	movw	r22, r28
 824:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__divmodhi4>
 828:	08 17       	cp	r16, r24
 82a:	19 07       	cpc	r17, r25
 82c:	c9 f0       	breq	.+50     	; 0x860 <__stack+0x1>
 82e:	3f 3f       	cpi	r19, 0xFF	; 255
 830:	19 f4       	brne	.+6      	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 832:	12 82       	std	Z+2, r1	; 0x02
 834:	13 82       	std	Z+3, r1	; 0x03
 836:	07 c0       	rjmp	.+14     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 838:	0c 17       	cp	r16, r28
 83a:	1d 07       	cpc	r17, r29
 83c:	11 f4       	brne	.+4      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 83e:	13 82       	std	Z+3, r1	; 0x03
 840:	02 c0       	rjmp	.+4      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 842:	2f 5f       	subi	r18, 0xFF	; 255
 844:	23 83       	std	Z+3, r18	; 0x03
 846:	83 81       	ldd	r24, Z+3	; 0x03
 848:	01 90       	ld	r0, Z+
 84a:	f0 81       	ld	r31, Z
 84c:	e0 2d       	mov	r30, r0
 84e:	e8 0f       	add	r30, r24
 850:	f1 1d       	adc	r31, r1
 852:	87 fd       	sbrc	r24, 7
 854:	fa 95       	dec	r31
 856:	40 83       	st	Z, r20
 858:	80 e0       	ldi	r24, 0x00	; 0
 85a:	0e c0       	rjmp	.+28     	; 0x878 <__stack+0x19>
 85c:	81 e0       	ldi	r24, 0x01	; 1
 85e:	0c c0       	rjmp	.+24     	; 0x878 <__stack+0x19>
 860:	81 e0       	ldi	r24, 0x01	; 1
 862:	0a c0       	rjmp	.+20     	; 0x878 <__stack+0x19>
 864:	81 e0       	ldi	r24, 0x01	; 1
 866:	08 c0       	rjmp	.+16     	; 0x878 <__stack+0x19>
 868:	8f ef       	ldi	r24, 0xFF	; 255
 86a:	9f ef       	ldi	r25, 0xFF	; 255
 86c:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__divmodhi4>
 870:	c8 17       	cp	r28, r24
 872:	d9 07       	cpc	r29, r25
 874:	31 f7       	brne	.-52     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 876:	f6 cf       	rjmp	.-20     	; 0x864 <__stack+0x5>
 878:	df 91       	pop	r29
 87a:	cf 91       	pop	r28
 87c:	1f 91       	pop	r17
 87e:	0f 91       	pop	r16
 880:	08 95       	ret

00000882 <DeQueue>:
 882:	fc 01       	movw	r30, r24
 884:	82 81       	ldd	r24, Z+2	; 0x02
 886:	8f 3f       	cpi	r24, 0xFF	; 255
 888:	29 f1       	breq	.+74     	; 0x8d4 <DeQueue+0x52>
 88a:	a0 81       	ld	r26, Z
 88c:	b1 81       	ldd	r27, Z+1	; 0x01
 88e:	a8 0f       	add	r26, r24
 890:	b1 1d       	adc	r27, r1
 892:	87 fd       	sbrc	r24, 7
 894:	ba 95       	dec	r27
 896:	8c 91       	ld	r24, X
 898:	db 01       	movw	r26, r22
 89a:	8c 93       	st	X, r24
 89c:	22 81       	ldd	r18, Z+2	; 0x02
 89e:	83 81       	ldd	r24, Z+3	; 0x03
 8a0:	28 13       	cpse	r18, r24
 8a2:	05 c0       	rjmp	.+10     	; 0x8ae <DeQueue+0x2c>
 8a4:	8f ef       	ldi	r24, 0xFF	; 255
 8a6:	82 83       	std	Z+2, r24	; 0x02
 8a8:	83 83       	std	Z+3, r24	; 0x03
 8aa:	80 e0       	ldi	r24, 0x00	; 0
 8ac:	08 95       	ret
 8ae:	84 81       	ldd	r24, Z+4	; 0x04
 8b0:	08 2e       	mov	r0, r24
 8b2:	00 0c       	add	r0, r0
 8b4:	99 0b       	sbc	r25, r25
 8b6:	01 97       	sbiw	r24, 0x01	; 1
 8b8:	42 2f       	mov	r20, r18
 8ba:	02 2e       	mov	r0, r18
 8bc:	00 0c       	add	r0, r0
 8be:	55 0b       	sbc	r21, r21
 8c0:	48 17       	cp	r20, r24
 8c2:	59 07       	cpc	r21, r25
 8c4:	19 f4       	brne	.+6      	; 0x8cc <DeQueue+0x4a>
 8c6:	12 82       	std	Z+2, r1	; 0x02
 8c8:	80 e0       	ldi	r24, 0x00	; 0
 8ca:	08 95       	ret
 8cc:	2f 5f       	subi	r18, 0xFF	; 255
 8ce:	22 83       	std	Z+2, r18	; 0x02
 8d0:	80 e0       	ldi	r24, 0x00	; 0
 8d2:	08 95       	ret
 8d4:	82 e0       	ldi	r24, 0x02	; 2
 8d6:	08 95       	ret

000008d8 <vListInsertEnd>:
 8d8:	cf 93       	push	r28
 8da:	df 93       	push	r29
 8dc:	9c 01       	movw	r18, r24
 8de:	fb 01       	movw	r30, r22
 8e0:	dc 01       	movw	r26, r24
 8e2:	11 96       	adiw	r26, 0x01	; 1
 8e4:	cd 91       	ld	r28, X+
 8e6:	dc 91       	ld	r29, X
 8e8:	12 97       	sbiw	r26, 0x02	; 2
 8ea:	d3 83       	std	Z+3, r29	; 0x03
 8ec:	c2 83       	std	Z+2, r28	; 0x02
 8ee:	8c 81       	ldd	r24, Y+4	; 0x04
 8f0:	9d 81       	ldd	r25, Y+5	; 0x05
 8f2:	95 83       	std	Z+5, r25	; 0x05
 8f4:	84 83       	std	Z+4, r24	; 0x04
 8f6:	8c 81       	ldd	r24, Y+4	; 0x04
 8f8:	9d 81       	ldd	r25, Y+5	; 0x05
 8fa:	dc 01       	movw	r26, r24
 8fc:	13 96       	adiw	r26, 0x03	; 3
 8fe:	7c 93       	st	X, r23
 900:	6e 93       	st	-X, r22
 902:	12 97       	sbiw	r26, 0x02	; 2
 904:	7d 83       	std	Y+5, r23	; 0x05
 906:	6c 83       	std	Y+4, r22	; 0x04
 908:	31 87       	std	Z+9, r19	; 0x09
 90a:	20 87       	std	Z+8, r18	; 0x08
 90c:	f9 01       	movw	r30, r18
 90e:	80 81       	ld	r24, Z
 910:	8f 5f       	subi	r24, 0xFF	; 255
 912:	80 83       	st	Z, r24
 914:	df 91       	pop	r29
 916:	cf 91       	pop	r28
 918:	08 95       	ret

0000091a <uxListRemove>:
 91a:	cf 93       	push	r28
 91c:	df 93       	push	r29
 91e:	fc 01       	movw	r30, r24
 920:	a0 85       	ldd	r26, Z+8	; 0x08
 922:	b1 85       	ldd	r27, Z+9	; 0x09
 924:	c2 81       	ldd	r28, Z+2	; 0x02
 926:	d3 81       	ldd	r29, Z+3	; 0x03
 928:	84 81       	ldd	r24, Z+4	; 0x04
 92a:	95 81       	ldd	r25, Z+5	; 0x05
 92c:	9d 83       	std	Y+5, r25	; 0x05
 92e:	8c 83       	std	Y+4, r24	; 0x04
 930:	c4 81       	ldd	r28, Z+4	; 0x04
 932:	d5 81       	ldd	r29, Z+5	; 0x05
 934:	82 81       	ldd	r24, Z+2	; 0x02
 936:	93 81       	ldd	r25, Z+3	; 0x03
 938:	9b 83       	std	Y+3, r25	; 0x03
 93a:	8a 83       	std	Y+2, r24	; 0x02
 93c:	11 96       	adiw	r26, 0x01	; 1
 93e:	8d 91       	ld	r24, X+
 940:	9c 91       	ld	r25, X
 942:	12 97       	sbiw	r26, 0x02	; 2
 944:	e8 17       	cp	r30, r24
 946:	f9 07       	cpc	r31, r25
 948:	31 f4       	brne	.+12     	; 0x956 <uxListRemove+0x3c>
 94a:	84 81       	ldd	r24, Z+4	; 0x04
 94c:	95 81       	ldd	r25, Z+5	; 0x05
 94e:	12 96       	adiw	r26, 0x02	; 2
 950:	9c 93       	st	X, r25
 952:	8e 93       	st	-X, r24
 954:	11 97       	sbiw	r26, 0x01	; 1
 956:	11 86       	std	Z+9, r1	; 0x09
 958:	10 86       	std	Z+8, r1	; 0x08
 95a:	8c 91       	ld	r24, X
 95c:	81 50       	subi	r24, 0x01	; 1
 95e:	8c 93       	st	X, r24
 960:	df 91       	pop	r29
 962:	cf 91       	pop	r28
 964:	08 95       	ret

00000966 <vPortYieldFromTick>:
 966:	0f 92       	push	r0
 968:	0f b6       	in	r0, 0x3f	; 63
 96a:	f8 94       	cli
 96c:	0f 92       	push	r0
 96e:	1f 92       	push	r1
 970:	11 24       	eor	r1, r1
 972:	2f 92       	push	r2
 974:	3f 92       	push	r3
 976:	4f 92       	push	r4
 978:	5f 92       	push	r5
 97a:	6f 92       	push	r6
 97c:	7f 92       	push	r7
 97e:	8f 92       	push	r8
 980:	9f 92       	push	r9
 982:	af 92       	push	r10
 984:	bf 92       	push	r11
 986:	cf 92       	push	r12
 988:	df 92       	push	r13
 98a:	ef 92       	push	r14
 98c:	ff 92       	push	r15
 98e:	0f 93       	push	r16
 990:	1f 93       	push	r17
 992:	2f 93       	push	r18
 994:	3f 93       	push	r19
 996:	4f 93       	push	r20
 998:	5f 93       	push	r21
 99a:	6f 93       	push	r22
 99c:	7f 93       	push	r23
 99e:	8f 93       	push	r24
 9a0:	9f 93       	push	r25
 9a2:	af 93       	push	r26
 9a4:	bf 93       	push	r27
 9a6:	cf 93       	push	r28
 9a8:	df 93       	push	r29
 9aa:	ef 93       	push	r30
 9ac:	ff 93       	push	r31
 9ae:	a0 91 df 00 	lds	r26, 0x00DF	; 0x8000df <pxCurrentTCB>
 9b2:	b0 91 e0 00 	lds	r27, 0x00E0	; 0x8000e0 <pxCurrentTCB+0x1>
 9b6:	0d b6       	in	r0, 0x3d	; 61
 9b8:	0d 92       	st	X+, r0
 9ba:	0e b6       	in	r0, 0x3e	; 62
 9bc:	0d 92       	st	X+, r0
 9be:	0e 94 31 05 	call	0xa62	; 0xa62 <xTaskIncrementTick>
 9c2:	81 11       	cpse	r24, r1
 9c4:	0e 94 ee 05 	call	0xbdc	; 0xbdc <vTaskSwitchContext>
 9c8:	a0 91 df 00 	lds	r26, 0x00DF	; 0x8000df <pxCurrentTCB>
 9cc:	b0 91 e0 00 	lds	r27, 0x00E0	; 0x8000e0 <pxCurrentTCB+0x1>
 9d0:	cd 91       	ld	r28, X+
 9d2:	cd bf       	out	0x3d, r28	; 61
 9d4:	dd 91       	ld	r29, X+
 9d6:	de bf       	out	0x3e, r29	; 62
 9d8:	ff 91       	pop	r31
 9da:	ef 91       	pop	r30
 9dc:	df 91       	pop	r29
 9de:	cf 91       	pop	r28
 9e0:	bf 91       	pop	r27
 9e2:	af 91       	pop	r26
 9e4:	9f 91       	pop	r25
 9e6:	8f 91       	pop	r24
 9e8:	7f 91       	pop	r23
 9ea:	6f 91       	pop	r22
 9ec:	5f 91       	pop	r21
 9ee:	4f 91       	pop	r20
 9f0:	3f 91       	pop	r19
 9f2:	2f 91       	pop	r18
 9f4:	1f 91       	pop	r17
 9f6:	0f 91       	pop	r16
 9f8:	ff 90       	pop	r15
 9fa:	ef 90       	pop	r14
 9fc:	df 90       	pop	r13
 9fe:	cf 90       	pop	r12
 a00:	bf 90       	pop	r11
 a02:	af 90       	pop	r10
 a04:	9f 90       	pop	r9
 a06:	8f 90       	pop	r8
 a08:	7f 90       	pop	r7
 a0a:	6f 90       	pop	r6
 a0c:	5f 90       	pop	r5
 a0e:	4f 90       	pop	r4
 a10:	3f 90       	pop	r3
 a12:	2f 90       	pop	r2
 a14:	1f 90       	pop	r1
 a16:	0f 90       	pop	r0
 a18:	0f be       	out	0x3f, r0	; 63
 a1a:	0f 90       	pop	r0
 a1c:	08 95       	ret

00000a1e <__vector_7>:
 a1e:	0e 94 b3 04 	call	0x966	; 0x966 <vPortYieldFromTick>
 a22:	18 95       	reti

00000a24 <prvResetNextTaskUnblockTime>:
 a24:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <pxDelayedTaskList>
 a28:	f0 91 ba 00 	lds	r31, 0x00BA	; 0x8000ba <pxDelayedTaskList+0x1>
 a2c:	80 81       	ld	r24, Z
 a2e:	81 11       	cpse	r24, r1
 a30:	07 c0       	rjmp	.+14     	; 0xa40 <prvResetNextTaskUnblockTime+0x1c>
 a32:	8f ef       	ldi	r24, 0xFF	; 255
 a34:	9f ef       	ldi	r25, 0xFF	; 255
 a36:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <xNextTaskUnblockTime+0x1>
 a3a:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <xNextTaskUnblockTime>
 a3e:	08 95       	ret
 a40:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <pxDelayedTaskList>
 a44:	f0 91 ba 00 	lds	r31, 0x00BA	; 0x8000ba <pxDelayedTaskList+0x1>
 a48:	05 80       	ldd	r0, Z+5	; 0x05
 a4a:	f6 81       	ldd	r31, Z+6	; 0x06
 a4c:	e0 2d       	mov	r30, r0
 a4e:	06 80       	ldd	r0, Z+6	; 0x06
 a50:	f7 81       	ldd	r31, Z+7	; 0x07
 a52:	e0 2d       	mov	r30, r0
 a54:	82 81       	ldd	r24, Z+2	; 0x02
 a56:	93 81       	ldd	r25, Z+3	; 0x03
 a58:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <xNextTaskUnblockTime+0x1>
 a5c:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <xNextTaskUnblockTime>
 a60:	08 95       	ret

00000a62 <xTaskIncrementTick>:
 a62:	cf 92       	push	r12
 a64:	df 92       	push	r13
 a66:	ef 92       	push	r14
 a68:	ff 92       	push	r15
 a6a:	0f 93       	push	r16
 a6c:	1f 93       	push	r17
 a6e:	cf 93       	push	r28
 a70:	df 93       	push	r29
 a72:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <uxSchedulerSuspended>
 a76:	81 11       	cpse	r24, r1
 a78:	9b c0       	rjmp	.+310    	; 0xbb0 <xTaskIncrementTick+0x14e>
 a7a:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <xTickCount>
 a7e:	90 91 b6 00 	lds	r25, 0x00B6	; 0x8000b6 <xTickCount+0x1>
 a82:	01 96       	adiw	r24, 0x01	; 1
 a84:	90 93 b6 00 	sts	0x00B6, r25	; 0x8000b6 <xTickCount+0x1>
 a88:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <xTickCount>
 a8c:	e0 90 b5 00 	lds	r14, 0x00B5	; 0x8000b5 <xTickCount>
 a90:	f0 90 b6 00 	lds	r15, 0x00B6	; 0x8000b6 <xTickCount+0x1>
 a94:	e1 14       	cp	r14, r1
 a96:	f1 04       	cpc	r15, r1
 a98:	b9 f4       	brne	.+46     	; 0xac8 <xTaskIncrementTick+0x66>
 a9a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <pxDelayedTaskList>
 a9e:	90 91 ba 00 	lds	r25, 0x00BA	; 0x8000ba <pxDelayedTaskList+0x1>
 aa2:	20 91 b7 00 	lds	r18, 0x00B7	; 0x8000b7 <pxOverflowDelayedTaskList>
 aa6:	30 91 b8 00 	lds	r19, 0x00B8	; 0x8000b8 <pxOverflowDelayedTaskList+0x1>
 aaa:	30 93 ba 00 	sts	0x00BA, r19	; 0x8000ba <pxDelayedTaskList+0x1>
 aae:	20 93 b9 00 	sts	0x00B9, r18	; 0x8000b9 <pxDelayedTaskList>
 ab2:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <pxOverflowDelayedTaskList+0x1>
 ab6:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <pxOverflowDelayedTaskList>
 aba:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <xNumOfOverflows>
 abe:	8f 5f       	subi	r24, 0xFF	; 255
 ac0:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <xNumOfOverflows>
 ac4:	0e 94 12 05 	call	0xa24	; 0xa24 <prvResetNextTaskUnblockTime>
 ac8:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <xNextTaskUnblockTime>
 acc:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <xNextTaskUnblockTime+0x1>
 ad0:	e8 16       	cp	r14, r24
 ad2:	f9 06       	cpc	r15, r25
 ad4:	10 f4       	brcc	.+4      	; 0xada <xTaskIncrementTick+0x78>
 ad6:	d1 2c       	mov	r13, r1
 ad8:	53 c0       	rjmp	.+166    	; 0xb80 <xTaskIncrementTick+0x11e>
 ada:	d1 2c       	mov	r13, r1
 adc:	cc 24       	eor	r12, r12
 ade:	c3 94       	inc	r12
 ae0:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <pxDelayedTaskList>
 ae4:	f0 91 ba 00 	lds	r31, 0x00BA	; 0x8000ba <pxDelayedTaskList+0x1>
 ae8:	80 81       	ld	r24, Z
 aea:	81 11       	cpse	r24, r1
 aec:	07 c0       	rjmp	.+14     	; 0xafc <xTaskIncrementTick+0x9a>
 aee:	8f ef       	ldi	r24, 0xFF	; 255
 af0:	9f ef       	ldi	r25, 0xFF	; 255
 af2:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <xNextTaskUnblockTime+0x1>
 af6:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <xNextTaskUnblockTime>
 afa:	42 c0       	rjmp	.+132    	; 0xb80 <xTaskIncrementTick+0x11e>
 afc:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <pxDelayedTaskList>
 b00:	f0 91 ba 00 	lds	r31, 0x00BA	; 0x8000ba <pxDelayedTaskList+0x1>
 b04:	05 80       	ldd	r0, Z+5	; 0x05
 b06:	f6 81       	ldd	r31, Z+6	; 0x06
 b08:	e0 2d       	mov	r30, r0
 b0a:	c6 81       	ldd	r28, Z+6	; 0x06
 b0c:	d7 81       	ldd	r29, Z+7	; 0x07
 b0e:	8a 81       	ldd	r24, Y+2	; 0x02
 b10:	9b 81       	ldd	r25, Y+3	; 0x03
 b12:	e8 16       	cp	r14, r24
 b14:	f9 06       	cpc	r15, r25
 b16:	28 f4       	brcc	.+10     	; 0xb22 <xTaskIncrementTick+0xc0>
 b18:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <xNextTaskUnblockTime+0x1>
 b1c:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <xNextTaskUnblockTime>
 b20:	2f c0       	rjmp	.+94     	; 0xb80 <xTaskIncrementTick+0x11e>
 b22:	8e 01       	movw	r16, r28
 b24:	0e 5f       	subi	r16, 0xFE	; 254
 b26:	1f 4f       	sbci	r17, 0xFF	; 255
 b28:	c8 01       	movw	r24, r16
 b2a:	0e 94 8d 04 	call	0x91a	; 0x91a <uxListRemove>
 b2e:	8c 89       	ldd	r24, Y+20	; 0x14
 b30:	9d 89       	ldd	r25, Y+21	; 0x15
 b32:	89 2b       	or	r24, r25
 b34:	21 f0       	breq	.+8      	; 0xb3e <xTaskIncrementTick+0xdc>
 b36:	ce 01       	movw	r24, r28
 b38:	0c 96       	adiw	r24, 0x0c	; 12
 b3a:	0e 94 8d 04 	call	0x91a	; 0x91a <uxListRemove>
 b3e:	8e 89       	ldd	r24, Y+22	; 0x16
 b40:	90 91 b4 00 	lds	r25, 0x00B4	; 0x8000b4 <uxTopReadyPriority>
 b44:	98 17       	cp	r25, r24
 b46:	10 f4       	brcc	.+4      	; 0xb4c <xTaskIncrementTick+0xea>
 b48:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <uxTopReadyPriority>
 b4c:	90 e0       	ldi	r25, 0x00	; 0
 b4e:	9c 01       	movw	r18, r24
 b50:	22 0f       	add	r18, r18
 b52:	33 1f       	adc	r19, r19
 b54:	22 0f       	add	r18, r18
 b56:	33 1f       	adc	r19, r19
 b58:	22 0f       	add	r18, r18
 b5a:	33 1f       	adc	r19, r19
 b5c:	82 0f       	add	r24, r18
 b5e:	93 1f       	adc	r25, r19
 b60:	b8 01       	movw	r22, r16
 b62:	85 54       	subi	r24, 0x45	; 69
 b64:	9f 4f       	sbci	r25, 0xFF	; 255
 b66:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <vListInsertEnd>
 b6a:	e0 91 df 00 	lds	r30, 0x00DF	; 0x8000df <pxCurrentTCB>
 b6e:	f0 91 e0 00 	lds	r31, 0x00E0	; 0x8000e0 <pxCurrentTCB+0x1>
 b72:	9e 89       	ldd	r25, Y+22	; 0x16
 b74:	86 89       	ldd	r24, Z+22	; 0x16
 b76:	98 17       	cp	r25, r24
 b78:	08 f4       	brcc	.+2      	; 0xb7c <xTaskIncrementTick+0x11a>
 b7a:	b2 cf       	rjmp	.-156    	; 0xae0 <xTaskIncrementTick+0x7e>
 b7c:	dc 2c       	mov	r13, r12
 b7e:	b0 cf       	rjmp	.-160    	; 0xae0 <xTaskIncrementTick+0x7e>
 b80:	e0 91 df 00 	lds	r30, 0x00DF	; 0x8000df <pxCurrentTCB>
 b84:	f0 91 e0 00 	lds	r31, 0x00E0	; 0x8000e0 <pxCurrentTCB+0x1>
 b88:	86 89       	ldd	r24, Z+22	; 0x16
 b8a:	90 e0       	ldi	r25, 0x00	; 0
 b8c:	fc 01       	movw	r30, r24
 b8e:	ee 0f       	add	r30, r30
 b90:	ff 1f       	adc	r31, r31
 b92:	ee 0f       	add	r30, r30
 b94:	ff 1f       	adc	r31, r31
 b96:	ee 0f       	add	r30, r30
 b98:	ff 1f       	adc	r31, r31
 b9a:	8e 0f       	add	r24, r30
 b9c:	9f 1f       	adc	r25, r31
 b9e:	fc 01       	movw	r30, r24
 ba0:	e5 54       	subi	r30, 0x45	; 69
 ba2:	ff 4f       	sbci	r31, 0xFF	; 255
 ba4:	80 81       	ld	r24, Z
 ba6:	82 30       	cpi	r24, 0x02	; 2
 ba8:	48 f0       	brcs	.+18     	; 0xbbc <xTaskIncrementTick+0x15a>
 baa:	dd 24       	eor	r13, r13
 bac:	d3 94       	inc	r13
 bae:	06 c0       	rjmp	.+12     	; 0xbbc <xTaskIncrementTick+0x15a>
 bb0:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <uxPendedTicks>
 bb4:	8f 5f       	subi	r24, 0xFF	; 255
 bb6:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <uxPendedTicks>
 bba:	d1 2c       	mov	r13, r1
 bbc:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <xYieldPending>
 bc0:	88 23       	and	r24, r24
 bc2:	11 f0       	breq	.+4      	; 0xbc8 <xTaskIncrementTick+0x166>
 bc4:	dd 24       	eor	r13, r13
 bc6:	d3 94       	inc	r13
 bc8:	8d 2d       	mov	r24, r13
 bca:	df 91       	pop	r29
 bcc:	cf 91       	pop	r28
 bce:	1f 91       	pop	r17
 bd0:	0f 91       	pop	r16
 bd2:	ff 90       	pop	r15
 bd4:	ef 90       	pop	r14
 bd6:	df 90       	pop	r13
 bd8:	cf 90       	pop	r12
 bda:	08 95       	ret

00000bdc <vTaskSwitchContext>:
 bdc:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <uxSchedulerSuspended>
 be0:	88 23       	and	r24, r24
 be2:	21 f0       	breq	.+8      	; 0xbec <vTaskSwitchContext+0x10>
 be4:	81 e0       	ldi	r24, 0x01	; 1
 be6:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <xYieldPending>
 bea:	08 95       	ret
 bec:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <xYieldPending>
 bf0:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <uxTopReadyPriority>
 bf4:	90 e0       	ldi	r25, 0x00	; 0
 bf6:	fc 01       	movw	r30, r24
 bf8:	ee 0f       	add	r30, r30
 bfa:	ff 1f       	adc	r31, r31
 bfc:	ee 0f       	add	r30, r30
 bfe:	ff 1f       	adc	r31, r31
 c00:	ee 0f       	add	r30, r30
 c02:	ff 1f       	adc	r31, r31
 c04:	8e 0f       	add	r24, r30
 c06:	9f 1f       	adc	r25, r31
 c08:	fc 01       	movw	r30, r24
 c0a:	e5 54       	subi	r30, 0x45	; 69
 c0c:	ff 4f       	sbci	r31, 0xFF	; 255
 c0e:	80 81       	ld	r24, Z
 c10:	81 11       	cpse	r24, r1
 c12:	17 c0       	rjmp	.+46     	; 0xc42 <vTaskSwitchContext+0x66>
 c14:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <uxTopReadyPriority>
 c18:	81 50       	subi	r24, 0x01	; 1
 c1a:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <uxTopReadyPriority>
 c1e:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <uxTopReadyPriority>
 c22:	90 e0       	ldi	r25, 0x00	; 0
 c24:	fc 01       	movw	r30, r24
 c26:	ee 0f       	add	r30, r30
 c28:	ff 1f       	adc	r31, r31
 c2a:	ee 0f       	add	r30, r30
 c2c:	ff 1f       	adc	r31, r31
 c2e:	ee 0f       	add	r30, r30
 c30:	ff 1f       	adc	r31, r31
 c32:	8e 0f       	add	r24, r30
 c34:	9f 1f       	adc	r25, r31
 c36:	fc 01       	movw	r30, r24
 c38:	e5 54       	subi	r30, 0x45	; 69
 c3a:	ff 4f       	sbci	r31, 0xFF	; 255
 c3c:	80 81       	ld	r24, Z
 c3e:	88 23       	and	r24, r24
 c40:	49 f3       	breq	.-46     	; 0xc14 <vTaskSwitchContext+0x38>
 c42:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <uxTopReadyPriority>
 c46:	90 e0       	ldi	r25, 0x00	; 0
 c48:	9c 01       	movw	r18, r24
 c4a:	22 0f       	add	r18, r18
 c4c:	33 1f       	adc	r19, r19
 c4e:	22 0f       	add	r18, r18
 c50:	33 1f       	adc	r19, r19
 c52:	22 0f       	add	r18, r18
 c54:	33 1f       	adc	r19, r19
 c56:	28 0f       	add	r18, r24
 c58:	39 1f       	adc	r19, r25
 c5a:	d9 01       	movw	r26, r18
 c5c:	a5 54       	subi	r26, 0x45	; 69
 c5e:	bf 4f       	sbci	r27, 0xFF	; 255
 c60:	11 96       	adiw	r26, 0x01	; 1
 c62:	ed 91       	ld	r30, X+
 c64:	fc 91       	ld	r31, X
 c66:	12 97       	sbiw	r26, 0x02	; 2
 c68:	02 80       	ldd	r0, Z+2	; 0x02
 c6a:	f3 81       	ldd	r31, Z+3	; 0x03
 c6c:	e0 2d       	mov	r30, r0
 c6e:	12 96       	adiw	r26, 0x02	; 2
 c70:	fc 93       	st	X, r31
 c72:	ee 93       	st	-X, r30
 c74:	11 97       	sbiw	r26, 0x01	; 1
 c76:	22 54       	subi	r18, 0x42	; 66
 c78:	3f 4f       	sbci	r19, 0xFF	; 255
 c7a:	e2 17       	cp	r30, r18
 c7c:	f3 07       	cpc	r31, r19
 c7e:	29 f4       	brne	.+10     	; 0xc8a <vTaskSwitchContext+0xae>
 c80:	22 81       	ldd	r18, Z+2	; 0x02
 c82:	33 81       	ldd	r19, Z+3	; 0x03
 c84:	fd 01       	movw	r30, r26
 c86:	32 83       	std	Z+2, r19	; 0x02
 c88:	21 83       	std	Z+1, r18	; 0x01
 c8a:	fc 01       	movw	r30, r24
 c8c:	ee 0f       	add	r30, r30
 c8e:	ff 1f       	adc	r31, r31
 c90:	ee 0f       	add	r30, r30
 c92:	ff 1f       	adc	r31, r31
 c94:	ee 0f       	add	r30, r30
 c96:	ff 1f       	adc	r31, r31
 c98:	8e 0f       	add	r24, r30
 c9a:	9f 1f       	adc	r25, r31
 c9c:	fc 01       	movw	r30, r24
 c9e:	e5 54       	subi	r30, 0x45	; 69
 ca0:	ff 4f       	sbci	r31, 0xFF	; 255
 ca2:	01 80       	ldd	r0, Z+1	; 0x01
 ca4:	f2 81       	ldd	r31, Z+2	; 0x02
 ca6:	e0 2d       	mov	r30, r0
 ca8:	86 81       	ldd	r24, Z+6	; 0x06
 caa:	97 81       	ldd	r25, Z+7	; 0x07
 cac:	90 93 e0 00 	sts	0x00E0, r25	; 0x8000e0 <pxCurrentTCB+0x1>
 cb0:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <pxCurrentTCB>
 cb4:	08 95       	ret

00000cb6 <__divmodhi4>:
 cb6:	97 fb       	bst	r25, 7
 cb8:	07 2e       	mov	r0, r23
 cba:	16 f4       	brtc	.+4      	; 0xcc0 <__divmodhi4+0xa>
 cbc:	00 94       	com	r0
 cbe:	07 d0       	rcall	.+14     	; 0xcce <__divmodhi4_neg1>
 cc0:	77 fd       	sbrc	r23, 7
 cc2:	09 d0       	rcall	.+18     	; 0xcd6 <__divmodhi4_neg2>
 cc4:	0e 94 b2 06 	call	0xd64	; 0xd64 <__udivmodhi4>
 cc8:	07 fc       	sbrc	r0, 7
 cca:	05 d0       	rcall	.+10     	; 0xcd6 <__divmodhi4_neg2>
 ccc:	3e f4       	brtc	.+14     	; 0xcdc <__divmodhi4_exit>

00000cce <__divmodhi4_neg1>:
 cce:	90 95       	com	r25
 cd0:	81 95       	neg	r24
 cd2:	9f 4f       	sbci	r25, 0xFF	; 255
 cd4:	08 95       	ret

00000cd6 <__divmodhi4_neg2>:
 cd6:	70 95       	com	r23
 cd8:	61 95       	neg	r22
 cda:	7f 4f       	sbci	r23, 0xFF	; 255

00000cdc <__divmodhi4_exit>:
 cdc:	08 95       	ret

00000cde <__udivmodsi4>:
 cde:	a1 e2       	ldi	r26, 0x21	; 33
 ce0:	1a 2e       	mov	r1, r26
 ce2:	aa 1b       	sub	r26, r26
 ce4:	bb 1b       	sub	r27, r27
 ce6:	fd 01       	movw	r30, r26
 ce8:	0d c0       	rjmp	.+26     	; 0xd04 <__udivmodsi4_ep>

00000cea <__udivmodsi4_loop>:
 cea:	aa 1f       	adc	r26, r26
 cec:	bb 1f       	adc	r27, r27
 cee:	ee 1f       	adc	r30, r30
 cf0:	ff 1f       	adc	r31, r31
 cf2:	a2 17       	cp	r26, r18
 cf4:	b3 07       	cpc	r27, r19
 cf6:	e4 07       	cpc	r30, r20
 cf8:	f5 07       	cpc	r31, r21
 cfa:	20 f0       	brcs	.+8      	; 0xd04 <__udivmodsi4_ep>
 cfc:	a2 1b       	sub	r26, r18
 cfe:	b3 0b       	sbc	r27, r19
 d00:	e4 0b       	sbc	r30, r20
 d02:	f5 0b       	sbc	r31, r21

00000d04 <__udivmodsi4_ep>:
 d04:	66 1f       	adc	r22, r22
 d06:	77 1f       	adc	r23, r23
 d08:	88 1f       	adc	r24, r24
 d0a:	99 1f       	adc	r25, r25
 d0c:	1a 94       	dec	r1
 d0e:	69 f7       	brne	.-38     	; 0xcea <__udivmodsi4_loop>
 d10:	60 95       	com	r22
 d12:	70 95       	com	r23
 d14:	80 95       	com	r24
 d16:	90 95       	com	r25
 d18:	9b 01       	movw	r18, r22
 d1a:	ac 01       	movw	r20, r24
 d1c:	bd 01       	movw	r22, r26
 d1e:	cf 01       	movw	r24, r30
 d20:	08 95       	ret

00000d22 <__adddi3_s8>:
 d22:	00 24       	eor	r0, r0
 d24:	a7 fd       	sbrc	r26, 7
 d26:	00 94       	com	r0
 d28:	2a 0f       	add	r18, r26
 d2a:	30 1d       	adc	r19, r0
 d2c:	40 1d       	adc	r20, r0
 d2e:	50 1d       	adc	r21, r0
 d30:	60 1d       	adc	r22, r0
 d32:	70 1d       	adc	r23, r0
 d34:	80 1d       	adc	r24, r0
 d36:	90 1d       	adc	r25, r0
 d38:	08 95       	ret

00000d3a <__cmpdi2>:
 d3a:	2a 15       	cp	r18, r10
 d3c:	3b 05       	cpc	r19, r11
 d3e:	4c 05       	cpc	r20, r12
 d40:	5d 05       	cpc	r21, r13
 d42:	6e 05       	cpc	r22, r14
 d44:	7f 05       	cpc	r23, r15
 d46:	80 07       	cpc	r24, r16
 d48:	91 07       	cpc	r25, r17
 d4a:	08 95       	ret

00000d4c <__cmpdi2_s8>:
 d4c:	00 24       	eor	r0, r0
 d4e:	a7 fd       	sbrc	r26, 7
 d50:	00 94       	com	r0
 d52:	2a 17       	cp	r18, r26
 d54:	30 05       	cpc	r19, r0
 d56:	40 05       	cpc	r20, r0
 d58:	50 05       	cpc	r21, r0
 d5a:	60 05       	cpc	r22, r0
 d5c:	70 05       	cpc	r23, r0
 d5e:	80 05       	cpc	r24, r0
 d60:	90 05       	cpc	r25, r0
 d62:	08 95       	ret

00000d64 <__udivmodhi4>:
 d64:	aa 1b       	sub	r26, r26
 d66:	bb 1b       	sub	r27, r27
 d68:	51 e1       	ldi	r21, 0x11	; 17
 d6a:	07 c0       	rjmp	.+14     	; 0xd7a <__udivmodhi4_ep>

00000d6c <__udivmodhi4_loop>:
 d6c:	aa 1f       	adc	r26, r26
 d6e:	bb 1f       	adc	r27, r27
 d70:	a6 17       	cp	r26, r22
 d72:	b7 07       	cpc	r27, r23
 d74:	10 f0       	brcs	.+4      	; 0xd7a <__udivmodhi4_ep>
 d76:	a6 1b       	sub	r26, r22
 d78:	b7 0b       	sbc	r27, r23

00000d7a <__udivmodhi4_ep>:
 d7a:	88 1f       	adc	r24, r24
 d7c:	99 1f       	adc	r25, r25
 d7e:	5a 95       	dec	r21
 d80:	a9 f7       	brne	.-22     	; 0xd6c <__udivmodhi4_loop>
 d82:	80 95       	com	r24
 d84:	90 95       	com	r25
 d86:	bc 01       	movw	r22, r24
 d88:	cd 01       	movw	r24, r26
 d8a:	08 95       	ret

00000d8c <_exit>:
 d8c:	f8 94       	cli

00000d8e <__stop_program>:
 d8e:	ff cf       	rjmp	.-2      	; 0xd8e <__stop_program>
