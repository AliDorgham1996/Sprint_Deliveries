
ATmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001192  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00001192  00001226  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000077  00800074  00800074  0000123a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000123a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000126c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003a0  00000000  00000000  000012a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004247  00000000  00000000  00001648  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001407  00000000  00000000  0000588f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002678  00000000  00000000  00006c96  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c4c  00000000  00000000  00009310  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001c2c  00000000  00000000  00009f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000037cf  00000000  00000000  0000bb88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000350  00000000  00000000  0000f357  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_1>
       8:	0c 94 04 01 	jmp	0x208	; 0x208 <__vector_2>
       c:	0c 94 34 01 	jmp	0x268	; 0x268 <__vector_3>
      10:	0c 94 49 03 	jmp	0x692	; 0x692 <__vector_4>
      14:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 cc 05 	jmp	0xb98	; 0xb98 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 11 03 	jmp	0x622	; 0x622 <__vector_10>
      2c:	0c 94 bb 01 	jmp	0x376	; 0x376 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 60 04 	jmp	0x8c0	; 0x8c0 <__vector_13>
      38:	0c 94 c1 03 	jmp	0x782	; 0x782 <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e9       	ldi	r30, 0x92	; 146
      68:	f1 e1       	ldi	r31, 0x11	; 17
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 3e       	cpi	r26, 0xEB	; 235
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9b 00 	call	0x136	; 0x136 <main>
      8a:	0c 94 c7 08 	jmp	0x118e	; 0x118e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <SPI_UART>:
#define MAX_SIZE_CONSTRAIN    255U

_S void clean_arr (uint8_t* arr);

void SPI_UART(void)
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	cf 5f       	subi	r28, 0xFF	; 255
      9c:	d1 09       	sbc	r29, r1
      9e:	0f b6       	in	r0, 0x3f	; 63
      a0:	f8 94       	cli
      a2:	de bf       	out	0x3e, r29	; 62
      a4:	0f be       	out	0x3f, r0	; 63
      a6:	cd bf       	out	0x3d, r28	; 61
	uint8_t arr [MAX_SIZE_CONSTRAIN] = {0};
      a8:	fe 01       	movw	r30, r28
      aa:	31 96       	adiw	r30, 0x01	; 1
      ac:	8f ef       	ldi	r24, 0xFF	; 255
      ae:	df 01       	movw	r26, r30
      b0:	1d 92       	st	X+, r1
      b2:	8a 95       	dec	r24
      b4:	e9 f7       	brne	.-6      	; 0xb0 <SPI_UART+0x1e>
	SPI_Init(SPI_EN_Master);
      b6:	81 e0       	ldi	r24, 0x01	; 1
      b8:	0e 94 64 01 	call	0x2c8	; 0x2c8 <SPI_Init>
	Uart_init(9600);
      bc:	60 e8       	ldi	r22, 0x80	; 128
      be:	75 e2       	ldi	r23, 0x25	; 37
      c0:	80 e0       	ldi	r24, 0x00	; 0
      c2:	90 e0       	ldi	r25, 0x00	; 0
      c4:	0e 94 73 03 	call	0x6e6	; 0x6e6 <Uart_init>
	Delay_Ms(100);
      c8:	24 e6       	ldi	r18, 0x64	; 100
      ca:	30 e0       	ldi	r19, 0x00	; 0
      cc:	40 e0       	ldi	r20, 0x00	; 0
      ce:	50 e0       	ldi	r21, 0x00	; 0
      d0:	60 e0       	ldi	r22, 0x00	; 0
      d2:	70 e0       	ldi	r23, 0x00	; 0
      d4:	80 e0       	ldi	r24, 0x00	; 0
      d6:	90 e0       	ldi	r25, 0x00	; 0
      d8:	0e 94 a0 00 	call	0x140	; 0x140 <Delay_Ms>
	PORTB4 = 0;
      dc:	c4 98       	cbi	0x18, 4	; 24
	sei();
      de:	78 94       	sei
	while(1)
	{
		Uart_ReceiveStringPooling(arr, MAX_SIZE_CONSTRAIN, '\r');
      e0:	8e 01       	movw	r16, r28
      e2:	0f 5f       	subi	r16, 0xFF	; 255
      e4:	1f 4f       	sbci	r17, 0xFF	; 255
      e6:	4d e0       	ldi	r20, 0x0D	; 13
      e8:	6f ef       	ldi	r22, 0xFF	; 255
      ea:	c8 01       	movw	r24, r16
      ec:	0e 94 24 04 	call	0x848	; 0x848 <Uart_ReceiveStringPooling>
		SPI_SendString(arr);
      f0:	c8 01       	movw	r24, r16
      f2:	0e 94 88 01 	call	0x310	; 0x310 <SPI_SendString>
		Delay_Ms(500);
      f6:	24 ef       	ldi	r18, 0xF4	; 244
      f8:	31 e0       	ldi	r19, 0x01	; 1
      fa:	40 e0       	ldi	r20, 0x00	; 0
      fc:	50 e0       	ldi	r21, 0x00	; 0
      fe:	60 e0       	ldi	r22, 0x00	; 0
     100:	70 e0       	ldi	r23, 0x00	; 0
     102:	80 e0       	ldi	r24, 0x00	; 0
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	0e 94 a0 00 	call	0x140	; 0x140 <Delay_Ms>
	}
}
_S void clean_arr (uint8_t* arr)
{
	uint8_t index = 0;
	uint8_t size = strlen(arr);
     10a:	f8 01       	movw	r30, r16
     10c:	01 90       	ld	r0, Z+
     10e:	00 20       	and	r0, r0
     110:	e9 f7       	brne	.-6      	; 0x10c <SPI_UART+0x7a>
     112:	31 97       	sbiw	r30, 0x01	; 1
     114:	cf 01       	movw	r24, r30
     116:	80 1b       	sub	r24, r16
     118:	91 0b       	sbc	r25, r17
	for(index = 0; index < size; index++)
     11a:	88 23       	and	r24, r24
     11c:	21 f3       	breq	.-56     	; 0xe6 <SPI_UART+0x54>
     11e:	fe 01       	movw	r30, r28
     120:	31 96       	adiw	r30, 0x01	; 1
     122:	81 50       	subi	r24, 0x01	; 1
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	01 96       	adiw	r24, 0x01	; 1
     128:	8e 0f       	add	r24, r30
     12a:	9f 1f       	adc	r25, r31
	{
		arr [index] = 0;
     12c:	11 92       	st	Z+, r1
}
_S void clean_arr (uint8_t* arr)
{
	uint8_t index = 0;
	uint8_t size = strlen(arr);
	for(index = 0; index < size; index++)
     12e:	e8 17       	cp	r30, r24
     130:	f9 07       	cpc	r31, r25
     132:	e1 f7       	brne	.-8      	; 0x12c <SPI_UART+0x9a>
     134:	d8 cf       	rjmp	.-80     	; 0xe6 <SPI_UART+0x54>

00000136 <main>:
#elif (Running_Task == Task_Traffic_System)
	Traffic_System();
#elif (Running_Task == Task_SPI_Driver)
	SPI_Driver();
#elif (Running_Task == Task_SPI_UART)
	SPI_UART();
     136:	0e 94 49 00 	call	0x92	; 0x92 <SPI_UART>
#elif (Running_Task == Task_I2C_EEPROM)
	I2C_EEPROMTask();
#else 
	while(1);
#endif /* Task */
     13a:	80 e0       	ldi	r24, 0x00	; 0
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	08 95       	ret

00000140 <Delay_Ms>:
#include "../Library/Configurations.h"
#include <util/delay.h>


void Delay_Ms(uint64_t Delay)
{
     140:	ff 92       	push	r15
     142:	0f 93       	push	r16
     144:	1f 93       	push	r17
     146:	cf 93       	push	r28
     148:	df 93       	push	r29
     14a:	f2 2e       	mov	r15, r18
     14c:	03 2f       	mov	r16, r19
     14e:	14 2f       	mov	r17, r20
     150:	d5 2f       	mov	r29, r21
     152:	c6 2f       	mov	r28, r22
     154:	b7 2f       	mov	r27, r23
     156:	f8 2f       	mov	r31, r24
     158:	e9 2f       	mov	r30, r25
	while (0 < Delay)
     15a:	a0 e0       	ldi	r26, 0x00	; 0
     15c:	0e 94 63 07 	call	0xec6	; 0xec6 <__cmpdi2_s8>
     160:	e9 f0       	breq	.+58     	; 0x19c <Delay_Ms+0x5c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     162:	8f ec       	ldi	r24, 0xCF	; 207
     164:	97 e0       	ldi	r25, 0x07	; 7
     166:	01 97       	sbiw	r24, 0x01	; 1
     168:	f1 f7       	brne	.-4      	; 0x166 <Delay_Ms+0x26>
     16a:	00 c0       	rjmp	.+0      	; 0x16c <Delay_Ms+0x2c>
     16c:	00 00       	nop
	{
		_delay_ms(1);
		--Delay;
     16e:	2f 2d       	mov	r18, r15
     170:	30 2f       	mov	r19, r16
     172:	41 2f       	mov	r20, r17
     174:	5d 2f       	mov	r21, r29
     176:	6c 2f       	mov	r22, r28
     178:	7b 2f       	mov	r23, r27
     17a:	8f 2f       	mov	r24, r31
     17c:	9e 2f       	mov	r25, r30
     17e:	af ef       	ldi	r26, 0xFF	; 255
     180:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__adddi3_s8>
     184:	f2 2e       	mov	r15, r18
     186:	03 2f       	mov	r16, r19
     188:	14 2f       	mov	r17, r20
     18a:	d5 2f       	mov	r29, r21
     18c:	c6 2f       	mov	r28, r22
     18e:	b7 2f       	mov	r27, r23
     190:	f8 2f       	mov	r31, r24
     192:	e9 2f       	mov	r30, r25
#include <util/delay.h>


void Delay_Ms(uint64_t Delay)
{
	while (0 < Delay)
     194:	a0 e0       	ldi	r26, 0x00	; 0
     196:	0e 94 63 07 	call	0xec6	; 0xec6 <__cmpdi2_s8>
     19a:	19 f7       	brne	.-58     	; 0x162 <Delay_Ms+0x22>
	{
		_delay_ms(1);
		--Delay;
	}
}
     19c:	df 91       	pop	r29
     19e:	cf 91       	pop	r28
     1a0:	1f 91       	pop	r17
     1a2:	0f 91       	pop	r16
     1a4:	ff 90       	pop	r15
     1a6:	08 95       	ret

000001a8 <__vector_1>:
		break;
	}
	return return_value;	
}
ISR(INT0_vect)
{
     1a8:	1f 92       	push	r1
     1aa:	0f 92       	push	r0
     1ac:	0f b6       	in	r0, 0x3f	; 63
     1ae:	0f 92       	push	r0
     1b0:	11 24       	eor	r1, r1
     1b2:	2f 93       	push	r18
     1b4:	3f 93       	push	r19
     1b6:	4f 93       	push	r20
     1b8:	5f 93       	push	r21
     1ba:	6f 93       	push	r22
     1bc:	7f 93       	push	r23
     1be:	8f 93       	push	r24
     1c0:	9f 93       	push	r25
     1c2:	af 93       	push	r26
     1c4:	bf 93       	push	r27
     1c6:	ef 93       	push	r30
     1c8:	ff 93       	push	r31
	EXTI.Flag.INT_0 = ENABLE;
     1ca:	8a b7       	in	r24, 0x3a	; 58
     1cc:	80 64       	ori	r24, 0x40	; 64
     1ce:	8a bf       	out	0x3a, r24	; 58
	if(ExtI_Callbacks[0] != NULL)
     1d0:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
     1d4:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <__data_end+0x1>
     1d8:	89 2b       	or	r24, r25
     1da:	29 f0       	breq	.+10     	; 0x1e6 <__vector_1+0x3e>
	{
		ExtI_Callbacks[0]();
     1dc:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <__data_end>
     1e0:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <__data_end+0x1>
     1e4:	09 95       	icall
	}
}
     1e6:	ff 91       	pop	r31
     1e8:	ef 91       	pop	r30
     1ea:	bf 91       	pop	r27
     1ec:	af 91       	pop	r26
     1ee:	9f 91       	pop	r25
     1f0:	8f 91       	pop	r24
     1f2:	7f 91       	pop	r23
     1f4:	6f 91       	pop	r22
     1f6:	5f 91       	pop	r21
     1f8:	4f 91       	pop	r20
     1fa:	3f 91       	pop	r19
     1fc:	2f 91       	pop	r18
     1fe:	0f 90       	pop	r0
     200:	0f be       	out	0x3f, r0	; 63
     202:	0f 90       	pop	r0
     204:	1f 90       	pop	r1
     206:	18 95       	reti

00000208 <__vector_2>:
ISR(INT1_vect)
{
     208:	1f 92       	push	r1
     20a:	0f 92       	push	r0
     20c:	0f b6       	in	r0, 0x3f	; 63
     20e:	0f 92       	push	r0
     210:	11 24       	eor	r1, r1
     212:	2f 93       	push	r18
     214:	3f 93       	push	r19
     216:	4f 93       	push	r20
     218:	5f 93       	push	r21
     21a:	6f 93       	push	r22
     21c:	7f 93       	push	r23
     21e:	8f 93       	push	r24
     220:	9f 93       	push	r25
     222:	af 93       	push	r26
     224:	bf 93       	push	r27
     226:	ef 93       	push	r30
     228:	ff 93       	push	r31
	EXTI.Flag.INT_1 = ENABLE;
     22a:	8a b7       	in	r24, 0x3a	; 58
     22c:	80 68       	ori	r24, 0x80	; 128
     22e:	8a bf       	out	0x3a, r24	; 58
	if(ExtI_Callbacks[1] != NULL)
     230:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end+0x2>
     234:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <__data_end+0x3>
     238:	89 2b       	or	r24, r25
     23a:	29 f0       	breq	.+10     	; 0x246 <__vector_2+0x3e>
	{
		ExtI_Callbacks[1]();
     23c:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <__data_end+0x2>
     240:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <__data_end+0x3>
     244:	09 95       	icall
	}
}
     246:	ff 91       	pop	r31
     248:	ef 91       	pop	r30
     24a:	bf 91       	pop	r27
     24c:	af 91       	pop	r26
     24e:	9f 91       	pop	r25
     250:	8f 91       	pop	r24
     252:	7f 91       	pop	r23
     254:	6f 91       	pop	r22
     256:	5f 91       	pop	r21
     258:	4f 91       	pop	r20
     25a:	3f 91       	pop	r19
     25c:	2f 91       	pop	r18
     25e:	0f 90       	pop	r0
     260:	0f be       	out	0x3f, r0	; 63
     262:	0f 90       	pop	r0
     264:	1f 90       	pop	r1
     266:	18 95       	reti

00000268 <__vector_3>:
ISR(INT2_vect)
{
     268:	1f 92       	push	r1
     26a:	0f 92       	push	r0
     26c:	0f b6       	in	r0, 0x3f	; 63
     26e:	0f 92       	push	r0
     270:	11 24       	eor	r1, r1
     272:	2f 93       	push	r18
     274:	3f 93       	push	r19
     276:	4f 93       	push	r20
     278:	5f 93       	push	r21
     27a:	6f 93       	push	r22
     27c:	7f 93       	push	r23
     27e:	8f 93       	push	r24
     280:	9f 93       	push	r25
     282:	af 93       	push	r26
     284:	bf 93       	push	r27
     286:	ef 93       	push	r30
     288:	ff 93       	push	r31
	EXTI.Flag.INT_2 = ENABLE;
     28a:	8a b7       	in	r24, 0x3a	; 58
     28c:	80 62       	ori	r24, 0x20	; 32
     28e:	8a bf       	out	0x3a, r24	; 58
	if(ExtI_Callbacks[2] != NULL)
     290:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end+0x4>
     294:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__data_end+0x5>
     298:	89 2b       	or	r24, r25
     29a:	29 f0       	breq	.+10     	; 0x2a6 <__vector_3+0x3e>
	{
		ExtI_Callbacks[2]();
     29c:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <__data_end+0x4>
     2a0:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <__data_end+0x5>
     2a4:	09 95       	icall
	}
     2a6:	ff 91       	pop	r31
     2a8:	ef 91       	pop	r30
     2aa:	bf 91       	pop	r27
     2ac:	af 91       	pop	r26
     2ae:	9f 91       	pop	r25
     2b0:	8f 91       	pop	r24
     2b2:	7f 91       	pop	r23
     2b4:	6f 91       	pop	r22
     2b6:	5f 91       	pop	r21
     2b8:	4f 91       	pop	r20
     2ba:	3f 91       	pop	r19
     2bc:	2f 91       	pop	r18
     2be:	0f 90       	pop	r0
     2c0:	0f be       	out	0x3f, r0	; 63
     2c2:	0f 90       	pop	r0
     2c4:	1f 90       	pop	r1
     2c6:	18 95       	reti

000002c8 <SPI_Init>:
}
uint8_t		    SPI_Receive			(void)
{
	while((SPI.Status.interrupt_flag == 0));
	return SPI.Data;
}
     2c8:	98 2f       	mov	r25, r24
     2ca:	91 70       	andi	r25, 0x01	; 1
     2cc:	90 fd       	sbrc	r25, 0
     2ce:	bf 9a       	sbi	0x17, 7	; 23
     2d0:	90 ff       	sbrs	r25, 0
     2d2:	bf 98       	cbi	0x17, 7	; 23
     2d4:	8f 5f       	subi	r24, 0xFF	; 255
     2d6:	80 fd       	sbrc	r24, 0
     2d8:	be 9a       	sbi	0x17, 6	; 23
     2da:	80 ff       	sbrs	r24, 0
     2dc:	be 98       	cbi	0x17, 6	; 23
     2de:	90 fd       	sbrc	r25, 0
     2e0:	bd 9a       	sbi	0x17, 5	; 23
     2e2:	90 ff       	sbrs	r25, 0
     2e4:	bd 98       	cbi	0x17, 5	; 23
     2e6:	90 fd       	sbrc	r25, 0
     2e8:	bc 9a       	sbi	0x17, 4	; 23
     2ea:	90 ff       	sbrs	r25, 0
     2ec:	bc 98       	cbi	0x17, 4	; 23
     2ee:	8d b1       	in	r24, 0x0d	; 13
     2f0:	8c 7f       	andi	r24, 0xFC	; 252
     2f2:	8d b9       	out	0x0d, r24	; 13
     2f4:	70 98       	cbi	0x0e, 0	; 14
     2f6:	6d 98       	cbi	0x0d, 5	; 13
     2f8:	6a 98       	cbi	0x0d, 2	; 13
     2fa:	6b 98       	cbi	0x0d, 3	; 13
     2fc:	90 fd       	sbrc	r25, 0
     2fe:	6c 9a       	sbi	0x0d, 4	; 13
     300:	90 ff       	sbrs	r25, 0
     302:	6c 98       	cbi	0x0d, 4	; 13
     304:	6e 9a       	sbi	0x0d, 6	; 13
     306:	08 95       	ret

00000308 <SPI_Send>:
     308:	8f b9       	out	0x0f, r24	; 15
     30a:	77 9b       	sbis	0x0e, 7	; 14
     30c:	fe cf       	rjmp	.-4      	; 0x30a <SPI_Send+0x2>
     30e:	08 95       	ret

00000310 <SPI_SendString>:
SPI_Error_t		SPI_SendString	    (uint8_t* Data)
{
     310:	cf 93       	push	r28
     312:	df 93       	push	r29
	SPI_Error_t return_value = SPI_EN_valid;
	uint32_t index   = 0;
	if(Data != NULL)
     314:	00 97       	sbiw	r24, 0x00	; 0
     316:	79 f0       	breq	.+30     	; 0x336 <SPI_SendString+0x26>
     318:	ec 01       	movw	r28, r24
	{
		for(index = 0; Data[index] != '\0' ; index++)
     31a:	88 81       	ld	r24, Y
     31c:	88 23       	and	r24, r24
     31e:	31 f0       	breq	.+12     	; 0x32c <SPI_SendString+0x1c>
     320:	21 96       	adiw	r28, 0x01	; 1
		{
			SPI_Send(Data[index]);
     322:	0e 94 84 01 	call	0x308	; 0x308 <SPI_Send>
{
	SPI_Error_t return_value = SPI_EN_valid;
	uint32_t index   = 0;
	if(Data != NULL)
	{
		for(index = 0; Data[index] != '\0' ; index++)
     326:	89 91       	ld	r24, Y+
     328:	81 11       	cpse	r24, r1
     32a:	fb cf       	rjmp	.-10     	; 0x322 <SPI_SendString+0x12>
		{
			SPI_Send(Data[index]);
		}
		SPI_Send('\0');
     32c:	80 e0       	ldi	r24, 0x00	; 0
     32e:	0e 94 84 01 	call	0x308	; 0x308 <SPI_Send>
	while((SPI.Status.interrupt_flag == 0));
	return SPI.Data;
}
SPI_Error_t		SPI_SendString	    (uint8_t* Data)
{
	SPI_Error_t return_value = SPI_EN_valid;
     332:	80 e0       	ldi	r24, 0x00	; 0
     334:	01 c0       	rjmp	.+2      	; 0x338 <SPI_SendString+0x28>
		}
		SPI_Send('\0');
	}
	else
	{
		return_value = SPI_EN_InvalidPointer;
     336:	81 e0       	ldi	r24, 0x01	; 1
	}
	return return_value;
}
     338:	df 91       	pop	r29
     33a:	cf 91       	pop	r28
     33c:	08 95       	ret

0000033e <Timer_ResetCounter>:
		TIMER2.Interrupts.Comp_Match       = ENABLE;
		TIMER2.Interrupts.OverFlow		   = ENABLE;
		TIMER2.Control.Clock = Clock;
	}
	else{/*MISRA C*/}
}
     33e:	81 11       	cpse	r24, r1
     340:	0c c0       	rjmp	.+24     	; 0x35a <Timer_ResetCounter+0x1c>
     342:	ee e9       	ldi	r30, 0x9E	; 158
     344:	f0 e0       	ldi	r31, 0x00	; 0
     346:	10 82       	st	Z, r1
     348:	11 82       	std	Z+1, r1	; 0x01
     34a:	12 82       	std	Z+2, r1	; 0x02
     34c:	13 82       	std	Z+3, r1	; 0x03
     34e:	14 82       	std	Z+4, r1	; 0x04
     350:	15 82       	std	Z+5, r1	; 0x05
     352:	16 82       	std	Z+6, r1	; 0x06
     354:	17 82       	std	Z+7, r1	; 0x07
     356:	12 be       	out	0x32, r1	; 50
     358:	08 95       	ret
     35a:	81 30       	cpi	r24, 0x01	; 1
     35c:	59 f4       	brne	.+22     	; 0x374 <Timer_ResetCounter+0x36>
     35e:	ee e9       	ldi	r30, 0x9E	; 158
     360:	f0 e0       	ldi	r31, 0x00	; 0
     362:	10 86       	std	Z+8, r1	; 0x08
     364:	11 86       	std	Z+9, r1	; 0x09
     366:	12 86       	std	Z+10, r1	; 0x0a
     368:	13 86       	std	Z+11, r1	; 0x0b
     36a:	14 86       	std	Z+12, r1	; 0x0c
     36c:	15 86       	std	Z+13, r1	; 0x0d
     36e:	16 86       	std	Z+14, r1	; 0x0e
     370:	17 86       	std	Z+15, r1	; 0x0f
     372:	14 bc       	out	0x24, r1	; 36
     374:	08 95       	ret

00000376 <__vector_11>:
ISR(TIMER0_OVF_vect)
{
     376:	1f 92       	push	r1
     378:	0f 92       	push	r0
     37a:	0f b6       	in	r0, 0x3f	; 63
     37c:	0f 92       	push	r0
     37e:	11 24       	eor	r1, r1
     380:	af 92       	push	r10
     382:	bf 92       	push	r11
     384:	cf 92       	push	r12
     386:	df 92       	push	r13
     388:	ef 92       	push	r14
     38a:	ff 92       	push	r15
     38c:	0f 93       	push	r16
     38e:	1f 93       	push	r17
     390:	2f 93       	push	r18
     392:	3f 93       	push	r19
     394:	4f 93       	push	r20
     396:	5f 93       	push	r21
     398:	6f 93       	push	r22
     39a:	7f 93       	push	r23
     39c:	8f 93       	push	r24
     39e:	9f 93       	push	r25
     3a0:	af 93       	push	r26
     3a2:	bf 93       	push	r27
     3a4:	cf 93       	push	r28
     3a6:	df 93       	push	r29
     3a8:	ef 93       	push	r30
     3aa:	ff 93       	push	r31
	TIMER0.Flags.OverFlow = ENABLE;
     3ac:	88 b7       	in	r24, 0x38	; 56
     3ae:	81 60       	ori	r24, 0x01	; 1
     3b0:	88 bf       	out	0x38, r24	; 56
	OverFlows[Timer0]++;
     3b2:	ce e9       	ldi	r28, 0x9E	; 158
     3b4:	d0 e0       	ldi	r29, 0x00	; 0
     3b6:	28 81       	ld	r18, Y
     3b8:	39 81       	ldd	r19, Y+1	; 0x01
     3ba:	4a 81       	ldd	r20, Y+2	; 0x02
     3bc:	5b 81       	ldd	r21, Y+3	; 0x03
     3be:	6c 81       	ldd	r22, Y+4	; 0x04
     3c0:	7d 81       	ldd	r23, Y+5	; 0x05
     3c2:	8e 81       	ldd	r24, Y+6	; 0x06
     3c4:	9f 81       	ldd	r25, Y+7	; 0x07
     3c6:	a1 e0       	ldi	r26, 0x01	; 1
     3c8:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__adddi3_s8>
     3cc:	28 83       	st	Y, r18
     3ce:	39 83       	std	Y+1, r19	; 0x01
     3d0:	4a 83       	std	Y+2, r20	; 0x02
     3d2:	5b 83       	std	Y+3, r21	; 0x03
     3d4:	6c 83       	std	Y+4, r22	; 0x04
     3d6:	7d 83       	std	Y+5, r23	; 0x05
     3d8:	8e 83       	std	Y+6, r24	; 0x06
     3da:	9f 83       	std	Y+7, r25	; 0x07
	PWMAction[Timer0]();
     3dc:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <PWMAction>
     3e0:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <PWMAction+0x1>
     3e4:	09 95       	icall
	if(OverFlows[Timer0] == Duty[Timer0][Cycle[Timer0]])
     3e6:	28 81       	ld	r18, Y
     3e8:	39 81       	ldd	r19, Y+1	; 0x01
     3ea:	4a 81       	ldd	r20, Y+2	; 0x02
     3ec:	5b 81       	ldd	r21, Y+3	; 0x03
     3ee:	6c 81       	ldd	r22, Y+4	; 0x04
     3f0:	7d 81       	ldd	r23, Y+5	; 0x05
     3f2:	8e 81       	ldd	r24, Y+6	; 0x06
     3f4:	9f 81       	ldd	r25, Y+7	; 0x07
     3f6:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <Cycle>
     3fa:	f0 e0       	ldi	r31, 0x00	; 0
     3fc:	ee 0f       	add	r30, r30
     3fe:	ff 1f       	adc	r31, r31
     400:	ee 0f       	add	r30, r30
     402:	ff 1f       	adc	r31, r31
     404:	ee 0f       	add	r30, r30
     406:	ff 1f       	adc	r31, r31
     408:	e2 58       	subi	r30, 0x82	; 130
     40a:	ff 4f       	sbci	r31, 0xFF	; 255
     40c:	a0 80       	ld	r10, Z
     40e:	b1 80       	ldd	r11, Z+1	; 0x01
     410:	c2 80       	ldd	r12, Z+2	; 0x02
     412:	d3 80       	ldd	r13, Z+3	; 0x03
     414:	e4 80       	ldd	r14, Z+4	; 0x04
     416:	f5 80       	ldd	r15, Z+5	; 0x05
     418:	06 81       	ldd	r16, Z+6	; 0x06
     41a:	17 81       	ldd	r17, Z+7	; 0x07
     41c:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <__cmpdi2>
     420:	d1 f5       	brne	.+116    	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
	{
		OverFlows[Timer0] = RESET;
     422:	18 82       	st	Y, r1
     424:	19 82       	std	Y+1, r1	; 0x01
     426:	1a 82       	std	Y+2, r1	; 0x02
     428:	1b 82       	std	Y+3, r1	; 0x03
     42a:	1c 82       	std	Y+4, r1	; 0x04
     42c:	1d 82       	std	Y+5, r1	; 0x05
     42e:	1e 82       	std	Y+6, r1	; 0x06
     430:	1f 82       	std	Y+7, r1	; 0x07
		NotifierAction[Timer0]();
     432:	e0 91 ae 00 	lds	r30, 0x00AE	; 0x8000ae <NotifierAction>
     436:	f0 91 af 00 	lds	r31, 0x00AF	; 0x8000af <NotifierAction+0x1>
     43a:	09 95       	icall
		if(Cycle[Timer0] == ON_Cycle)
     43c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Cycle>
     440:	81 11       	cpse	r24, r1
     442:	13 c0       	rjmp	.+38     	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
		{
			Cycle[Timer0] = OFF_Cycle;
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <Cycle>
			TIMER0.Counter  = 256 - ((Duty[Timer0][OFF_Cycle] * 1000UL)%256 -1);
     44a:	ee e7       	ldi	r30, 0x7E	; 126
     44c:	f0 e0       	ldi	r31, 0x00	; 0
     44e:	90 85       	ldd	r25, Z+8	; 0x08
     450:	21 85       	ldd	r18, Z+9	; 0x09
     452:	22 85       	ldd	r18, Z+10	; 0x0a
     454:	23 85       	ldd	r18, Z+11	; 0x0b
     456:	24 85       	ldd	r18, Z+12	; 0x0c
     458:	25 85       	ldd	r18, Z+13	; 0x0d
     45a:	26 85       	ldd	r18, Z+14	; 0x0e
     45c:	27 85       	ldd	r18, Z+15	; 0x0f
     45e:	28 e1       	ldi	r18, 0x18	; 24
     460:	92 9f       	mul	r25, r18
     462:	80 0d       	add	r24, r0
     464:	11 24       	eor	r1, r1
     466:	82 bf       	out	0x32, r24	; 50
     468:	16 c0       	rjmp	.+44     	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
		}
		else if(Cycle[Timer0] == OFF_Cycle)
     46a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Cycle>
     46e:	81 30       	cpi	r24, 0x01	; 1
     470:	91 f4       	brne	.+36     	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
		{
			Cycle[Timer0] = ON_Cycle;
     472:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <Cycle>
			TIMER0.Counter  = 256 - ((Duty[Timer0][ON_Cycle] * 1000UL)%256 -1);
     476:	ee e7       	ldi	r30, 0x7E	; 126
     478:	f0 e0       	ldi	r31, 0x00	; 0
     47a:	90 81       	ld	r25, Z
     47c:	81 81       	ldd	r24, Z+1	; 0x01
     47e:	82 81       	ldd	r24, Z+2	; 0x02
     480:	83 81       	ldd	r24, Z+3	; 0x03
     482:	84 81       	ldd	r24, Z+4	; 0x04
     484:	85 81       	ldd	r24, Z+5	; 0x05
     486:	86 81       	ldd	r24, Z+6	; 0x06
     488:	87 81       	ldd	r24, Z+7	; 0x07
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	28 e1       	ldi	r18, 0x18	; 24
     48e:	92 9f       	mul	r25, r18
     490:	80 0d       	add	r24, r0
     492:	11 24       	eor	r1, r1
     494:	82 bf       	out	0x32, r24	; 50
		}
	}
}
     496:	ff 91       	pop	r31
     498:	ef 91       	pop	r30
     49a:	df 91       	pop	r29
     49c:	cf 91       	pop	r28
     49e:	bf 91       	pop	r27
     4a0:	af 91       	pop	r26
     4a2:	9f 91       	pop	r25
     4a4:	8f 91       	pop	r24
     4a6:	7f 91       	pop	r23
     4a8:	6f 91       	pop	r22
     4aa:	5f 91       	pop	r21
     4ac:	4f 91       	pop	r20
     4ae:	3f 91       	pop	r19
     4b0:	2f 91       	pop	r18
     4b2:	1f 91       	pop	r17
     4b4:	0f 91       	pop	r16
     4b6:	ff 90       	pop	r15
     4b8:	ef 90       	pop	r14
     4ba:	df 90       	pop	r13
     4bc:	cf 90       	pop	r12
     4be:	bf 90       	pop	r11
     4c0:	af 90       	pop	r10
     4c2:	0f 90       	pop	r0
     4c4:	0f be       	out	0x3f, r0	; 63
     4c6:	0f 90       	pop	r0
     4c8:	1f 90       	pop	r1
     4ca:	18 95       	reti

000004cc <__vector_5>:
ISR(TIMER2_OVF_vect)
{
     4cc:	1f 92       	push	r1
     4ce:	0f 92       	push	r0
     4d0:	0f b6       	in	r0, 0x3f	; 63
     4d2:	0f 92       	push	r0
     4d4:	11 24       	eor	r1, r1
     4d6:	af 92       	push	r10
     4d8:	bf 92       	push	r11
     4da:	cf 92       	push	r12
     4dc:	df 92       	push	r13
     4de:	ef 92       	push	r14
     4e0:	ff 92       	push	r15
     4e2:	0f 93       	push	r16
     4e4:	1f 93       	push	r17
     4e6:	2f 93       	push	r18
     4e8:	3f 93       	push	r19
     4ea:	4f 93       	push	r20
     4ec:	5f 93       	push	r21
     4ee:	6f 93       	push	r22
     4f0:	7f 93       	push	r23
     4f2:	8f 93       	push	r24
     4f4:	9f 93       	push	r25
     4f6:	af 93       	push	r26
     4f8:	bf 93       	push	r27
     4fa:	cf 93       	push	r28
     4fc:	df 93       	push	r29
     4fe:	ef 93       	push	r30
     500:	ff 93       	push	r31
	TIMER2.Flags.OverFlow = ENABLE;
     502:	88 b7       	in	r24, 0x38	; 56
     504:	80 64       	ori	r24, 0x40	; 64
     506:	88 bf       	out	0x38, r24	; 56
	OverFlows[Timer2]++;
     508:	ce e9       	ldi	r28, 0x9E	; 158
     50a:	d0 e0       	ldi	r29, 0x00	; 0
     50c:	28 85       	ldd	r18, Y+8	; 0x08
     50e:	39 85       	ldd	r19, Y+9	; 0x09
     510:	4a 85       	ldd	r20, Y+10	; 0x0a
     512:	5b 85       	ldd	r21, Y+11	; 0x0b
     514:	6c 85       	ldd	r22, Y+12	; 0x0c
     516:	7d 85       	ldd	r23, Y+13	; 0x0d
     518:	8e 85       	ldd	r24, Y+14	; 0x0e
     51a:	9f 85       	ldd	r25, Y+15	; 0x0f
     51c:	a1 e0       	ldi	r26, 0x01	; 1
     51e:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__adddi3_s8>
     522:	28 87       	std	Y+8, r18	; 0x08
     524:	39 87       	std	Y+9, r19	; 0x09
     526:	4a 87       	std	Y+10, r20	; 0x0a
     528:	5b 87       	std	Y+11, r21	; 0x0b
     52a:	6c 87       	std	Y+12, r22	; 0x0c
     52c:	7d 87       	std	Y+13, r23	; 0x0d
     52e:	8e 87       	std	Y+14, r24	; 0x0e
     530:	9f 87       	std	Y+15, r25	; 0x0f
	PWMAction[Timer2]();
     532:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <PWMAction+0x2>
     536:	f0 91 7d 00 	lds	r31, 0x007D	; 0x80007d <PWMAction+0x3>
     53a:	09 95       	icall
	if(OverFlows[Timer2] == Duty[Timer2][Cycle[Timer2]])
     53c:	28 85       	ldd	r18, Y+8	; 0x08
     53e:	39 85       	ldd	r19, Y+9	; 0x09
     540:	4a 85       	ldd	r20, Y+10	; 0x0a
     542:	5b 85       	ldd	r21, Y+11	; 0x0b
     544:	6c 85       	ldd	r22, Y+12	; 0x0c
     546:	7d 85       	ldd	r23, Y+13	; 0x0d
     548:	8e 85       	ldd	r24, Y+14	; 0x0e
     54a:	9f 85       	ldd	r25, Y+15	; 0x0f
     54c:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <Cycle+0x1>
     550:	f0 e0       	ldi	r31, 0x00	; 0
     552:	ee 0f       	add	r30, r30
     554:	ff 1f       	adc	r31, r31
     556:	ee 0f       	add	r30, r30
     558:	ff 1f       	adc	r31, r31
     55a:	ee 0f       	add	r30, r30
     55c:	ff 1f       	adc	r31, r31
     55e:	e2 57       	subi	r30, 0x72	; 114
     560:	ff 4f       	sbci	r31, 0xFF	; 255
     562:	a0 80       	ld	r10, Z
     564:	b1 80       	ldd	r11, Z+1	; 0x01
     566:	c2 80       	ldd	r12, Z+2	; 0x02
     568:	d3 80       	ldd	r13, Z+3	; 0x03
     56a:	e4 80       	ldd	r14, Z+4	; 0x04
     56c:	f5 80       	ldd	r15, Z+5	; 0x05
     56e:	06 81       	ldd	r16, Z+6	; 0x06
     570:	17 81       	ldd	r17, Z+7	; 0x07
     572:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <__cmpdi2>
     576:	d1 f5       	brne	.+116    	; 0x5ec <__vector_5+0x120>
	{
		OverFlows[Timer2] = RESET;
     578:	18 86       	std	Y+8, r1	; 0x08
     57a:	19 86       	std	Y+9, r1	; 0x09
     57c:	1a 86       	std	Y+10, r1	; 0x0a
     57e:	1b 86       	std	Y+11, r1	; 0x0b
     580:	1c 86       	std	Y+12, r1	; 0x0c
     582:	1d 86       	std	Y+13, r1	; 0x0d
     584:	1e 86       	std	Y+14, r1	; 0x0e
     586:	1f 86       	std	Y+15, r1	; 0x0f
		NotifierAction[Timer2]();
     588:	e0 91 b0 00 	lds	r30, 0x00B0	; 0x8000b0 <NotifierAction+0x2>
     58c:	f0 91 b1 00 	lds	r31, 0x00B1	; 0x8000b1 <NotifierAction+0x3>
     590:	09 95       	icall
		if(Cycle[Timer2] == ON_Cycle)
     592:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Cycle+0x1>
     596:	81 11       	cpse	r24, r1
     598:	13 c0       	rjmp	.+38     	; 0x5c0 <__vector_5+0xf4>
		{
			Cycle[Timer2] = OFF_Cycle;
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <Cycle+0x1>
			TIMER0.Counter  = 256 - ((Duty[Timer2][OFF_Cycle] * 1000UL)%256 -1);
     5a0:	ee e7       	ldi	r30, 0x7E	; 126
     5a2:	f0 e0       	ldi	r31, 0x00	; 0
     5a4:	90 8d       	ldd	r25, Z+24	; 0x18
     5a6:	21 8d       	ldd	r18, Z+25	; 0x19
     5a8:	22 8d       	ldd	r18, Z+26	; 0x1a
     5aa:	23 8d       	ldd	r18, Z+27	; 0x1b
     5ac:	24 8d       	ldd	r18, Z+28	; 0x1c
     5ae:	25 8d       	ldd	r18, Z+29	; 0x1d
     5b0:	26 8d       	ldd	r18, Z+30	; 0x1e
     5b2:	27 8d       	ldd	r18, Z+31	; 0x1f
     5b4:	28 e1       	ldi	r18, 0x18	; 24
     5b6:	92 9f       	mul	r25, r18
     5b8:	80 0d       	add	r24, r0
     5ba:	11 24       	eor	r1, r1
     5bc:	82 bf       	out	0x32, r24	; 50
     5be:	16 c0       	rjmp	.+44     	; 0x5ec <__vector_5+0x120>
		}
		else if(Cycle[Timer2] == OFF_Cycle)
     5c0:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Cycle+0x1>
     5c4:	81 30       	cpi	r24, 0x01	; 1
     5c6:	91 f4       	brne	.+36     	; 0x5ec <__vector_5+0x120>
		{
			Cycle[Timer2] = ON_Cycle;
     5c8:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <Cycle+0x1>
			TIMER2.Counter  = 256 - ((Duty[Timer2][ON_Cycle] * 1000UL)%256 -1);
     5cc:	ee e7       	ldi	r30, 0x7E	; 126
     5ce:	f0 e0       	ldi	r31, 0x00	; 0
     5d0:	90 89       	ldd	r25, Z+16	; 0x10
     5d2:	81 89       	ldd	r24, Z+17	; 0x11
     5d4:	82 89       	ldd	r24, Z+18	; 0x12
     5d6:	83 89       	ldd	r24, Z+19	; 0x13
     5d8:	84 89       	ldd	r24, Z+20	; 0x14
     5da:	85 89       	ldd	r24, Z+21	; 0x15
     5dc:	86 89       	ldd	r24, Z+22	; 0x16
     5de:	87 89       	ldd	r24, Z+23	; 0x17
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	28 e1       	ldi	r18, 0x18	; 24
     5e4:	92 9f       	mul	r25, r18
     5e6:	80 0d       	add	r24, r0
     5e8:	11 24       	eor	r1, r1
     5ea:	84 bd       	out	0x24, r24	; 36
		}
	}
}
     5ec:	ff 91       	pop	r31
     5ee:	ef 91       	pop	r30
     5f0:	df 91       	pop	r29
     5f2:	cf 91       	pop	r28
     5f4:	bf 91       	pop	r27
     5f6:	af 91       	pop	r26
     5f8:	9f 91       	pop	r25
     5fa:	8f 91       	pop	r24
     5fc:	7f 91       	pop	r23
     5fe:	6f 91       	pop	r22
     600:	5f 91       	pop	r21
     602:	4f 91       	pop	r20
     604:	3f 91       	pop	r19
     606:	2f 91       	pop	r18
     608:	1f 91       	pop	r17
     60a:	0f 91       	pop	r16
     60c:	ff 90       	pop	r15
     60e:	ef 90       	pop	r14
     610:	df 90       	pop	r13
     612:	cf 90       	pop	r12
     614:	bf 90       	pop	r11
     616:	af 90       	pop	r10
     618:	0f 90       	pop	r0
     61a:	0f be       	out	0x3f, r0	; 63
     61c:	0f 90       	pop	r0
     61e:	1f 90       	pop	r1
     620:	18 95       	reti

00000622 <__vector_10>:
ISR(TIMER0_COMP_vect)
{
     622:	1f 92       	push	r1
     624:	0f 92       	push	r0
     626:	0f b6       	in	r0, 0x3f	; 63
     628:	0f 92       	push	r0
     62a:	11 24       	eor	r1, r1
     62c:	2f 93       	push	r18
     62e:	3f 93       	push	r19
     630:	4f 93       	push	r20
     632:	5f 93       	push	r21
     634:	6f 93       	push	r22
     636:	7f 93       	push	r23
     638:	8f 93       	push	r24
     63a:	9f 93       	push	r25
     63c:	af 93       	push	r26
     63e:	bf 93       	push	r27
     640:	ef 93       	push	r30
     642:	ff 93       	push	r31
	TIMER0.Flags.Comp_Match = ENABLE;
     644:	88 b7       	in	r24, 0x38	; 56
     646:	82 60       	ori	r24, 0x02	; 2
     648:	88 bf       	out	0x38, r24	; 56
	if(CounterAction != NULL)
     64a:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <CounterAction>
     64e:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <CounterAction+0x1>
     652:	89 2b       	or	r24, r25
     654:	41 f0       	breq	.+16     	; 0x666 <__vector_10+0x44>
	{
		CounterAction();
     656:	e0 91 b2 00 	lds	r30, 0x00B2	; 0x8000b2 <CounterAction>
     65a:	f0 91 b3 00 	lds	r31, 0x00B3	; 0x8000b3 <CounterAction+0x1>
     65e:	09 95       	icall
		Timer_ResetCounter(Timer0);
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	0e 94 9f 01 	call	0x33e	; 0x33e <Timer_ResetCounter>
	}
	PWMAction[Timer0]();
     666:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <PWMAction>
     66a:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <PWMAction+0x1>
     66e:	09 95       	icall
}
     670:	ff 91       	pop	r31
     672:	ef 91       	pop	r30
     674:	bf 91       	pop	r27
     676:	af 91       	pop	r26
     678:	9f 91       	pop	r25
     67a:	8f 91       	pop	r24
     67c:	7f 91       	pop	r23
     67e:	6f 91       	pop	r22
     680:	5f 91       	pop	r21
     682:	4f 91       	pop	r20
     684:	3f 91       	pop	r19
     686:	2f 91       	pop	r18
     688:	0f 90       	pop	r0
     68a:	0f be       	out	0x3f, r0	; 63
     68c:	0f 90       	pop	r0
     68e:	1f 90       	pop	r1
     690:	18 95       	reti

00000692 <__vector_4>:
ISR(TIMER2_COMP_vect)
{
     692:	1f 92       	push	r1
     694:	0f 92       	push	r0
     696:	0f b6       	in	r0, 0x3f	; 63
     698:	0f 92       	push	r0
     69a:	11 24       	eor	r1, r1
     69c:	2f 93       	push	r18
     69e:	3f 93       	push	r19
     6a0:	4f 93       	push	r20
     6a2:	5f 93       	push	r21
     6a4:	6f 93       	push	r22
     6a6:	7f 93       	push	r23
     6a8:	8f 93       	push	r24
     6aa:	9f 93       	push	r25
     6ac:	af 93       	push	r26
     6ae:	bf 93       	push	r27
     6b0:	ef 93       	push	r30
     6b2:	ff 93       	push	r31
	TIMER2.Flags.Comp_Match = ENABLE;
     6b4:	88 b7       	in	r24, 0x38	; 56
     6b6:	80 68       	ori	r24, 0x80	; 128
     6b8:	88 bf       	out	0x38, r24	; 56
	PWMAction[Timer2]();
     6ba:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <PWMAction+0x2>
     6be:	f0 91 7d 00 	lds	r31, 0x007D	; 0x80007d <PWMAction+0x3>
     6c2:	09 95       	icall
     6c4:	ff 91       	pop	r31
     6c6:	ef 91       	pop	r30
     6c8:	bf 91       	pop	r27
     6ca:	af 91       	pop	r26
     6cc:	9f 91       	pop	r25
     6ce:	8f 91       	pop	r24
     6d0:	7f 91       	pop	r23
     6d2:	6f 91       	pop	r22
     6d4:	5f 91       	pop	r21
     6d6:	4f 91       	pop	r20
     6d8:	3f 91       	pop	r19
     6da:	2f 91       	pop	r18
     6dc:	0f 90       	pop	r0
     6de:	0f be       	out	0x3f, r0	; 63
     6e0:	0f 90       	pop	r0
     6e2:	1f 90       	pop	r1
     6e4:	18 95       	reti

000006e6 <Uart_init>:
			break;
		}
		else{/*MISRA C*/}	
	}
	return return_value;
}
     6e6:	cf 92       	push	r12
     6e8:	df 92       	push	r13
     6ea:	ef 92       	push	r14
     6ec:	ff 92       	push	r15
     6ee:	cf 93       	push	r28
     6f0:	6b 01       	movw	r12, r22
     6f2:	7c 01       	movw	r14, r24
     6f4:	8d e6       	ldi	r24, 0x6D	; 109
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	0e 94 8f 04 	call	0x91e	; 0x91e <Queue_Init>
     6fc:	c8 2f       	mov	r28, r24
     6fe:	88 e6       	ldi	r24, 0x68	; 104
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	0e 94 8f 04 	call	0x91e	; 0x91e <Queue_Init>
     706:	c8 2b       	or	r28, r24
     708:	91 f5       	brne	.+100    	; 0x76e <Uart_init+0x88>
     70a:	c1 14       	cp	r12, r1
     70c:	d1 04       	cpc	r13, r1
     70e:	e1 04       	cpc	r14, r1
     710:	f1 04       	cpc	r15, r1
     712:	79 f1       	breq	.+94     	; 0x772 <Uart_init+0x8c>
     714:	d7 01       	movw	r26, r14
     716:	c6 01       	movw	r24, r12
     718:	88 0f       	add	r24, r24
     71a:	99 1f       	adc	r25, r25
     71c:	aa 1f       	adc	r26, r26
     71e:	bb 1f       	adc	r27, r27
     720:	88 0f       	add	r24, r24
     722:	99 1f       	adc	r25, r25
     724:	aa 1f       	adc	r26, r26
     726:	bb 1f       	adc	r27, r27
     728:	9c 01       	movw	r18, r24
     72a:	ad 01       	movw	r20, r26
     72c:	22 0f       	add	r18, r18
     72e:	33 1f       	adc	r19, r19
     730:	44 1f       	adc	r20, r20
     732:	55 1f       	adc	r21, r21
     734:	22 0f       	add	r18, r18
     736:	33 1f       	adc	r19, r19
     738:	44 1f       	adc	r20, r20
     73a:	55 1f       	adc	r21, r21
     73c:	60 e0       	ldi	r22, 0x00	; 0
     73e:	72 e1       	ldi	r23, 0x12	; 18
     740:	8a e7       	ldi	r24, 0x7A	; 122
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	0e 94 2c 07 	call	0xe58	; 0xe58 <__udivmodsi4>
     748:	ba 01       	movw	r22, r20
     74a:	a9 01       	movw	r20, r18
     74c:	41 50       	subi	r20, 0x01	; 1
     74e:	51 09       	sbc	r21, r1
     750:	61 09       	sbc	r22, r1
     752:	71 09       	sbc	r23, r1
     754:	bb 27       	eor	r27, r27
     756:	a7 2f       	mov	r26, r23
     758:	96 2f       	mov	r25, r22
     75a:	85 2f       	mov	r24, r21
     75c:	80 bd       	out	0x20, r24	; 32
     75e:	49 b9       	out	0x09, r20	; 9
     760:	54 9a       	sbi	0x0a, 4	; 10
     762:	53 9a       	sbi	0x0a, 3	; 10
     764:	57 9a       	sbi	0x0a, 7	; 10
     766:	80 b5       	in	r24, 0x20	; 32
     768:	86 68       	ori	r24, 0x86	; 134
     76a:	80 bd       	out	0x20, r24	; 32
     76c:	03 c0       	rjmp	.+6      	; 0x774 <Uart_init+0x8e>
     76e:	c3 e0       	ldi	r28, 0x03	; 3
     770:	01 c0       	rjmp	.+2      	; 0x774 <Uart_init+0x8e>
     772:	c5 e0       	ldi	r28, 0x05	; 5
     774:	8c 2f       	mov	r24, r28
     776:	cf 91       	pop	r28
     778:	ff 90       	pop	r15
     77a:	ef 90       	pop	r14
     77c:	df 90       	pop	r13
     77e:	cf 90       	pop	r12
     780:	08 95       	ret

00000782 <__vector_14>:
     782:	1f 92       	push	r1
     784:	0f 92       	push	r0
     786:	0f b6       	in	r0, 0x3f	; 63
     788:	0f 92       	push	r0
     78a:	11 24       	eor	r1, r1
     78c:	2f 93       	push	r18
     78e:	3f 93       	push	r19
     790:	4f 93       	push	r20
     792:	5f 93       	push	r21
     794:	6f 93       	push	r22
     796:	7f 93       	push	r23
     798:	8f 93       	push	r24
     79a:	9f 93       	push	r25
     79c:	af 93       	push	r26
     79e:	bf 93       	push	r27
     7a0:	ef 93       	push	r30
     7a2:	ff 93       	push	r31
     7a4:	cf 93       	push	r28
     7a6:	df 93       	push	r29
     7a8:	1f 92       	push	r1
     7aa:	cd b7       	in	r28, 0x3d	; 61
     7ac:	de b7       	in	r29, 0x3e	; 62
     7ae:	5d 9a       	sbi	0x0b, 5	; 11
     7b0:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <T_Flag>
     7b4:	82 30       	cpi	r24, 0x02	; 2
     7b6:	79 f4       	brne	.+30     	; 0x7d6 <__vector_14+0x54>
     7b8:	19 82       	std	Y+1, r1	; 0x01
     7ba:	be 01       	movw	r22, r28
     7bc:	6f 5f       	subi	r22, 0xFF	; 255
     7be:	7f 4f       	sbci	r23, 0xFF	; 255
     7c0:	88 e6       	ldi	r24, 0x68	; 104
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	0e 94 fe 04 	call	0x9fc	; 0x9fc <DeQueue>
     7c8:	82 30       	cpi	r24, 0x02	; 2
     7ca:	19 f4       	brne	.+6      	; 0x7d2 <__vector_14+0x50>
     7cc:	55 98       	cbi	0x0a, 5	; 10
     7ce:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <T_Flag>
     7d2:	89 81       	ldd	r24, Y+1	; 0x01
     7d4:	8c b9       	out	0x0c, r24	; 12
     7d6:	0f 90       	pop	r0
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	ff 91       	pop	r31
     7de:	ef 91       	pop	r30
     7e0:	bf 91       	pop	r27
     7e2:	af 91       	pop	r26
     7e4:	9f 91       	pop	r25
     7e6:	8f 91       	pop	r24
     7e8:	7f 91       	pop	r23
     7ea:	6f 91       	pop	r22
     7ec:	5f 91       	pop	r21
     7ee:	4f 91       	pop	r20
     7f0:	3f 91       	pop	r19
     7f2:	2f 91       	pop	r18
     7f4:	0f 90       	pop	r0
     7f6:	0f be       	out	0x3f, r0	; 63
     7f8:	0f 90       	pop	r0
     7fa:	1f 90       	pop	r1
     7fc:	18 95       	reti

000007fe <Uart_ReceivePooling>:
     7fe:	fc 01       	movw	r30, r24
     800:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <R_Flag>
     804:	91 11       	cpse	r25, r1
     806:	1c c0       	rjmp	.+56     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
     808:	30 97       	sbiw	r30, 0x00	; 0
     80a:	e1 f0       	breq	.+56     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <R_Flag>
     812:	5f 99       	sbic	0x0b, 7	; 11
     814:	0b c0       	rjmp	.+22     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
     816:	40 e0       	ldi	r20, 0x00	; 0
     818:	50 e0       	ldi	r21, 0x00	; 0
     81a:	60 e0       	ldi	r22, 0x00	; 0
     81c:	71 e0       	ldi	r23, 0x01	; 1
     81e:	5f 99       	sbic	0x0b, 7	; 11
     820:	05 c0       	rjmp	.+10     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
     822:	41 50       	subi	r20, 0x01	; 1
     824:	51 09       	sbc	r21, r1
     826:	61 09       	sbc	r22, r1
     828:	71 09       	sbc	r23, r1
     82a:	c9 f7       	brne	.-14     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
     82c:	5f 9b       	sbis	0x0b, 7	; 11
     82e:	04 c0       	rjmp	.+8      	; 0x838 <__DATA_REGION_LENGTH__+0x38>
     830:	8c b1       	in	r24, 0x0c	; 12
     832:	80 83       	st	Z, r24
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	01 c0       	rjmp	.+2      	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
     838:	88 e0       	ldi	r24, 0x08	; 8
     83a:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <R_Flag>
     83e:	08 95       	ret
     840:	86 e0       	ldi	r24, 0x06	; 6
     842:	08 95       	ret
     844:	84 e0       	ldi	r24, 0x04	; 4
     846:	08 95       	ret

00000848 <Uart_ReceiveStringPooling>:
     848:	bf 92       	push	r11
     84a:	cf 92       	push	r12
     84c:	df 92       	push	r13
     84e:	ef 92       	push	r14
     850:	ff 92       	push	r15
     852:	0f 93       	push	r16
     854:	1f 93       	push	r17
     856:	cf 93       	push	r28
     858:	df 93       	push	r29
     85a:	00 97       	sbiw	r24, 0x00	; 0
     85c:	21 f1       	breq	.+72     	; 0x8a6 <__stack+0x47>
     85e:	66 23       	and	r22, r22
     860:	21 f1       	breq	.+72     	; 0x8aa <__stack+0x4b>
     862:	b4 2e       	mov	r11, r20
     864:	7c 01       	movw	r14, r24
     866:	61 50       	subi	r22, 0x01	; 1
     868:	26 2f       	mov	r18, r22
     86a:	30 e0       	ldi	r19, 0x00	; 0
     86c:	2f 5f       	subi	r18, 0xFF	; 255
     86e:	3f 4f       	sbci	r19, 0xFF	; 255
     870:	6c 01       	movw	r12, r24
     872:	c2 0e       	add	r12, r18
     874:	d3 1e       	adc	r13, r19
     876:	0e 2d       	mov	r16, r14
     878:	1f 2d       	mov	r17, r15
     87a:	c0 2f       	mov	r28, r16
     87c:	d1 2f       	mov	r29, r17
     87e:	80 2f       	mov	r24, r16
     880:	91 2f       	mov	r25, r17
     882:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Uart_ReceivePooling>
     886:	88 30       	cpi	r24, 0x08	; 8
     888:	c1 f3       	breq	.-16     	; 0x87a <__stack+0x1b>
     88a:	88 81       	ld	r24, Y
     88c:	8b 11       	cpse	r24, r11
     88e:	03 c0       	rjmp	.+6      	; 0x896 <__stack+0x37>
     890:	18 82       	st	Y, r1
     892:	8a e0       	ldi	r24, 0x0A	; 10
     894:	0b c0       	rjmp	.+22     	; 0x8ac <__stack+0x4d>
     896:	8f ef       	ldi	r24, 0xFF	; 255
     898:	e8 1a       	sub	r14, r24
     89a:	f8 0a       	sbc	r15, r24
     89c:	ec 14       	cp	r14, r12
     89e:	fd 04       	cpc	r15, r13
     8a0:	51 f7       	brne	.-44     	; 0x876 <__stack+0x17>
     8a2:	89 e0       	ldi	r24, 0x09	; 9
     8a4:	03 c0       	rjmp	.+6      	; 0x8ac <__stack+0x4d>
     8a6:	84 e0       	ldi	r24, 0x04	; 4
     8a8:	01 c0       	rjmp	.+2      	; 0x8ac <__stack+0x4d>
     8aa:	89 e0       	ldi	r24, 0x09	; 9
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	1f 91       	pop	r17
     8b2:	0f 91       	pop	r16
     8b4:	ff 90       	pop	r15
     8b6:	ef 90       	pop	r14
     8b8:	df 90       	pop	r13
     8ba:	cf 90       	pop	r12
     8bc:	bf 90       	pop	r11
     8be:	08 95       	ret

000008c0 <__vector_13>:
ISR(USART_RXC_vect)
{
     8c0:	1f 92       	push	r1
     8c2:	0f 92       	push	r0
     8c4:	0f b6       	in	r0, 0x3f	; 63
     8c6:	0f 92       	push	r0
     8c8:	11 24       	eor	r1, r1
     8ca:	2f 93       	push	r18
     8cc:	3f 93       	push	r19
     8ce:	4f 93       	push	r20
     8d0:	5f 93       	push	r21
     8d2:	6f 93       	push	r22
     8d4:	7f 93       	push	r23
     8d6:	8f 93       	push	r24
     8d8:	9f 93       	push	r25
     8da:	af 93       	push	r26
     8dc:	bf 93       	push	r27
     8de:	ef 93       	push	r30
     8e0:	ff 93       	push	r31
	UART.Flags.rciv_cmplt = ENABLE;
     8e2:	5f 9a       	sbi	0x0b, 7	; 11
	if(R_Flag == Available)
     8e4:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <R_Flag>
     8e8:	81 11       	cpse	r24, r1
     8ea:	08 c0       	rjmp	.+16     	; 0x8fc <__vector_13+0x3c>
	{
		uint8_t Data = UART.Data;
     8ec:	6c b1       	in	r22, 0x0c	; 12
		if(UART_EN_Buffer_Full == EnQueue(&R_Buffer, Data))
     8ee:	8d e6       	ldi	r24, 0x6D	; 109
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	0e 94 a7 04 	call	0x94e	; 0x94e <EnQueue>
     8f6:	81 30       	cpi	r24, 0x01	; 1
     8f8:	09 f4       	brne	.+2      	; 0x8fc <__vector_13+0x3c>
		{
			UART.Enables.rcivCompIntrrpt = DISABLE;
     8fa:	57 98       	cbi	0x0a, 7	; 10
		}
		else{/*MISRA C*/}
	}
	else{/*MISRA C*/}
     8fc:	ff 91       	pop	r31
     8fe:	ef 91       	pop	r30
     900:	bf 91       	pop	r27
     902:	af 91       	pop	r26
     904:	9f 91       	pop	r25
     906:	8f 91       	pop	r24
     908:	7f 91       	pop	r23
     90a:	6f 91       	pop	r22
     90c:	5f 91       	pop	r21
     90e:	4f 91       	pop	r20
     910:	3f 91       	pop	r19
     912:	2f 91       	pop	r18
     914:	0f 90       	pop	r0
     916:	0f be       	out	0x3f, r0	; 63
     918:	0f 90       	pop	r0
     91a:	1f 90       	pop	r1
     91c:	18 95       	reti

0000091e <Queue_Init>:
#include "../Services/Circular_Buffer/Circular_Buffer.h"
#include <stdlib.h>

Queue_Error_t	Queue_Init		(BQueue_t* queue)
{
     91e:	cf 93       	push	r28
     920:	df 93       	push	r29
	Queue_Error_t return_value = Queue_EN_valid;
	if(queue != NULL)
     922:	00 97       	sbiw	r24, 0x00	; 0
     924:	81 f0       	breq	.+32     	; 0x946 <Queue_Init+0x28>
     926:	ec 01       	movw	r28, r24
	{
		queue->buffer = (uint8_t*)calloc(queue->size, sizeof(uint8_t));
     928:	8c 81       	ldd	r24, Y+4	; 0x04
     92a:	61 e0       	ldi	r22, 0x01	; 1
     92c:	70 e0       	ldi	r23, 0x00	; 0
     92e:	08 2e       	mov	r0, r24
     930:	00 0c       	add	r0, r0
     932:	99 0b       	sbc	r25, r25
     934:	0e 94 83 07 	call	0xf06	; 0xf06 <calloc>
     938:	99 83       	std	Y+1, r25	; 0x01
     93a:	88 83       	st	Y, r24
		queue->front  = -1;
     93c:	8f ef       	ldi	r24, 0xFF	; 255
     93e:	8a 83       	std	Y+2, r24	; 0x02
		queue->rear   = -1;
     940:	8b 83       	std	Y+3, r24	; 0x03
#include "../Services/Circular_Buffer/Circular_Buffer.h"
#include <stdlib.h>

Queue_Error_t	Queue_Init		(BQueue_t* queue)
{
	Queue_Error_t return_value = Queue_EN_valid;
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	01 c0       	rjmp	.+2      	; 0x948 <Queue_Init+0x2a>
		queue->front  = -1;
		queue->rear   = -1;
	}
	else
	{
		return_value = Queue_EN_InvalidPointer;
     946:	83 e0       	ldi	r24, 0x03	; 3
	}
	return return_value;
}
     948:	df 91       	pop	r29
     94a:	cf 91       	pop	r28
     94c:	08 95       	ret

0000094e <EnQueue>:
Queue_Error_t	EnQueue			(BQueue_t* queue, uint8_t  Data)
{
     94e:	0f 93       	push	r16
     950:	1f 93       	push	r17
     952:	cf 93       	push	r28
     954:	df 93       	push	r29
     956:	fc 01       	movw	r30, r24
     958:	46 2f       	mov	r20, r22
	Queue_Error_t return_value = Queue_EN_valid;
	
	if (((queue->front==0)&&(queue->rear==queue->size-1))||(queue->rear==((queue->front-1)%(queue->size-1))))
     95a:	32 81       	ldd	r19, Z+2	; 0x02
     95c:	31 11       	cpse	r19, r1
     95e:	0f c0       	rjmp	.+30     	; 0x97e <EnQueue+0x30>
     960:	23 81       	ldd	r18, Z+3	; 0x03
     962:	c2 2f       	mov	r28, r18
     964:	02 2e       	mov	r0, r18
     966:	00 0c       	add	r0, r0
     968:	dd 0b       	sbc	r29, r29
     96a:	64 81       	ldd	r22, Z+4	; 0x04
     96c:	06 2e       	mov	r0, r22
     96e:	00 0c       	add	r0, r0
     970:	77 0b       	sbc	r23, r23
     972:	61 50       	subi	r22, 0x01	; 1
     974:	71 09       	sbc	r23, r1
     976:	c6 17       	cp	r28, r22
     978:	d7 07       	cpc	r29, r23
     97a:	99 f5       	brne	.+102    	; 0x9e2 <EnQueue+0x94>
     97c:	2c c0       	rjmp	.+88     	; 0x9d6 <EnQueue+0x88>
     97e:	23 81       	ldd	r18, Z+3	; 0x03
     980:	02 2f       	mov	r16, r18
     982:	02 2e       	mov	r0, r18
     984:	00 0c       	add	r0, r0
     986:	11 0b       	sbc	r17, r17
     988:	c4 81       	ldd	r28, Z+4	; 0x04
     98a:	0c 2e       	mov	r0, r28
     98c:	00 0c       	add	r0, r0
     98e:	dd 0b       	sbc	r29, r29
     990:	21 97       	sbiw	r28, 0x01	; 1
     992:	83 2f       	mov	r24, r19
     994:	03 2e       	mov	r0, r19
     996:	00 0c       	add	r0, r0
     998:	99 0b       	sbc	r25, r25
     99a:	01 97       	sbiw	r24, 0x01	; 1
     99c:	be 01       	movw	r22, r28
     99e:	0e 94 18 07 	call	0xe30	; 0xe30 <__divmodhi4>
     9a2:	08 17       	cp	r16, r24
     9a4:	19 07       	cpc	r17, r25
     9a6:	c9 f0       	breq	.+50     	; 0x9da <EnQueue+0x8c>
	{
		return Queue_EN_Full;
	}
	else
	{
		if(queue->front == -1)
     9a8:	3f 3f       	cpi	r19, 0xFF	; 255
     9aa:	19 f4       	brne	.+6      	; 0x9b2 <EnQueue+0x64>
		{
			queue->front = 0;
     9ac:	12 82       	std	Z+2, r1	; 0x02
			queue->rear  = 0;
     9ae:	13 82       	std	Z+3, r1	; 0x03
     9b0:	07 c0       	rjmp	.+14     	; 0x9c0 <EnQueue+0x72>
		}
		else if (queue->rear == queue->size-1 && queue->front != 0)
     9b2:	0c 17       	cp	r16, r28
     9b4:	1d 07       	cpc	r17, r29
     9b6:	11 f4       	brne	.+4      	; 0x9bc <EnQueue+0x6e>
		{
			queue->rear = 0;
     9b8:	13 82       	std	Z+3, r1	; 0x03
     9ba:	02 c0       	rjmp	.+4      	; 0x9c0 <EnQueue+0x72>
		}
		else
		{
			queue->rear++;
     9bc:	2f 5f       	subi	r18, 0xFF	; 255
     9be:	23 83       	std	Z+3, r18	; 0x03
		}
		queue->buffer[queue->rear] = Data;
     9c0:	83 81       	ldd	r24, Z+3	; 0x03
     9c2:	01 90       	ld	r0, Z+
     9c4:	f0 81       	ld	r31, Z
     9c6:	e0 2d       	mov	r30, r0
     9c8:	e8 0f       	add	r30, r24
     9ca:	f1 1d       	adc	r31, r1
     9cc:	87 fd       	sbrc	r24, 7
     9ce:	fa 95       	dec	r31
     9d0:	40 83       	st	Z, r20
	} 	
	return return_value;
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	0e c0       	rjmp	.+28     	; 0x9f2 <EnQueue+0xa4>
{
	Queue_Error_t return_value = Queue_EN_valid;
	
	if (((queue->front==0)&&(queue->rear==queue->size-1))||(queue->rear==((queue->front-1)%(queue->size-1))))
	{
		return Queue_EN_Full;
     9d6:	81 e0       	ldi	r24, 0x01	; 1
     9d8:	0c c0       	rjmp	.+24     	; 0x9f2 <EnQueue+0xa4>
     9da:	81 e0       	ldi	r24, 0x01	; 1
     9dc:	0a c0       	rjmp	.+20     	; 0x9f2 <EnQueue+0xa4>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	08 c0       	rjmp	.+16     	; 0x9f2 <EnQueue+0xa4>
}
Queue_Error_t	EnQueue			(BQueue_t* queue, uint8_t  Data)
{
	Queue_Error_t return_value = Queue_EN_valid;
	
	if (((queue->front==0)&&(queue->rear==queue->size-1))||(queue->rear==((queue->front-1)%(queue->size-1))))
     9e2:	8f ef       	ldi	r24, 0xFF	; 255
     9e4:	9f ef       	ldi	r25, 0xFF	; 255
     9e6:	0e 94 18 07 	call	0xe30	; 0xe30 <__divmodhi4>
     9ea:	c8 17       	cp	r28, r24
     9ec:	d9 07       	cpc	r29, r25
     9ee:	31 f7       	brne	.-52     	; 0x9bc <EnQueue+0x6e>
     9f0:	f6 cf       	rjmp	.-20     	; 0x9de <EnQueue+0x90>
			queue->rear++;
		}
		queue->buffer[queue->rear] = Data;
	} 	
	return return_value;
}
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	1f 91       	pop	r17
     9f8:	0f 91       	pop	r16
     9fa:	08 95       	ret

000009fc <DeQueue>:
Queue_Error_t	DeQueue			(BQueue_t* queue, uint8_t* Data)
{
     9fc:	fc 01       	movw	r30, r24
	Queue_Error_t return_value = Queue_EN_valid;
	
	if (queue->front == -1)
     9fe:	82 81       	ldd	r24, Z+2	; 0x02
     a00:	8f 3f       	cpi	r24, 0xFF	; 255
     a02:	29 f1       	breq	.+74     	; 0xa4e <DeQueue+0x52>
	{
		return_value = Queue_EN_Empty;
	}
	else
	{
		*Data = queue->buffer[queue->front];
     a04:	a0 81       	ld	r26, Z
     a06:	b1 81       	ldd	r27, Z+1	; 0x01
     a08:	a8 0f       	add	r26, r24
     a0a:	b1 1d       	adc	r27, r1
     a0c:	87 fd       	sbrc	r24, 7
     a0e:	ba 95       	dec	r27
     a10:	8c 91       	ld	r24, X
     a12:	db 01       	movw	r26, r22
     a14:	8c 93       	st	X, r24
		if (queue->front == queue->rear)
     a16:	22 81       	ldd	r18, Z+2	; 0x02
     a18:	83 81       	ldd	r24, Z+3	; 0x03
     a1a:	28 13       	cpse	r18, r24
     a1c:	05 c0       	rjmp	.+10     	; 0xa28 <DeQueue+0x2c>
		{
			queue->front = -1;
     a1e:	8f ef       	ldi	r24, 0xFF	; 255
     a20:	82 83       	std	Z+2, r24	; 0x02
			queue->rear  = -1;
     a22:	83 83       	std	Z+3, r24	; 0x03
	} 	
	return return_value;
}
Queue_Error_t	DeQueue			(BQueue_t* queue, uint8_t* Data)
{
	Queue_Error_t return_value = Queue_EN_valid;
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	08 95       	ret
		if (queue->front == queue->rear)
		{
			queue->front = -1;
			queue->rear  = -1;
		}
		else if (queue->front == queue->size-1)
     a28:	84 81       	ldd	r24, Z+4	; 0x04
     a2a:	08 2e       	mov	r0, r24
     a2c:	00 0c       	add	r0, r0
     a2e:	99 0b       	sbc	r25, r25
     a30:	01 97       	sbiw	r24, 0x01	; 1
     a32:	42 2f       	mov	r20, r18
     a34:	02 2e       	mov	r0, r18
     a36:	00 0c       	add	r0, r0
     a38:	55 0b       	sbc	r21, r21
     a3a:	48 17       	cp	r20, r24
     a3c:	59 07       	cpc	r21, r25
     a3e:	19 f4       	brne	.+6      	; 0xa46 <DeQueue+0x4a>
		{
			queue->front = 0;
     a40:	12 82       	std	Z+2, r1	; 0x02
	} 	
	return return_value;
}
Queue_Error_t	DeQueue			(BQueue_t* queue, uint8_t* Data)
{
	Queue_Error_t return_value = Queue_EN_valid;
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	08 95       	ret
		{
			queue->front = 0;
		}
		else
		{
			queue->front++;	
     a46:	2f 5f       	subi	r18, 0xFF	; 255
     a48:	22 83       	std	Z+2, r18	; 0x02
	} 	
	return return_value;
}
Queue_Error_t	DeQueue			(BQueue_t* queue, uint8_t* Data)
{
	Queue_Error_t return_value = Queue_EN_valid;
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	08 95       	ret
	
	if (queue->front == -1)
	{
		return_value = Queue_EN_Empty;
     a4e:	82 e0       	ldi	r24, 0x02	; 2
		{
			queue->front++;	
		}
	}
	return return_value;
     a50:	08 95       	ret

00000a52 <vListInsertEnd>:
	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
}
     a52:	cf 93       	push	r28
     a54:	df 93       	push	r29
     a56:	9c 01       	movw	r18, r24
     a58:	fb 01       	movw	r30, r22
     a5a:	dc 01       	movw	r26, r24
     a5c:	11 96       	adiw	r26, 0x01	; 1
     a5e:	cd 91       	ld	r28, X+
     a60:	dc 91       	ld	r29, X
     a62:	12 97       	sbiw	r26, 0x02	; 2
     a64:	d3 83       	std	Z+3, r29	; 0x03
     a66:	c2 83       	std	Z+2, r28	; 0x02
     a68:	8c 81       	ldd	r24, Y+4	; 0x04
     a6a:	9d 81       	ldd	r25, Y+5	; 0x05
     a6c:	95 83       	std	Z+5, r25	; 0x05
     a6e:	84 83       	std	Z+4, r24	; 0x04
     a70:	8c 81       	ldd	r24, Y+4	; 0x04
     a72:	9d 81       	ldd	r25, Y+5	; 0x05
     a74:	dc 01       	movw	r26, r24
     a76:	13 96       	adiw	r26, 0x03	; 3
     a78:	7c 93       	st	X, r23
     a7a:	6e 93       	st	-X, r22
     a7c:	12 97       	sbiw	r26, 0x02	; 2
     a7e:	7d 83       	std	Y+5, r23	; 0x05
     a80:	6c 83       	std	Y+4, r22	; 0x04
     a82:	31 87       	std	Z+9, r19	; 0x09
     a84:	20 87       	std	Z+8, r18	; 0x08
     a86:	f9 01       	movw	r30, r18
     a88:	80 81       	ld	r24, Z
     a8a:	8f 5f       	subi	r24, 0xFF	; 255
     a8c:	80 83       	st	Z, r24
     a8e:	df 91       	pop	r29
     a90:	cf 91       	pop	r28
     a92:	08 95       	ret

00000a94 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     a94:	cf 93       	push	r28
     a96:	df 93       	push	r29
     a98:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     a9a:	a0 85       	ldd	r26, Z+8	; 0x08
     a9c:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     a9e:	c2 81       	ldd	r28, Z+2	; 0x02
     aa0:	d3 81       	ldd	r29, Z+3	; 0x03
     aa2:	84 81       	ldd	r24, Z+4	; 0x04
     aa4:	95 81       	ldd	r25, Z+5	; 0x05
     aa6:	9d 83       	std	Y+5, r25	; 0x05
     aa8:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     aaa:	c4 81       	ldd	r28, Z+4	; 0x04
     aac:	d5 81       	ldd	r29, Z+5	; 0x05
     aae:	82 81       	ldd	r24, Z+2	; 0x02
     ab0:	93 81       	ldd	r25, Z+3	; 0x03
     ab2:	9b 83       	std	Y+3, r25	; 0x03
     ab4:	8a 83       	std	Y+2, r24	; 0x02

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     ab6:	11 96       	adiw	r26, 0x01	; 1
     ab8:	8d 91       	ld	r24, X+
     aba:	9c 91       	ld	r25, X
     abc:	12 97       	sbiw	r26, 0x02	; 2
     abe:	e8 17       	cp	r30, r24
     ac0:	f9 07       	cpc	r31, r25
     ac2:	31 f4       	brne	.+12     	; 0xad0 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     ac4:	84 81       	ldd	r24, Z+4	; 0x04
     ac6:	95 81       	ldd	r25, Z+5	; 0x05
     ac8:	12 96       	adiw	r26, 0x02	; 2
     aca:	9c 93       	st	X, r25
     acc:	8e 93       	st	-X, r24
     ace:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     ad0:	11 86       	std	Z+9, r1	; 0x09
     ad2:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     ad4:	8c 91       	ld	r24, X
     ad6:	81 50       	subi	r24, 0x01	; 1
     ad8:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
     ada:	df 91       	pop	r29
     adc:	cf 91       	pop	r28
     ade:	08 95       	ret

00000ae0 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     ae0:	0f 92       	push	r0
     ae2:	0f b6       	in	r0, 0x3f	; 63
     ae4:	f8 94       	cli
     ae6:	0f 92       	push	r0
     ae8:	1f 92       	push	r1
     aea:	11 24       	eor	r1, r1
     aec:	2f 92       	push	r2
     aee:	3f 92       	push	r3
     af0:	4f 92       	push	r4
     af2:	5f 92       	push	r5
     af4:	6f 92       	push	r6
     af6:	7f 92       	push	r7
     af8:	8f 92       	push	r8
     afa:	9f 92       	push	r9
     afc:	af 92       	push	r10
     afe:	bf 92       	push	r11
     b00:	cf 92       	push	r12
     b02:	df 92       	push	r13
     b04:	ef 92       	push	r14
     b06:	ff 92       	push	r15
     b08:	0f 93       	push	r16
     b0a:	1f 93       	push	r17
     b0c:	2f 93       	push	r18
     b0e:	3f 93       	push	r19
     b10:	4f 93       	push	r20
     b12:	5f 93       	push	r21
     b14:	6f 93       	push	r22
     b16:	7f 93       	push	r23
     b18:	8f 93       	push	r24
     b1a:	9f 93       	push	r25
     b1c:	af 93       	push	r26
     b1e:	bf 93       	push	r27
     b20:	cf 93       	push	r28
     b22:	df 93       	push	r29
     b24:	ef 93       	push	r30
     b26:	ff 93       	push	r31
     b28:	a0 91 e5 00 	lds	r26, 0x00E5	; 0x8000e5 <pxCurrentTCB>
     b2c:	b0 91 e6 00 	lds	r27, 0x00E6	; 0x8000e6 <pxCurrentTCB+0x1>
     b30:	0d b6       	in	r0, 0x3d	; 61
     b32:	0d 92       	st	X+, r0
     b34:	0e b6       	in	r0, 0x3e	; 62
     b36:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     b38:	0e 94 ee 05 	call	0xbdc	; 0xbdc <xTaskIncrementTick>
     b3c:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     b3e:	0e 94 ab 06 	call	0xd56	; 0xd56 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     b42:	a0 91 e5 00 	lds	r26, 0x00E5	; 0x8000e5 <pxCurrentTCB>
     b46:	b0 91 e6 00 	lds	r27, 0x00E6	; 0x8000e6 <pxCurrentTCB+0x1>
     b4a:	cd 91       	ld	r28, X+
     b4c:	cd bf       	out	0x3d, r28	; 61
     b4e:	dd 91       	ld	r29, X+
     b50:	de bf       	out	0x3e, r29	; 62
     b52:	ff 91       	pop	r31
     b54:	ef 91       	pop	r30
     b56:	df 91       	pop	r29
     b58:	cf 91       	pop	r28
     b5a:	bf 91       	pop	r27
     b5c:	af 91       	pop	r26
     b5e:	9f 91       	pop	r25
     b60:	8f 91       	pop	r24
     b62:	7f 91       	pop	r23
     b64:	6f 91       	pop	r22
     b66:	5f 91       	pop	r21
     b68:	4f 91       	pop	r20
     b6a:	3f 91       	pop	r19
     b6c:	2f 91       	pop	r18
     b6e:	1f 91       	pop	r17
     b70:	0f 91       	pop	r16
     b72:	ff 90       	pop	r15
     b74:	ef 90       	pop	r14
     b76:	df 90       	pop	r13
     b78:	cf 90       	pop	r12
     b7a:	bf 90       	pop	r11
     b7c:	af 90       	pop	r10
     b7e:	9f 90       	pop	r9
     b80:	8f 90       	pop	r8
     b82:	7f 90       	pop	r7
     b84:	6f 90       	pop	r6
     b86:	5f 90       	pop	r5
     b88:	4f 90       	pop	r4
     b8a:	3f 90       	pop	r3
     b8c:	2f 90       	pop	r2
     b8e:	1f 90       	pop	r1
     b90:	0f 90       	pop	r0
     b92:	0f be       	out	0x3f, r0	; 63
     b94:	0f 90       	pop	r0

	asm volatile ( "ret" );
     b96:	08 95       	ret

00000b98 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     b98:	0e 94 70 05 	call	0xae0	; 0xae0 <vPortYieldFromTick>
		asm volatile ( "reti" );
     b9c:	18 95       	reti

00000b9e <prvResetNextTaskUnblockTime>:
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
			{
				taskYIELD();
     b9e:	e0 91 bf 00 	lds	r30, 0x00BF	; 0x8000bf <pxDelayedTaskList>
     ba2:	f0 91 c0 00 	lds	r31, 0x00C0	; 0x8000c0 <pxDelayedTaskList+0x1>
     ba6:	80 81       	ld	r24, Z
     ba8:	81 11       	cpse	r24, r1
     baa:	07 c0       	rjmp	.+14     	; 0xbba <prvResetNextTaskUnblockTime+0x1c>
     bac:	8f ef       	ldi	r24, 0xFF	; 255
     bae:	9f ef       	ldi	r25, 0xFF	; 255
     bb0:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <xNextTaskUnblockTime+0x1>
     bb4:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <xNextTaskUnblockTime>
     bb8:	08 95       	ret
     bba:	e0 91 bf 00 	lds	r30, 0x00BF	; 0x8000bf <pxDelayedTaskList>
     bbe:	f0 91 c0 00 	lds	r31, 0x00C0	; 0x8000c0 <pxDelayedTaskList+0x1>
     bc2:	05 80       	ldd	r0, Z+5	; 0x05
     bc4:	f6 81       	ldd	r31, Z+6	; 0x06
     bc6:	e0 2d       	mov	r30, r0
     bc8:	06 80       	ldd	r0, Z+6	; 0x06
     bca:	f7 81       	ldd	r31, Z+7	; 0x07
     bcc:	e0 2d       	mov	r30, r0
     bce:	82 81       	ldd	r24, Z+2	; 0x02
     bd0:	93 81       	ldd	r25, Z+3	; 0x03
     bd2:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <xNextTaskUnblockTime+0x1>
     bd6:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <xNextTaskUnblockTime>
     bda:	08 95       	ret

00000bdc <xTaskIncrementTick>:
     bdc:	cf 92       	push	r12
     bde:	df 92       	push	r13
     be0:	ef 92       	push	r14
     be2:	ff 92       	push	r15
     be4:	0f 93       	push	r16
     be6:	1f 93       	push	r17
     be8:	cf 93       	push	r28
     bea:	df 93       	push	r29
     bec:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <uxSchedulerSuspended>
     bf0:	81 11       	cpse	r24, r1
     bf2:	9b c0       	rjmp	.+310    	; 0xd2a <xTaskIncrementTick+0x14e>
     bf4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <xTickCount>
     bf8:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <xTickCount+0x1>
     bfc:	01 96       	adiw	r24, 0x01	; 1
     bfe:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <xTickCount+0x1>
     c02:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <xTickCount>
     c06:	e0 90 bb 00 	lds	r14, 0x00BB	; 0x8000bb <xTickCount>
     c0a:	f0 90 bc 00 	lds	r15, 0x00BC	; 0x8000bc <xTickCount+0x1>
     c0e:	e1 14       	cp	r14, r1
     c10:	f1 04       	cpc	r15, r1
     c12:	b9 f4       	brne	.+46     	; 0xc42 <xTaskIncrementTick+0x66>
     c14:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <pxDelayedTaskList>
     c18:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <pxDelayedTaskList+0x1>
     c1c:	20 91 bd 00 	lds	r18, 0x00BD	; 0x8000bd <pxOverflowDelayedTaskList>
     c20:	30 91 be 00 	lds	r19, 0x00BE	; 0x8000be <pxOverflowDelayedTaskList+0x1>
     c24:	30 93 c0 00 	sts	0x00C0, r19	; 0x8000c0 <pxDelayedTaskList+0x1>
     c28:	20 93 bf 00 	sts	0x00BF, r18	; 0x8000bf <pxDelayedTaskList>
     c2c:	90 93 be 00 	sts	0x00BE, r25	; 0x8000be <pxOverflowDelayedTaskList+0x1>
     c30:	80 93 bd 00 	sts	0x00BD, r24	; 0x8000bd <pxOverflowDelayedTaskList>
     c34:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <xNumOfOverflows>
     c38:	8f 5f       	subi	r24, 0xFF	; 255
     c3a:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <xNumOfOverflows>
     c3e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <prvResetNextTaskUnblockTime>
     c42:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <xNextTaskUnblockTime>
     c46:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <xNextTaskUnblockTime+0x1>
     c4a:	e8 16       	cp	r14, r24
     c4c:	f9 06       	cpc	r15, r25
     c4e:	10 f4       	brcc	.+4      	; 0xc54 <xTaskIncrementTick+0x78>
     c50:	d1 2c       	mov	r13, r1
     c52:	53 c0       	rjmp	.+166    	; 0xcfa <xTaskIncrementTick+0x11e>
     c54:	d1 2c       	mov	r13, r1
     c56:	cc 24       	eor	r12, r12
     c58:	c3 94       	inc	r12
     c5a:	e0 91 bf 00 	lds	r30, 0x00BF	; 0x8000bf <pxDelayedTaskList>
     c5e:	f0 91 c0 00 	lds	r31, 0x00C0	; 0x8000c0 <pxDelayedTaskList+0x1>
     c62:	80 81       	ld	r24, Z
     c64:	81 11       	cpse	r24, r1
     c66:	07 c0       	rjmp	.+14     	; 0xc76 <xTaskIncrementTick+0x9a>
     c68:	8f ef       	ldi	r24, 0xFF	; 255
     c6a:	9f ef       	ldi	r25, 0xFF	; 255
     c6c:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <xNextTaskUnblockTime+0x1>
     c70:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <xNextTaskUnblockTime>
     c74:	42 c0       	rjmp	.+132    	; 0xcfa <xTaskIncrementTick+0x11e>
     c76:	e0 91 bf 00 	lds	r30, 0x00BF	; 0x8000bf <pxDelayedTaskList>
     c7a:	f0 91 c0 00 	lds	r31, 0x00C0	; 0x8000c0 <pxDelayedTaskList+0x1>
     c7e:	05 80       	ldd	r0, Z+5	; 0x05
     c80:	f6 81       	ldd	r31, Z+6	; 0x06
     c82:	e0 2d       	mov	r30, r0
     c84:	c6 81       	ldd	r28, Z+6	; 0x06
     c86:	d7 81       	ldd	r29, Z+7	; 0x07
     c88:	8a 81       	ldd	r24, Y+2	; 0x02
     c8a:	9b 81       	ldd	r25, Y+3	; 0x03
     c8c:	e8 16       	cp	r14, r24
     c8e:	f9 06       	cpc	r15, r25
     c90:	28 f4       	brcc	.+10     	; 0xc9c <xTaskIncrementTick+0xc0>
     c92:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <xNextTaskUnblockTime+0x1>
     c96:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <xNextTaskUnblockTime>
     c9a:	2f c0       	rjmp	.+94     	; 0xcfa <xTaskIncrementTick+0x11e>
     c9c:	8e 01       	movw	r16, r28
     c9e:	0e 5f       	subi	r16, 0xFE	; 254
     ca0:	1f 4f       	sbci	r17, 0xFF	; 255
     ca2:	c8 01       	movw	r24, r16
     ca4:	0e 94 4a 05 	call	0xa94	; 0xa94 <uxListRemove>
     ca8:	8c 89       	ldd	r24, Y+20	; 0x14
     caa:	9d 89       	ldd	r25, Y+21	; 0x15
     cac:	89 2b       	or	r24, r25
     cae:	21 f0       	breq	.+8      	; 0xcb8 <xTaskIncrementTick+0xdc>
     cb0:	ce 01       	movw	r24, r28
     cb2:	0c 96       	adiw	r24, 0x0c	; 12
     cb4:	0e 94 4a 05 	call	0xa94	; 0xa94 <uxListRemove>
     cb8:	8e 89       	ldd	r24, Y+22	; 0x16
     cba:	90 91 ba 00 	lds	r25, 0x00BA	; 0x8000ba <uxTopReadyPriority>
     cbe:	98 17       	cp	r25, r24
     cc0:	10 f4       	brcc	.+4      	; 0xcc6 <xTaskIncrementTick+0xea>
     cc2:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <uxTopReadyPriority>
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	9c 01       	movw	r18, r24
     cca:	22 0f       	add	r18, r18
     ccc:	33 1f       	adc	r19, r19
     cce:	22 0f       	add	r18, r18
     cd0:	33 1f       	adc	r19, r19
     cd2:	22 0f       	add	r18, r18
     cd4:	33 1f       	adc	r19, r19
     cd6:	82 0f       	add	r24, r18
     cd8:	93 1f       	adc	r25, r19
     cda:	b8 01       	movw	r22, r16
     cdc:	8f 53       	subi	r24, 0x3F	; 63
     cde:	9f 4f       	sbci	r25, 0xFF	; 255
     ce0:	0e 94 29 05 	call	0xa52	; 0xa52 <vListInsertEnd>
     ce4:	e0 91 e5 00 	lds	r30, 0x00E5	; 0x8000e5 <pxCurrentTCB>
     ce8:	f0 91 e6 00 	lds	r31, 0x00E6	; 0x8000e6 <pxCurrentTCB+0x1>
     cec:	9e 89       	ldd	r25, Y+22	; 0x16
     cee:	86 89       	ldd	r24, Z+22	; 0x16
     cf0:	98 17       	cp	r25, r24
     cf2:	08 f4       	brcc	.+2      	; 0xcf6 <xTaskIncrementTick+0x11a>
     cf4:	b2 cf       	rjmp	.-156    	; 0xc5a <xTaskIncrementTick+0x7e>
     cf6:	dc 2c       	mov	r13, r12
     cf8:	b0 cf       	rjmp	.-160    	; 0xc5a <xTaskIncrementTick+0x7e>
     cfa:	e0 91 e5 00 	lds	r30, 0x00E5	; 0x8000e5 <pxCurrentTCB>
     cfe:	f0 91 e6 00 	lds	r31, 0x00E6	; 0x8000e6 <pxCurrentTCB+0x1>
     d02:	86 89       	ldd	r24, Z+22	; 0x16
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	fc 01       	movw	r30, r24
     d08:	ee 0f       	add	r30, r30
     d0a:	ff 1f       	adc	r31, r31
     d0c:	ee 0f       	add	r30, r30
     d0e:	ff 1f       	adc	r31, r31
     d10:	ee 0f       	add	r30, r30
     d12:	ff 1f       	adc	r31, r31
     d14:	8e 0f       	add	r24, r30
     d16:	9f 1f       	adc	r25, r31
     d18:	fc 01       	movw	r30, r24
     d1a:	ef 53       	subi	r30, 0x3F	; 63
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	80 81       	ld	r24, Z
     d20:	82 30       	cpi	r24, 0x02	; 2
     d22:	48 f0       	brcs	.+18     	; 0xd36 <xTaskIncrementTick+0x15a>
     d24:	dd 24       	eor	r13, r13
     d26:	d3 94       	inc	r13
     d28:	06 c0       	rjmp	.+12     	; 0xd36 <xTaskIncrementTick+0x15a>
     d2a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <uxPendedTicks>
     d2e:	8f 5f       	subi	r24, 0xFF	; 255
     d30:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <uxPendedTicks>
     d34:	d1 2c       	mov	r13, r1
     d36:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <xYieldPending>
     d3a:	88 23       	and	r24, r24
     d3c:	11 f0       	breq	.+4      	; 0xd42 <xTaskIncrementTick+0x166>
     d3e:	dd 24       	eor	r13, r13
     d40:	d3 94       	inc	r13
     d42:	8d 2d       	mov	r24, r13
     d44:	df 91       	pop	r29
     d46:	cf 91       	pop	r28
     d48:	1f 91       	pop	r17
     d4a:	0f 91       	pop	r16
     d4c:	ff 90       	pop	r15
     d4e:	ef 90       	pop	r14
     d50:	df 90       	pop	r13
     d52:	cf 90       	pop	r12
     d54:	08 95       	ret

00000d56 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
     d56:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <uxSchedulerSuspended>
     d5a:	88 23       	and	r24, r24
     d5c:	21 f0       	breq	.+8      	; 0xd66 <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <xYieldPending>
     d64:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
     d66:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <xYieldPending>
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
     d6a:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <uxTopReadyPriority>
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	fc 01       	movw	r30, r24
     d72:	ee 0f       	add	r30, r30
     d74:	ff 1f       	adc	r31, r31
     d76:	ee 0f       	add	r30, r30
     d78:	ff 1f       	adc	r31, r31
     d7a:	ee 0f       	add	r30, r30
     d7c:	ff 1f       	adc	r31, r31
     d7e:	8e 0f       	add	r24, r30
     d80:	9f 1f       	adc	r25, r31
     d82:	fc 01       	movw	r30, r24
     d84:	ef 53       	subi	r30, 0x3F	; 63
     d86:	ff 4f       	sbci	r31, 0xFF	; 255
     d88:	80 81       	ld	r24, Z
     d8a:	81 11       	cpse	r24, r1
     d8c:	17 c0       	rjmp	.+46     	; 0xdbc <vTaskSwitchContext+0x66>
     d8e:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <uxTopReadyPriority>
     d92:	81 50       	subi	r24, 0x01	; 1
     d94:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <uxTopReadyPriority>
     d98:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <uxTopReadyPriority>
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	fc 01       	movw	r30, r24
     da0:	ee 0f       	add	r30, r30
     da2:	ff 1f       	adc	r31, r31
     da4:	ee 0f       	add	r30, r30
     da6:	ff 1f       	adc	r31, r31
     da8:	ee 0f       	add	r30, r30
     daa:	ff 1f       	adc	r31, r31
     dac:	8e 0f       	add	r24, r30
     dae:	9f 1f       	adc	r25, r31
     db0:	fc 01       	movw	r30, r24
     db2:	ef 53       	subi	r30, 0x3F	; 63
     db4:	ff 4f       	sbci	r31, 0xFF	; 255
     db6:	80 81       	ld	r24, Z
     db8:	88 23       	and	r24, r24
     dba:	49 f3       	breq	.-46     	; 0xd8e <vTaskSwitchContext+0x38>
     dbc:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <uxTopReadyPriority>
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	9c 01       	movw	r18, r24
     dc4:	22 0f       	add	r18, r18
     dc6:	33 1f       	adc	r19, r19
     dc8:	22 0f       	add	r18, r18
     dca:	33 1f       	adc	r19, r19
     dcc:	22 0f       	add	r18, r18
     dce:	33 1f       	adc	r19, r19
     dd0:	28 0f       	add	r18, r24
     dd2:	39 1f       	adc	r19, r25
     dd4:	d9 01       	movw	r26, r18
     dd6:	af 53       	subi	r26, 0x3F	; 63
     dd8:	bf 4f       	sbci	r27, 0xFF	; 255
     dda:	11 96       	adiw	r26, 0x01	; 1
     ddc:	ed 91       	ld	r30, X+
     dde:	fc 91       	ld	r31, X
     de0:	12 97       	sbiw	r26, 0x02	; 2
     de2:	02 80       	ldd	r0, Z+2	; 0x02
     de4:	f3 81       	ldd	r31, Z+3	; 0x03
     de6:	e0 2d       	mov	r30, r0
     de8:	12 96       	adiw	r26, 0x02	; 2
     dea:	fc 93       	st	X, r31
     dec:	ee 93       	st	-X, r30
     dee:	11 97       	sbiw	r26, 0x01	; 1
     df0:	2c 53       	subi	r18, 0x3C	; 60
     df2:	3f 4f       	sbci	r19, 0xFF	; 255
     df4:	e2 17       	cp	r30, r18
     df6:	f3 07       	cpc	r31, r19
     df8:	29 f4       	brne	.+10     	; 0xe04 <vTaskSwitchContext+0xae>
     dfa:	22 81       	ldd	r18, Z+2	; 0x02
     dfc:	33 81       	ldd	r19, Z+3	; 0x03
     dfe:	fd 01       	movw	r30, r26
     e00:	32 83       	std	Z+2, r19	; 0x02
     e02:	21 83       	std	Z+1, r18	; 0x01
     e04:	fc 01       	movw	r30, r24
     e06:	ee 0f       	add	r30, r30
     e08:	ff 1f       	adc	r31, r31
     e0a:	ee 0f       	add	r30, r30
     e0c:	ff 1f       	adc	r31, r31
     e0e:	ee 0f       	add	r30, r30
     e10:	ff 1f       	adc	r31, r31
     e12:	8e 0f       	add	r24, r30
     e14:	9f 1f       	adc	r25, r31
     e16:	fc 01       	movw	r30, r24
     e18:	ef 53       	subi	r30, 0x3F	; 63
     e1a:	ff 4f       	sbci	r31, 0xFF	; 255
     e1c:	01 80       	ldd	r0, Z+1	; 0x01
     e1e:	f2 81       	ldd	r31, Z+2	; 0x02
     e20:	e0 2d       	mov	r30, r0
     e22:	86 81       	ldd	r24, Z+6	; 0x06
     e24:	97 81       	ldd	r25, Z+7	; 0x07
     e26:	90 93 e6 00 	sts	0x00E6, r25	; 0x8000e6 <pxCurrentTCB+0x1>
     e2a:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <pxCurrentTCB>
     e2e:	08 95       	ret

00000e30 <__divmodhi4>:
     e30:	97 fb       	bst	r25, 7
     e32:	07 2e       	mov	r0, r23
     e34:	16 f4       	brtc	.+4      	; 0xe3a <__divmodhi4+0xa>
     e36:	00 94       	com	r0
     e38:	07 d0       	rcall	.+14     	; 0xe48 <__divmodhi4_neg1>
     e3a:	77 fd       	sbrc	r23, 7
     e3c:	09 d0       	rcall	.+18     	; 0xe50 <__divmodhi4_neg2>
     e3e:	0e 94 6f 07 	call	0xede	; 0xede <__udivmodhi4>
     e42:	07 fc       	sbrc	r0, 7
     e44:	05 d0       	rcall	.+10     	; 0xe50 <__divmodhi4_neg2>
     e46:	3e f4       	brtc	.+14     	; 0xe56 <__divmodhi4_exit>

00000e48 <__divmodhi4_neg1>:
     e48:	90 95       	com	r25
     e4a:	81 95       	neg	r24
     e4c:	9f 4f       	sbci	r25, 0xFF	; 255
     e4e:	08 95       	ret

00000e50 <__divmodhi4_neg2>:
     e50:	70 95       	com	r23
     e52:	61 95       	neg	r22
     e54:	7f 4f       	sbci	r23, 0xFF	; 255

00000e56 <__divmodhi4_exit>:
     e56:	08 95       	ret

00000e58 <__udivmodsi4>:
     e58:	a1 e2       	ldi	r26, 0x21	; 33
     e5a:	1a 2e       	mov	r1, r26
     e5c:	aa 1b       	sub	r26, r26
     e5e:	bb 1b       	sub	r27, r27
     e60:	fd 01       	movw	r30, r26
     e62:	0d c0       	rjmp	.+26     	; 0xe7e <__udivmodsi4_ep>

00000e64 <__udivmodsi4_loop>:
     e64:	aa 1f       	adc	r26, r26
     e66:	bb 1f       	adc	r27, r27
     e68:	ee 1f       	adc	r30, r30
     e6a:	ff 1f       	adc	r31, r31
     e6c:	a2 17       	cp	r26, r18
     e6e:	b3 07       	cpc	r27, r19
     e70:	e4 07       	cpc	r30, r20
     e72:	f5 07       	cpc	r31, r21
     e74:	20 f0       	brcs	.+8      	; 0xe7e <__udivmodsi4_ep>
     e76:	a2 1b       	sub	r26, r18
     e78:	b3 0b       	sbc	r27, r19
     e7a:	e4 0b       	sbc	r30, r20
     e7c:	f5 0b       	sbc	r31, r21

00000e7e <__udivmodsi4_ep>:
     e7e:	66 1f       	adc	r22, r22
     e80:	77 1f       	adc	r23, r23
     e82:	88 1f       	adc	r24, r24
     e84:	99 1f       	adc	r25, r25
     e86:	1a 94       	dec	r1
     e88:	69 f7       	brne	.-38     	; 0xe64 <__udivmodsi4_loop>
     e8a:	60 95       	com	r22
     e8c:	70 95       	com	r23
     e8e:	80 95       	com	r24
     e90:	90 95       	com	r25
     e92:	9b 01       	movw	r18, r22
     e94:	ac 01       	movw	r20, r24
     e96:	bd 01       	movw	r22, r26
     e98:	cf 01       	movw	r24, r30
     e9a:	08 95       	ret

00000e9c <__adddi3_s8>:
     e9c:	00 24       	eor	r0, r0
     e9e:	a7 fd       	sbrc	r26, 7
     ea0:	00 94       	com	r0
     ea2:	2a 0f       	add	r18, r26
     ea4:	30 1d       	adc	r19, r0
     ea6:	40 1d       	adc	r20, r0
     ea8:	50 1d       	adc	r21, r0
     eaa:	60 1d       	adc	r22, r0
     eac:	70 1d       	adc	r23, r0
     eae:	80 1d       	adc	r24, r0
     eb0:	90 1d       	adc	r25, r0
     eb2:	08 95       	ret

00000eb4 <__cmpdi2>:
     eb4:	2a 15       	cp	r18, r10
     eb6:	3b 05       	cpc	r19, r11
     eb8:	4c 05       	cpc	r20, r12
     eba:	5d 05       	cpc	r21, r13
     ebc:	6e 05       	cpc	r22, r14
     ebe:	7f 05       	cpc	r23, r15
     ec0:	80 07       	cpc	r24, r16
     ec2:	91 07       	cpc	r25, r17
     ec4:	08 95       	ret

00000ec6 <__cmpdi2_s8>:
     ec6:	00 24       	eor	r0, r0
     ec8:	a7 fd       	sbrc	r26, 7
     eca:	00 94       	com	r0
     ecc:	2a 17       	cp	r18, r26
     ece:	30 05       	cpc	r19, r0
     ed0:	40 05       	cpc	r20, r0
     ed2:	50 05       	cpc	r21, r0
     ed4:	60 05       	cpc	r22, r0
     ed6:	70 05       	cpc	r23, r0
     ed8:	80 05       	cpc	r24, r0
     eda:	90 05       	cpc	r25, r0
     edc:	08 95       	ret

00000ede <__udivmodhi4>:
     ede:	aa 1b       	sub	r26, r26
     ee0:	bb 1b       	sub	r27, r27
     ee2:	51 e1       	ldi	r21, 0x11	; 17
     ee4:	07 c0       	rjmp	.+14     	; 0xef4 <__udivmodhi4_ep>

00000ee6 <__udivmodhi4_loop>:
     ee6:	aa 1f       	adc	r26, r26
     ee8:	bb 1f       	adc	r27, r27
     eea:	a6 17       	cp	r26, r22
     eec:	b7 07       	cpc	r27, r23
     eee:	10 f0       	brcs	.+4      	; 0xef4 <__udivmodhi4_ep>
     ef0:	a6 1b       	sub	r26, r22
     ef2:	b7 0b       	sbc	r27, r23

00000ef4 <__udivmodhi4_ep>:
     ef4:	88 1f       	adc	r24, r24
     ef6:	99 1f       	adc	r25, r25
     ef8:	5a 95       	dec	r21
     efa:	a9 f7       	brne	.-22     	; 0xee6 <__udivmodhi4_loop>
     efc:	80 95       	com	r24
     efe:	90 95       	com	r25
     f00:	bc 01       	movw	r22, r24
     f02:	cd 01       	movw	r24, r26
     f04:	08 95       	ret

00000f06 <calloc>:
     f06:	0f 93       	push	r16
     f08:	1f 93       	push	r17
     f0a:	cf 93       	push	r28
     f0c:	df 93       	push	r29
     f0e:	86 9f       	mul	r24, r22
     f10:	80 01       	movw	r16, r0
     f12:	87 9f       	mul	r24, r23
     f14:	10 0d       	add	r17, r0
     f16:	96 9f       	mul	r25, r22
     f18:	10 0d       	add	r17, r0
     f1a:	11 24       	eor	r1, r1
     f1c:	c8 01       	movw	r24, r16
     f1e:	0e 94 9f 07 	call	0xf3e	; 0xf3e <malloc>
     f22:	ec 01       	movw	r28, r24
     f24:	00 97       	sbiw	r24, 0x00	; 0
     f26:	29 f0       	breq	.+10     	; 0xf32 <calloc+0x2c>
     f28:	a8 01       	movw	r20, r16
     f2a:	60 e0       	ldi	r22, 0x00	; 0
     f2c:	70 e0       	ldi	r23, 0x00	; 0
     f2e:	0e 94 c0 08 	call	0x1180	; 0x1180 <memset>
     f32:	ce 01       	movw	r24, r28
     f34:	df 91       	pop	r29
     f36:	cf 91       	pop	r28
     f38:	1f 91       	pop	r17
     f3a:	0f 91       	pop	r16
     f3c:	08 95       	ret

00000f3e <malloc>:
     f3e:	0f 93       	push	r16
     f40:	1f 93       	push	r17
     f42:	cf 93       	push	r28
     f44:	df 93       	push	r29
     f46:	82 30       	cpi	r24, 0x02	; 2
     f48:	91 05       	cpc	r25, r1
     f4a:	10 f4       	brcc	.+4      	; 0xf50 <malloc+0x12>
     f4c:	82 e0       	ldi	r24, 0x02	; 2
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	e0 91 e9 00 	lds	r30, 0x00E9	; 0x8000e9 <__flp>
     f54:	f0 91 ea 00 	lds	r31, 0x00EA	; 0x8000ea <__flp+0x1>
     f58:	20 e0       	ldi	r18, 0x00	; 0
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	a0 e0       	ldi	r26, 0x00	; 0
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	30 97       	sbiw	r30, 0x00	; 0
     f62:	19 f1       	breq	.+70     	; 0xfaa <malloc+0x6c>
     f64:	40 81       	ld	r20, Z
     f66:	51 81       	ldd	r21, Z+1	; 0x01
     f68:	02 81       	ldd	r16, Z+2	; 0x02
     f6a:	13 81       	ldd	r17, Z+3	; 0x03
     f6c:	48 17       	cp	r20, r24
     f6e:	59 07       	cpc	r21, r25
     f70:	c8 f0       	brcs	.+50     	; 0xfa4 <malloc+0x66>
     f72:	84 17       	cp	r24, r20
     f74:	95 07       	cpc	r25, r21
     f76:	69 f4       	brne	.+26     	; 0xf92 <malloc+0x54>
     f78:	10 97       	sbiw	r26, 0x00	; 0
     f7a:	31 f0       	breq	.+12     	; 0xf88 <malloc+0x4a>
     f7c:	12 96       	adiw	r26, 0x02	; 2
     f7e:	0c 93       	st	X, r16
     f80:	12 97       	sbiw	r26, 0x02	; 2
     f82:	13 96       	adiw	r26, 0x03	; 3
     f84:	1c 93       	st	X, r17
     f86:	27 c0       	rjmp	.+78     	; 0xfd6 <malloc+0x98>
     f88:	00 93 e9 00 	sts	0x00E9, r16	; 0x8000e9 <__flp>
     f8c:	10 93 ea 00 	sts	0x00EA, r17	; 0x8000ea <__flp+0x1>
     f90:	22 c0       	rjmp	.+68     	; 0xfd6 <malloc+0x98>
     f92:	21 15       	cp	r18, r1
     f94:	31 05       	cpc	r19, r1
     f96:	19 f0       	breq	.+6      	; 0xf9e <malloc+0x60>
     f98:	42 17       	cp	r20, r18
     f9a:	53 07       	cpc	r21, r19
     f9c:	18 f4       	brcc	.+6      	; 0xfa4 <malloc+0x66>
     f9e:	9a 01       	movw	r18, r20
     fa0:	bd 01       	movw	r22, r26
     fa2:	ef 01       	movw	r28, r30
     fa4:	df 01       	movw	r26, r30
     fa6:	f8 01       	movw	r30, r16
     fa8:	db cf       	rjmp	.-74     	; 0xf60 <malloc+0x22>
     faa:	21 15       	cp	r18, r1
     fac:	31 05       	cpc	r19, r1
     fae:	f9 f0       	breq	.+62     	; 0xfee <malloc+0xb0>
     fb0:	28 1b       	sub	r18, r24
     fb2:	39 0b       	sbc	r19, r25
     fb4:	24 30       	cpi	r18, 0x04	; 4
     fb6:	31 05       	cpc	r19, r1
     fb8:	80 f4       	brcc	.+32     	; 0xfda <malloc+0x9c>
     fba:	8a 81       	ldd	r24, Y+2	; 0x02
     fbc:	9b 81       	ldd	r25, Y+3	; 0x03
     fbe:	61 15       	cp	r22, r1
     fc0:	71 05       	cpc	r23, r1
     fc2:	21 f0       	breq	.+8      	; 0xfcc <malloc+0x8e>
     fc4:	fb 01       	movw	r30, r22
     fc6:	93 83       	std	Z+3, r25	; 0x03
     fc8:	82 83       	std	Z+2, r24	; 0x02
     fca:	04 c0       	rjmp	.+8      	; 0xfd4 <malloc+0x96>
     fcc:	90 93 ea 00 	sts	0x00EA, r25	; 0x8000ea <__flp+0x1>
     fd0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__flp>
     fd4:	fe 01       	movw	r30, r28
     fd6:	32 96       	adiw	r30, 0x02	; 2
     fd8:	44 c0       	rjmp	.+136    	; 0x1062 <malloc+0x124>
     fda:	fe 01       	movw	r30, r28
     fdc:	e2 0f       	add	r30, r18
     fde:	f3 1f       	adc	r31, r19
     fe0:	81 93       	st	Z+, r24
     fe2:	91 93       	st	Z+, r25
     fe4:	22 50       	subi	r18, 0x02	; 2
     fe6:	31 09       	sbc	r19, r1
     fe8:	39 83       	std	Y+1, r19	; 0x01
     fea:	28 83       	st	Y, r18
     fec:	3a c0       	rjmp	.+116    	; 0x1062 <malloc+0x124>
     fee:	20 91 e7 00 	lds	r18, 0x00E7	; 0x8000e7 <__brkval>
     ff2:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <__brkval+0x1>
     ff6:	23 2b       	or	r18, r19
     ff8:	41 f4       	brne	.+16     	; 0x100a <malloc+0xcc>
     ffa:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
     ffe:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    1002:	30 93 e8 00 	sts	0x00E8, r19	; 0x8000e8 <__brkval+0x1>
    1006:	20 93 e7 00 	sts	0x00E7, r18	; 0x8000e7 <__brkval>
    100a:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    100e:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1012:	21 15       	cp	r18, r1
    1014:	31 05       	cpc	r19, r1
    1016:	41 f4       	brne	.+16     	; 0x1028 <malloc+0xea>
    1018:	2d b7       	in	r18, 0x3d	; 61
    101a:	3e b7       	in	r19, 0x3e	; 62
    101c:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    1020:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    1024:	24 1b       	sub	r18, r20
    1026:	35 0b       	sbc	r19, r21
    1028:	e0 91 e7 00 	lds	r30, 0x00E7	; 0x8000e7 <__brkval>
    102c:	f0 91 e8 00 	lds	r31, 0x00E8	; 0x8000e8 <__brkval+0x1>
    1030:	e2 17       	cp	r30, r18
    1032:	f3 07       	cpc	r31, r19
    1034:	a0 f4       	brcc	.+40     	; 0x105e <malloc+0x120>
    1036:	2e 1b       	sub	r18, r30
    1038:	3f 0b       	sbc	r19, r31
    103a:	28 17       	cp	r18, r24
    103c:	39 07       	cpc	r19, r25
    103e:	78 f0       	brcs	.+30     	; 0x105e <malloc+0x120>
    1040:	ac 01       	movw	r20, r24
    1042:	4e 5f       	subi	r20, 0xFE	; 254
    1044:	5f 4f       	sbci	r21, 0xFF	; 255
    1046:	24 17       	cp	r18, r20
    1048:	35 07       	cpc	r19, r21
    104a:	48 f0       	brcs	.+18     	; 0x105e <malloc+0x120>
    104c:	4e 0f       	add	r20, r30
    104e:	5f 1f       	adc	r21, r31
    1050:	50 93 e8 00 	sts	0x00E8, r21	; 0x8000e8 <__brkval+0x1>
    1054:	40 93 e7 00 	sts	0x00E7, r20	; 0x8000e7 <__brkval>
    1058:	81 93       	st	Z+, r24
    105a:	91 93       	st	Z+, r25
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <malloc+0x124>
    105e:	e0 e0       	ldi	r30, 0x00	; 0
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	cf 01       	movw	r24, r30
    1064:	df 91       	pop	r29
    1066:	cf 91       	pop	r28
    1068:	1f 91       	pop	r17
    106a:	0f 91       	pop	r16
    106c:	08 95       	ret

0000106e <free>:
    106e:	cf 93       	push	r28
    1070:	df 93       	push	r29
    1072:	00 97       	sbiw	r24, 0x00	; 0
    1074:	09 f4       	brne	.+2      	; 0x1078 <free+0xa>
    1076:	81 c0       	rjmp	.+258    	; 0x117a <free+0x10c>
    1078:	fc 01       	movw	r30, r24
    107a:	32 97       	sbiw	r30, 0x02	; 2
    107c:	13 82       	std	Z+3, r1	; 0x03
    107e:	12 82       	std	Z+2, r1	; 0x02
    1080:	a0 91 e9 00 	lds	r26, 0x00E9	; 0x8000e9 <__flp>
    1084:	b0 91 ea 00 	lds	r27, 0x00EA	; 0x8000ea <__flp+0x1>
    1088:	10 97       	sbiw	r26, 0x00	; 0
    108a:	81 f4       	brne	.+32     	; 0x10ac <free+0x3e>
    108c:	20 81       	ld	r18, Z
    108e:	31 81       	ldd	r19, Z+1	; 0x01
    1090:	82 0f       	add	r24, r18
    1092:	93 1f       	adc	r25, r19
    1094:	20 91 e7 00 	lds	r18, 0x00E7	; 0x8000e7 <__brkval>
    1098:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <__brkval+0x1>
    109c:	28 17       	cp	r18, r24
    109e:	39 07       	cpc	r19, r25
    10a0:	51 f5       	brne	.+84     	; 0x10f6 <free+0x88>
    10a2:	f0 93 e8 00 	sts	0x00E8, r31	; 0x8000e8 <__brkval+0x1>
    10a6:	e0 93 e7 00 	sts	0x00E7, r30	; 0x8000e7 <__brkval>
    10aa:	67 c0       	rjmp	.+206    	; 0x117a <free+0x10c>
    10ac:	ed 01       	movw	r28, r26
    10ae:	20 e0       	ldi	r18, 0x00	; 0
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	ce 17       	cp	r28, r30
    10b4:	df 07       	cpc	r29, r31
    10b6:	40 f4       	brcc	.+16     	; 0x10c8 <free+0x5a>
    10b8:	4a 81       	ldd	r20, Y+2	; 0x02
    10ba:	5b 81       	ldd	r21, Y+3	; 0x03
    10bc:	9e 01       	movw	r18, r28
    10be:	41 15       	cp	r20, r1
    10c0:	51 05       	cpc	r21, r1
    10c2:	f1 f0       	breq	.+60     	; 0x1100 <free+0x92>
    10c4:	ea 01       	movw	r28, r20
    10c6:	f5 cf       	rjmp	.-22     	; 0x10b2 <free+0x44>
    10c8:	d3 83       	std	Z+3, r29	; 0x03
    10ca:	c2 83       	std	Z+2, r28	; 0x02
    10cc:	40 81       	ld	r20, Z
    10ce:	51 81       	ldd	r21, Z+1	; 0x01
    10d0:	84 0f       	add	r24, r20
    10d2:	95 1f       	adc	r25, r21
    10d4:	c8 17       	cp	r28, r24
    10d6:	d9 07       	cpc	r29, r25
    10d8:	59 f4       	brne	.+22     	; 0x10f0 <free+0x82>
    10da:	88 81       	ld	r24, Y
    10dc:	99 81       	ldd	r25, Y+1	; 0x01
    10de:	84 0f       	add	r24, r20
    10e0:	95 1f       	adc	r25, r21
    10e2:	02 96       	adiw	r24, 0x02	; 2
    10e4:	91 83       	std	Z+1, r25	; 0x01
    10e6:	80 83       	st	Z, r24
    10e8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ea:	9b 81       	ldd	r25, Y+3	; 0x03
    10ec:	93 83       	std	Z+3, r25	; 0x03
    10ee:	82 83       	std	Z+2, r24	; 0x02
    10f0:	21 15       	cp	r18, r1
    10f2:	31 05       	cpc	r19, r1
    10f4:	29 f4       	brne	.+10     	; 0x1100 <free+0x92>
    10f6:	f0 93 ea 00 	sts	0x00EA, r31	; 0x8000ea <__flp+0x1>
    10fa:	e0 93 e9 00 	sts	0x00E9, r30	; 0x8000e9 <__flp>
    10fe:	3d c0       	rjmp	.+122    	; 0x117a <free+0x10c>
    1100:	e9 01       	movw	r28, r18
    1102:	fb 83       	std	Y+3, r31	; 0x03
    1104:	ea 83       	std	Y+2, r30	; 0x02
    1106:	49 91       	ld	r20, Y+
    1108:	59 91       	ld	r21, Y+
    110a:	c4 0f       	add	r28, r20
    110c:	d5 1f       	adc	r29, r21
    110e:	ec 17       	cp	r30, r28
    1110:	fd 07       	cpc	r31, r29
    1112:	61 f4       	brne	.+24     	; 0x112c <free+0xbe>
    1114:	80 81       	ld	r24, Z
    1116:	91 81       	ldd	r25, Z+1	; 0x01
    1118:	84 0f       	add	r24, r20
    111a:	95 1f       	adc	r25, r21
    111c:	02 96       	adiw	r24, 0x02	; 2
    111e:	e9 01       	movw	r28, r18
    1120:	99 83       	std	Y+1, r25	; 0x01
    1122:	88 83       	st	Y, r24
    1124:	82 81       	ldd	r24, Z+2	; 0x02
    1126:	93 81       	ldd	r25, Z+3	; 0x03
    1128:	9b 83       	std	Y+3, r25	; 0x03
    112a:	8a 83       	std	Y+2, r24	; 0x02
    112c:	e0 e0       	ldi	r30, 0x00	; 0
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	12 96       	adiw	r26, 0x02	; 2
    1132:	8d 91       	ld	r24, X+
    1134:	9c 91       	ld	r25, X
    1136:	13 97       	sbiw	r26, 0x03	; 3
    1138:	00 97       	sbiw	r24, 0x00	; 0
    113a:	19 f0       	breq	.+6      	; 0x1142 <free+0xd4>
    113c:	fd 01       	movw	r30, r26
    113e:	dc 01       	movw	r26, r24
    1140:	f7 cf       	rjmp	.-18     	; 0x1130 <free+0xc2>
    1142:	8d 91       	ld	r24, X+
    1144:	9c 91       	ld	r25, X
    1146:	11 97       	sbiw	r26, 0x01	; 1
    1148:	9d 01       	movw	r18, r26
    114a:	2e 5f       	subi	r18, 0xFE	; 254
    114c:	3f 4f       	sbci	r19, 0xFF	; 255
    114e:	82 0f       	add	r24, r18
    1150:	93 1f       	adc	r25, r19
    1152:	20 91 e7 00 	lds	r18, 0x00E7	; 0x8000e7 <__brkval>
    1156:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <__brkval+0x1>
    115a:	28 17       	cp	r18, r24
    115c:	39 07       	cpc	r19, r25
    115e:	69 f4       	brne	.+26     	; 0x117a <free+0x10c>
    1160:	30 97       	sbiw	r30, 0x00	; 0
    1162:	29 f4       	brne	.+10     	; 0x116e <free+0x100>
    1164:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__flp+0x1>
    1168:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__flp>
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <free+0x104>
    116e:	13 82       	std	Z+3, r1	; 0x03
    1170:	12 82       	std	Z+2, r1	; 0x02
    1172:	b0 93 e8 00 	sts	0x00E8, r27	; 0x8000e8 <__brkval+0x1>
    1176:	a0 93 e7 00 	sts	0x00E7, r26	; 0x8000e7 <__brkval>
    117a:	df 91       	pop	r29
    117c:	cf 91       	pop	r28
    117e:	08 95       	ret

00001180 <memset>:
    1180:	dc 01       	movw	r26, r24
    1182:	01 c0       	rjmp	.+2      	; 0x1186 <memset+0x6>
    1184:	6d 93       	st	X+, r22
    1186:	41 50       	subi	r20, 0x01	; 1
    1188:	50 40       	sbci	r21, 0x00	; 0
    118a:	e0 f7       	brcc	.-8      	; 0x1184 <memset+0x4>
    118c:	08 95       	ret

0000118e <_exit>:
    118e:	f8 94       	cli

00001190 <__stop_program>:
    1190:	ff cf       	rjmp	.-2      	; 0x1190 <__stop_program>
