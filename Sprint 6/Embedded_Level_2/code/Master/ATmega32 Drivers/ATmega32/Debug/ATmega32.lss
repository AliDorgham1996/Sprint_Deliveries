
ATmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d4c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000d4c  00000de0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000073  0080006e  0080006e  00000dee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003b0  00000000  00000000  00000e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000040b2  00000000  00000000  0000120c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001309  00000000  00000000  000052be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002596  00000000  00000000  000065c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c50  00000000  00000000  00008b60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001c8b  00000000  00000000  000097b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003748  00000000  00000000  0000b43b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000360  00000000  00000000  0000eb83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__vector_1>
   8:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__vector_2>
   c:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__vector_3>
  10:	0c 94 31 03 	jmp	0x662	; 0x662 <__vector_4>
  14:	0c 94 4e 02 	jmp	0x49c	; 0x49c <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 ed 04 	jmp	0x9da	; 0x9da <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 f9 02 	jmp	0x5f2	; 0x5f2 <__vector_10>
  2c:	0c 94 a3 01 	jmp	0x346	; 0x346 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 99 03 	jmp	0x732	; 0x732 <__vector_13>
  38:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e4       	ldi	r30, 0x4C	; 76
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 3e       	cpi	r26, 0xE1	; 225
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  8a:	0c 94 a4 06 	jmp	0xd48	; 0xd48 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <I2C_Driver>:
#include "../MCAL/I2C/I2C.h"
#include "../Library/System_Delays/Delays.h"

void I2C_Driver(void)
{
	I2C_init(100000);
  92:	60 ea       	ldi	r22, 0xA0	; 160
  94:	76 e8       	ldi	r23, 0x86	; 134
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	0e 94 43 01 	call	0x286	; 0x286 <I2C_init>
	while(1)
	{
		Delay_Ms(100);
  9e:	24 e6       	ldi	r18, 0x64	; 100
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	40 e0       	ldi	r20, 0x00	; 0
  a4:	50 e0       	ldi	r21, 0x00	; 0
  a6:	60 e0       	ldi	r22, 0x00	; 0
  a8:	70 e0       	ldi	r23, 0x00	; 0
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 6b 00 	call	0xd6	; 0xd6 <Delay_Ms>
		I2C_Start();
  b2:	0e 94 60 01 	call	0x2c0	; 0x2c0 <I2C_Start>
		I2C_Write(I2C_SLAVE_ADDRESS, I2C_MT_SLAW_ACK);
  b6:	63 e0       	ldi	r22, 0x03	; 3
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	0e 94 71 01 	call	0x2e2	; 0x2e2 <I2C_Write>
		I2C_Write('A', I2C_MT_DATA_ACK);
  be:	65 e0       	ldi	r22, 0x05	; 5
  c0:	81 e4       	ldi	r24, 0x41	; 65
  c2:	0e 94 71 01 	call	0x2e2	; 0x2e2 <I2C_Write>
		I2C_Stop();
  c6:	0e 94 6e 01 	call	0x2dc	; 0x2dc <I2C_Stop>
  ca:	e9 cf       	rjmp	.-46     	; 0x9e <I2C_Driver+0xc>

000000cc <main>:
#elif (Running_Task == Task_SPI_Driver)
	SPI_Driver();
#elif (Running_Task == Task_SPI_UART)
	SPI_UART();
#elif (Running_Task == Task_I2C_Driver)
	I2C_Driver();
  cc:	0e 94 49 00 	call	0x92	; 0x92 <I2C_Driver>
#elif (Running_Task == Task_I2C_EEPROM)
	I2C_EEPROM();
#endif /* Task */
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	08 95       	ret

000000d6 <Delay_Ms>:
#include "../Library/Configurations.h"
#include <util/delay.h>


void Delay_Ms(uint64_t Delay)
{
  d6:	ff 92       	push	r15
  d8:	0f 93       	push	r16
  da:	1f 93       	push	r17
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	f2 2e       	mov	r15, r18
  e2:	03 2f       	mov	r16, r19
  e4:	14 2f       	mov	r17, r20
  e6:	d5 2f       	mov	r29, r21
  e8:	c6 2f       	mov	r28, r22
  ea:	b7 2f       	mov	r27, r23
  ec:	f8 2f       	mov	r31, r24
  ee:	e9 2f       	mov	r30, r25
	while (0 < Delay)
  f0:	a0 e0       	ldi	r26, 0x00	; 0
  f2:	0e 94 84 06 	call	0xd08	; 0xd08 <__cmpdi2_s8>
  f6:	e9 f0       	breq	.+58     	; 0x132 <Delay_Ms+0x5c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f8:	8f ec       	ldi	r24, 0xCF	; 207
  fa:	97 e0       	ldi	r25, 0x07	; 7
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <Delay_Ms+0x26>
 100:	00 c0       	rjmp	.+0      	; 0x102 <Delay_Ms+0x2c>
 102:	00 00       	nop
	{
		_delay_ms(1);
		--Delay;
 104:	2f 2d       	mov	r18, r15
 106:	30 2f       	mov	r19, r16
 108:	41 2f       	mov	r20, r17
 10a:	5d 2f       	mov	r21, r29
 10c:	6c 2f       	mov	r22, r28
 10e:	7b 2f       	mov	r23, r27
 110:	8f 2f       	mov	r24, r31
 112:	9e 2f       	mov	r25, r30
 114:	af ef       	ldi	r26, 0xFF	; 255
 116:	0e 94 6f 06 	call	0xcde	; 0xcde <__adddi3_s8>
 11a:	f2 2e       	mov	r15, r18
 11c:	03 2f       	mov	r16, r19
 11e:	14 2f       	mov	r17, r20
 120:	d5 2f       	mov	r29, r21
 122:	c6 2f       	mov	r28, r22
 124:	b7 2f       	mov	r27, r23
 126:	f8 2f       	mov	r31, r24
 128:	e9 2f       	mov	r30, r25
#include <util/delay.h>


void Delay_Ms(uint64_t Delay)
{
	while (0 < Delay)
 12a:	a0 e0       	ldi	r26, 0x00	; 0
 12c:	0e 94 84 06 	call	0xd08	; 0xd08 <__cmpdi2_s8>
 130:	19 f7       	brne	.-58     	; 0xf8 <Delay_Ms+0x22>
	{
		_delay_ms(1);
		--Delay;
	}
}
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	1f 91       	pop	r17
 138:	0f 91       	pop	r16
 13a:	ff 90       	pop	r15
 13c:	08 95       	ret

0000013e <__vector_1>:
		break;
	}
	return return_value;	
}
ISR(INT0_vect)
{
 13e:	1f 92       	push	r1
 140:	0f 92       	push	r0
 142:	0f b6       	in	r0, 0x3f	; 63
 144:	0f 92       	push	r0
 146:	11 24       	eor	r1, r1
 148:	2f 93       	push	r18
 14a:	3f 93       	push	r19
 14c:	4f 93       	push	r20
 14e:	5f 93       	push	r21
 150:	6f 93       	push	r22
 152:	7f 93       	push	r23
 154:	8f 93       	push	r24
 156:	9f 93       	push	r25
 158:	af 93       	push	r26
 15a:	bf 93       	push	r27
 15c:	ef 93       	push	r30
 15e:	ff 93       	push	r31
	EXTI.Flag.INT_0 = ENABLE;
 160:	8a b7       	in	r24, 0x3a	; 58
 162:	80 64       	ori	r24, 0x40	; 64
 164:	8a bf       	out	0x3a, r24	; 58
	if(ExtI_Callbacks[0] != NULL)
 166:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
 16a:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <__data_end+0x1>
 16e:	89 2b       	or	r24, r25
 170:	29 f0       	breq	.+10     	; 0x17c <__vector_1+0x3e>
	{
		ExtI_Callbacks[0]();
 172:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <__data_end>
 176:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <__data_end+0x1>
 17a:	09 95       	icall
	}
}
 17c:	ff 91       	pop	r31
 17e:	ef 91       	pop	r30
 180:	bf 91       	pop	r27
 182:	af 91       	pop	r26
 184:	9f 91       	pop	r25
 186:	8f 91       	pop	r24
 188:	7f 91       	pop	r23
 18a:	6f 91       	pop	r22
 18c:	5f 91       	pop	r21
 18e:	4f 91       	pop	r20
 190:	3f 91       	pop	r19
 192:	2f 91       	pop	r18
 194:	0f 90       	pop	r0
 196:	0f be       	out	0x3f, r0	; 63
 198:	0f 90       	pop	r0
 19a:	1f 90       	pop	r1
 19c:	18 95       	reti

0000019e <__vector_2>:
ISR(INT1_vect)
{
 19e:	1f 92       	push	r1
 1a0:	0f 92       	push	r0
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	0f 92       	push	r0
 1a6:	11 24       	eor	r1, r1
 1a8:	2f 93       	push	r18
 1aa:	3f 93       	push	r19
 1ac:	4f 93       	push	r20
 1ae:	5f 93       	push	r21
 1b0:	6f 93       	push	r22
 1b2:	7f 93       	push	r23
 1b4:	8f 93       	push	r24
 1b6:	9f 93       	push	r25
 1b8:	af 93       	push	r26
 1ba:	bf 93       	push	r27
 1bc:	ef 93       	push	r30
 1be:	ff 93       	push	r31
	EXTI.Flag.INT_1 = ENABLE;
 1c0:	8a b7       	in	r24, 0x3a	; 58
 1c2:	80 68       	ori	r24, 0x80	; 128
 1c4:	8a bf       	out	0x3a, r24	; 58
	if(ExtI_Callbacks[1] != NULL)
 1c6:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end+0x2>
 1ca:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__data_end+0x3>
 1ce:	89 2b       	or	r24, r25
 1d0:	29 f0       	breq	.+10     	; 0x1dc <__vector_2+0x3e>
	{
		ExtI_Callbacks[1]();
 1d2:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <__data_end+0x2>
 1d6:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <__data_end+0x3>
 1da:	09 95       	icall
	}
}
 1dc:	ff 91       	pop	r31
 1de:	ef 91       	pop	r30
 1e0:	bf 91       	pop	r27
 1e2:	af 91       	pop	r26
 1e4:	9f 91       	pop	r25
 1e6:	8f 91       	pop	r24
 1e8:	7f 91       	pop	r23
 1ea:	6f 91       	pop	r22
 1ec:	5f 91       	pop	r21
 1ee:	4f 91       	pop	r20
 1f0:	3f 91       	pop	r19
 1f2:	2f 91       	pop	r18
 1f4:	0f 90       	pop	r0
 1f6:	0f be       	out	0x3f, r0	; 63
 1f8:	0f 90       	pop	r0
 1fa:	1f 90       	pop	r1
 1fc:	18 95       	reti

000001fe <__vector_3>:
ISR(INT2_vect)
{
 1fe:	1f 92       	push	r1
 200:	0f 92       	push	r0
 202:	0f b6       	in	r0, 0x3f	; 63
 204:	0f 92       	push	r0
 206:	11 24       	eor	r1, r1
 208:	2f 93       	push	r18
 20a:	3f 93       	push	r19
 20c:	4f 93       	push	r20
 20e:	5f 93       	push	r21
 210:	6f 93       	push	r22
 212:	7f 93       	push	r23
 214:	8f 93       	push	r24
 216:	9f 93       	push	r25
 218:	af 93       	push	r26
 21a:	bf 93       	push	r27
 21c:	ef 93       	push	r30
 21e:	ff 93       	push	r31
	EXTI.Flag.INT_2 = ENABLE;
 220:	8a b7       	in	r24, 0x3a	; 58
 222:	80 62       	ori	r24, 0x20	; 32
 224:	8a bf       	out	0x3a, r24	; 58
	if(ExtI_Callbacks[2] != NULL)
 226:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end+0x4>
 22a:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <__data_end+0x5>
 22e:	89 2b       	or	r24, r25
 230:	29 f0       	breq	.+10     	; 0x23c <__vector_3+0x3e>
	{
		ExtI_Callbacks[2]();
 232:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <__data_end+0x4>
 236:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <__data_end+0x5>
 23a:	09 95       	icall
	}
 23c:	ff 91       	pop	r31
 23e:	ef 91       	pop	r30
 240:	bf 91       	pop	r27
 242:	af 91       	pop	r26
 244:	9f 91       	pop	r25
 246:	8f 91       	pop	r24
 248:	7f 91       	pop	r23
 24a:	6f 91       	pop	r22
 24c:	5f 91       	pop	r21
 24e:	4f 91       	pop	r20
 250:	3f 91       	pop	r19
 252:	2f 91       	pop	r18
 254:	0f 90       	pop	r0
 256:	0f be       	out	0x3f, r0	; 63
 258:	0f 90       	pop	r0
 25a:	1f 90       	pop	r1
 25c:	18 95       	reti

0000025e <TWI_Wait>:
	{
		return_value = I2C_EN_valid;
	}
	else{/*MISRA C*/}
	return return_value;
}
 25e:	06 b6       	in	r0, 0x36	; 54
 260:	07 fc       	sbrc	r0, 7
 262:	0a c0       	rjmp	.+20     	; 0x278 <TWI_Wait+0x1a>
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	06 b6       	in	r0, 0x36	; 54
 26a:	07 fc       	sbrc	r0, 7
 26c:	05 c0       	rjmp	.+10     	; 0x278 <TWI_Wait+0x1a>
 26e:	01 96       	adiw	r24, 0x01	; 1
 270:	89 38       	cpi	r24, 0x89	; 137
 272:	23 e1       	ldi	r18, 0x13	; 19
 274:	92 07       	cpc	r25, r18
 276:	c1 f7       	brne	.-16     	; 0x268 <TWI_Wait+0xa>
 278:	86 b7       	in	r24, 0x36	; 54
 27a:	87 fb       	bst	r24, 7
 27c:	88 27       	eor	r24, r24
 27e:	80 f9       	bld	r24, 0
 280:	91 e0       	ldi	r25, 0x01	; 1
 282:	89 27       	eor	r24, r25
 284:	08 95       	ret

00000286 <I2C_init>:
 286:	9b 01       	movw	r18, r22
 288:	ac 01       	movw	r20, r24
 28a:	81 b1       	in	r24, 0x01	; 1
 28c:	8c 7f       	andi	r24, 0xFC	; 252
 28e:	81 b9       	out	0x01, r24	; 1
 290:	82 b1       	in	r24, 0x02	; 2
 292:	80 78       	andi	r24, 0x80	; 128
 294:	81 60       	ori	r24, 0x01	; 1
 296:	82 b9       	out	0x02, r24	; 2
 298:	60 e0       	ldi	r22, 0x00	; 0
 29a:	72 e1       	ldi	r23, 0x12	; 18
 29c:	8a e7       	ldi	r24, 0x7A	; 122
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	0e 94 4d 06 	call	0xc9a	; 0xc9a <__udivmodsi4>
 2a4:	da 01       	movw	r26, r20
 2a6:	c9 01       	movw	r24, r18
 2a8:	40 97       	sbiw	r24, 0x10	; 16
 2aa:	a1 09       	sbc	r26, r1
 2ac:	b1 09       	sbc	r27, r1
 2ae:	b6 95       	lsr	r27
 2b0:	a7 95       	ror	r26
 2b2:	97 95       	ror	r25
 2b4:	87 95       	ror	r24
 2b6:	80 b9       	out	0x00, r24	; 0
 2b8:	86 b7       	in	r24, 0x36	; 54
 2ba:	84 60       	ori	r24, 0x04	; 4
 2bc:	86 bf       	out	0x36, r24	; 54
 2be:	08 95       	ret

000002c0 <I2C_Start>:
 2c0:	84 ea       	ldi	r24, 0xA4	; 164
 2c2:	86 bf       	out	0x36, r24	; 54
 2c4:	0e 94 2f 01 	call	0x25e	; 0x25e <TWI_Wait>
 2c8:	88 23       	and	r24, r24
 2ca:	39 f0       	breq	.+14     	; 0x2da <I2C_Start+0x1a>
 2cc:	91 b1       	in	r25, 0x01	; 1
 2ce:	96 95       	lsr	r25
 2d0:	96 95       	lsr	r25
 2d2:	96 95       	lsr	r25
 2d4:	91 30       	cpi	r25, 0x01	; 1
 2d6:	09 f4       	brne	.+2      	; 0x2da <I2C_Start+0x1a>
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	08 95       	ret

000002dc <I2C_Stop>:
void			I2C_Stop			(void)
{
	I2C.Control.TWCR_Reg = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
 2dc:	84 e9       	ldi	r24, 0x94	; 148
 2de:	86 bf       	out	0x36, r24	; 54
 2e0:	08 95       	ret

000002e2 <I2C_Write>:
}
I2C_Error_t		I2C_Write			(uint8_t  Data, I2C_StatusCode_t Code)
{
 2e2:	cf 93       	push	r28
 2e4:	c6 2f       	mov	r28, r22
	I2C_Error_t return_value = I2C_EN_Invalid;
	I2C.Data = Data;
 2e6:	83 b9       	out	0x03, r24	; 3
	I2C.Control.TWCR_Reg = (1<<TWINT)|(1<<TWEN);
 2e8:	84 e8       	ldi	r24, 0x84	; 132
 2ea:	86 bf       	out	0x36, r24	; 54
	return_value = TWI_Wait();
 2ec:	0e 94 2f 01 	call	0x25e	; 0x25e <TWI_Wait>
	if(return_value != I2C_EN_valid)
 2f0:	88 23       	and	r24, r24
 2f2:	59 f0       	breq	.+22     	; 0x30a <I2C_Write+0x28>
	{
		if(I2C.Status.status_code == Code)
 2f4:	21 b1       	in	r18, 0x01	; 1
 2f6:	26 95       	lsr	r18
 2f8:	26 95       	lsr	r18
 2fa:	26 95       	lsr	r18
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	6c 2f       	mov	r22, r28
 300:	70 e0       	ldi	r23, 0x00	; 0
 302:	26 17       	cp	r18, r22
 304:	37 07       	cpc	r19, r23
 306:	09 f4       	brne	.+2      	; 0x30a <I2C_Write+0x28>
		{
			return_value = I2C_EN_valid;
 308:	80 e0       	ldi	r24, 0x00	; 0
		}
		else{/*MISRA C*/}
	}
	else{/*MISRA C*/}
	return return_value;
}
 30a:	cf 91       	pop	r28
 30c:	08 95       	ret

0000030e <Timer_ResetCounter>:
		TIMER2.Interrupts.Comp_Match       = ENABLE;
		TIMER2.Interrupts.OverFlow		   = ENABLE;
		TIMER2.Control.Clock = Clock;
	}
	else{/*MISRA C*/}
}
 30e:	81 11       	cpse	r24, r1
 310:	0c c0       	rjmp	.+24     	; 0x32a <Timer_ResetCounter+0x1c>
 312:	e8 e9       	ldi	r30, 0x98	; 152
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	10 82       	st	Z, r1
 318:	11 82       	std	Z+1, r1	; 0x01
 31a:	12 82       	std	Z+2, r1	; 0x02
 31c:	13 82       	std	Z+3, r1	; 0x03
 31e:	14 82       	std	Z+4, r1	; 0x04
 320:	15 82       	std	Z+5, r1	; 0x05
 322:	16 82       	std	Z+6, r1	; 0x06
 324:	17 82       	std	Z+7, r1	; 0x07
 326:	12 be       	out	0x32, r1	; 50
 328:	08 95       	ret
 32a:	81 30       	cpi	r24, 0x01	; 1
 32c:	59 f4       	brne	.+22     	; 0x344 <Timer_ResetCounter+0x36>
 32e:	e8 e9       	ldi	r30, 0x98	; 152
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	10 86       	std	Z+8, r1	; 0x08
 334:	11 86       	std	Z+9, r1	; 0x09
 336:	12 86       	std	Z+10, r1	; 0x0a
 338:	13 86       	std	Z+11, r1	; 0x0b
 33a:	14 86       	std	Z+12, r1	; 0x0c
 33c:	15 86       	std	Z+13, r1	; 0x0d
 33e:	16 86       	std	Z+14, r1	; 0x0e
 340:	17 86       	std	Z+15, r1	; 0x0f
 342:	14 bc       	out	0x24, r1	; 36
 344:	08 95       	ret

00000346 <__vector_11>:
ISR(TIMER0_OVF_vect)
{
 346:	1f 92       	push	r1
 348:	0f 92       	push	r0
 34a:	0f b6       	in	r0, 0x3f	; 63
 34c:	0f 92       	push	r0
 34e:	11 24       	eor	r1, r1
 350:	af 92       	push	r10
 352:	bf 92       	push	r11
 354:	cf 92       	push	r12
 356:	df 92       	push	r13
 358:	ef 92       	push	r14
 35a:	ff 92       	push	r15
 35c:	0f 93       	push	r16
 35e:	1f 93       	push	r17
 360:	2f 93       	push	r18
 362:	3f 93       	push	r19
 364:	4f 93       	push	r20
 366:	5f 93       	push	r21
 368:	6f 93       	push	r22
 36a:	7f 93       	push	r23
 36c:	8f 93       	push	r24
 36e:	9f 93       	push	r25
 370:	af 93       	push	r26
 372:	bf 93       	push	r27
 374:	cf 93       	push	r28
 376:	df 93       	push	r29
 378:	ef 93       	push	r30
 37a:	ff 93       	push	r31
	TIMER0.Flags.OverFlow = ENABLE;
 37c:	88 b7       	in	r24, 0x38	; 56
 37e:	81 60       	ori	r24, 0x01	; 1
 380:	88 bf       	out	0x38, r24	; 56
	OverFlows[Timer0]++;
 382:	c8 e9       	ldi	r28, 0x98	; 152
 384:	d0 e0       	ldi	r29, 0x00	; 0
 386:	28 81       	ld	r18, Y
 388:	39 81       	ldd	r19, Y+1	; 0x01
 38a:	4a 81       	ldd	r20, Y+2	; 0x02
 38c:	5b 81       	ldd	r21, Y+3	; 0x03
 38e:	6c 81       	ldd	r22, Y+4	; 0x04
 390:	7d 81       	ldd	r23, Y+5	; 0x05
 392:	8e 81       	ldd	r24, Y+6	; 0x06
 394:	9f 81       	ldd	r25, Y+7	; 0x07
 396:	a1 e0       	ldi	r26, 0x01	; 1
 398:	0e 94 6f 06 	call	0xcde	; 0xcde <__adddi3_s8>
 39c:	28 83       	st	Y, r18
 39e:	39 83       	std	Y+1, r19	; 0x01
 3a0:	4a 83       	std	Y+2, r20	; 0x02
 3a2:	5b 83       	std	Y+3, r21	; 0x03
 3a4:	6c 83       	std	Y+4, r22	; 0x04
 3a6:	7d 83       	std	Y+5, r23	; 0x05
 3a8:	8e 83       	std	Y+6, r24	; 0x06
 3aa:	9f 83       	std	Y+7, r25	; 0x07
	PWMAction[Timer0]();
 3ac:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <PWMAction>
 3b0:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <PWMAction+0x1>
 3b4:	09 95       	icall
	if(OverFlows[Timer0] == Duty[Timer0][Cycle[Timer0]])
 3b6:	28 81       	ld	r18, Y
 3b8:	39 81       	ldd	r19, Y+1	; 0x01
 3ba:	4a 81       	ldd	r20, Y+2	; 0x02
 3bc:	5b 81       	ldd	r21, Y+3	; 0x03
 3be:	6c 81       	ldd	r22, Y+4	; 0x04
 3c0:	7d 81       	ldd	r23, Y+5	; 0x05
 3c2:	8e 81       	ldd	r24, Y+6	; 0x06
 3c4:	9f 81       	ldd	r25, Y+7	; 0x07
 3c6:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3ca:	f0 e0       	ldi	r31, 0x00	; 0
 3cc:	ee 0f       	add	r30, r30
 3ce:	ff 1f       	adc	r31, r31
 3d0:	ee 0f       	add	r30, r30
 3d2:	ff 1f       	adc	r31, r31
 3d4:	ee 0f       	add	r30, r30
 3d6:	ff 1f       	adc	r31, r31
 3d8:	e8 58       	subi	r30, 0x88	; 136
 3da:	ff 4f       	sbci	r31, 0xFF	; 255
 3dc:	a0 80       	ld	r10, Z
 3de:	b1 80       	ldd	r11, Z+1	; 0x01
 3e0:	c2 80       	ldd	r12, Z+2	; 0x02
 3e2:	d3 80       	ldd	r13, Z+3	; 0x03
 3e4:	e4 80       	ldd	r14, Z+4	; 0x04
 3e6:	f5 80       	ldd	r15, Z+5	; 0x05
 3e8:	06 81       	ldd	r16, Z+6	; 0x06
 3ea:	17 81       	ldd	r17, Z+7	; 0x07
 3ec:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <__cmpdi2>
 3f0:	d1 f5       	brne	.+116    	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
	{
		OverFlows[Timer0] = RESET;
 3f2:	18 82       	st	Y, r1
 3f4:	19 82       	std	Y+1, r1	; 0x01
 3f6:	1a 82       	std	Y+2, r1	; 0x02
 3f8:	1b 82       	std	Y+3, r1	; 0x03
 3fa:	1c 82       	std	Y+4, r1	; 0x04
 3fc:	1d 82       	std	Y+5, r1	; 0x05
 3fe:	1e 82       	std	Y+6, r1	; 0x06
 400:	1f 82       	std	Y+7, r1	; 0x07
		NotifierAction[Timer0]();
 402:	e0 91 a8 00 	lds	r30, 0x00A8	; 0x8000a8 <NotifierAction>
 406:	f0 91 a9 00 	lds	r31, 0x00A9	; 0x8000a9 <NotifierAction+0x1>
 40a:	09 95       	icall
		if(Cycle[Timer0] == ON_Cycle)
 40c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 410:	81 11       	cpse	r24, r1
 412:	13 c0       	rjmp	.+38     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
		{
			Cycle[Timer0] = OFF_Cycle;
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			TIMER0.Counter  = 256 - ((Duty[Timer0][OFF_Cycle] * 1000UL)%256 -1);
 41a:	e8 e7       	ldi	r30, 0x78	; 120
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	90 85       	ldd	r25, Z+8	; 0x08
 420:	21 85       	ldd	r18, Z+9	; 0x09
 422:	22 85       	ldd	r18, Z+10	; 0x0a
 424:	23 85       	ldd	r18, Z+11	; 0x0b
 426:	24 85       	ldd	r18, Z+12	; 0x0c
 428:	25 85       	ldd	r18, Z+13	; 0x0d
 42a:	26 85       	ldd	r18, Z+14	; 0x0e
 42c:	27 85       	ldd	r18, Z+15	; 0x0f
 42e:	28 e1       	ldi	r18, 0x18	; 24
 430:	92 9f       	mul	r25, r18
 432:	80 0d       	add	r24, r0
 434:	11 24       	eor	r1, r1
 436:	82 bf       	out	0x32, r24	; 50
 438:	16 c0       	rjmp	.+44     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
		}
		else if(Cycle[Timer0] == OFF_Cycle)
 43a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 43e:	81 30       	cpi	r24, 0x01	; 1
 440:	91 f4       	brne	.+36     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
		{
			Cycle[Timer0] = ON_Cycle;
 442:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			TIMER0.Counter  = 256 - ((Duty[Timer0][ON_Cycle] * 1000UL)%256 -1);
 446:	e8 e7       	ldi	r30, 0x78	; 120
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	90 81       	ld	r25, Z
 44c:	81 81       	ldd	r24, Z+1	; 0x01
 44e:	82 81       	ldd	r24, Z+2	; 0x02
 450:	83 81       	ldd	r24, Z+3	; 0x03
 452:	84 81       	ldd	r24, Z+4	; 0x04
 454:	85 81       	ldd	r24, Z+5	; 0x05
 456:	86 81       	ldd	r24, Z+6	; 0x06
 458:	87 81       	ldd	r24, Z+7	; 0x07
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	28 e1       	ldi	r18, 0x18	; 24
 45e:	92 9f       	mul	r25, r18
 460:	80 0d       	add	r24, r0
 462:	11 24       	eor	r1, r1
 464:	82 bf       	out	0x32, r24	; 50
		}
	}
}
 466:	ff 91       	pop	r31
 468:	ef 91       	pop	r30
 46a:	df 91       	pop	r29
 46c:	cf 91       	pop	r28
 46e:	bf 91       	pop	r27
 470:	af 91       	pop	r26
 472:	9f 91       	pop	r25
 474:	8f 91       	pop	r24
 476:	7f 91       	pop	r23
 478:	6f 91       	pop	r22
 47a:	5f 91       	pop	r21
 47c:	4f 91       	pop	r20
 47e:	3f 91       	pop	r19
 480:	2f 91       	pop	r18
 482:	1f 91       	pop	r17
 484:	0f 91       	pop	r16
 486:	ff 90       	pop	r15
 488:	ef 90       	pop	r14
 48a:	df 90       	pop	r13
 48c:	cf 90       	pop	r12
 48e:	bf 90       	pop	r11
 490:	af 90       	pop	r10
 492:	0f 90       	pop	r0
 494:	0f be       	out	0x3f, r0	; 63
 496:	0f 90       	pop	r0
 498:	1f 90       	pop	r1
 49a:	18 95       	reti

0000049c <__vector_5>:
ISR(TIMER2_OVF_vect)
{
 49c:	1f 92       	push	r1
 49e:	0f 92       	push	r0
 4a0:	0f b6       	in	r0, 0x3f	; 63
 4a2:	0f 92       	push	r0
 4a4:	11 24       	eor	r1, r1
 4a6:	af 92       	push	r10
 4a8:	bf 92       	push	r11
 4aa:	cf 92       	push	r12
 4ac:	df 92       	push	r13
 4ae:	ef 92       	push	r14
 4b0:	ff 92       	push	r15
 4b2:	0f 93       	push	r16
 4b4:	1f 93       	push	r17
 4b6:	2f 93       	push	r18
 4b8:	3f 93       	push	r19
 4ba:	4f 93       	push	r20
 4bc:	5f 93       	push	r21
 4be:	6f 93       	push	r22
 4c0:	7f 93       	push	r23
 4c2:	8f 93       	push	r24
 4c4:	9f 93       	push	r25
 4c6:	af 93       	push	r26
 4c8:	bf 93       	push	r27
 4ca:	cf 93       	push	r28
 4cc:	df 93       	push	r29
 4ce:	ef 93       	push	r30
 4d0:	ff 93       	push	r31
	TIMER2.Flags.OverFlow = ENABLE;
 4d2:	88 b7       	in	r24, 0x38	; 56
 4d4:	80 64       	ori	r24, 0x40	; 64
 4d6:	88 bf       	out	0x38, r24	; 56
	OverFlows[Timer2]++;
 4d8:	c8 e9       	ldi	r28, 0x98	; 152
 4da:	d0 e0       	ldi	r29, 0x00	; 0
 4dc:	28 85       	ldd	r18, Y+8	; 0x08
 4de:	39 85       	ldd	r19, Y+9	; 0x09
 4e0:	4a 85       	ldd	r20, Y+10	; 0x0a
 4e2:	5b 85       	ldd	r21, Y+11	; 0x0b
 4e4:	6c 85       	ldd	r22, Y+12	; 0x0c
 4e6:	7d 85       	ldd	r23, Y+13	; 0x0d
 4e8:	8e 85       	ldd	r24, Y+14	; 0x0e
 4ea:	9f 85       	ldd	r25, Y+15	; 0x0f
 4ec:	a1 e0       	ldi	r26, 0x01	; 1
 4ee:	0e 94 6f 06 	call	0xcde	; 0xcde <__adddi3_s8>
 4f2:	28 87       	std	Y+8, r18	; 0x08
 4f4:	39 87       	std	Y+9, r19	; 0x09
 4f6:	4a 87       	std	Y+10, r20	; 0x0a
 4f8:	5b 87       	std	Y+11, r21	; 0x0b
 4fa:	6c 87       	std	Y+12, r22	; 0x0c
 4fc:	7d 87       	std	Y+13, r23	; 0x0d
 4fe:	8e 87       	std	Y+14, r24	; 0x0e
 500:	9f 87       	std	Y+15, r25	; 0x0f
	PWMAction[Timer2]();
 502:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <PWMAction+0x2>
 506:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <PWMAction+0x3>
 50a:	09 95       	icall
	if(OverFlows[Timer2] == Duty[Timer2][Cycle[Timer2]])
 50c:	28 85       	ldd	r18, Y+8	; 0x08
 50e:	39 85       	ldd	r19, Y+9	; 0x09
 510:	4a 85       	ldd	r20, Y+10	; 0x0a
 512:	5b 85       	ldd	r21, Y+11	; 0x0b
 514:	6c 85       	ldd	r22, Y+12	; 0x0c
 516:	7d 85       	ldd	r23, Y+13	; 0x0d
 518:	8e 85       	ldd	r24, Y+14	; 0x0e
 51a:	9f 85       	ldd	r25, Y+15	; 0x0f
 51c:	e0 91 61 00 	lds	r30, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 520:	f0 e0       	ldi	r31, 0x00	; 0
 522:	ee 0f       	add	r30, r30
 524:	ff 1f       	adc	r31, r31
 526:	ee 0f       	add	r30, r30
 528:	ff 1f       	adc	r31, r31
 52a:	ee 0f       	add	r30, r30
 52c:	ff 1f       	adc	r31, r31
 52e:	e8 57       	subi	r30, 0x78	; 120
 530:	ff 4f       	sbci	r31, 0xFF	; 255
 532:	a0 80       	ld	r10, Z
 534:	b1 80       	ldd	r11, Z+1	; 0x01
 536:	c2 80       	ldd	r12, Z+2	; 0x02
 538:	d3 80       	ldd	r13, Z+3	; 0x03
 53a:	e4 80       	ldd	r14, Z+4	; 0x04
 53c:	f5 80       	ldd	r15, Z+5	; 0x05
 53e:	06 81       	ldd	r16, Z+6	; 0x06
 540:	17 81       	ldd	r17, Z+7	; 0x07
 542:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <__cmpdi2>
 546:	d1 f5       	brne	.+116    	; 0x5bc <__vector_5+0x120>
	{
		OverFlows[Timer2] = RESET;
 548:	18 86       	std	Y+8, r1	; 0x08
 54a:	19 86       	std	Y+9, r1	; 0x09
 54c:	1a 86       	std	Y+10, r1	; 0x0a
 54e:	1b 86       	std	Y+11, r1	; 0x0b
 550:	1c 86       	std	Y+12, r1	; 0x0c
 552:	1d 86       	std	Y+13, r1	; 0x0d
 554:	1e 86       	std	Y+14, r1	; 0x0e
 556:	1f 86       	std	Y+15, r1	; 0x0f
		NotifierAction[Timer2]();
 558:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <NotifierAction+0x2>
 55c:	f0 91 ab 00 	lds	r31, 0x00AB	; 0x8000ab <NotifierAction+0x3>
 560:	09 95       	icall
		if(Cycle[Timer2] == ON_Cycle)
 562:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 566:	81 11       	cpse	r24, r1
 568:	13 c0       	rjmp	.+38     	; 0x590 <__vector_5+0xf4>
		{
			Cycle[Timer2] = OFF_Cycle;
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
			TIMER0.Counter  = 256 - ((Duty[Timer2][OFF_Cycle] * 1000UL)%256 -1);
 570:	e8 e7       	ldi	r30, 0x78	; 120
 572:	f0 e0       	ldi	r31, 0x00	; 0
 574:	90 8d       	ldd	r25, Z+24	; 0x18
 576:	21 8d       	ldd	r18, Z+25	; 0x19
 578:	22 8d       	ldd	r18, Z+26	; 0x1a
 57a:	23 8d       	ldd	r18, Z+27	; 0x1b
 57c:	24 8d       	ldd	r18, Z+28	; 0x1c
 57e:	25 8d       	ldd	r18, Z+29	; 0x1d
 580:	26 8d       	ldd	r18, Z+30	; 0x1e
 582:	27 8d       	ldd	r18, Z+31	; 0x1f
 584:	28 e1       	ldi	r18, 0x18	; 24
 586:	92 9f       	mul	r25, r18
 588:	80 0d       	add	r24, r0
 58a:	11 24       	eor	r1, r1
 58c:	82 bf       	out	0x32, r24	; 50
 58e:	16 c0       	rjmp	.+44     	; 0x5bc <__vector_5+0x120>
		}
		else if(Cycle[Timer2] == OFF_Cycle)
 590:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 594:	81 30       	cpi	r24, 0x01	; 1
 596:	91 f4       	brne	.+36     	; 0x5bc <__vector_5+0x120>
		{
			Cycle[Timer2] = ON_Cycle;
 598:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
			TIMER2.Counter  = 256 - ((Duty[Timer2][ON_Cycle] * 1000UL)%256 -1);
 59c:	e8 e7       	ldi	r30, 0x78	; 120
 59e:	f0 e0       	ldi	r31, 0x00	; 0
 5a0:	90 89       	ldd	r25, Z+16	; 0x10
 5a2:	81 89       	ldd	r24, Z+17	; 0x11
 5a4:	82 89       	ldd	r24, Z+18	; 0x12
 5a6:	83 89       	ldd	r24, Z+19	; 0x13
 5a8:	84 89       	ldd	r24, Z+20	; 0x14
 5aa:	85 89       	ldd	r24, Z+21	; 0x15
 5ac:	86 89       	ldd	r24, Z+22	; 0x16
 5ae:	87 89       	ldd	r24, Z+23	; 0x17
 5b0:	81 e0       	ldi	r24, 0x01	; 1
 5b2:	28 e1       	ldi	r18, 0x18	; 24
 5b4:	92 9f       	mul	r25, r18
 5b6:	80 0d       	add	r24, r0
 5b8:	11 24       	eor	r1, r1
 5ba:	84 bd       	out	0x24, r24	; 36
		}
	}
}
 5bc:	ff 91       	pop	r31
 5be:	ef 91       	pop	r30
 5c0:	df 91       	pop	r29
 5c2:	cf 91       	pop	r28
 5c4:	bf 91       	pop	r27
 5c6:	af 91       	pop	r26
 5c8:	9f 91       	pop	r25
 5ca:	8f 91       	pop	r24
 5cc:	7f 91       	pop	r23
 5ce:	6f 91       	pop	r22
 5d0:	5f 91       	pop	r21
 5d2:	4f 91       	pop	r20
 5d4:	3f 91       	pop	r19
 5d6:	2f 91       	pop	r18
 5d8:	1f 91       	pop	r17
 5da:	0f 91       	pop	r16
 5dc:	ff 90       	pop	r15
 5de:	ef 90       	pop	r14
 5e0:	df 90       	pop	r13
 5e2:	cf 90       	pop	r12
 5e4:	bf 90       	pop	r11
 5e6:	af 90       	pop	r10
 5e8:	0f 90       	pop	r0
 5ea:	0f be       	out	0x3f, r0	; 63
 5ec:	0f 90       	pop	r0
 5ee:	1f 90       	pop	r1
 5f0:	18 95       	reti

000005f2 <__vector_10>:
ISR(TIMER0_COMP_vect)
{
 5f2:	1f 92       	push	r1
 5f4:	0f 92       	push	r0
 5f6:	0f b6       	in	r0, 0x3f	; 63
 5f8:	0f 92       	push	r0
 5fa:	11 24       	eor	r1, r1
 5fc:	2f 93       	push	r18
 5fe:	3f 93       	push	r19
 600:	4f 93       	push	r20
 602:	5f 93       	push	r21
 604:	6f 93       	push	r22
 606:	7f 93       	push	r23
 608:	8f 93       	push	r24
 60a:	9f 93       	push	r25
 60c:	af 93       	push	r26
 60e:	bf 93       	push	r27
 610:	ef 93       	push	r30
 612:	ff 93       	push	r31
	TIMER0.Flags.Comp_Match = ENABLE;
 614:	88 b7       	in	r24, 0x38	; 56
 616:	82 60       	ori	r24, 0x02	; 2
 618:	88 bf       	out	0x38, r24	; 56
	if(CounterAction != NULL)
 61a:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <CounterAction>
 61e:	90 91 ad 00 	lds	r25, 0x00AD	; 0x8000ad <CounterAction+0x1>
 622:	89 2b       	or	r24, r25
 624:	41 f0       	breq	.+16     	; 0x636 <__vector_10+0x44>
	{
		CounterAction();
 626:	e0 91 ac 00 	lds	r30, 0x00AC	; 0x8000ac <CounterAction>
 62a:	f0 91 ad 00 	lds	r31, 0x00AD	; 0x8000ad <CounterAction+0x1>
 62e:	09 95       	icall
		Timer_ResetCounter(Timer0);
 630:	80 e0       	ldi	r24, 0x00	; 0
 632:	0e 94 87 01 	call	0x30e	; 0x30e <Timer_ResetCounter>
	}
	PWMAction[Timer0]();
 636:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <PWMAction>
 63a:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <PWMAction+0x1>
 63e:	09 95       	icall
}
 640:	ff 91       	pop	r31
 642:	ef 91       	pop	r30
 644:	bf 91       	pop	r27
 646:	af 91       	pop	r26
 648:	9f 91       	pop	r25
 64a:	8f 91       	pop	r24
 64c:	7f 91       	pop	r23
 64e:	6f 91       	pop	r22
 650:	5f 91       	pop	r21
 652:	4f 91       	pop	r20
 654:	3f 91       	pop	r19
 656:	2f 91       	pop	r18
 658:	0f 90       	pop	r0
 65a:	0f be       	out	0x3f, r0	; 63
 65c:	0f 90       	pop	r0
 65e:	1f 90       	pop	r1
 660:	18 95       	reti

00000662 <__vector_4>:
ISR(TIMER2_COMP_vect)
{
 662:	1f 92       	push	r1
 664:	0f 92       	push	r0
 666:	0f b6       	in	r0, 0x3f	; 63
 668:	0f 92       	push	r0
 66a:	11 24       	eor	r1, r1
 66c:	2f 93       	push	r18
 66e:	3f 93       	push	r19
 670:	4f 93       	push	r20
 672:	5f 93       	push	r21
 674:	6f 93       	push	r22
 676:	7f 93       	push	r23
 678:	8f 93       	push	r24
 67a:	9f 93       	push	r25
 67c:	af 93       	push	r26
 67e:	bf 93       	push	r27
 680:	ef 93       	push	r30
 682:	ff 93       	push	r31
	TIMER2.Flags.Comp_Match = ENABLE;
 684:	88 b7       	in	r24, 0x38	; 56
 686:	80 68       	ori	r24, 0x80	; 128
 688:	88 bf       	out	0x38, r24	; 56
	PWMAction[Timer2]();
 68a:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <PWMAction+0x2>
 68e:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <PWMAction+0x3>
 692:	09 95       	icall
 694:	ff 91       	pop	r31
 696:	ef 91       	pop	r30
 698:	bf 91       	pop	r27
 69a:	af 91       	pop	r26
 69c:	9f 91       	pop	r25
 69e:	8f 91       	pop	r24
 6a0:	7f 91       	pop	r23
 6a2:	6f 91       	pop	r22
 6a4:	5f 91       	pop	r21
 6a6:	4f 91       	pop	r20
 6a8:	3f 91       	pop	r19
 6aa:	2f 91       	pop	r18
 6ac:	0f 90       	pop	r0
 6ae:	0f be       	out	0x3f, r0	; 63
 6b0:	0f 90       	pop	r0
 6b2:	1f 90       	pop	r1
 6b4:	18 95       	reti

000006b6 <__vector_14>:
			break;
		}
		else{/*MISRA C*/}	
	}
	return return_value;
}
 6b6:	1f 92       	push	r1
 6b8:	0f 92       	push	r0
 6ba:	0f b6       	in	r0, 0x3f	; 63
 6bc:	0f 92       	push	r0
 6be:	11 24       	eor	r1, r1
 6c0:	2f 93       	push	r18
 6c2:	3f 93       	push	r19
 6c4:	4f 93       	push	r20
 6c6:	5f 93       	push	r21
 6c8:	6f 93       	push	r22
 6ca:	7f 93       	push	r23
 6cc:	8f 93       	push	r24
 6ce:	9f 93       	push	r25
 6d0:	af 93       	push	r26
 6d2:	bf 93       	push	r27
 6d4:	ef 93       	push	r30
 6d6:	ff 93       	push	r31
 6d8:	cf 93       	push	r28
 6da:	df 93       	push	r29
 6dc:	1f 92       	push	r1
 6de:	cd b7       	in	r28, 0x3d	; 61
 6e0:	de b7       	in	r29, 0x3e	; 62
 6e2:	5d 9a       	sbi	0x0b, 5	; 11
 6e4:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <T_Flag>
 6e8:	82 30       	cpi	r24, 0x02	; 2
 6ea:	79 f4       	brne	.+30     	; 0x70a <__vector_14+0x54>
 6ec:	19 82       	std	Y+1, r1	; 0x01
 6ee:	be 01       	movw	r22, r28
 6f0:	6f 5f       	subi	r22, 0xFF	; 255
 6f2:	7f 4f       	sbci	r23, 0xFF	; 255
 6f4:	82 e6       	ldi	r24, 0x62	; 98
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	0e 94 1f 04 	call	0x83e	; 0x83e <DeQueue>
 6fc:	82 30       	cpi	r24, 0x02	; 2
 6fe:	19 f4       	brne	.+6      	; 0x706 <__vector_14+0x50>
 700:	55 98       	cbi	0x0a, 5	; 10
 702:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <T_Flag>
 706:	89 81       	ldd	r24, Y+1	; 0x01
 708:	8c b9       	out	0x0c, r24	; 12
 70a:	0f 90       	pop	r0
 70c:	df 91       	pop	r29
 70e:	cf 91       	pop	r28
 710:	ff 91       	pop	r31
 712:	ef 91       	pop	r30
 714:	bf 91       	pop	r27
 716:	af 91       	pop	r26
 718:	9f 91       	pop	r25
 71a:	8f 91       	pop	r24
 71c:	7f 91       	pop	r23
 71e:	6f 91       	pop	r22
 720:	5f 91       	pop	r21
 722:	4f 91       	pop	r20
 724:	3f 91       	pop	r19
 726:	2f 91       	pop	r18
 728:	0f 90       	pop	r0
 72a:	0f be       	out	0x3f, r0	; 63
 72c:	0f 90       	pop	r0
 72e:	1f 90       	pop	r1
 730:	18 95       	reti

00000732 <__vector_13>:
ISR(USART_RXC_vect)
{
 732:	1f 92       	push	r1
 734:	0f 92       	push	r0
 736:	0f b6       	in	r0, 0x3f	; 63
 738:	0f 92       	push	r0
 73a:	11 24       	eor	r1, r1
 73c:	2f 93       	push	r18
 73e:	3f 93       	push	r19
 740:	4f 93       	push	r20
 742:	5f 93       	push	r21
 744:	6f 93       	push	r22
 746:	7f 93       	push	r23
 748:	8f 93       	push	r24
 74a:	9f 93       	push	r25
 74c:	af 93       	push	r26
 74e:	bf 93       	push	r27
 750:	ef 93       	push	r30
 752:	ff 93       	push	r31
	UART.Flags.rciv_cmplt = ENABLE;
 754:	5f 9a       	sbi	0x0b, 7	; 11
	if(R_Flag == Available)
 756:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <R_Flag>
 75a:	81 11       	cpse	r24, r1
 75c:	08 c0       	rjmp	.+16     	; 0x76e <__vector_13+0x3c>
	{
		uint8_t Data = UART.Data;
 75e:	6c b1       	in	r22, 0x0c	; 12
		if(UART_EN_Buffer_Full == EnQueue(&R_Buffer, Data))
 760:	87 e6       	ldi	r24, 0x67	; 103
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	0e 94 c8 03 	call	0x790	; 0x790 <EnQueue>
 768:	81 30       	cpi	r24, 0x01	; 1
 76a:	09 f4       	brne	.+2      	; 0x76e <__vector_13+0x3c>
		{
			UART.Enables.rcivCompIntrrpt = DISABLE;
 76c:	57 98       	cbi	0x0a, 7	; 10
		}
		else{/*MISRA C*/}
	}
	else{/*MISRA C*/}
 76e:	ff 91       	pop	r31
 770:	ef 91       	pop	r30
 772:	bf 91       	pop	r27
 774:	af 91       	pop	r26
 776:	9f 91       	pop	r25
 778:	8f 91       	pop	r24
 77a:	7f 91       	pop	r23
 77c:	6f 91       	pop	r22
 77e:	5f 91       	pop	r21
 780:	4f 91       	pop	r20
 782:	3f 91       	pop	r19
 784:	2f 91       	pop	r18
 786:	0f 90       	pop	r0
 788:	0f be       	out	0x3f, r0	; 63
 78a:	0f 90       	pop	r0
 78c:	1f 90       	pop	r1
 78e:	18 95       	reti

00000790 <EnQueue>:
		return_value = Queue_EN_InvalidPointer;
	}
	return return_value;
}
Queue_Error_t	EnQueue			(BQueue_t* queue, uint8_t  Data)
{
 790:	0f 93       	push	r16
 792:	1f 93       	push	r17
 794:	cf 93       	push	r28
 796:	df 93       	push	r29
 798:	fc 01       	movw	r30, r24
 79a:	46 2f       	mov	r20, r22
	Queue_Error_t return_value = Queue_EN_valid;
	
	if (((queue->front==0)&&(queue->rear==queue->size-1))||(queue->rear==((queue->front-1)%(queue->size-1))))
 79c:	32 81       	ldd	r19, Z+2	; 0x02
 79e:	31 11       	cpse	r19, r1
 7a0:	0f c0       	rjmp	.+30     	; 0x7c0 <EnQueue+0x30>
 7a2:	23 81       	ldd	r18, Z+3	; 0x03
 7a4:	c2 2f       	mov	r28, r18
 7a6:	02 2e       	mov	r0, r18
 7a8:	00 0c       	add	r0, r0
 7aa:	dd 0b       	sbc	r29, r29
 7ac:	64 81       	ldd	r22, Z+4	; 0x04
 7ae:	06 2e       	mov	r0, r22
 7b0:	00 0c       	add	r0, r0
 7b2:	77 0b       	sbc	r23, r23
 7b4:	61 50       	subi	r22, 0x01	; 1
 7b6:	71 09       	sbc	r23, r1
 7b8:	c6 17       	cp	r28, r22
 7ba:	d7 07       	cpc	r29, r23
 7bc:	99 f5       	brne	.+102    	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 7be:	2c c0       	rjmp	.+88     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 7c0:	23 81       	ldd	r18, Z+3	; 0x03
 7c2:	02 2f       	mov	r16, r18
 7c4:	02 2e       	mov	r0, r18
 7c6:	00 0c       	add	r0, r0
 7c8:	11 0b       	sbc	r17, r17
 7ca:	c4 81       	ldd	r28, Z+4	; 0x04
 7cc:	0c 2e       	mov	r0, r28
 7ce:	00 0c       	add	r0, r0
 7d0:	dd 0b       	sbc	r29, r29
 7d2:	21 97       	sbiw	r28, 0x01	; 1
 7d4:	83 2f       	mov	r24, r19
 7d6:	03 2e       	mov	r0, r19
 7d8:	00 0c       	add	r0, r0
 7da:	99 0b       	sbc	r25, r25
 7dc:	01 97       	sbiw	r24, 0x01	; 1
 7de:	be 01       	movw	r22, r28
 7e0:	0e 94 39 06 	call	0xc72	; 0xc72 <__divmodhi4>
 7e4:	08 17       	cp	r16, r24
 7e6:	19 07       	cpc	r17, r25
 7e8:	c9 f0       	breq	.+50     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
	{
		return Queue_EN_Full;
	}
	else
	{
		if(queue->front == -1)
 7ea:	3f 3f       	cpi	r19, 0xFF	; 255
 7ec:	19 f4       	brne	.+6      	; 0x7f4 <EnQueue+0x64>
		{
			queue->front = 0;
 7ee:	12 82       	std	Z+2, r1	; 0x02
			queue->rear  = 0;
 7f0:	13 82       	std	Z+3, r1	; 0x03
 7f2:	07 c0       	rjmp	.+14     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
		}
		else if (queue->rear == queue->size-1 && queue->front != 0)
 7f4:	0c 17       	cp	r16, r28
 7f6:	1d 07       	cpc	r17, r29
 7f8:	11 f4       	brne	.+4      	; 0x7fe <EnQueue+0x6e>
		{
			queue->rear = 0;
 7fa:	13 82       	std	Z+3, r1	; 0x03
 7fc:	02 c0       	rjmp	.+4      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
		}
		else
		{
			queue->rear++;
 7fe:	2f 5f       	subi	r18, 0xFF	; 255
 800:	23 83       	std	Z+3, r18	; 0x03
		}
		queue->buffer[queue->rear] = Data;
 802:	83 81       	ldd	r24, Z+3	; 0x03
 804:	01 90       	ld	r0, Z+
 806:	f0 81       	ld	r31, Z
 808:	e0 2d       	mov	r30, r0
 80a:	e8 0f       	add	r30, r24
 80c:	f1 1d       	adc	r31, r1
 80e:	87 fd       	sbrc	r24, 7
 810:	fa 95       	dec	r31
 812:	40 83       	st	Z, r20
	} 	
	return return_value;
 814:	80 e0       	ldi	r24, 0x00	; 0
 816:	0e c0       	rjmp	.+28     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
{
	Queue_Error_t return_value = Queue_EN_valid;
	
	if (((queue->front==0)&&(queue->rear==queue->size-1))||(queue->rear==((queue->front-1)%(queue->size-1))))
	{
		return Queue_EN_Full;
 818:	81 e0       	ldi	r24, 0x01	; 1
 81a:	0c c0       	rjmp	.+24     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 81c:	81 e0       	ldi	r24, 0x01	; 1
 81e:	0a c0       	rjmp	.+20     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 820:	81 e0       	ldi	r24, 0x01	; 1
 822:	08 c0       	rjmp	.+16     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
}
Queue_Error_t	EnQueue			(BQueue_t* queue, uint8_t  Data)
{
	Queue_Error_t return_value = Queue_EN_valid;
	
	if (((queue->front==0)&&(queue->rear==queue->size-1))||(queue->rear==((queue->front-1)%(queue->size-1))))
 824:	8f ef       	ldi	r24, 0xFF	; 255
 826:	9f ef       	ldi	r25, 0xFF	; 255
 828:	0e 94 39 06 	call	0xc72	; 0xc72 <__divmodhi4>
 82c:	c8 17       	cp	r28, r24
 82e:	d9 07       	cpc	r29, r25
 830:	31 f7       	brne	.-52     	; 0x7fe <EnQueue+0x6e>
 832:	f6 cf       	rjmp	.-20     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
			queue->rear++;
		}
		queue->buffer[queue->rear] = Data;
	} 	
	return return_value;
}
 834:	df 91       	pop	r29
 836:	cf 91       	pop	r28
 838:	1f 91       	pop	r17
 83a:	0f 91       	pop	r16
 83c:	08 95       	ret

0000083e <DeQueue>:
Queue_Error_t	DeQueue			(BQueue_t* queue, uint8_t* Data)
{
 83e:	fc 01       	movw	r30, r24
	Queue_Error_t return_value = Queue_EN_valid;
	
	if (queue->front == -1)
 840:	82 81       	ldd	r24, Z+2	; 0x02
 842:	8f 3f       	cpi	r24, 0xFF	; 255
 844:	29 f1       	breq	.+74     	; 0x890 <__stack+0x31>
	{
		return_value = Queue_EN_Empty;
	}
	else
	{
		*Data = queue->buffer[queue->front];
 846:	a0 81       	ld	r26, Z
 848:	b1 81       	ldd	r27, Z+1	; 0x01
 84a:	a8 0f       	add	r26, r24
 84c:	b1 1d       	adc	r27, r1
 84e:	87 fd       	sbrc	r24, 7
 850:	ba 95       	dec	r27
 852:	8c 91       	ld	r24, X
 854:	db 01       	movw	r26, r22
 856:	8c 93       	st	X, r24
		if (queue->front == queue->rear)
 858:	22 81       	ldd	r18, Z+2	; 0x02
 85a:	83 81       	ldd	r24, Z+3	; 0x03
 85c:	28 13       	cpse	r18, r24
 85e:	05 c0       	rjmp	.+10     	; 0x86a <__stack+0xb>
		{
			queue->front = -1;
 860:	8f ef       	ldi	r24, 0xFF	; 255
 862:	82 83       	std	Z+2, r24	; 0x02
			queue->rear  = -1;
 864:	83 83       	std	Z+3, r24	; 0x03
	} 	
	return return_value;
}
Queue_Error_t	DeQueue			(BQueue_t* queue, uint8_t* Data)
{
	Queue_Error_t return_value = Queue_EN_valid;
 866:	80 e0       	ldi	r24, 0x00	; 0
 868:	08 95       	ret
		if (queue->front == queue->rear)
		{
			queue->front = -1;
			queue->rear  = -1;
		}
		else if (queue->front == queue->size-1)
 86a:	84 81       	ldd	r24, Z+4	; 0x04
 86c:	08 2e       	mov	r0, r24
 86e:	00 0c       	add	r0, r0
 870:	99 0b       	sbc	r25, r25
 872:	01 97       	sbiw	r24, 0x01	; 1
 874:	42 2f       	mov	r20, r18
 876:	02 2e       	mov	r0, r18
 878:	00 0c       	add	r0, r0
 87a:	55 0b       	sbc	r21, r21
 87c:	48 17       	cp	r20, r24
 87e:	59 07       	cpc	r21, r25
 880:	19 f4       	brne	.+6      	; 0x888 <__stack+0x29>
		{
			queue->front = 0;
 882:	12 82       	std	Z+2, r1	; 0x02
	} 	
	return return_value;
}
Queue_Error_t	DeQueue			(BQueue_t* queue, uint8_t* Data)
{
	Queue_Error_t return_value = Queue_EN_valid;
 884:	80 e0       	ldi	r24, 0x00	; 0
 886:	08 95       	ret
		{
			queue->front = 0;
		}
		else
		{
			queue->front++;	
 888:	2f 5f       	subi	r18, 0xFF	; 255
 88a:	22 83       	std	Z+2, r18	; 0x02
	} 	
	return return_value;
}
Queue_Error_t	DeQueue			(BQueue_t* queue, uint8_t* Data)
{
	Queue_Error_t return_value = Queue_EN_valid;
 88c:	80 e0       	ldi	r24, 0x00	; 0
 88e:	08 95       	ret
	
	if (queue->front == -1)
	{
		return_value = Queue_EN_Empty;
 890:	82 e0       	ldi	r24, 0x02	; 2
		{
			queue->front++;	
		}
	}
	return return_value;
 892:	08 95       	ret

00000894 <vListInsertEnd>:
	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
}
 894:	cf 93       	push	r28
 896:	df 93       	push	r29
 898:	9c 01       	movw	r18, r24
 89a:	fb 01       	movw	r30, r22
 89c:	dc 01       	movw	r26, r24
 89e:	11 96       	adiw	r26, 0x01	; 1
 8a0:	cd 91       	ld	r28, X+
 8a2:	dc 91       	ld	r29, X
 8a4:	12 97       	sbiw	r26, 0x02	; 2
 8a6:	d3 83       	std	Z+3, r29	; 0x03
 8a8:	c2 83       	std	Z+2, r28	; 0x02
 8aa:	8c 81       	ldd	r24, Y+4	; 0x04
 8ac:	9d 81       	ldd	r25, Y+5	; 0x05
 8ae:	95 83       	std	Z+5, r25	; 0x05
 8b0:	84 83       	std	Z+4, r24	; 0x04
 8b2:	8c 81       	ldd	r24, Y+4	; 0x04
 8b4:	9d 81       	ldd	r25, Y+5	; 0x05
 8b6:	dc 01       	movw	r26, r24
 8b8:	13 96       	adiw	r26, 0x03	; 3
 8ba:	7c 93       	st	X, r23
 8bc:	6e 93       	st	-X, r22
 8be:	12 97       	sbiw	r26, 0x02	; 2
 8c0:	7d 83       	std	Y+5, r23	; 0x05
 8c2:	6c 83       	std	Y+4, r22	; 0x04
 8c4:	31 87       	std	Z+9, r19	; 0x09
 8c6:	20 87       	std	Z+8, r18	; 0x08
 8c8:	f9 01       	movw	r30, r18
 8ca:	80 81       	ld	r24, Z
 8cc:	8f 5f       	subi	r24, 0xFF	; 255
 8ce:	80 83       	st	Z, r24
 8d0:	df 91       	pop	r29
 8d2:	cf 91       	pop	r28
 8d4:	08 95       	ret

000008d6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8d6:	cf 93       	push	r28
 8d8:	df 93       	push	r29
 8da:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8dc:	a0 85       	ldd	r26, Z+8	; 0x08
 8de:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8e0:	c2 81       	ldd	r28, Z+2	; 0x02
 8e2:	d3 81       	ldd	r29, Z+3	; 0x03
 8e4:	84 81       	ldd	r24, Z+4	; 0x04
 8e6:	95 81       	ldd	r25, Z+5	; 0x05
 8e8:	9d 83       	std	Y+5, r25	; 0x05
 8ea:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8ec:	c4 81       	ldd	r28, Z+4	; 0x04
 8ee:	d5 81       	ldd	r29, Z+5	; 0x05
 8f0:	82 81       	ldd	r24, Z+2	; 0x02
 8f2:	93 81       	ldd	r25, Z+3	; 0x03
 8f4:	9b 83       	std	Y+3, r25	; 0x03
 8f6:	8a 83       	std	Y+2, r24	; 0x02

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8f8:	11 96       	adiw	r26, 0x01	; 1
 8fa:	8d 91       	ld	r24, X+
 8fc:	9c 91       	ld	r25, X
 8fe:	12 97       	sbiw	r26, 0x02	; 2
 900:	e8 17       	cp	r30, r24
 902:	f9 07       	cpc	r31, r25
 904:	31 f4       	brne	.+12     	; 0x912 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 906:	84 81       	ldd	r24, Z+4	; 0x04
 908:	95 81       	ldd	r25, Z+5	; 0x05
 90a:	12 96       	adiw	r26, 0x02	; 2
 90c:	9c 93       	st	X, r25
 90e:	8e 93       	st	-X, r24
 910:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 912:	11 86       	std	Z+9, r1	; 0x09
 914:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 916:	8c 91       	ld	r24, X
 918:	81 50       	subi	r24, 0x01	; 1
 91a:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
 91c:	df 91       	pop	r29
 91e:	cf 91       	pop	r28
 920:	08 95       	ret

00000922 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 922:	0f 92       	push	r0
 924:	0f b6       	in	r0, 0x3f	; 63
 926:	f8 94       	cli
 928:	0f 92       	push	r0
 92a:	1f 92       	push	r1
 92c:	11 24       	eor	r1, r1
 92e:	2f 92       	push	r2
 930:	3f 92       	push	r3
 932:	4f 92       	push	r4
 934:	5f 92       	push	r5
 936:	6f 92       	push	r6
 938:	7f 92       	push	r7
 93a:	8f 92       	push	r8
 93c:	9f 92       	push	r9
 93e:	af 92       	push	r10
 940:	bf 92       	push	r11
 942:	cf 92       	push	r12
 944:	df 92       	push	r13
 946:	ef 92       	push	r14
 948:	ff 92       	push	r15
 94a:	0f 93       	push	r16
 94c:	1f 93       	push	r17
 94e:	2f 93       	push	r18
 950:	3f 93       	push	r19
 952:	4f 93       	push	r20
 954:	5f 93       	push	r21
 956:	6f 93       	push	r22
 958:	7f 93       	push	r23
 95a:	8f 93       	push	r24
 95c:	9f 93       	push	r25
 95e:	af 93       	push	r26
 960:	bf 93       	push	r27
 962:	cf 93       	push	r28
 964:	df 93       	push	r29
 966:	ef 93       	push	r30
 968:	ff 93       	push	r31
 96a:	a0 91 df 00 	lds	r26, 0x00DF	; 0x8000df <pxCurrentTCB>
 96e:	b0 91 e0 00 	lds	r27, 0x00E0	; 0x8000e0 <pxCurrentTCB+0x1>
 972:	0d b6       	in	r0, 0x3d	; 61
 974:	0d 92       	st	X+, r0
 976:	0e b6       	in	r0, 0x3e	; 62
 978:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
 97a:	0e 94 0f 05 	call	0xa1e	; 0xa1e <xTaskIncrementTick>
 97e:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
 980:	0e 94 cc 05 	call	0xb98	; 0xb98 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
 984:	a0 91 df 00 	lds	r26, 0x00DF	; 0x8000df <pxCurrentTCB>
 988:	b0 91 e0 00 	lds	r27, 0x00E0	; 0x8000e0 <pxCurrentTCB+0x1>
 98c:	cd 91       	ld	r28, X+
 98e:	cd bf       	out	0x3d, r28	; 61
 990:	dd 91       	ld	r29, X+
 992:	de bf       	out	0x3e, r29	; 62
 994:	ff 91       	pop	r31
 996:	ef 91       	pop	r30
 998:	df 91       	pop	r29
 99a:	cf 91       	pop	r28
 99c:	bf 91       	pop	r27
 99e:	af 91       	pop	r26
 9a0:	9f 91       	pop	r25
 9a2:	8f 91       	pop	r24
 9a4:	7f 91       	pop	r23
 9a6:	6f 91       	pop	r22
 9a8:	5f 91       	pop	r21
 9aa:	4f 91       	pop	r20
 9ac:	3f 91       	pop	r19
 9ae:	2f 91       	pop	r18
 9b0:	1f 91       	pop	r17
 9b2:	0f 91       	pop	r16
 9b4:	ff 90       	pop	r15
 9b6:	ef 90       	pop	r14
 9b8:	df 90       	pop	r13
 9ba:	cf 90       	pop	r12
 9bc:	bf 90       	pop	r11
 9be:	af 90       	pop	r10
 9c0:	9f 90       	pop	r9
 9c2:	8f 90       	pop	r8
 9c4:	7f 90       	pop	r7
 9c6:	6f 90       	pop	r6
 9c8:	5f 90       	pop	r5
 9ca:	4f 90       	pop	r4
 9cc:	3f 90       	pop	r3
 9ce:	2f 90       	pop	r2
 9d0:	1f 90       	pop	r1
 9d2:	0f 90       	pop	r0
 9d4:	0f be       	out	0x3f, r0	; 63
 9d6:	0f 90       	pop	r0

	asm volatile ( "ret" );
 9d8:	08 95       	ret

000009da <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
 9da:	0e 94 91 04 	call	0x922	; 0x922 <vPortYieldFromTick>
		asm volatile ( "reti" );
 9de:	18 95       	reti

000009e0 <prvResetNextTaskUnblockTime>:
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
			{
				taskYIELD();
 9e0:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <pxDelayedTaskList>
 9e4:	f0 91 ba 00 	lds	r31, 0x00BA	; 0x8000ba <pxDelayedTaskList+0x1>
 9e8:	80 81       	ld	r24, Z
 9ea:	81 11       	cpse	r24, r1
 9ec:	07 c0       	rjmp	.+14     	; 0x9fc <prvResetNextTaskUnblockTime+0x1c>
 9ee:	8f ef       	ldi	r24, 0xFF	; 255
 9f0:	9f ef       	ldi	r25, 0xFF	; 255
 9f2:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <xNextTaskUnblockTime+0x1>
 9f6:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <xNextTaskUnblockTime>
 9fa:	08 95       	ret
 9fc:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <pxDelayedTaskList>
 a00:	f0 91 ba 00 	lds	r31, 0x00BA	; 0x8000ba <pxDelayedTaskList+0x1>
 a04:	05 80       	ldd	r0, Z+5	; 0x05
 a06:	f6 81       	ldd	r31, Z+6	; 0x06
 a08:	e0 2d       	mov	r30, r0
 a0a:	06 80       	ldd	r0, Z+6	; 0x06
 a0c:	f7 81       	ldd	r31, Z+7	; 0x07
 a0e:	e0 2d       	mov	r30, r0
 a10:	82 81       	ldd	r24, Z+2	; 0x02
 a12:	93 81       	ldd	r25, Z+3	; 0x03
 a14:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <xNextTaskUnblockTime+0x1>
 a18:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <xNextTaskUnblockTime>
 a1c:	08 95       	ret

00000a1e <xTaskIncrementTick>:
 a1e:	cf 92       	push	r12
 a20:	df 92       	push	r13
 a22:	ef 92       	push	r14
 a24:	ff 92       	push	r15
 a26:	0f 93       	push	r16
 a28:	1f 93       	push	r17
 a2a:	cf 93       	push	r28
 a2c:	df 93       	push	r29
 a2e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <uxSchedulerSuspended>
 a32:	81 11       	cpse	r24, r1
 a34:	9b c0       	rjmp	.+310    	; 0xb6c <xTaskIncrementTick+0x14e>
 a36:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <xTickCount>
 a3a:	90 91 b6 00 	lds	r25, 0x00B6	; 0x8000b6 <xTickCount+0x1>
 a3e:	01 96       	adiw	r24, 0x01	; 1
 a40:	90 93 b6 00 	sts	0x00B6, r25	; 0x8000b6 <xTickCount+0x1>
 a44:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <xTickCount>
 a48:	e0 90 b5 00 	lds	r14, 0x00B5	; 0x8000b5 <xTickCount>
 a4c:	f0 90 b6 00 	lds	r15, 0x00B6	; 0x8000b6 <xTickCount+0x1>
 a50:	e1 14       	cp	r14, r1
 a52:	f1 04       	cpc	r15, r1
 a54:	b9 f4       	brne	.+46     	; 0xa84 <xTaskIncrementTick+0x66>
 a56:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <pxDelayedTaskList>
 a5a:	90 91 ba 00 	lds	r25, 0x00BA	; 0x8000ba <pxDelayedTaskList+0x1>
 a5e:	20 91 b7 00 	lds	r18, 0x00B7	; 0x8000b7 <pxOverflowDelayedTaskList>
 a62:	30 91 b8 00 	lds	r19, 0x00B8	; 0x8000b8 <pxOverflowDelayedTaskList+0x1>
 a66:	30 93 ba 00 	sts	0x00BA, r19	; 0x8000ba <pxDelayedTaskList+0x1>
 a6a:	20 93 b9 00 	sts	0x00B9, r18	; 0x8000b9 <pxDelayedTaskList>
 a6e:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <pxOverflowDelayedTaskList+0x1>
 a72:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <pxOverflowDelayedTaskList>
 a76:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <xNumOfOverflows>
 a7a:	8f 5f       	subi	r24, 0xFF	; 255
 a7c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <xNumOfOverflows>
 a80:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <prvResetNextTaskUnblockTime>
 a84:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <xNextTaskUnblockTime>
 a88:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <xNextTaskUnblockTime+0x1>
 a8c:	e8 16       	cp	r14, r24
 a8e:	f9 06       	cpc	r15, r25
 a90:	10 f4       	brcc	.+4      	; 0xa96 <xTaskIncrementTick+0x78>
 a92:	d1 2c       	mov	r13, r1
 a94:	53 c0       	rjmp	.+166    	; 0xb3c <xTaskIncrementTick+0x11e>
 a96:	d1 2c       	mov	r13, r1
 a98:	cc 24       	eor	r12, r12
 a9a:	c3 94       	inc	r12
 a9c:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <pxDelayedTaskList>
 aa0:	f0 91 ba 00 	lds	r31, 0x00BA	; 0x8000ba <pxDelayedTaskList+0x1>
 aa4:	80 81       	ld	r24, Z
 aa6:	81 11       	cpse	r24, r1
 aa8:	07 c0       	rjmp	.+14     	; 0xab8 <xTaskIncrementTick+0x9a>
 aaa:	8f ef       	ldi	r24, 0xFF	; 255
 aac:	9f ef       	ldi	r25, 0xFF	; 255
 aae:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <xNextTaskUnblockTime+0x1>
 ab2:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <xNextTaskUnblockTime>
 ab6:	42 c0       	rjmp	.+132    	; 0xb3c <xTaskIncrementTick+0x11e>
 ab8:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <pxDelayedTaskList>
 abc:	f0 91 ba 00 	lds	r31, 0x00BA	; 0x8000ba <pxDelayedTaskList+0x1>
 ac0:	05 80       	ldd	r0, Z+5	; 0x05
 ac2:	f6 81       	ldd	r31, Z+6	; 0x06
 ac4:	e0 2d       	mov	r30, r0
 ac6:	c6 81       	ldd	r28, Z+6	; 0x06
 ac8:	d7 81       	ldd	r29, Z+7	; 0x07
 aca:	8a 81       	ldd	r24, Y+2	; 0x02
 acc:	9b 81       	ldd	r25, Y+3	; 0x03
 ace:	e8 16       	cp	r14, r24
 ad0:	f9 06       	cpc	r15, r25
 ad2:	28 f4       	brcc	.+10     	; 0xade <xTaskIncrementTick+0xc0>
 ad4:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <xNextTaskUnblockTime+0x1>
 ad8:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <xNextTaskUnblockTime>
 adc:	2f c0       	rjmp	.+94     	; 0xb3c <xTaskIncrementTick+0x11e>
 ade:	8e 01       	movw	r16, r28
 ae0:	0e 5f       	subi	r16, 0xFE	; 254
 ae2:	1f 4f       	sbci	r17, 0xFF	; 255
 ae4:	c8 01       	movw	r24, r16
 ae6:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <uxListRemove>
 aea:	8c 89       	ldd	r24, Y+20	; 0x14
 aec:	9d 89       	ldd	r25, Y+21	; 0x15
 aee:	89 2b       	or	r24, r25
 af0:	21 f0       	breq	.+8      	; 0xafa <xTaskIncrementTick+0xdc>
 af2:	ce 01       	movw	r24, r28
 af4:	0c 96       	adiw	r24, 0x0c	; 12
 af6:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <uxListRemove>
 afa:	8e 89       	ldd	r24, Y+22	; 0x16
 afc:	90 91 b4 00 	lds	r25, 0x00B4	; 0x8000b4 <uxTopReadyPriority>
 b00:	98 17       	cp	r25, r24
 b02:	10 f4       	brcc	.+4      	; 0xb08 <xTaskIncrementTick+0xea>
 b04:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <uxTopReadyPriority>
 b08:	90 e0       	ldi	r25, 0x00	; 0
 b0a:	9c 01       	movw	r18, r24
 b0c:	22 0f       	add	r18, r18
 b0e:	33 1f       	adc	r19, r19
 b10:	22 0f       	add	r18, r18
 b12:	33 1f       	adc	r19, r19
 b14:	22 0f       	add	r18, r18
 b16:	33 1f       	adc	r19, r19
 b18:	82 0f       	add	r24, r18
 b1a:	93 1f       	adc	r25, r19
 b1c:	b8 01       	movw	r22, r16
 b1e:	85 54       	subi	r24, 0x45	; 69
 b20:	9f 4f       	sbci	r25, 0xFF	; 255
 b22:	0e 94 4a 04 	call	0x894	; 0x894 <vListInsertEnd>
 b26:	e0 91 df 00 	lds	r30, 0x00DF	; 0x8000df <pxCurrentTCB>
 b2a:	f0 91 e0 00 	lds	r31, 0x00E0	; 0x8000e0 <pxCurrentTCB+0x1>
 b2e:	9e 89       	ldd	r25, Y+22	; 0x16
 b30:	86 89       	ldd	r24, Z+22	; 0x16
 b32:	98 17       	cp	r25, r24
 b34:	08 f4       	brcc	.+2      	; 0xb38 <xTaskIncrementTick+0x11a>
 b36:	b2 cf       	rjmp	.-156    	; 0xa9c <xTaskIncrementTick+0x7e>
 b38:	dc 2c       	mov	r13, r12
 b3a:	b0 cf       	rjmp	.-160    	; 0xa9c <xTaskIncrementTick+0x7e>
 b3c:	e0 91 df 00 	lds	r30, 0x00DF	; 0x8000df <pxCurrentTCB>
 b40:	f0 91 e0 00 	lds	r31, 0x00E0	; 0x8000e0 <pxCurrentTCB+0x1>
 b44:	86 89       	ldd	r24, Z+22	; 0x16
 b46:	90 e0       	ldi	r25, 0x00	; 0
 b48:	fc 01       	movw	r30, r24
 b4a:	ee 0f       	add	r30, r30
 b4c:	ff 1f       	adc	r31, r31
 b4e:	ee 0f       	add	r30, r30
 b50:	ff 1f       	adc	r31, r31
 b52:	ee 0f       	add	r30, r30
 b54:	ff 1f       	adc	r31, r31
 b56:	8e 0f       	add	r24, r30
 b58:	9f 1f       	adc	r25, r31
 b5a:	fc 01       	movw	r30, r24
 b5c:	e5 54       	subi	r30, 0x45	; 69
 b5e:	ff 4f       	sbci	r31, 0xFF	; 255
 b60:	80 81       	ld	r24, Z
 b62:	82 30       	cpi	r24, 0x02	; 2
 b64:	48 f0       	brcs	.+18     	; 0xb78 <xTaskIncrementTick+0x15a>
 b66:	dd 24       	eor	r13, r13
 b68:	d3 94       	inc	r13
 b6a:	06 c0       	rjmp	.+12     	; 0xb78 <xTaskIncrementTick+0x15a>
 b6c:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <uxPendedTicks>
 b70:	8f 5f       	subi	r24, 0xFF	; 255
 b72:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <uxPendedTicks>
 b76:	d1 2c       	mov	r13, r1
 b78:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <xYieldPending>
 b7c:	88 23       	and	r24, r24
 b7e:	11 f0       	breq	.+4      	; 0xb84 <xTaskIncrementTick+0x166>
 b80:	dd 24       	eor	r13, r13
 b82:	d3 94       	inc	r13
 b84:	8d 2d       	mov	r24, r13
 b86:	df 91       	pop	r29
 b88:	cf 91       	pop	r28
 b8a:	1f 91       	pop	r17
 b8c:	0f 91       	pop	r16
 b8e:	ff 90       	pop	r15
 b90:	ef 90       	pop	r14
 b92:	df 90       	pop	r13
 b94:	cf 90       	pop	r12
 b96:	08 95       	ret

00000b98 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 b98:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <uxSchedulerSuspended>
 b9c:	88 23       	and	r24, r24
 b9e:	21 f0       	breq	.+8      	; 0xba8 <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 ba0:	81 e0       	ldi	r24, 0x01	; 1
 ba2:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <xYieldPending>
 ba6:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
 ba8:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <xYieldPending>
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 bac:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <uxTopReadyPriority>
 bb0:	90 e0       	ldi	r25, 0x00	; 0
 bb2:	fc 01       	movw	r30, r24
 bb4:	ee 0f       	add	r30, r30
 bb6:	ff 1f       	adc	r31, r31
 bb8:	ee 0f       	add	r30, r30
 bba:	ff 1f       	adc	r31, r31
 bbc:	ee 0f       	add	r30, r30
 bbe:	ff 1f       	adc	r31, r31
 bc0:	8e 0f       	add	r24, r30
 bc2:	9f 1f       	adc	r25, r31
 bc4:	fc 01       	movw	r30, r24
 bc6:	e5 54       	subi	r30, 0x45	; 69
 bc8:	ff 4f       	sbci	r31, 0xFF	; 255
 bca:	80 81       	ld	r24, Z
 bcc:	81 11       	cpse	r24, r1
 bce:	17 c0       	rjmp	.+46     	; 0xbfe <vTaskSwitchContext+0x66>
 bd0:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <uxTopReadyPriority>
 bd4:	81 50       	subi	r24, 0x01	; 1
 bd6:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <uxTopReadyPriority>
 bda:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <uxTopReadyPriority>
 bde:	90 e0       	ldi	r25, 0x00	; 0
 be0:	fc 01       	movw	r30, r24
 be2:	ee 0f       	add	r30, r30
 be4:	ff 1f       	adc	r31, r31
 be6:	ee 0f       	add	r30, r30
 be8:	ff 1f       	adc	r31, r31
 bea:	ee 0f       	add	r30, r30
 bec:	ff 1f       	adc	r31, r31
 bee:	8e 0f       	add	r24, r30
 bf0:	9f 1f       	adc	r25, r31
 bf2:	fc 01       	movw	r30, r24
 bf4:	e5 54       	subi	r30, 0x45	; 69
 bf6:	ff 4f       	sbci	r31, 0xFF	; 255
 bf8:	80 81       	ld	r24, Z
 bfa:	88 23       	and	r24, r24
 bfc:	49 f3       	breq	.-46     	; 0xbd0 <vTaskSwitchContext+0x38>
 bfe:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <uxTopReadyPriority>
 c02:	90 e0       	ldi	r25, 0x00	; 0
 c04:	9c 01       	movw	r18, r24
 c06:	22 0f       	add	r18, r18
 c08:	33 1f       	adc	r19, r19
 c0a:	22 0f       	add	r18, r18
 c0c:	33 1f       	adc	r19, r19
 c0e:	22 0f       	add	r18, r18
 c10:	33 1f       	adc	r19, r19
 c12:	28 0f       	add	r18, r24
 c14:	39 1f       	adc	r19, r25
 c16:	d9 01       	movw	r26, r18
 c18:	a5 54       	subi	r26, 0x45	; 69
 c1a:	bf 4f       	sbci	r27, 0xFF	; 255
 c1c:	11 96       	adiw	r26, 0x01	; 1
 c1e:	ed 91       	ld	r30, X+
 c20:	fc 91       	ld	r31, X
 c22:	12 97       	sbiw	r26, 0x02	; 2
 c24:	02 80       	ldd	r0, Z+2	; 0x02
 c26:	f3 81       	ldd	r31, Z+3	; 0x03
 c28:	e0 2d       	mov	r30, r0
 c2a:	12 96       	adiw	r26, 0x02	; 2
 c2c:	fc 93       	st	X, r31
 c2e:	ee 93       	st	-X, r30
 c30:	11 97       	sbiw	r26, 0x01	; 1
 c32:	22 54       	subi	r18, 0x42	; 66
 c34:	3f 4f       	sbci	r19, 0xFF	; 255
 c36:	e2 17       	cp	r30, r18
 c38:	f3 07       	cpc	r31, r19
 c3a:	29 f4       	brne	.+10     	; 0xc46 <vTaskSwitchContext+0xae>
 c3c:	22 81       	ldd	r18, Z+2	; 0x02
 c3e:	33 81       	ldd	r19, Z+3	; 0x03
 c40:	fd 01       	movw	r30, r26
 c42:	32 83       	std	Z+2, r19	; 0x02
 c44:	21 83       	std	Z+1, r18	; 0x01
 c46:	fc 01       	movw	r30, r24
 c48:	ee 0f       	add	r30, r30
 c4a:	ff 1f       	adc	r31, r31
 c4c:	ee 0f       	add	r30, r30
 c4e:	ff 1f       	adc	r31, r31
 c50:	ee 0f       	add	r30, r30
 c52:	ff 1f       	adc	r31, r31
 c54:	8e 0f       	add	r24, r30
 c56:	9f 1f       	adc	r25, r31
 c58:	fc 01       	movw	r30, r24
 c5a:	e5 54       	subi	r30, 0x45	; 69
 c5c:	ff 4f       	sbci	r31, 0xFF	; 255
 c5e:	01 80       	ldd	r0, Z+1	; 0x01
 c60:	f2 81       	ldd	r31, Z+2	; 0x02
 c62:	e0 2d       	mov	r30, r0
 c64:	86 81       	ldd	r24, Z+6	; 0x06
 c66:	97 81       	ldd	r25, Z+7	; 0x07
 c68:	90 93 e0 00 	sts	0x00E0, r25	; 0x8000e0 <pxCurrentTCB+0x1>
 c6c:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <pxCurrentTCB>
 c70:	08 95       	ret

00000c72 <__divmodhi4>:
 c72:	97 fb       	bst	r25, 7
 c74:	07 2e       	mov	r0, r23
 c76:	16 f4       	brtc	.+4      	; 0xc7c <__divmodhi4+0xa>
 c78:	00 94       	com	r0
 c7a:	07 d0       	rcall	.+14     	; 0xc8a <__divmodhi4_neg1>
 c7c:	77 fd       	sbrc	r23, 7
 c7e:	09 d0       	rcall	.+18     	; 0xc92 <__divmodhi4_neg2>
 c80:	0e 94 90 06 	call	0xd20	; 0xd20 <__udivmodhi4>
 c84:	07 fc       	sbrc	r0, 7
 c86:	05 d0       	rcall	.+10     	; 0xc92 <__divmodhi4_neg2>
 c88:	3e f4       	brtc	.+14     	; 0xc98 <__divmodhi4_exit>

00000c8a <__divmodhi4_neg1>:
 c8a:	90 95       	com	r25
 c8c:	81 95       	neg	r24
 c8e:	9f 4f       	sbci	r25, 0xFF	; 255
 c90:	08 95       	ret

00000c92 <__divmodhi4_neg2>:
 c92:	70 95       	com	r23
 c94:	61 95       	neg	r22
 c96:	7f 4f       	sbci	r23, 0xFF	; 255

00000c98 <__divmodhi4_exit>:
 c98:	08 95       	ret

00000c9a <__udivmodsi4>:
 c9a:	a1 e2       	ldi	r26, 0x21	; 33
 c9c:	1a 2e       	mov	r1, r26
 c9e:	aa 1b       	sub	r26, r26
 ca0:	bb 1b       	sub	r27, r27
 ca2:	fd 01       	movw	r30, r26
 ca4:	0d c0       	rjmp	.+26     	; 0xcc0 <__udivmodsi4_ep>

00000ca6 <__udivmodsi4_loop>:
 ca6:	aa 1f       	adc	r26, r26
 ca8:	bb 1f       	adc	r27, r27
 caa:	ee 1f       	adc	r30, r30
 cac:	ff 1f       	adc	r31, r31
 cae:	a2 17       	cp	r26, r18
 cb0:	b3 07       	cpc	r27, r19
 cb2:	e4 07       	cpc	r30, r20
 cb4:	f5 07       	cpc	r31, r21
 cb6:	20 f0       	brcs	.+8      	; 0xcc0 <__udivmodsi4_ep>
 cb8:	a2 1b       	sub	r26, r18
 cba:	b3 0b       	sbc	r27, r19
 cbc:	e4 0b       	sbc	r30, r20
 cbe:	f5 0b       	sbc	r31, r21

00000cc0 <__udivmodsi4_ep>:
 cc0:	66 1f       	adc	r22, r22
 cc2:	77 1f       	adc	r23, r23
 cc4:	88 1f       	adc	r24, r24
 cc6:	99 1f       	adc	r25, r25
 cc8:	1a 94       	dec	r1
 cca:	69 f7       	brne	.-38     	; 0xca6 <__udivmodsi4_loop>
 ccc:	60 95       	com	r22
 cce:	70 95       	com	r23
 cd0:	80 95       	com	r24
 cd2:	90 95       	com	r25
 cd4:	9b 01       	movw	r18, r22
 cd6:	ac 01       	movw	r20, r24
 cd8:	bd 01       	movw	r22, r26
 cda:	cf 01       	movw	r24, r30
 cdc:	08 95       	ret

00000cde <__adddi3_s8>:
 cde:	00 24       	eor	r0, r0
 ce0:	a7 fd       	sbrc	r26, 7
 ce2:	00 94       	com	r0
 ce4:	2a 0f       	add	r18, r26
 ce6:	30 1d       	adc	r19, r0
 ce8:	40 1d       	adc	r20, r0
 cea:	50 1d       	adc	r21, r0
 cec:	60 1d       	adc	r22, r0
 cee:	70 1d       	adc	r23, r0
 cf0:	80 1d       	adc	r24, r0
 cf2:	90 1d       	adc	r25, r0
 cf4:	08 95       	ret

00000cf6 <__cmpdi2>:
 cf6:	2a 15       	cp	r18, r10
 cf8:	3b 05       	cpc	r19, r11
 cfa:	4c 05       	cpc	r20, r12
 cfc:	5d 05       	cpc	r21, r13
 cfe:	6e 05       	cpc	r22, r14
 d00:	7f 05       	cpc	r23, r15
 d02:	80 07       	cpc	r24, r16
 d04:	91 07       	cpc	r25, r17
 d06:	08 95       	ret

00000d08 <__cmpdi2_s8>:
 d08:	00 24       	eor	r0, r0
 d0a:	a7 fd       	sbrc	r26, 7
 d0c:	00 94       	com	r0
 d0e:	2a 17       	cp	r18, r26
 d10:	30 05       	cpc	r19, r0
 d12:	40 05       	cpc	r20, r0
 d14:	50 05       	cpc	r21, r0
 d16:	60 05       	cpc	r22, r0
 d18:	70 05       	cpc	r23, r0
 d1a:	80 05       	cpc	r24, r0
 d1c:	90 05       	cpc	r25, r0
 d1e:	08 95       	ret

00000d20 <__udivmodhi4>:
 d20:	aa 1b       	sub	r26, r26
 d22:	bb 1b       	sub	r27, r27
 d24:	51 e1       	ldi	r21, 0x11	; 17
 d26:	07 c0       	rjmp	.+14     	; 0xd36 <__udivmodhi4_ep>

00000d28 <__udivmodhi4_loop>:
 d28:	aa 1f       	adc	r26, r26
 d2a:	bb 1f       	adc	r27, r27
 d2c:	a6 17       	cp	r26, r22
 d2e:	b7 07       	cpc	r27, r23
 d30:	10 f0       	brcs	.+4      	; 0xd36 <__udivmodhi4_ep>
 d32:	a6 1b       	sub	r26, r22
 d34:	b7 0b       	sbc	r27, r23

00000d36 <__udivmodhi4_ep>:
 d36:	88 1f       	adc	r24, r24
 d38:	99 1f       	adc	r25, r25
 d3a:	5a 95       	dec	r21
 d3c:	a9 f7       	brne	.-22     	; 0xd28 <__udivmodhi4_loop>
 d3e:	80 95       	com	r24
 d40:	90 95       	com	r25
 d42:	bc 01       	movw	r22, r24
 d44:	cd 01       	movw	r24, r26
 d46:	08 95       	ret

00000d48 <_exit>:
 d48:	f8 94       	cli

00000d4a <__stop_program>:
 d4a:	ff cf       	rjmp	.-2      	; 0xd4a <__stop_program>
