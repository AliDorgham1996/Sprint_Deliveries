
ATmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d6e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000d6e  00000e02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000073  0080006e  0080006e  00000e10  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e10  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e40  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003b8  00000000  00000000  00000e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004242  00000000  00000000  00001234  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001374  00000000  00000000  00005476  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000026c7  00000000  00000000  000067ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c6c  00000000  00000000  00008eb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001dba  00000000  00000000  00009b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000037d2  00000000  00000000  0000b8da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000368  00000000  00000000  0000f0ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 b0 00 	jmp	0x160	; 0x160 <__vector_1>
   8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__vector_2>
   c:	0c 94 10 01 	jmp	0x220	; 0x220 <__vector_3>
  10:	0c 94 42 03 	jmp	0x684	; 0x684 <__vector_4>
  14:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 fe 04 	jmp	0x9fc	; 0x9fc <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 0a 03 	jmp	0x614	; 0x614 <__vector_10>
  2c:	0c 94 b4 01 	jmp	0x368	; 0x368 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 aa 03 	jmp	0x754	; 0x754 <__vector_13>
  38:	0c 94 6c 03 	jmp	0x6d8	; 0x6d8 <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e6       	ldi	r30, 0x6E	; 110
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 3e       	cpi	r26, 0xE1	; 225
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 77 00 	call	0xee	; 0xee <main>
  8a:	0c 94 b5 06 	jmp	0xd6a	; 0xd6a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <I2C_Driver>:
#include "../Library/System_Delays/Delays.h"

void I2C_Driver(void)
{
	uint8_t Data = 0;
	DDRA = 0xFF; 
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	8a bb       	out	0x1a, r24	; 26
	I2C_init(100000);
  96:	60 ea       	ldi	r22, 0xA0	; 160
  98:	76 e8       	ldi	r23, 0x86	; 134
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 44 01 	call	0x288	; 0x288 <I2C_init>
	Delay_Ms(100);
  a2:	24 e6       	ldi	r18, 0x64	; 100
  a4:	30 e0       	ldi	r19, 0x00	; 0
  a6:	40 e0       	ldi	r20, 0x00	; 0
  a8:	50 e0       	ldi	r21, 0x00	; 0
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	70 e0       	ldi	r23, 0x00	; 0
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 7c 00 	call	0xf8	; 0xf8 <Delay_Ms>
#include "../Library/Registers.h"
#include "../Library/System_Delays/Delays.h"

void I2C_Driver(void)
{
	uint8_t Data = 0;
  b6:	c0 e0       	ldi	r28, 0x00	; 0
	DDRA = 0xFF; 
	I2C_init(100000);
	Delay_Ms(100);
	while(1)
	{
		I2C_Start();
  b8:	0e 94 61 01 	call	0x2c2	; 0x2c2 <I2C_Start>
		I2C_Write(I2C_SLAVE_ADDRESS, I2C_MT_SLAW_ACK);
  bc:	63 e0       	ldi	r22, 0x03	; 3
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <I2C_Write>
		I2C_Write(Data, I2C_MT_DATA_ACK);
  c4:	65 e0       	ldi	r22, 0x05	; 5
  c6:	8c 2f       	mov	r24, r28
  c8:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <I2C_Write>
		PORTA = Data++;
  cc:	d1 e0       	ldi	r29, 0x01	; 1
  ce:	dc 0f       	add	r29, r28
  d0:	cb bb       	out	0x1b, r28	; 27
		I2C_Stop();
  d2:	0e 94 77 01 	call	0x2ee	; 0x2ee <I2C_Stop>
		Delay_Ms(1000);
  d6:	28 ee       	ldi	r18, 0xE8	; 232
  d8:	33 e0       	ldi	r19, 0x03	; 3
  da:	40 e0       	ldi	r20, 0x00	; 0
  dc:	50 e0       	ldi	r21, 0x00	; 0
  de:	60 e0       	ldi	r22, 0x00	; 0
  e0:	70 e0       	ldi	r23, 0x00	; 0
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	0e 94 7c 00 	call	0xf8	; 0xf8 <Delay_Ms>
	while(1)
	{
		I2C_Start();
		I2C_Write(I2C_SLAVE_ADDRESS, I2C_MT_SLAW_ACK);
		I2C_Write(Data, I2C_MT_DATA_ACK);
		PORTA = Data++;
  ea:	cd 2f       	mov	r28, r29
  ec:	e5 cf       	rjmp	.-54     	; 0xb8 <I2C_Driver+0x26>

000000ee <main>:
#elif (Running_Task == Task_SPI_Driver)
	SPI_Driver();
#elif (Running_Task == Task_SPI_UART)
	SPI_UART();
#elif (Running_Task == Task_I2C_Driver)
	I2C_Driver();
  ee:	0e 94 49 00 	call	0x92	; 0x92 <I2C_Driver>
#elif (Running_Task == Task_I2C_EEPROM)
	I2C_EEPROMTask();
#else 
	while(1);
#endif /* Task */
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	08 95       	ret

000000f8 <Delay_Ms>:
#include "../Library/Configurations.h"
#include <util/delay.h>


void Delay_Ms(uint64_t Delay)
{
  f8:	ff 92       	push	r15
  fa:	0f 93       	push	r16
  fc:	1f 93       	push	r17
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
 102:	f2 2e       	mov	r15, r18
 104:	03 2f       	mov	r16, r19
 106:	14 2f       	mov	r17, r20
 108:	d5 2f       	mov	r29, r21
 10a:	c6 2f       	mov	r28, r22
 10c:	b7 2f       	mov	r27, r23
 10e:	f8 2f       	mov	r31, r24
 110:	e9 2f       	mov	r30, r25
	while (0 < Delay)
 112:	a0 e0       	ldi	r26, 0x00	; 0
 114:	0e 94 95 06 	call	0xd2a	; 0xd2a <__cmpdi2_s8>
 118:	e9 f0       	breq	.+58     	; 0x154 <Delay_Ms+0x5c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11a:	8f ec       	ldi	r24, 0xCF	; 207
 11c:	97 e0       	ldi	r25, 0x07	; 7
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <Delay_Ms+0x26>
 122:	00 c0       	rjmp	.+0      	; 0x124 <Delay_Ms+0x2c>
 124:	00 00       	nop
	{
		_delay_ms(1);
		--Delay;
 126:	2f 2d       	mov	r18, r15
 128:	30 2f       	mov	r19, r16
 12a:	41 2f       	mov	r20, r17
 12c:	5d 2f       	mov	r21, r29
 12e:	6c 2f       	mov	r22, r28
 130:	7b 2f       	mov	r23, r27
 132:	8f 2f       	mov	r24, r31
 134:	9e 2f       	mov	r25, r30
 136:	af ef       	ldi	r26, 0xFF	; 255
 138:	0e 94 80 06 	call	0xd00	; 0xd00 <__adddi3_s8>
 13c:	f2 2e       	mov	r15, r18
 13e:	03 2f       	mov	r16, r19
 140:	14 2f       	mov	r17, r20
 142:	d5 2f       	mov	r29, r21
 144:	c6 2f       	mov	r28, r22
 146:	b7 2f       	mov	r27, r23
 148:	f8 2f       	mov	r31, r24
 14a:	e9 2f       	mov	r30, r25
#include <util/delay.h>


void Delay_Ms(uint64_t Delay)
{
	while (0 < Delay)
 14c:	a0 e0       	ldi	r26, 0x00	; 0
 14e:	0e 94 95 06 	call	0xd2a	; 0xd2a <__cmpdi2_s8>
 152:	19 f7       	brne	.-58     	; 0x11a <Delay_Ms+0x22>
	{
		_delay_ms(1);
		--Delay;
	}
}
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	1f 91       	pop	r17
 15a:	0f 91       	pop	r16
 15c:	ff 90       	pop	r15
 15e:	08 95       	ret

00000160 <__vector_1>:
		break;
	}
	return return_value;	
}
ISR(INT0_vect)
{
 160:	1f 92       	push	r1
 162:	0f 92       	push	r0
 164:	0f b6       	in	r0, 0x3f	; 63
 166:	0f 92       	push	r0
 168:	11 24       	eor	r1, r1
 16a:	2f 93       	push	r18
 16c:	3f 93       	push	r19
 16e:	4f 93       	push	r20
 170:	5f 93       	push	r21
 172:	6f 93       	push	r22
 174:	7f 93       	push	r23
 176:	8f 93       	push	r24
 178:	9f 93       	push	r25
 17a:	af 93       	push	r26
 17c:	bf 93       	push	r27
 17e:	ef 93       	push	r30
 180:	ff 93       	push	r31
	EXTI.Flag.INT_0 = ENABLE;
 182:	8a b7       	in	r24, 0x3a	; 58
 184:	80 64       	ori	r24, 0x40	; 64
 186:	8a bf       	out	0x3a, r24	; 58
	if(ExtI_Callbacks[0] != NULL)
 188:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
 18c:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <__data_end+0x1>
 190:	89 2b       	or	r24, r25
 192:	29 f0       	breq	.+10     	; 0x19e <__vector_1+0x3e>
	{
		ExtI_Callbacks[0]();
 194:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <__data_end>
 198:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <__data_end+0x1>
 19c:	09 95       	icall
	}
}
 19e:	ff 91       	pop	r31
 1a0:	ef 91       	pop	r30
 1a2:	bf 91       	pop	r27
 1a4:	af 91       	pop	r26
 1a6:	9f 91       	pop	r25
 1a8:	8f 91       	pop	r24
 1aa:	7f 91       	pop	r23
 1ac:	6f 91       	pop	r22
 1ae:	5f 91       	pop	r21
 1b0:	4f 91       	pop	r20
 1b2:	3f 91       	pop	r19
 1b4:	2f 91       	pop	r18
 1b6:	0f 90       	pop	r0
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	0f 90       	pop	r0
 1bc:	1f 90       	pop	r1
 1be:	18 95       	reti

000001c0 <__vector_2>:
ISR(INT1_vect)
{
 1c0:	1f 92       	push	r1
 1c2:	0f 92       	push	r0
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	0f 92       	push	r0
 1c8:	11 24       	eor	r1, r1
 1ca:	2f 93       	push	r18
 1cc:	3f 93       	push	r19
 1ce:	4f 93       	push	r20
 1d0:	5f 93       	push	r21
 1d2:	6f 93       	push	r22
 1d4:	7f 93       	push	r23
 1d6:	8f 93       	push	r24
 1d8:	9f 93       	push	r25
 1da:	af 93       	push	r26
 1dc:	bf 93       	push	r27
 1de:	ef 93       	push	r30
 1e0:	ff 93       	push	r31
	EXTI.Flag.INT_1 = ENABLE;
 1e2:	8a b7       	in	r24, 0x3a	; 58
 1e4:	80 68       	ori	r24, 0x80	; 128
 1e6:	8a bf       	out	0x3a, r24	; 58
	if(ExtI_Callbacks[1] != NULL)
 1e8:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end+0x2>
 1ec:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__data_end+0x3>
 1f0:	89 2b       	or	r24, r25
 1f2:	29 f0       	breq	.+10     	; 0x1fe <__vector_2+0x3e>
	{
		ExtI_Callbacks[1]();
 1f4:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <__data_end+0x2>
 1f8:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <__data_end+0x3>
 1fc:	09 95       	icall
	}
}
 1fe:	ff 91       	pop	r31
 200:	ef 91       	pop	r30
 202:	bf 91       	pop	r27
 204:	af 91       	pop	r26
 206:	9f 91       	pop	r25
 208:	8f 91       	pop	r24
 20a:	7f 91       	pop	r23
 20c:	6f 91       	pop	r22
 20e:	5f 91       	pop	r21
 210:	4f 91       	pop	r20
 212:	3f 91       	pop	r19
 214:	2f 91       	pop	r18
 216:	0f 90       	pop	r0
 218:	0f be       	out	0x3f, r0	; 63
 21a:	0f 90       	pop	r0
 21c:	1f 90       	pop	r1
 21e:	18 95       	reti

00000220 <__vector_3>:
ISR(INT2_vect)
{
 220:	1f 92       	push	r1
 222:	0f 92       	push	r0
 224:	0f b6       	in	r0, 0x3f	; 63
 226:	0f 92       	push	r0
 228:	11 24       	eor	r1, r1
 22a:	2f 93       	push	r18
 22c:	3f 93       	push	r19
 22e:	4f 93       	push	r20
 230:	5f 93       	push	r21
 232:	6f 93       	push	r22
 234:	7f 93       	push	r23
 236:	8f 93       	push	r24
 238:	9f 93       	push	r25
 23a:	af 93       	push	r26
 23c:	bf 93       	push	r27
 23e:	ef 93       	push	r30
 240:	ff 93       	push	r31
	EXTI.Flag.INT_2 = ENABLE;
 242:	8a b7       	in	r24, 0x3a	; 58
 244:	80 62       	ori	r24, 0x20	; 32
 246:	8a bf       	out	0x3a, r24	; 58
	if(ExtI_Callbacks[2] != NULL)
 248:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end+0x4>
 24c:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <__data_end+0x5>
 250:	89 2b       	or	r24, r25
 252:	29 f0       	breq	.+10     	; 0x25e <__vector_3+0x3e>
	{
		ExtI_Callbacks[2]();
 254:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <__data_end+0x4>
 258:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <__data_end+0x5>
 25c:	09 95       	icall
	}
 25e:	ff 91       	pop	r31
 260:	ef 91       	pop	r30
 262:	bf 91       	pop	r27
 264:	af 91       	pop	r26
 266:	9f 91       	pop	r25
 268:	8f 91       	pop	r24
 26a:	7f 91       	pop	r23
 26c:	6f 91       	pop	r22
 26e:	5f 91       	pop	r21
 270:	4f 91       	pop	r20
 272:	3f 91       	pop	r19
 274:	2f 91       	pop	r18
 276:	0f 90       	pop	r0
 278:	0f be       	out	0x3f, r0	; 63
 27a:	0f 90       	pop	r0
 27c:	1f 90       	pop	r1
 27e:	18 95       	reti

00000280 <I2C_Wait>:
			break;
		}
		else{/*MISRA C*/}
	}
	return return_value;
}
 280:	06 b6       	in	r0, 0x36	; 54
 282:	07 fe       	sbrs	r0, 7
 284:	fd cf       	rjmp	.-6      	; 0x280 <I2C_Wait>
 286:	08 95       	ret

00000288 <I2C_init>:
 288:	9b 01       	movw	r18, r22
 28a:	ac 01       	movw	r20, r24
 28c:	81 b1       	in	r24, 0x01	; 1
 28e:	8c 7f       	andi	r24, 0xFC	; 252
 290:	81 b9       	out	0x01, r24	; 1
 292:	82 b1       	in	r24, 0x02	; 2
 294:	80 78       	andi	r24, 0x80	; 128
 296:	81 60       	ori	r24, 0x01	; 1
 298:	82 b9       	out	0x02, r24	; 2
 29a:	60 e0       	ldi	r22, 0x00	; 0
 29c:	72 e1       	ldi	r23, 0x12	; 18
 29e:	8a e7       	ldi	r24, 0x7A	; 122
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__udivmodsi4>
 2a6:	da 01       	movw	r26, r20
 2a8:	c9 01       	movw	r24, r18
 2aa:	40 97       	sbiw	r24, 0x10	; 16
 2ac:	a1 09       	sbc	r26, r1
 2ae:	b1 09       	sbc	r27, r1
 2b0:	b6 95       	lsr	r27
 2b2:	a7 95       	ror	r26
 2b4:	97 95       	ror	r25
 2b6:	87 95       	ror	r24
 2b8:	80 b9       	out	0x00, r24	; 0
 2ba:	86 b7       	in	r24, 0x36	; 54
 2bc:	84 60       	ori	r24, 0x04	; 4
 2be:	86 bf       	out	0x36, r24	; 54
 2c0:	08 95       	ret

000002c2 <I2C_Start>:
 2c2:	84 ea       	ldi	r24, 0xA4	; 164
 2c4:	86 bf       	out	0x36, r24	; 54
 2c6:	0e 94 40 01 	call	0x280	; 0x280 <I2C_Wait>
 2ca:	81 b1       	in	r24, 0x01	; 1
 2cc:	86 95       	lsr	r24
 2ce:	86 95       	lsr	r24
 2d0:	86 95       	lsr	r24
 2d2:	81 30       	cpi	r24, 0x01	; 1
 2d4:	41 f0       	breq	.+16     	; 0x2e6 <I2C_Start+0x24>
 2d6:	81 b1       	in	r24, 0x01	; 1
 2d8:	86 95       	lsr	r24
 2da:	86 95       	lsr	r24
 2dc:	86 95       	lsr	r24
 2de:	87 30       	cpi	r24, 0x07	; 7
 2e0:	21 f0       	breq	.+8      	; 0x2ea <I2C_Start+0x28>
 2e2:	84 e0       	ldi	r24, 0x04	; 4
 2e4:	08 95       	ret
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	08 95       	ret
 2ea:	85 e0       	ldi	r24, 0x05	; 5
 2ec:	08 95       	ret

000002ee <I2C_Stop>:
 2ee:	84 e9       	ldi	r24, 0x94	; 148
 2f0:	86 bf       	out	0x36, r24	; 54
 2f2:	08 95       	ret

000002f4 <I2C_Write>:
I2C_Error_t		I2C_Write		(uint8_t  Data, I2C_StatusCode_t Code)//done
{
 2f4:	cf 93       	push	r28
 2f6:	c6 2f       	mov	r28, r22
	I2C_Error_t return_value = I2C_EN_Invalid;
	I2C.Data = Data;
 2f8:	83 b9       	out	0x03, r24	; 3
	I2C.Control.TWCR_Reg = (1<<TWINT)|(1<<TWEN);
 2fa:	84 e8       	ldi	r24, 0x84	; 132
 2fc:	86 bf       	out	0x36, r24	; 54
	I2C_Wait();
 2fe:	0e 94 40 01 	call	0x280	; 0x280 <I2C_Wait>
	if(I2C.Status.status_code == Code)
 302:	81 b1       	in	r24, 0x01	; 1
 304:	86 95       	lsr	r24
 306:	86 95       	lsr	r24
 308:	86 95       	lsr	r24
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	6c 2f       	mov	r22, r28
 30e:	70 e0       	ldi	r23, 0x00	; 0
 310:	86 17       	cp	r24, r22
 312:	97 07       	cpc	r25, r23
 314:	41 f0       	breq	.+16     	; 0x326 <I2C_Write+0x32>
	{
		return_value = I2C_EN_valid;
	}
	else if (I2C_M_LOSE_ARBIT == I2C.Status.status_code)
 316:	81 b1       	in	r24, 0x01	; 1
 318:	86 95       	lsr	r24
 31a:	86 95       	lsr	r24
 31c:	86 95       	lsr	r24
 31e:	87 30       	cpi	r24, 0x07	; 7
 320:	21 f0       	breq	.+8      	; 0x32a <I2C_Write+0x36>
	{
		return_value = I2C_EN_LoseArbitration;
	}
	else
	{
		return_value = I2C_EN_InvalidCode;
 322:	84 e0       	ldi	r24, 0x04	; 4
 324:	03 c0       	rjmp	.+6      	; 0x32c <I2C_Write+0x38>
	I2C.Data = Data;
	I2C.Control.TWCR_Reg = (1<<TWINT)|(1<<TWEN);
	I2C_Wait();
	if(I2C.Status.status_code == Code)
	{
		return_value = I2C_EN_valid;
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	01 c0       	rjmp	.+2      	; 0x32c <I2C_Write+0x38>
	}
	else if (I2C_M_LOSE_ARBIT == I2C.Status.status_code)
	{
		return_value = I2C_EN_LoseArbitration;
 32a:	85 e0       	ldi	r24, 0x05	; 5
	else
	{
		return_value = I2C_EN_InvalidCode;
	}
	return return_value;
}
 32c:	cf 91       	pop	r28
 32e:	08 95       	ret

00000330 <Timer_ResetCounter>:
		TIMER2.Interrupts.Comp_Match       = ENABLE;
		TIMER2.Interrupts.OverFlow		   = ENABLE;
		TIMER2.Control.Clock = Clock;
	}
	else{/*MISRA C*/}
}
 330:	81 11       	cpse	r24, r1
 332:	0c c0       	rjmp	.+24     	; 0x34c <Timer_ResetCounter+0x1c>
 334:	e8 e9       	ldi	r30, 0x98	; 152
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	10 82       	st	Z, r1
 33a:	11 82       	std	Z+1, r1	; 0x01
 33c:	12 82       	std	Z+2, r1	; 0x02
 33e:	13 82       	std	Z+3, r1	; 0x03
 340:	14 82       	std	Z+4, r1	; 0x04
 342:	15 82       	std	Z+5, r1	; 0x05
 344:	16 82       	std	Z+6, r1	; 0x06
 346:	17 82       	std	Z+7, r1	; 0x07
 348:	12 be       	out	0x32, r1	; 50
 34a:	08 95       	ret
 34c:	81 30       	cpi	r24, 0x01	; 1
 34e:	59 f4       	brne	.+22     	; 0x366 <Timer_ResetCounter+0x36>
 350:	e8 e9       	ldi	r30, 0x98	; 152
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	10 86       	std	Z+8, r1	; 0x08
 356:	11 86       	std	Z+9, r1	; 0x09
 358:	12 86       	std	Z+10, r1	; 0x0a
 35a:	13 86       	std	Z+11, r1	; 0x0b
 35c:	14 86       	std	Z+12, r1	; 0x0c
 35e:	15 86       	std	Z+13, r1	; 0x0d
 360:	16 86       	std	Z+14, r1	; 0x0e
 362:	17 86       	std	Z+15, r1	; 0x0f
 364:	14 bc       	out	0x24, r1	; 36
 366:	08 95       	ret

00000368 <__vector_11>:
ISR(TIMER0_OVF_vect)
{
 368:	1f 92       	push	r1
 36a:	0f 92       	push	r0
 36c:	0f b6       	in	r0, 0x3f	; 63
 36e:	0f 92       	push	r0
 370:	11 24       	eor	r1, r1
 372:	af 92       	push	r10
 374:	bf 92       	push	r11
 376:	cf 92       	push	r12
 378:	df 92       	push	r13
 37a:	ef 92       	push	r14
 37c:	ff 92       	push	r15
 37e:	0f 93       	push	r16
 380:	1f 93       	push	r17
 382:	2f 93       	push	r18
 384:	3f 93       	push	r19
 386:	4f 93       	push	r20
 388:	5f 93       	push	r21
 38a:	6f 93       	push	r22
 38c:	7f 93       	push	r23
 38e:	8f 93       	push	r24
 390:	9f 93       	push	r25
 392:	af 93       	push	r26
 394:	bf 93       	push	r27
 396:	cf 93       	push	r28
 398:	df 93       	push	r29
 39a:	ef 93       	push	r30
 39c:	ff 93       	push	r31
	TIMER0.Flags.OverFlow = ENABLE;
 39e:	88 b7       	in	r24, 0x38	; 56
 3a0:	81 60       	ori	r24, 0x01	; 1
 3a2:	88 bf       	out	0x38, r24	; 56
	OverFlows[Timer0]++;
 3a4:	c8 e9       	ldi	r28, 0x98	; 152
 3a6:	d0 e0       	ldi	r29, 0x00	; 0
 3a8:	28 81       	ld	r18, Y
 3aa:	39 81       	ldd	r19, Y+1	; 0x01
 3ac:	4a 81       	ldd	r20, Y+2	; 0x02
 3ae:	5b 81       	ldd	r21, Y+3	; 0x03
 3b0:	6c 81       	ldd	r22, Y+4	; 0x04
 3b2:	7d 81       	ldd	r23, Y+5	; 0x05
 3b4:	8e 81       	ldd	r24, Y+6	; 0x06
 3b6:	9f 81       	ldd	r25, Y+7	; 0x07
 3b8:	a1 e0       	ldi	r26, 0x01	; 1
 3ba:	0e 94 80 06 	call	0xd00	; 0xd00 <__adddi3_s8>
 3be:	28 83       	st	Y, r18
 3c0:	39 83       	std	Y+1, r19	; 0x01
 3c2:	4a 83       	std	Y+2, r20	; 0x02
 3c4:	5b 83       	std	Y+3, r21	; 0x03
 3c6:	6c 83       	std	Y+4, r22	; 0x04
 3c8:	7d 83       	std	Y+5, r23	; 0x05
 3ca:	8e 83       	std	Y+6, r24	; 0x06
 3cc:	9f 83       	std	Y+7, r25	; 0x07
	PWMAction[Timer0]();
 3ce:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <PWMAction>
 3d2:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <PWMAction+0x1>
 3d6:	09 95       	icall
	if(OverFlows[Timer0] == Duty[Timer0][Cycle[Timer0]])
 3d8:	28 81       	ld	r18, Y
 3da:	39 81       	ldd	r19, Y+1	; 0x01
 3dc:	4a 81       	ldd	r20, Y+2	; 0x02
 3de:	5b 81       	ldd	r21, Y+3	; 0x03
 3e0:	6c 81       	ldd	r22, Y+4	; 0x04
 3e2:	7d 81       	ldd	r23, Y+5	; 0x05
 3e4:	8e 81       	ldd	r24, Y+6	; 0x06
 3e6:	9f 81       	ldd	r25, Y+7	; 0x07
 3e8:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	ee 0f       	add	r30, r30
 3f0:	ff 1f       	adc	r31, r31
 3f2:	ee 0f       	add	r30, r30
 3f4:	ff 1f       	adc	r31, r31
 3f6:	ee 0f       	add	r30, r30
 3f8:	ff 1f       	adc	r31, r31
 3fa:	e8 58       	subi	r30, 0x88	; 136
 3fc:	ff 4f       	sbci	r31, 0xFF	; 255
 3fe:	a0 80       	ld	r10, Z
 400:	b1 80       	ldd	r11, Z+1	; 0x01
 402:	c2 80       	ldd	r12, Z+2	; 0x02
 404:	d3 80       	ldd	r13, Z+3	; 0x03
 406:	e4 80       	ldd	r14, Z+4	; 0x04
 408:	f5 80       	ldd	r15, Z+5	; 0x05
 40a:	06 81       	ldd	r16, Z+6	; 0x06
 40c:	17 81       	ldd	r17, Z+7	; 0x07
 40e:	0e 94 8c 06 	call	0xd18	; 0xd18 <__cmpdi2>
 412:	d1 f5       	brne	.+116    	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
	{
		OverFlows[Timer0] = RESET;
 414:	18 82       	st	Y, r1
 416:	19 82       	std	Y+1, r1	; 0x01
 418:	1a 82       	std	Y+2, r1	; 0x02
 41a:	1b 82       	std	Y+3, r1	; 0x03
 41c:	1c 82       	std	Y+4, r1	; 0x04
 41e:	1d 82       	std	Y+5, r1	; 0x05
 420:	1e 82       	std	Y+6, r1	; 0x06
 422:	1f 82       	std	Y+7, r1	; 0x07
		NotifierAction[Timer0]();
 424:	e0 91 a8 00 	lds	r30, 0x00A8	; 0x8000a8 <NotifierAction>
 428:	f0 91 a9 00 	lds	r31, 0x00A9	; 0x8000a9 <NotifierAction+0x1>
 42c:	09 95       	icall
		if(Cycle[Timer0] == ON_Cycle)
 42e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 432:	81 11       	cpse	r24, r1
 434:	13 c0       	rjmp	.+38     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
		{
			Cycle[Timer0] = OFF_Cycle;
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			TIMER0.Counter  = 256 - ((Duty[Timer0][OFF_Cycle] * 1000UL)%256 -1);
 43c:	e8 e7       	ldi	r30, 0x78	; 120
 43e:	f0 e0       	ldi	r31, 0x00	; 0
 440:	90 85       	ldd	r25, Z+8	; 0x08
 442:	21 85       	ldd	r18, Z+9	; 0x09
 444:	22 85       	ldd	r18, Z+10	; 0x0a
 446:	23 85       	ldd	r18, Z+11	; 0x0b
 448:	24 85       	ldd	r18, Z+12	; 0x0c
 44a:	25 85       	ldd	r18, Z+13	; 0x0d
 44c:	26 85       	ldd	r18, Z+14	; 0x0e
 44e:	27 85       	ldd	r18, Z+15	; 0x0f
 450:	28 e1       	ldi	r18, 0x18	; 24
 452:	92 9f       	mul	r25, r18
 454:	80 0d       	add	r24, r0
 456:	11 24       	eor	r1, r1
 458:	82 bf       	out	0x32, r24	; 50
 45a:	16 c0       	rjmp	.+44     	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
		}
		else if(Cycle[Timer0] == OFF_Cycle)
 45c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 460:	81 30       	cpi	r24, 0x01	; 1
 462:	91 f4       	brne	.+36     	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
		{
			Cycle[Timer0] = ON_Cycle;
 464:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			TIMER0.Counter  = 256 - ((Duty[Timer0][ON_Cycle] * 1000UL)%256 -1);
 468:	e8 e7       	ldi	r30, 0x78	; 120
 46a:	f0 e0       	ldi	r31, 0x00	; 0
 46c:	90 81       	ld	r25, Z
 46e:	81 81       	ldd	r24, Z+1	; 0x01
 470:	82 81       	ldd	r24, Z+2	; 0x02
 472:	83 81       	ldd	r24, Z+3	; 0x03
 474:	84 81       	ldd	r24, Z+4	; 0x04
 476:	85 81       	ldd	r24, Z+5	; 0x05
 478:	86 81       	ldd	r24, Z+6	; 0x06
 47a:	87 81       	ldd	r24, Z+7	; 0x07
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	28 e1       	ldi	r18, 0x18	; 24
 480:	92 9f       	mul	r25, r18
 482:	80 0d       	add	r24, r0
 484:	11 24       	eor	r1, r1
 486:	82 bf       	out	0x32, r24	; 50
		}
	}
}
 488:	ff 91       	pop	r31
 48a:	ef 91       	pop	r30
 48c:	df 91       	pop	r29
 48e:	cf 91       	pop	r28
 490:	bf 91       	pop	r27
 492:	af 91       	pop	r26
 494:	9f 91       	pop	r25
 496:	8f 91       	pop	r24
 498:	7f 91       	pop	r23
 49a:	6f 91       	pop	r22
 49c:	5f 91       	pop	r21
 49e:	4f 91       	pop	r20
 4a0:	3f 91       	pop	r19
 4a2:	2f 91       	pop	r18
 4a4:	1f 91       	pop	r17
 4a6:	0f 91       	pop	r16
 4a8:	ff 90       	pop	r15
 4aa:	ef 90       	pop	r14
 4ac:	df 90       	pop	r13
 4ae:	cf 90       	pop	r12
 4b0:	bf 90       	pop	r11
 4b2:	af 90       	pop	r10
 4b4:	0f 90       	pop	r0
 4b6:	0f be       	out	0x3f, r0	; 63
 4b8:	0f 90       	pop	r0
 4ba:	1f 90       	pop	r1
 4bc:	18 95       	reti

000004be <__vector_5>:
ISR(TIMER2_OVF_vect)
{
 4be:	1f 92       	push	r1
 4c0:	0f 92       	push	r0
 4c2:	0f b6       	in	r0, 0x3f	; 63
 4c4:	0f 92       	push	r0
 4c6:	11 24       	eor	r1, r1
 4c8:	af 92       	push	r10
 4ca:	bf 92       	push	r11
 4cc:	cf 92       	push	r12
 4ce:	df 92       	push	r13
 4d0:	ef 92       	push	r14
 4d2:	ff 92       	push	r15
 4d4:	0f 93       	push	r16
 4d6:	1f 93       	push	r17
 4d8:	2f 93       	push	r18
 4da:	3f 93       	push	r19
 4dc:	4f 93       	push	r20
 4de:	5f 93       	push	r21
 4e0:	6f 93       	push	r22
 4e2:	7f 93       	push	r23
 4e4:	8f 93       	push	r24
 4e6:	9f 93       	push	r25
 4e8:	af 93       	push	r26
 4ea:	bf 93       	push	r27
 4ec:	cf 93       	push	r28
 4ee:	df 93       	push	r29
 4f0:	ef 93       	push	r30
 4f2:	ff 93       	push	r31
	TIMER2.Flags.OverFlow = ENABLE;
 4f4:	88 b7       	in	r24, 0x38	; 56
 4f6:	80 64       	ori	r24, 0x40	; 64
 4f8:	88 bf       	out	0x38, r24	; 56
	OverFlows[Timer2]++;
 4fa:	c8 e9       	ldi	r28, 0x98	; 152
 4fc:	d0 e0       	ldi	r29, 0x00	; 0
 4fe:	28 85       	ldd	r18, Y+8	; 0x08
 500:	39 85       	ldd	r19, Y+9	; 0x09
 502:	4a 85       	ldd	r20, Y+10	; 0x0a
 504:	5b 85       	ldd	r21, Y+11	; 0x0b
 506:	6c 85       	ldd	r22, Y+12	; 0x0c
 508:	7d 85       	ldd	r23, Y+13	; 0x0d
 50a:	8e 85       	ldd	r24, Y+14	; 0x0e
 50c:	9f 85       	ldd	r25, Y+15	; 0x0f
 50e:	a1 e0       	ldi	r26, 0x01	; 1
 510:	0e 94 80 06 	call	0xd00	; 0xd00 <__adddi3_s8>
 514:	28 87       	std	Y+8, r18	; 0x08
 516:	39 87       	std	Y+9, r19	; 0x09
 518:	4a 87       	std	Y+10, r20	; 0x0a
 51a:	5b 87       	std	Y+11, r21	; 0x0b
 51c:	6c 87       	std	Y+12, r22	; 0x0c
 51e:	7d 87       	std	Y+13, r23	; 0x0d
 520:	8e 87       	std	Y+14, r24	; 0x0e
 522:	9f 87       	std	Y+15, r25	; 0x0f
	PWMAction[Timer2]();
 524:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <PWMAction+0x2>
 528:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <PWMAction+0x3>
 52c:	09 95       	icall
	if(OverFlows[Timer2] == Duty[Timer2][Cycle[Timer2]])
 52e:	28 85       	ldd	r18, Y+8	; 0x08
 530:	39 85       	ldd	r19, Y+9	; 0x09
 532:	4a 85       	ldd	r20, Y+10	; 0x0a
 534:	5b 85       	ldd	r21, Y+11	; 0x0b
 536:	6c 85       	ldd	r22, Y+12	; 0x0c
 538:	7d 85       	ldd	r23, Y+13	; 0x0d
 53a:	8e 85       	ldd	r24, Y+14	; 0x0e
 53c:	9f 85       	ldd	r25, Y+15	; 0x0f
 53e:	e0 91 61 00 	lds	r30, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 542:	f0 e0       	ldi	r31, 0x00	; 0
 544:	ee 0f       	add	r30, r30
 546:	ff 1f       	adc	r31, r31
 548:	ee 0f       	add	r30, r30
 54a:	ff 1f       	adc	r31, r31
 54c:	ee 0f       	add	r30, r30
 54e:	ff 1f       	adc	r31, r31
 550:	e8 57       	subi	r30, 0x78	; 120
 552:	ff 4f       	sbci	r31, 0xFF	; 255
 554:	a0 80       	ld	r10, Z
 556:	b1 80       	ldd	r11, Z+1	; 0x01
 558:	c2 80       	ldd	r12, Z+2	; 0x02
 55a:	d3 80       	ldd	r13, Z+3	; 0x03
 55c:	e4 80       	ldd	r14, Z+4	; 0x04
 55e:	f5 80       	ldd	r15, Z+5	; 0x05
 560:	06 81       	ldd	r16, Z+6	; 0x06
 562:	17 81       	ldd	r17, Z+7	; 0x07
 564:	0e 94 8c 06 	call	0xd18	; 0xd18 <__cmpdi2>
 568:	d1 f5       	brne	.+116    	; 0x5de <__vector_5+0x120>
	{
		OverFlows[Timer2] = RESET;
 56a:	18 86       	std	Y+8, r1	; 0x08
 56c:	19 86       	std	Y+9, r1	; 0x09
 56e:	1a 86       	std	Y+10, r1	; 0x0a
 570:	1b 86       	std	Y+11, r1	; 0x0b
 572:	1c 86       	std	Y+12, r1	; 0x0c
 574:	1d 86       	std	Y+13, r1	; 0x0d
 576:	1e 86       	std	Y+14, r1	; 0x0e
 578:	1f 86       	std	Y+15, r1	; 0x0f
		NotifierAction[Timer2]();
 57a:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <NotifierAction+0x2>
 57e:	f0 91 ab 00 	lds	r31, 0x00AB	; 0x8000ab <NotifierAction+0x3>
 582:	09 95       	icall
		if(Cycle[Timer2] == ON_Cycle)
 584:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 588:	81 11       	cpse	r24, r1
 58a:	13 c0       	rjmp	.+38     	; 0x5b2 <__vector_5+0xf4>
		{
			Cycle[Timer2] = OFF_Cycle;
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
			TIMER0.Counter  = 256 - ((Duty[Timer2][OFF_Cycle] * 1000UL)%256 -1);
 592:	e8 e7       	ldi	r30, 0x78	; 120
 594:	f0 e0       	ldi	r31, 0x00	; 0
 596:	90 8d       	ldd	r25, Z+24	; 0x18
 598:	21 8d       	ldd	r18, Z+25	; 0x19
 59a:	22 8d       	ldd	r18, Z+26	; 0x1a
 59c:	23 8d       	ldd	r18, Z+27	; 0x1b
 59e:	24 8d       	ldd	r18, Z+28	; 0x1c
 5a0:	25 8d       	ldd	r18, Z+29	; 0x1d
 5a2:	26 8d       	ldd	r18, Z+30	; 0x1e
 5a4:	27 8d       	ldd	r18, Z+31	; 0x1f
 5a6:	28 e1       	ldi	r18, 0x18	; 24
 5a8:	92 9f       	mul	r25, r18
 5aa:	80 0d       	add	r24, r0
 5ac:	11 24       	eor	r1, r1
 5ae:	82 bf       	out	0x32, r24	; 50
 5b0:	16 c0       	rjmp	.+44     	; 0x5de <__vector_5+0x120>
		}
		else if(Cycle[Timer2] == OFF_Cycle)
 5b2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 5b6:	81 30       	cpi	r24, 0x01	; 1
 5b8:	91 f4       	brne	.+36     	; 0x5de <__vector_5+0x120>
		{
			Cycle[Timer2] = ON_Cycle;
 5ba:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
			TIMER2.Counter  = 256 - ((Duty[Timer2][ON_Cycle] * 1000UL)%256 -1);
 5be:	e8 e7       	ldi	r30, 0x78	; 120
 5c0:	f0 e0       	ldi	r31, 0x00	; 0
 5c2:	90 89       	ldd	r25, Z+16	; 0x10
 5c4:	81 89       	ldd	r24, Z+17	; 0x11
 5c6:	82 89       	ldd	r24, Z+18	; 0x12
 5c8:	83 89       	ldd	r24, Z+19	; 0x13
 5ca:	84 89       	ldd	r24, Z+20	; 0x14
 5cc:	85 89       	ldd	r24, Z+21	; 0x15
 5ce:	86 89       	ldd	r24, Z+22	; 0x16
 5d0:	87 89       	ldd	r24, Z+23	; 0x17
 5d2:	81 e0       	ldi	r24, 0x01	; 1
 5d4:	28 e1       	ldi	r18, 0x18	; 24
 5d6:	92 9f       	mul	r25, r18
 5d8:	80 0d       	add	r24, r0
 5da:	11 24       	eor	r1, r1
 5dc:	84 bd       	out	0x24, r24	; 36
		}
	}
}
 5de:	ff 91       	pop	r31
 5e0:	ef 91       	pop	r30
 5e2:	df 91       	pop	r29
 5e4:	cf 91       	pop	r28
 5e6:	bf 91       	pop	r27
 5e8:	af 91       	pop	r26
 5ea:	9f 91       	pop	r25
 5ec:	8f 91       	pop	r24
 5ee:	7f 91       	pop	r23
 5f0:	6f 91       	pop	r22
 5f2:	5f 91       	pop	r21
 5f4:	4f 91       	pop	r20
 5f6:	3f 91       	pop	r19
 5f8:	2f 91       	pop	r18
 5fa:	1f 91       	pop	r17
 5fc:	0f 91       	pop	r16
 5fe:	ff 90       	pop	r15
 600:	ef 90       	pop	r14
 602:	df 90       	pop	r13
 604:	cf 90       	pop	r12
 606:	bf 90       	pop	r11
 608:	af 90       	pop	r10
 60a:	0f 90       	pop	r0
 60c:	0f be       	out	0x3f, r0	; 63
 60e:	0f 90       	pop	r0
 610:	1f 90       	pop	r1
 612:	18 95       	reti

00000614 <__vector_10>:
ISR(TIMER0_COMP_vect)
{
 614:	1f 92       	push	r1
 616:	0f 92       	push	r0
 618:	0f b6       	in	r0, 0x3f	; 63
 61a:	0f 92       	push	r0
 61c:	11 24       	eor	r1, r1
 61e:	2f 93       	push	r18
 620:	3f 93       	push	r19
 622:	4f 93       	push	r20
 624:	5f 93       	push	r21
 626:	6f 93       	push	r22
 628:	7f 93       	push	r23
 62a:	8f 93       	push	r24
 62c:	9f 93       	push	r25
 62e:	af 93       	push	r26
 630:	bf 93       	push	r27
 632:	ef 93       	push	r30
 634:	ff 93       	push	r31
	TIMER0.Flags.Comp_Match = ENABLE;
 636:	88 b7       	in	r24, 0x38	; 56
 638:	82 60       	ori	r24, 0x02	; 2
 63a:	88 bf       	out	0x38, r24	; 56
	if(CounterAction != NULL)
 63c:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <CounterAction>
 640:	90 91 ad 00 	lds	r25, 0x00AD	; 0x8000ad <CounterAction+0x1>
 644:	89 2b       	or	r24, r25
 646:	41 f0       	breq	.+16     	; 0x658 <__vector_10+0x44>
	{
		CounterAction();
 648:	e0 91 ac 00 	lds	r30, 0x00AC	; 0x8000ac <CounterAction>
 64c:	f0 91 ad 00 	lds	r31, 0x00AD	; 0x8000ad <CounterAction+0x1>
 650:	09 95       	icall
		Timer_ResetCounter(Timer0);
 652:	80 e0       	ldi	r24, 0x00	; 0
 654:	0e 94 98 01 	call	0x330	; 0x330 <Timer_ResetCounter>
	}
	PWMAction[Timer0]();
 658:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <PWMAction>
 65c:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <PWMAction+0x1>
 660:	09 95       	icall
}
 662:	ff 91       	pop	r31
 664:	ef 91       	pop	r30
 666:	bf 91       	pop	r27
 668:	af 91       	pop	r26
 66a:	9f 91       	pop	r25
 66c:	8f 91       	pop	r24
 66e:	7f 91       	pop	r23
 670:	6f 91       	pop	r22
 672:	5f 91       	pop	r21
 674:	4f 91       	pop	r20
 676:	3f 91       	pop	r19
 678:	2f 91       	pop	r18
 67a:	0f 90       	pop	r0
 67c:	0f be       	out	0x3f, r0	; 63
 67e:	0f 90       	pop	r0
 680:	1f 90       	pop	r1
 682:	18 95       	reti

00000684 <__vector_4>:
ISR(TIMER2_COMP_vect)
{
 684:	1f 92       	push	r1
 686:	0f 92       	push	r0
 688:	0f b6       	in	r0, 0x3f	; 63
 68a:	0f 92       	push	r0
 68c:	11 24       	eor	r1, r1
 68e:	2f 93       	push	r18
 690:	3f 93       	push	r19
 692:	4f 93       	push	r20
 694:	5f 93       	push	r21
 696:	6f 93       	push	r22
 698:	7f 93       	push	r23
 69a:	8f 93       	push	r24
 69c:	9f 93       	push	r25
 69e:	af 93       	push	r26
 6a0:	bf 93       	push	r27
 6a2:	ef 93       	push	r30
 6a4:	ff 93       	push	r31
	TIMER2.Flags.Comp_Match = ENABLE;
 6a6:	88 b7       	in	r24, 0x38	; 56
 6a8:	80 68       	ori	r24, 0x80	; 128
 6aa:	88 bf       	out	0x38, r24	; 56
	PWMAction[Timer2]();
 6ac:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <PWMAction+0x2>
 6b0:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <PWMAction+0x3>
 6b4:	09 95       	icall
 6b6:	ff 91       	pop	r31
 6b8:	ef 91       	pop	r30
 6ba:	bf 91       	pop	r27
 6bc:	af 91       	pop	r26
 6be:	9f 91       	pop	r25
 6c0:	8f 91       	pop	r24
 6c2:	7f 91       	pop	r23
 6c4:	6f 91       	pop	r22
 6c6:	5f 91       	pop	r21
 6c8:	4f 91       	pop	r20
 6ca:	3f 91       	pop	r19
 6cc:	2f 91       	pop	r18
 6ce:	0f 90       	pop	r0
 6d0:	0f be       	out	0x3f, r0	; 63
 6d2:	0f 90       	pop	r0
 6d4:	1f 90       	pop	r1
 6d6:	18 95       	reti

000006d8 <__vector_14>:
			break;
		}
		else{/*MISRA C*/}	
	}
	return return_value;
}
 6d8:	1f 92       	push	r1
 6da:	0f 92       	push	r0
 6dc:	0f b6       	in	r0, 0x3f	; 63
 6de:	0f 92       	push	r0
 6e0:	11 24       	eor	r1, r1
 6e2:	2f 93       	push	r18
 6e4:	3f 93       	push	r19
 6e6:	4f 93       	push	r20
 6e8:	5f 93       	push	r21
 6ea:	6f 93       	push	r22
 6ec:	7f 93       	push	r23
 6ee:	8f 93       	push	r24
 6f0:	9f 93       	push	r25
 6f2:	af 93       	push	r26
 6f4:	bf 93       	push	r27
 6f6:	ef 93       	push	r30
 6f8:	ff 93       	push	r31
 6fa:	cf 93       	push	r28
 6fc:	df 93       	push	r29
 6fe:	1f 92       	push	r1
 700:	cd b7       	in	r28, 0x3d	; 61
 702:	de b7       	in	r29, 0x3e	; 62
 704:	5d 9a       	sbi	0x0b, 5	; 11
 706:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <T_Flag>
 70a:	82 30       	cpi	r24, 0x02	; 2
 70c:	79 f4       	brne	.+30     	; 0x72c <__vector_14+0x54>
 70e:	19 82       	std	Y+1, r1	; 0x01
 710:	be 01       	movw	r22, r28
 712:	6f 5f       	subi	r22, 0xFF	; 255
 714:	7f 4f       	sbci	r23, 0xFF	; 255
 716:	82 e6       	ldi	r24, 0x62	; 98
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	0e 94 30 04 	call	0x860	; 0x860 <DeQueue>
 71e:	82 30       	cpi	r24, 0x02	; 2
 720:	19 f4       	brne	.+6      	; 0x728 <__vector_14+0x50>
 722:	55 98       	cbi	0x0a, 5	; 10
 724:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <T_Flag>
 728:	89 81       	ldd	r24, Y+1	; 0x01
 72a:	8c b9       	out	0x0c, r24	; 12
 72c:	0f 90       	pop	r0
 72e:	df 91       	pop	r29
 730:	cf 91       	pop	r28
 732:	ff 91       	pop	r31
 734:	ef 91       	pop	r30
 736:	bf 91       	pop	r27
 738:	af 91       	pop	r26
 73a:	9f 91       	pop	r25
 73c:	8f 91       	pop	r24
 73e:	7f 91       	pop	r23
 740:	6f 91       	pop	r22
 742:	5f 91       	pop	r21
 744:	4f 91       	pop	r20
 746:	3f 91       	pop	r19
 748:	2f 91       	pop	r18
 74a:	0f 90       	pop	r0
 74c:	0f be       	out	0x3f, r0	; 63
 74e:	0f 90       	pop	r0
 750:	1f 90       	pop	r1
 752:	18 95       	reti

00000754 <__vector_13>:
ISR(USART_RXC_vect)
{
 754:	1f 92       	push	r1
 756:	0f 92       	push	r0
 758:	0f b6       	in	r0, 0x3f	; 63
 75a:	0f 92       	push	r0
 75c:	11 24       	eor	r1, r1
 75e:	2f 93       	push	r18
 760:	3f 93       	push	r19
 762:	4f 93       	push	r20
 764:	5f 93       	push	r21
 766:	6f 93       	push	r22
 768:	7f 93       	push	r23
 76a:	8f 93       	push	r24
 76c:	9f 93       	push	r25
 76e:	af 93       	push	r26
 770:	bf 93       	push	r27
 772:	ef 93       	push	r30
 774:	ff 93       	push	r31
	UART.Flags.rciv_cmplt = ENABLE;
 776:	5f 9a       	sbi	0x0b, 7	; 11
	if(R_Flag == Available)
 778:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <R_Flag>
 77c:	81 11       	cpse	r24, r1
 77e:	08 c0       	rjmp	.+16     	; 0x790 <__vector_13+0x3c>
	{
		uint8_t Data = UART.Data;
 780:	6c b1       	in	r22, 0x0c	; 12
		if(UART_EN_Buffer_Full == EnQueue(&R_Buffer, Data))
 782:	87 e6       	ldi	r24, 0x67	; 103
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <EnQueue>
 78a:	81 30       	cpi	r24, 0x01	; 1
 78c:	09 f4       	brne	.+2      	; 0x790 <__vector_13+0x3c>
		{
			UART.Enables.rcivCompIntrrpt = DISABLE;
 78e:	57 98       	cbi	0x0a, 7	; 10
		}
		else{/*MISRA C*/}
	}
	else{/*MISRA C*/}
 790:	ff 91       	pop	r31
 792:	ef 91       	pop	r30
 794:	bf 91       	pop	r27
 796:	af 91       	pop	r26
 798:	9f 91       	pop	r25
 79a:	8f 91       	pop	r24
 79c:	7f 91       	pop	r23
 79e:	6f 91       	pop	r22
 7a0:	5f 91       	pop	r21
 7a2:	4f 91       	pop	r20
 7a4:	3f 91       	pop	r19
 7a6:	2f 91       	pop	r18
 7a8:	0f 90       	pop	r0
 7aa:	0f be       	out	0x3f, r0	; 63
 7ac:	0f 90       	pop	r0
 7ae:	1f 90       	pop	r1
 7b0:	18 95       	reti

000007b2 <EnQueue>:
		return_value = Queue_EN_InvalidPointer;
	}
	return return_value;
}
Queue_Error_t	EnQueue			(BQueue_t* queue, uint8_t  Data)
{
 7b2:	0f 93       	push	r16
 7b4:	1f 93       	push	r17
 7b6:	cf 93       	push	r28
 7b8:	df 93       	push	r29
 7ba:	fc 01       	movw	r30, r24
 7bc:	46 2f       	mov	r20, r22
	Queue_Error_t return_value = Queue_EN_valid;
	
	if (((queue->front==0)&&(queue->rear==queue->size-1))||(queue->rear==((queue->front-1)%(queue->size-1))))
 7be:	32 81       	ldd	r19, Z+2	; 0x02
 7c0:	31 11       	cpse	r19, r1
 7c2:	0f c0       	rjmp	.+30     	; 0x7e2 <EnQueue+0x30>
 7c4:	23 81       	ldd	r18, Z+3	; 0x03
 7c6:	c2 2f       	mov	r28, r18
 7c8:	02 2e       	mov	r0, r18
 7ca:	00 0c       	add	r0, r0
 7cc:	dd 0b       	sbc	r29, r29
 7ce:	64 81       	ldd	r22, Z+4	; 0x04
 7d0:	06 2e       	mov	r0, r22
 7d2:	00 0c       	add	r0, r0
 7d4:	77 0b       	sbc	r23, r23
 7d6:	61 50       	subi	r22, 0x01	; 1
 7d8:	71 09       	sbc	r23, r1
 7da:	c6 17       	cp	r28, r22
 7dc:	d7 07       	cpc	r29, r23
 7de:	99 f5       	brne	.+102    	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 7e0:	2c c0       	rjmp	.+88     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 7e2:	23 81       	ldd	r18, Z+3	; 0x03
 7e4:	02 2f       	mov	r16, r18
 7e6:	02 2e       	mov	r0, r18
 7e8:	00 0c       	add	r0, r0
 7ea:	11 0b       	sbc	r17, r17
 7ec:	c4 81       	ldd	r28, Z+4	; 0x04
 7ee:	0c 2e       	mov	r0, r28
 7f0:	00 0c       	add	r0, r0
 7f2:	dd 0b       	sbc	r29, r29
 7f4:	21 97       	sbiw	r28, 0x01	; 1
 7f6:	83 2f       	mov	r24, r19
 7f8:	03 2e       	mov	r0, r19
 7fa:	00 0c       	add	r0, r0
 7fc:	99 0b       	sbc	r25, r25
 7fe:	01 97       	sbiw	r24, 0x01	; 1
 800:	be 01       	movw	r22, r28
 802:	0e 94 4a 06 	call	0xc94	; 0xc94 <__divmodhi4>
 806:	08 17       	cp	r16, r24
 808:	19 07       	cpc	r17, r25
 80a:	c9 f0       	breq	.+50     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
	{
		return Queue_EN_Full;
	}
	else
	{
		if(queue->front == -1)
 80c:	3f 3f       	cpi	r19, 0xFF	; 255
 80e:	19 f4       	brne	.+6      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
		{
			queue->front = 0;
 810:	12 82       	std	Z+2, r1	; 0x02
			queue->rear  = 0;
 812:	13 82       	std	Z+3, r1	; 0x03
 814:	07 c0       	rjmp	.+14     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
		}
		else if (queue->rear == queue->size-1 && queue->front != 0)
 816:	0c 17       	cp	r16, r28
 818:	1d 07       	cpc	r17, r29
 81a:	11 f4       	brne	.+4      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
		{
			queue->rear = 0;
 81c:	13 82       	std	Z+3, r1	; 0x03
 81e:	02 c0       	rjmp	.+4      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
		}
		else
		{
			queue->rear++;
 820:	2f 5f       	subi	r18, 0xFF	; 255
 822:	23 83       	std	Z+3, r18	; 0x03
		}
		queue->buffer[queue->rear] = Data;
 824:	83 81       	ldd	r24, Z+3	; 0x03
 826:	01 90       	ld	r0, Z+
 828:	f0 81       	ld	r31, Z
 82a:	e0 2d       	mov	r30, r0
 82c:	e8 0f       	add	r30, r24
 82e:	f1 1d       	adc	r31, r1
 830:	87 fd       	sbrc	r24, 7
 832:	fa 95       	dec	r31
 834:	40 83       	st	Z, r20
	} 	
	return return_value;
 836:	80 e0       	ldi	r24, 0x00	; 0
 838:	0e c0       	rjmp	.+28     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
{
	Queue_Error_t return_value = Queue_EN_valid;
	
	if (((queue->front==0)&&(queue->rear==queue->size-1))||(queue->rear==((queue->front-1)%(queue->size-1))))
	{
		return Queue_EN_Full;
 83a:	81 e0       	ldi	r24, 0x01	; 1
 83c:	0c c0       	rjmp	.+24     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 83e:	81 e0       	ldi	r24, 0x01	; 1
 840:	0a c0       	rjmp	.+20     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 842:	81 e0       	ldi	r24, 0x01	; 1
 844:	08 c0       	rjmp	.+16     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
}
Queue_Error_t	EnQueue			(BQueue_t* queue, uint8_t  Data)
{
	Queue_Error_t return_value = Queue_EN_valid;
	
	if (((queue->front==0)&&(queue->rear==queue->size-1))||(queue->rear==((queue->front-1)%(queue->size-1))))
 846:	8f ef       	ldi	r24, 0xFF	; 255
 848:	9f ef       	ldi	r25, 0xFF	; 255
 84a:	0e 94 4a 06 	call	0xc94	; 0xc94 <__divmodhi4>
 84e:	c8 17       	cp	r28, r24
 850:	d9 07       	cpc	r29, r25
 852:	31 f7       	brne	.-52     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 854:	f6 cf       	rjmp	.-20     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
			queue->rear++;
		}
		queue->buffer[queue->rear] = Data;
	} 	
	return return_value;
}
 856:	df 91       	pop	r29
 858:	cf 91       	pop	r28
 85a:	1f 91       	pop	r17
 85c:	0f 91       	pop	r16
 85e:	08 95       	ret

00000860 <DeQueue>:
Queue_Error_t	DeQueue			(BQueue_t* queue, uint8_t* Data)
{
 860:	fc 01       	movw	r30, r24
	Queue_Error_t return_value = Queue_EN_valid;
	
	if (queue->front == -1)
 862:	82 81       	ldd	r24, Z+2	; 0x02
 864:	8f 3f       	cpi	r24, 0xFF	; 255
 866:	29 f1       	breq	.+74     	; 0x8b2 <DeQueue+0x52>
	{
		return_value = Queue_EN_Empty;
	}
	else
	{
		*Data = queue->buffer[queue->front];
 868:	a0 81       	ld	r26, Z
 86a:	b1 81       	ldd	r27, Z+1	; 0x01
 86c:	a8 0f       	add	r26, r24
 86e:	b1 1d       	adc	r27, r1
 870:	87 fd       	sbrc	r24, 7
 872:	ba 95       	dec	r27
 874:	8c 91       	ld	r24, X
 876:	db 01       	movw	r26, r22
 878:	8c 93       	st	X, r24
		if (queue->front == queue->rear)
 87a:	22 81       	ldd	r18, Z+2	; 0x02
 87c:	83 81       	ldd	r24, Z+3	; 0x03
 87e:	28 13       	cpse	r18, r24
 880:	05 c0       	rjmp	.+10     	; 0x88c <DeQueue+0x2c>
		{
			queue->front = -1;
 882:	8f ef       	ldi	r24, 0xFF	; 255
 884:	82 83       	std	Z+2, r24	; 0x02
			queue->rear  = -1;
 886:	83 83       	std	Z+3, r24	; 0x03
	} 	
	return return_value;
}
Queue_Error_t	DeQueue			(BQueue_t* queue, uint8_t* Data)
{
	Queue_Error_t return_value = Queue_EN_valid;
 888:	80 e0       	ldi	r24, 0x00	; 0
 88a:	08 95       	ret
		if (queue->front == queue->rear)
		{
			queue->front = -1;
			queue->rear  = -1;
		}
		else if (queue->front == queue->size-1)
 88c:	84 81       	ldd	r24, Z+4	; 0x04
 88e:	08 2e       	mov	r0, r24
 890:	00 0c       	add	r0, r0
 892:	99 0b       	sbc	r25, r25
 894:	01 97       	sbiw	r24, 0x01	; 1
 896:	42 2f       	mov	r20, r18
 898:	02 2e       	mov	r0, r18
 89a:	00 0c       	add	r0, r0
 89c:	55 0b       	sbc	r21, r21
 89e:	48 17       	cp	r20, r24
 8a0:	59 07       	cpc	r21, r25
 8a2:	19 f4       	brne	.+6      	; 0x8aa <DeQueue+0x4a>
		{
			queue->front = 0;
 8a4:	12 82       	std	Z+2, r1	; 0x02
	} 	
	return return_value;
}
Queue_Error_t	DeQueue			(BQueue_t* queue, uint8_t* Data)
{
	Queue_Error_t return_value = Queue_EN_valid;
 8a6:	80 e0       	ldi	r24, 0x00	; 0
 8a8:	08 95       	ret
		{
			queue->front = 0;
		}
		else
		{
			queue->front++;	
 8aa:	2f 5f       	subi	r18, 0xFF	; 255
 8ac:	22 83       	std	Z+2, r18	; 0x02
	} 	
	return return_value;
}
Queue_Error_t	DeQueue			(BQueue_t* queue, uint8_t* Data)
{
	Queue_Error_t return_value = Queue_EN_valid;
 8ae:	80 e0       	ldi	r24, 0x00	; 0
 8b0:	08 95       	ret
	
	if (queue->front == -1)
	{
		return_value = Queue_EN_Empty;
 8b2:	82 e0       	ldi	r24, 0x02	; 2
		{
			queue->front++;	
		}
	}
	return return_value;
 8b4:	08 95       	ret

000008b6 <vListInsertEnd>:
	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
}
 8b6:	cf 93       	push	r28
 8b8:	df 93       	push	r29
 8ba:	9c 01       	movw	r18, r24
 8bc:	fb 01       	movw	r30, r22
 8be:	dc 01       	movw	r26, r24
 8c0:	11 96       	adiw	r26, 0x01	; 1
 8c2:	cd 91       	ld	r28, X+
 8c4:	dc 91       	ld	r29, X
 8c6:	12 97       	sbiw	r26, 0x02	; 2
 8c8:	d3 83       	std	Z+3, r29	; 0x03
 8ca:	c2 83       	std	Z+2, r28	; 0x02
 8cc:	8c 81       	ldd	r24, Y+4	; 0x04
 8ce:	9d 81       	ldd	r25, Y+5	; 0x05
 8d0:	95 83       	std	Z+5, r25	; 0x05
 8d2:	84 83       	std	Z+4, r24	; 0x04
 8d4:	8c 81       	ldd	r24, Y+4	; 0x04
 8d6:	9d 81       	ldd	r25, Y+5	; 0x05
 8d8:	dc 01       	movw	r26, r24
 8da:	13 96       	adiw	r26, 0x03	; 3
 8dc:	7c 93       	st	X, r23
 8de:	6e 93       	st	-X, r22
 8e0:	12 97       	sbiw	r26, 0x02	; 2
 8e2:	7d 83       	std	Y+5, r23	; 0x05
 8e4:	6c 83       	std	Y+4, r22	; 0x04
 8e6:	31 87       	std	Z+9, r19	; 0x09
 8e8:	20 87       	std	Z+8, r18	; 0x08
 8ea:	f9 01       	movw	r30, r18
 8ec:	80 81       	ld	r24, Z
 8ee:	8f 5f       	subi	r24, 0xFF	; 255
 8f0:	80 83       	st	Z, r24
 8f2:	df 91       	pop	r29
 8f4:	cf 91       	pop	r28
 8f6:	08 95       	ret

000008f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8f8:	cf 93       	push	r28
 8fa:	df 93       	push	r29
 8fc:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8fe:	a0 85       	ldd	r26, Z+8	; 0x08
 900:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 902:	c2 81       	ldd	r28, Z+2	; 0x02
 904:	d3 81       	ldd	r29, Z+3	; 0x03
 906:	84 81       	ldd	r24, Z+4	; 0x04
 908:	95 81       	ldd	r25, Z+5	; 0x05
 90a:	9d 83       	std	Y+5, r25	; 0x05
 90c:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 90e:	c4 81       	ldd	r28, Z+4	; 0x04
 910:	d5 81       	ldd	r29, Z+5	; 0x05
 912:	82 81       	ldd	r24, Z+2	; 0x02
 914:	93 81       	ldd	r25, Z+3	; 0x03
 916:	9b 83       	std	Y+3, r25	; 0x03
 918:	8a 83       	std	Y+2, r24	; 0x02

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 91a:	11 96       	adiw	r26, 0x01	; 1
 91c:	8d 91       	ld	r24, X+
 91e:	9c 91       	ld	r25, X
 920:	12 97       	sbiw	r26, 0x02	; 2
 922:	e8 17       	cp	r30, r24
 924:	f9 07       	cpc	r31, r25
 926:	31 f4       	brne	.+12     	; 0x934 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 928:	84 81       	ldd	r24, Z+4	; 0x04
 92a:	95 81       	ldd	r25, Z+5	; 0x05
 92c:	12 96       	adiw	r26, 0x02	; 2
 92e:	9c 93       	st	X, r25
 930:	8e 93       	st	-X, r24
 932:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 934:	11 86       	std	Z+9, r1	; 0x09
 936:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 938:	8c 91       	ld	r24, X
 93a:	81 50       	subi	r24, 0x01	; 1
 93c:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
 93e:	df 91       	pop	r29
 940:	cf 91       	pop	r28
 942:	08 95       	ret

00000944 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 944:	0f 92       	push	r0
 946:	0f b6       	in	r0, 0x3f	; 63
 948:	f8 94       	cli
 94a:	0f 92       	push	r0
 94c:	1f 92       	push	r1
 94e:	11 24       	eor	r1, r1
 950:	2f 92       	push	r2
 952:	3f 92       	push	r3
 954:	4f 92       	push	r4
 956:	5f 92       	push	r5
 958:	6f 92       	push	r6
 95a:	7f 92       	push	r7
 95c:	8f 92       	push	r8
 95e:	9f 92       	push	r9
 960:	af 92       	push	r10
 962:	bf 92       	push	r11
 964:	cf 92       	push	r12
 966:	df 92       	push	r13
 968:	ef 92       	push	r14
 96a:	ff 92       	push	r15
 96c:	0f 93       	push	r16
 96e:	1f 93       	push	r17
 970:	2f 93       	push	r18
 972:	3f 93       	push	r19
 974:	4f 93       	push	r20
 976:	5f 93       	push	r21
 978:	6f 93       	push	r22
 97a:	7f 93       	push	r23
 97c:	8f 93       	push	r24
 97e:	9f 93       	push	r25
 980:	af 93       	push	r26
 982:	bf 93       	push	r27
 984:	cf 93       	push	r28
 986:	df 93       	push	r29
 988:	ef 93       	push	r30
 98a:	ff 93       	push	r31
 98c:	a0 91 df 00 	lds	r26, 0x00DF	; 0x8000df <pxCurrentTCB>
 990:	b0 91 e0 00 	lds	r27, 0x00E0	; 0x8000e0 <pxCurrentTCB+0x1>
 994:	0d b6       	in	r0, 0x3d	; 61
 996:	0d 92       	st	X+, r0
 998:	0e b6       	in	r0, 0x3e	; 62
 99a:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
 99c:	0e 94 20 05 	call	0xa40	; 0xa40 <xTaskIncrementTick>
 9a0:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
 9a2:	0e 94 dd 05 	call	0xbba	; 0xbba <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
 9a6:	a0 91 df 00 	lds	r26, 0x00DF	; 0x8000df <pxCurrentTCB>
 9aa:	b0 91 e0 00 	lds	r27, 0x00E0	; 0x8000e0 <pxCurrentTCB+0x1>
 9ae:	cd 91       	ld	r28, X+
 9b0:	cd bf       	out	0x3d, r28	; 61
 9b2:	dd 91       	ld	r29, X+
 9b4:	de bf       	out	0x3e, r29	; 62
 9b6:	ff 91       	pop	r31
 9b8:	ef 91       	pop	r30
 9ba:	df 91       	pop	r29
 9bc:	cf 91       	pop	r28
 9be:	bf 91       	pop	r27
 9c0:	af 91       	pop	r26
 9c2:	9f 91       	pop	r25
 9c4:	8f 91       	pop	r24
 9c6:	7f 91       	pop	r23
 9c8:	6f 91       	pop	r22
 9ca:	5f 91       	pop	r21
 9cc:	4f 91       	pop	r20
 9ce:	3f 91       	pop	r19
 9d0:	2f 91       	pop	r18
 9d2:	1f 91       	pop	r17
 9d4:	0f 91       	pop	r16
 9d6:	ff 90       	pop	r15
 9d8:	ef 90       	pop	r14
 9da:	df 90       	pop	r13
 9dc:	cf 90       	pop	r12
 9de:	bf 90       	pop	r11
 9e0:	af 90       	pop	r10
 9e2:	9f 90       	pop	r9
 9e4:	8f 90       	pop	r8
 9e6:	7f 90       	pop	r7
 9e8:	6f 90       	pop	r6
 9ea:	5f 90       	pop	r5
 9ec:	4f 90       	pop	r4
 9ee:	3f 90       	pop	r3
 9f0:	2f 90       	pop	r2
 9f2:	1f 90       	pop	r1
 9f4:	0f 90       	pop	r0
 9f6:	0f be       	out	0x3f, r0	; 63
 9f8:	0f 90       	pop	r0

	asm volatile ( "ret" );
 9fa:	08 95       	ret

000009fc <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
 9fc:	0e 94 a2 04 	call	0x944	; 0x944 <vPortYieldFromTick>
		asm volatile ( "reti" );
 a00:	18 95       	reti

00000a02 <prvResetNextTaskUnblockTime>:
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
			{
				taskYIELD();
 a02:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <pxDelayedTaskList>
 a06:	f0 91 ba 00 	lds	r31, 0x00BA	; 0x8000ba <pxDelayedTaskList+0x1>
 a0a:	80 81       	ld	r24, Z
 a0c:	81 11       	cpse	r24, r1
 a0e:	07 c0       	rjmp	.+14     	; 0xa1e <prvResetNextTaskUnblockTime+0x1c>
 a10:	8f ef       	ldi	r24, 0xFF	; 255
 a12:	9f ef       	ldi	r25, 0xFF	; 255
 a14:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <xNextTaskUnblockTime+0x1>
 a18:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <xNextTaskUnblockTime>
 a1c:	08 95       	ret
 a1e:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <pxDelayedTaskList>
 a22:	f0 91 ba 00 	lds	r31, 0x00BA	; 0x8000ba <pxDelayedTaskList+0x1>
 a26:	05 80       	ldd	r0, Z+5	; 0x05
 a28:	f6 81       	ldd	r31, Z+6	; 0x06
 a2a:	e0 2d       	mov	r30, r0
 a2c:	06 80       	ldd	r0, Z+6	; 0x06
 a2e:	f7 81       	ldd	r31, Z+7	; 0x07
 a30:	e0 2d       	mov	r30, r0
 a32:	82 81       	ldd	r24, Z+2	; 0x02
 a34:	93 81       	ldd	r25, Z+3	; 0x03
 a36:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <xNextTaskUnblockTime+0x1>
 a3a:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <xNextTaskUnblockTime>
 a3e:	08 95       	ret

00000a40 <xTaskIncrementTick>:
 a40:	cf 92       	push	r12
 a42:	df 92       	push	r13
 a44:	ef 92       	push	r14
 a46:	ff 92       	push	r15
 a48:	0f 93       	push	r16
 a4a:	1f 93       	push	r17
 a4c:	cf 93       	push	r28
 a4e:	df 93       	push	r29
 a50:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <uxSchedulerSuspended>
 a54:	81 11       	cpse	r24, r1
 a56:	9b c0       	rjmp	.+310    	; 0xb8e <xTaskIncrementTick+0x14e>
 a58:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <xTickCount>
 a5c:	90 91 b6 00 	lds	r25, 0x00B6	; 0x8000b6 <xTickCount+0x1>
 a60:	01 96       	adiw	r24, 0x01	; 1
 a62:	90 93 b6 00 	sts	0x00B6, r25	; 0x8000b6 <xTickCount+0x1>
 a66:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <xTickCount>
 a6a:	e0 90 b5 00 	lds	r14, 0x00B5	; 0x8000b5 <xTickCount>
 a6e:	f0 90 b6 00 	lds	r15, 0x00B6	; 0x8000b6 <xTickCount+0x1>
 a72:	e1 14       	cp	r14, r1
 a74:	f1 04       	cpc	r15, r1
 a76:	b9 f4       	brne	.+46     	; 0xaa6 <xTaskIncrementTick+0x66>
 a78:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <pxDelayedTaskList>
 a7c:	90 91 ba 00 	lds	r25, 0x00BA	; 0x8000ba <pxDelayedTaskList+0x1>
 a80:	20 91 b7 00 	lds	r18, 0x00B7	; 0x8000b7 <pxOverflowDelayedTaskList>
 a84:	30 91 b8 00 	lds	r19, 0x00B8	; 0x8000b8 <pxOverflowDelayedTaskList+0x1>
 a88:	30 93 ba 00 	sts	0x00BA, r19	; 0x8000ba <pxDelayedTaskList+0x1>
 a8c:	20 93 b9 00 	sts	0x00B9, r18	; 0x8000b9 <pxDelayedTaskList>
 a90:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <pxOverflowDelayedTaskList+0x1>
 a94:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <pxOverflowDelayedTaskList>
 a98:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <xNumOfOverflows>
 a9c:	8f 5f       	subi	r24, 0xFF	; 255
 a9e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <xNumOfOverflows>
 aa2:	0e 94 01 05 	call	0xa02	; 0xa02 <prvResetNextTaskUnblockTime>
 aa6:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <xNextTaskUnblockTime>
 aaa:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <xNextTaskUnblockTime+0x1>
 aae:	e8 16       	cp	r14, r24
 ab0:	f9 06       	cpc	r15, r25
 ab2:	10 f4       	brcc	.+4      	; 0xab8 <xTaskIncrementTick+0x78>
 ab4:	d1 2c       	mov	r13, r1
 ab6:	53 c0       	rjmp	.+166    	; 0xb5e <xTaskIncrementTick+0x11e>
 ab8:	d1 2c       	mov	r13, r1
 aba:	cc 24       	eor	r12, r12
 abc:	c3 94       	inc	r12
 abe:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <pxDelayedTaskList>
 ac2:	f0 91 ba 00 	lds	r31, 0x00BA	; 0x8000ba <pxDelayedTaskList+0x1>
 ac6:	80 81       	ld	r24, Z
 ac8:	81 11       	cpse	r24, r1
 aca:	07 c0       	rjmp	.+14     	; 0xada <xTaskIncrementTick+0x9a>
 acc:	8f ef       	ldi	r24, 0xFF	; 255
 ace:	9f ef       	ldi	r25, 0xFF	; 255
 ad0:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <xNextTaskUnblockTime+0x1>
 ad4:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <xNextTaskUnblockTime>
 ad8:	42 c0       	rjmp	.+132    	; 0xb5e <xTaskIncrementTick+0x11e>
 ada:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <pxDelayedTaskList>
 ade:	f0 91 ba 00 	lds	r31, 0x00BA	; 0x8000ba <pxDelayedTaskList+0x1>
 ae2:	05 80       	ldd	r0, Z+5	; 0x05
 ae4:	f6 81       	ldd	r31, Z+6	; 0x06
 ae6:	e0 2d       	mov	r30, r0
 ae8:	c6 81       	ldd	r28, Z+6	; 0x06
 aea:	d7 81       	ldd	r29, Z+7	; 0x07
 aec:	8a 81       	ldd	r24, Y+2	; 0x02
 aee:	9b 81       	ldd	r25, Y+3	; 0x03
 af0:	e8 16       	cp	r14, r24
 af2:	f9 06       	cpc	r15, r25
 af4:	28 f4       	brcc	.+10     	; 0xb00 <xTaskIncrementTick+0xc0>
 af6:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <xNextTaskUnblockTime+0x1>
 afa:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <xNextTaskUnblockTime>
 afe:	2f c0       	rjmp	.+94     	; 0xb5e <xTaskIncrementTick+0x11e>
 b00:	8e 01       	movw	r16, r28
 b02:	0e 5f       	subi	r16, 0xFE	; 254
 b04:	1f 4f       	sbci	r17, 0xFF	; 255
 b06:	c8 01       	movw	r24, r16
 b08:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <uxListRemove>
 b0c:	8c 89       	ldd	r24, Y+20	; 0x14
 b0e:	9d 89       	ldd	r25, Y+21	; 0x15
 b10:	89 2b       	or	r24, r25
 b12:	21 f0       	breq	.+8      	; 0xb1c <xTaskIncrementTick+0xdc>
 b14:	ce 01       	movw	r24, r28
 b16:	0c 96       	adiw	r24, 0x0c	; 12
 b18:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <uxListRemove>
 b1c:	8e 89       	ldd	r24, Y+22	; 0x16
 b1e:	90 91 b4 00 	lds	r25, 0x00B4	; 0x8000b4 <uxTopReadyPriority>
 b22:	98 17       	cp	r25, r24
 b24:	10 f4       	brcc	.+4      	; 0xb2a <xTaskIncrementTick+0xea>
 b26:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <uxTopReadyPriority>
 b2a:	90 e0       	ldi	r25, 0x00	; 0
 b2c:	9c 01       	movw	r18, r24
 b2e:	22 0f       	add	r18, r18
 b30:	33 1f       	adc	r19, r19
 b32:	22 0f       	add	r18, r18
 b34:	33 1f       	adc	r19, r19
 b36:	22 0f       	add	r18, r18
 b38:	33 1f       	adc	r19, r19
 b3a:	82 0f       	add	r24, r18
 b3c:	93 1f       	adc	r25, r19
 b3e:	b8 01       	movw	r22, r16
 b40:	85 54       	subi	r24, 0x45	; 69
 b42:	9f 4f       	sbci	r25, 0xFF	; 255
 b44:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <vListInsertEnd>
 b48:	e0 91 df 00 	lds	r30, 0x00DF	; 0x8000df <pxCurrentTCB>
 b4c:	f0 91 e0 00 	lds	r31, 0x00E0	; 0x8000e0 <pxCurrentTCB+0x1>
 b50:	9e 89       	ldd	r25, Y+22	; 0x16
 b52:	86 89       	ldd	r24, Z+22	; 0x16
 b54:	98 17       	cp	r25, r24
 b56:	08 f4       	brcc	.+2      	; 0xb5a <xTaskIncrementTick+0x11a>
 b58:	b2 cf       	rjmp	.-156    	; 0xabe <xTaskIncrementTick+0x7e>
 b5a:	dc 2c       	mov	r13, r12
 b5c:	b0 cf       	rjmp	.-160    	; 0xabe <xTaskIncrementTick+0x7e>
 b5e:	e0 91 df 00 	lds	r30, 0x00DF	; 0x8000df <pxCurrentTCB>
 b62:	f0 91 e0 00 	lds	r31, 0x00E0	; 0x8000e0 <pxCurrentTCB+0x1>
 b66:	86 89       	ldd	r24, Z+22	; 0x16
 b68:	90 e0       	ldi	r25, 0x00	; 0
 b6a:	fc 01       	movw	r30, r24
 b6c:	ee 0f       	add	r30, r30
 b6e:	ff 1f       	adc	r31, r31
 b70:	ee 0f       	add	r30, r30
 b72:	ff 1f       	adc	r31, r31
 b74:	ee 0f       	add	r30, r30
 b76:	ff 1f       	adc	r31, r31
 b78:	8e 0f       	add	r24, r30
 b7a:	9f 1f       	adc	r25, r31
 b7c:	fc 01       	movw	r30, r24
 b7e:	e5 54       	subi	r30, 0x45	; 69
 b80:	ff 4f       	sbci	r31, 0xFF	; 255
 b82:	80 81       	ld	r24, Z
 b84:	82 30       	cpi	r24, 0x02	; 2
 b86:	48 f0       	brcs	.+18     	; 0xb9a <xTaskIncrementTick+0x15a>
 b88:	dd 24       	eor	r13, r13
 b8a:	d3 94       	inc	r13
 b8c:	06 c0       	rjmp	.+12     	; 0xb9a <xTaskIncrementTick+0x15a>
 b8e:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <uxPendedTicks>
 b92:	8f 5f       	subi	r24, 0xFF	; 255
 b94:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <uxPendedTicks>
 b98:	d1 2c       	mov	r13, r1
 b9a:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <xYieldPending>
 b9e:	88 23       	and	r24, r24
 ba0:	11 f0       	breq	.+4      	; 0xba6 <xTaskIncrementTick+0x166>
 ba2:	dd 24       	eor	r13, r13
 ba4:	d3 94       	inc	r13
 ba6:	8d 2d       	mov	r24, r13
 ba8:	df 91       	pop	r29
 baa:	cf 91       	pop	r28
 bac:	1f 91       	pop	r17
 bae:	0f 91       	pop	r16
 bb0:	ff 90       	pop	r15
 bb2:	ef 90       	pop	r14
 bb4:	df 90       	pop	r13
 bb6:	cf 90       	pop	r12
 bb8:	08 95       	ret

00000bba <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 bba:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <uxSchedulerSuspended>
 bbe:	88 23       	and	r24, r24
 bc0:	21 f0       	breq	.+8      	; 0xbca <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 bc2:	81 e0       	ldi	r24, 0x01	; 1
 bc4:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <xYieldPending>
 bc8:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
 bca:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <xYieldPending>
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 bce:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <uxTopReadyPriority>
 bd2:	90 e0       	ldi	r25, 0x00	; 0
 bd4:	fc 01       	movw	r30, r24
 bd6:	ee 0f       	add	r30, r30
 bd8:	ff 1f       	adc	r31, r31
 bda:	ee 0f       	add	r30, r30
 bdc:	ff 1f       	adc	r31, r31
 bde:	ee 0f       	add	r30, r30
 be0:	ff 1f       	adc	r31, r31
 be2:	8e 0f       	add	r24, r30
 be4:	9f 1f       	adc	r25, r31
 be6:	fc 01       	movw	r30, r24
 be8:	e5 54       	subi	r30, 0x45	; 69
 bea:	ff 4f       	sbci	r31, 0xFF	; 255
 bec:	80 81       	ld	r24, Z
 bee:	81 11       	cpse	r24, r1
 bf0:	17 c0       	rjmp	.+46     	; 0xc20 <vTaskSwitchContext+0x66>
 bf2:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <uxTopReadyPriority>
 bf6:	81 50       	subi	r24, 0x01	; 1
 bf8:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <uxTopReadyPriority>
 bfc:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <uxTopReadyPriority>
 c00:	90 e0       	ldi	r25, 0x00	; 0
 c02:	fc 01       	movw	r30, r24
 c04:	ee 0f       	add	r30, r30
 c06:	ff 1f       	adc	r31, r31
 c08:	ee 0f       	add	r30, r30
 c0a:	ff 1f       	adc	r31, r31
 c0c:	ee 0f       	add	r30, r30
 c0e:	ff 1f       	adc	r31, r31
 c10:	8e 0f       	add	r24, r30
 c12:	9f 1f       	adc	r25, r31
 c14:	fc 01       	movw	r30, r24
 c16:	e5 54       	subi	r30, 0x45	; 69
 c18:	ff 4f       	sbci	r31, 0xFF	; 255
 c1a:	80 81       	ld	r24, Z
 c1c:	88 23       	and	r24, r24
 c1e:	49 f3       	breq	.-46     	; 0xbf2 <vTaskSwitchContext+0x38>
 c20:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <uxTopReadyPriority>
 c24:	90 e0       	ldi	r25, 0x00	; 0
 c26:	9c 01       	movw	r18, r24
 c28:	22 0f       	add	r18, r18
 c2a:	33 1f       	adc	r19, r19
 c2c:	22 0f       	add	r18, r18
 c2e:	33 1f       	adc	r19, r19
 c30:	22 0f       	add	r18, r18
 c32:	33 1f       	adc	r19, r19
 c34:	28 0f       	add	r18, r24
 c36:	39 1f       	adc	r19, r25
 c38:	d9 01       	movw	r26, r18
 c3a:	a5 54       	subi	r26, 0x45	; 69
 c3c:	bf 4f       	sbci	r27, 0xFF	; 255
 c3e:	11 96       	adiw	r26, 0x01	; 1
 c40:	ed 91       	ld	r30, X+
 c42:	fc 91       	ld	r31, X
 c44:	12 97       	sbiw	r26, 0x02	; 2
 c46:	02 80       	ldd	r0, Z+2	; 0x02
 c48:	f3 81       	ldd	r31, Z+3	; 0x03
 c4a:	e0 2d       	mov	r30, r0
 c4c:	12 96       	adiw	r26, 0x02	; 2
 c4e:	fc 93       	st	X, r31
 c50:	ee 93       	st	-X, r30
 c52:	11 97       	sbiw	r26, 0x01	; 1
 c54:	22 54       	subi	r18, 0x42	; 66
 c56:	3f 4f       	sbci	r19, 0xFF	; 255
 c58:	e2 17       	cp	r30, r18
 c5a:	f3 07       	cpc	r31, r19
 c5c:	29 f4       	brne	.+10     	; 0xc68 <vTaskSwitchContext+0xae>
 c5e:	22 81       	ldd	r18, Z+2	; 0x02
 c60:	33 81       	ldd	r19, Z+3	; 0x03
 c62:	fd 01       	movw	r30, r26
 c64:	32 83       	std	Z+2, r19	; 0x02
 c66:	21 83       	std	Z+1, r18	; 0x01
 c68:	fc 01       	movw	r30, r24
 c6a:	ee 0f       	add	r30, r30
 c6c:	ff 1f       	adc	r31, r31
 c6e:	ee 0f       	add	r30, r30
 c70:	ff 1f       	adc	r31, r31
 c72:	ee 0f       	add	r30, r30
 c74:	ff 1f       	adc	r31, r31
 c76:	8e 0f       	add	r24, r30
 c78:	9f 1f       	adc	r25, r31
 c7a:	fc 01       	movw	r30, r24
 c7c:	e5 54       	subi	r30, 0x45	; 69
 c7e:	ff 4f       	sbci	r31, 0xFF	; 255
 c80:	01 80       	ldd	r0, Z+1	; 0x01
 c82:	f2 81       	ldd	r31, Z+2	; 0x02
 c84:	e0 2d       	mov	r30, r0
 c86:	86 81       	ldd	r24, Z+6	; 0x06
 c88:	97 81       	ldd	r25, Z+7	; 0x07
 c8a:	90 93 e0 00 	sts	0x00E0, r25	; 0x8000e0 <pxCurrentTCB+0x1>
 c8e:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <pxCurrentTCB>
 c92:	08 95       	ret

00000c94 <__divmodhi4>:
 c94:	97 fb       	bst	r25, 7
 c96:	07 2e       	mov	r0, r23
 c98:	16 f4       	brtc	.+4      	; 0xc9e <__divmodhi4+0xa>
 c9a:	00 94       	com	r0
 c9c:	07 d0       	rcall	.+14     	; 0xcac <__divmodhi4_neg1>
 c9e:	77 fd       	sbrc	r23, 7
 ca0:	09 d0       	rcall	.+18     	; 0xcb4 <__divmodhi4_neg2>
 ca2:	0e 94 a1 06 	call	0xd42	; 0xd42 <__udivmodhi4>
 ca6:	07 fc       	sbrc	r0, 7
 ca8:	05 d0       	rcall	.+10     	; 0xcb4 <__divmodhi4_neg2>
 caa:	3e f4       	brtc	.+14     	; 0xcba <__divmodhi4_exit>

00000cac <__divmodhi4_neg1>:
 cac:	90 95       	com	r25
 cae:	81 95       	neg	r24
 cb0:	9f 4f       	sbci	r25, 0xFF	; 255
 cb2:	08 95       	ret

00000cb4 <__divmodhi4_neg2>:
 cb4:	70 95       	com	r23
 cb6:	61 95       	neg	r22
 cb8:	7f 4f       	sbci	r23, 0xFF	; 255

00000cba <__divmodhi4_exit>:
 cba:	08 95       	ret

00000cbc <__udivmodsi4>:
 cbc:	a1 e2       	ldi	r26, 0x21	; 33
 cbe:	1a 2e       	mov	r1, r26
 cc0:	aa 1b       	sub	r26, r26
 cc2:	bb 1b       	sub	r27, r27
 cc4:	fd 01       	movw	r30, r26
 cc6:	0d c0       	rjmp	.+26     	; 0xce2 <__udivmodsi4_ep>

00000cc8 <__udivmodsi4_loop>:
 cc8:	aa 1f       	adc	r26, r26
 cca:	bb 1f       	adc	r27, r27
 ccc:	ee 1f       	adc	r30, r30
 cce:	ff 1f       	adc	r31, r31
 cd0:	a2 17       	cp	r26, r18
 cd2:	b3 07       	cpc	r27, r19
 cd4:	e4 07       	cpc	r30, r20
 cd6:	f5 07       	cpc	r31, r21
 cd8:	20 f0       	brcs	.+8      	; 0xce2 <__udivmodsi4_ep>
 cda:	a2 1b       	sub	r26, r18
 cdc:	b3 0b       	sbc	r27, r19
 cde:	e4 0b       	sbc	r30, r20
 ce0:	f5 0b       	sbc	r31, r21

00000ce2 <__udivmodsi4_ep>:
 ce2:	66 1f       	adc	r22, r22
 ce4:	77 1f       	adc	r23, r23
 ce6:	88 1f       	adc	r24, r24
 ce8:	99 1f       	adc	r25, r25
 cea:	1a 94       	dec	r1
 cec:	69 f7       	brne	.-38     	; 0xcc8 <__udivmodsi4_loop>
 cee:	60 95       	com	r22
 cf0:	70 95       	com	r23
 cf2:	80 95       	com	r24
 cf4:	90 95       	com	r25
 cf6:	9b 01       	movw	r18, r22
 cf8:	ac 01       	movw	r20, r24
 cfa:	bd 01       	movw	r22, r26
 cfc:	cf 01       	movw	r24, r30
 cfe:	08 95       	ret

00000d00 <__adddi3_s8>:
 d00:	00 24       	eor	r0, r0
 d02:	a7 fd       	sbrc	r26, 7
 d04:	00 94       	com	r0
 d06:	2a 0f       	add	r18, r26
 d08:	30 1d       	adc	r19, r0
 d0a:	40 1d       	adc	r20, r0
 d0c:	50 1d       	adc	r21, r0
 d0e:	60 1d       	adc	r22, r0
 d10:	70 1d       	adc	r23, r0
 d12:	80 1d       	adc	r24, r0
 d14:	90 1d       	adc	r25, r0
 d16:	08 95       	ret

00000d18 <__cmpdi2>:
 d18:	2a 15       	cp	r18, r10
 d1a:	3b 05       	cpc	r19, r11
 d1c:	4c 05       	cpc	r20, r12
 d1e:	5d 05       	cpc	r21, r13
 d20:	6e 05       	cpc	r22, r14
 d22:	7f 05       	cpc	r23, r15
 d24:	80 07       	cpc	r24, r16
 d26:	91 07       	cpc	r25, r17
 d28:	08 95       	ret

00000d2a <__cmpdi2_s8>:
 d2a:	00 24       	eor	r0, r0
 d2c:	a7 fd       	sbrc	r26, 7
 d2e:	00 94       	com	r0
 d30:	2a 17       	cp	r18, r26
 d32:	30 05       	cpc	r19, r0
 d34:	40 05       	cpc	r20, r0
 d36:	50 05       	cpc	r21, r0
 d38:	60 05       	cpc	r22, r0
 d3a:	70 05       	cpc	r23, r0
 d3c:	80 05       	cpc	r24, r0
 d3e:	90 05       	cpc	r25, r0
 d40:	08 95       	ret

00000d42 <__udivmodhi4>:
 d42:	aa 1b       	sub	r26, r26
 d44:	bb 1b       	sub	r27, r27
 d46:	51 e1       	ldi	r21, 0x11	; 17
 d48:	07 c0       	rjmp	.+14     	; 0xd58 <__udivmodhi4_ep>

00000d4a <__udivmodhi4_loop>:
 d4a:	aa 1f       	adc	r26, r26
 d4c:	bb 1f       	adc	r27, r27
 d4e:	a6 17       	cp	r26, r22
 d50:	b7 07       	cpc	r27, r23
 d52:	10 f0       	brcs	.+4      	; 0xd58 <__udivmodhi4_ep>
 d54:	a6 1b       	sub	r26, r22
 d56:	b7 0b       	sbc	r27, r23

00000d58 <__udivmodhi4_ep>:
 d58:	88 1f       	adc	r24, r24
 d5a:	99 1f       	adc	r25, r25
 d5c:	5a 95       	dec	r21
 d5e:	a9 f7       	brne	.-22     	; 0xd4a <__udivmodhi4_loop>
 d60:	80 95       	com	r24
 d62:	90 95       	com	r25
 d64:	bc 01       	movw	r22, r24
 d66:	cd 01       	movw	r24, r26
 d68:	08 95       	ret

00000d6a <_exit>:
 d6a:	f8 94       	cli

00000d6c <__stop_program>:
 d6c:	ff cf       	rjmp	.-2      	; 0xd6c <__stop_program>
