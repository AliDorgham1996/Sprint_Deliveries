
Car_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e42  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  00000e42  00000ed6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800084  00800084  00000efa  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000efc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  000015c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00001650  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001811  00000000  00000000  000017b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000935  00000000  00000000  00002fc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ebb  00000000  00000000  000038f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000450  00000000  00000000  000047b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008f8  00000000  00000000  00004c04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ee0  00000000  00000000  000054fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__vector_4>
  14:	0c 94 a1 06 	jmp	0xd42	; 0xd42 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 cb 06 	jmp	0xd96	; 0xd96 <__vector_10>
  2c:	0c 94 77 06 	jmp	0xcee	; 0xcee <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e4       	ldi	r30, 0x42	; 66
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 38       	cpi	r26, 0x84	; 132
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e8       	ldi	r26, 0x84	; 132
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 38       	cpi	r26, 0x8C	; 140
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 0e 02 	call	0x41c	; 0x41c <main>
  8a:	0c 94 1f 07 	jmp	0xe3e	; 0xe3e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <App_Init>:
static void GEAR_Update(void);
static void APP_Apply(void);

void App_Init(void)
{
	Basic_io_init();
  92:	0e 94 f6 01 	call	0x3ec	; 0x3ec <Basic_io_init>
	BUTTON_init();
  96:	0e 94 1c 02 	call	0x438	; 0x438 <BUTTON_init>
	MOTOR_INIT(Motor1);
  9a:	80 e0       	ldi	r24, 0x00	; 0
  9c:	0e 94 a2 02 	call	0x544	; 0x544 <MOTOR_INIT>
	MOTOR_INIT(Motor2);	
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	0e 94 a2 02 	call	0x544	; 0x544 <MOTOR_INIT>
	sei();
  a6:	78 94       	sei
}
  a8:	08 95       	ret

000000aa <App_Update>:

void App_Update(void)
{
  aa:	0f 93       	push	r16
  ac:	1f 93       	push	r17
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	0f 92       	push	r0
  b4:	cd b7       	in	r28, 0x3d	; 61
  b6:	de b7       	in	r29, 0x3e	; 62
	APP_Apply();
}

static void GEAR_Update(void)
{  
	BTN_State_t  BTN_value = BTN_LOW;
  b8:	19 82       	std	Y+1, r1	; 0x01
	BUTTON_READ (BUTTON_GEAR, &BTN_value);	
  ba:	83 e0       	ldi	r24, 0x03	; 3
  bc:	be 01       	movw	r22, r28
  be:	6f 5f       	subi	r22, 0xFF	; 255
  c0:	7f 4f       	sbci	r23, 0xFF	; 255
  c2:	0e 94 41 02 	call	0x482	; 0x482 <BUTTON_READ>
	if(BTN_value == BTN_HIGH)
  c6:	89 81       	ldd	r24, Y+1	; 0x01
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	c1 f5       	brne	.+112    	; 0x13c <App_Update+0x92>
	{
		do 
		{
			BUTTON_READ (BUTTON_GEAR, &BTN_value);
  cc:	83 e0       	ldi	r24, 0x03	; 3
  ce:	be 01       	movw	r22, r28
  d0:	6f 5f       	subi	r22, 0xFF	; 255
  d2:	7f 4f       	sbci	r23, 0xFF	; 255
  d4:	0e 94 41 02 	call	0x482	; 0x482 <BUTTON_READ>
		} while(BTN_value == BTN_HIGH);
  d8:	89 81       	ldd	r24, Y+1	; 0x01
  da:	81 30       	cpi	r24, 0x01	; 1
  dc:	b9 f3       	breq	.-18     	; 0xcc <App_Update+0x22>
		
		switch (CAR_Gear)
  de:	80 91 60 00 	lds	r24, 0x0060
  e2:	82 30       	cpi	r24, 0x02	; 2
  e4:	f9 f0       	breq	.+62     	; 0x124 <App_Update+0x7a>
  e6:	83 30       	cpi	r24, 0x03	; 3
  e8:	28 f4       	brcc	.+10     	; 0xf4 <App_Update+0x4a>
  ea:	88 23       	and	r24, r24
  ec:	69 f0       	breq	.+26     	; 0x108 <App_Update+0x5e>
  ee:	81 30       	cpi	r24, 0x01	; 1
  f0:	29 f5       	brne	.+74     	; 0x13c <App_Update+0x92>
  f2:	11 c0       	rjmp	.+34     	; 0x116 <App_Update+0x6c>
  f4:	83 30       	cpi	r24, 0x03	; 3
  f6:	e9 f0       	breq	.+58     	; 0x132 <App_Update+0x88>
  f8:	8a 30       	cpi	r24, 0x0A	; 10
  fa:	01 f5       	brne	.+64     	; 0x13c <App_Update+0x92>
		{
			case CAR_EN_Stop:
			{
				Led_only_on(Led0);
  fc:	84 e0       	ldi	r24, 0x04	; 4
  fe:	0e 94 fd 01 	call	0x3fa	; 0x3fa <Led_only_on>
				CAR_Gear = CAR_EN_F_30;
 102:	10 92 60 00 	sts	0x0060, r1
 106:	1a c0       	rjmp	.+52     	; 0x13c <App_Update+0x92>
			}break;
			case CAR_EN_F_30:
			{
				Led_only_on(Led1);
 108:	85 e0       	ldi	r24, 0x05	; 5
 10a:	0e 94 fd 01 	call	0x3fa	; 0x3fa <Led_only_on>
				CAR_Gear = CAR_EN_F_60;
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	80 93 60 00 	sts	0x0060, r24
 114:	13 c0       	rjmp	.+38     	; 0x13c <App_Update+0x92>
			}break;
			case CAR_EN_F_60:
			{
				Led_only_on(Led2);
 116:	86 e0       	ldi	r24, 0x06	; 6
 118:	0e 94 fd 01 	call	0x3fa	; 0x3fa <Led_only_on>
				CAR_Gear = CAR_EN_F_90;
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	80 93 60 00 	sts	0x0060, r24
 122:	0c c0       	rjmp	.+24     	; 0x13c <App_Update+0x92>
			
			}break;
			case CAR_EN_F_90:
			{
				Led_only_on(Led3);
 124:	87 e0       	ldi	r24, 0x07	; 7
 126:	0e 94 fd 01 	call	0x3fa	; 0x3fa <Led_only_on>
				CAR_Gear = CAR_EN_BACK;
 12a:	83 e0       	ldi	r24, 0x03	; 3
 12c:	80 93 60 00 	sts	0x0060, r24
 130:	05 c0       	rjmp	.+10     	; 0x13c <App_Update+0x92>
			}break;
			case CAR_EN_BACK:
			{
				Led_only_on(Led0);
 132:	84 e0       	ldi	r24, 0x04	; 4
 134:	0e 94 fd 01 	call	0x3fa	; 0x3fa <Led_only_on>
				CAR_Gear = CAR_EN_F_30;					
 138:	10 92 60 00 	sts	0x0060, r1
	}
	else{/*MISRA C*/}	
}
void Move_Update(void)
{  
	BTN_State_t  BTN_value = BTN_LOW;
 13c:	19 82       	std	Y+1, r1	; 0x01
	switch(CAR)
 13e:	80 91 61 00 	lds	r24, 0x0061
 142:	87 30       	cpi	r24, 0x07	; 7
 144:	09 f4       	brne	.+2      	; 0x148 <App_Update+0x9e>
 146:	52 c0       	rjmp	.+164    	; 0x1ec <App_Update+0x142>
 148:	88 30       	cpi	r24, 0x08	; 8
 14a:	40 f4       	brcc	.+16     	; 0x15c <App_Update+0xb2>
 14c:	85 30       	cpi	r24, 0x05	; 5
 14e:	61 f1       	breq	.+88     	; 0x1a8 <App_Update+0xfe>
 150:	86 30       	cpi	r24, 0x06	; 6
 152:	d8 f5       	brcc	.+118    	; 0x1ca <App_Update+0x120>
 154:	84 30       	cpi	r24, 0x04	; 4
 156:	09 f0       	breq	.+2      	; 0x15a <App_Update+0xb0>
 158:	d6 c0       	rjmp	.+428    	; 0x306 <App_Update+0x25c>
 15a:	15 c0       	rjmp	.+42     	; 0x186 <App_Update+0xdc>
 15c:	89 30       	cpi	r24, 0x09	; 9
 15e:	09 f4       	brne	.+2      	; 0x162 <App_Update+0xb8>
 160:	67 c0       	rjmp	.+206    	; 0x230 <App_Update+0x186>
 162:	89 30       	cpi	r24, 0x09	; 9
 164:	08 f4       	brcc	.+2      	; 0x168 <App_Update+0xbe>
 166:	53 c0       	rjmp	.+166    	; 0x20e <App_Update+0x164>
 168:	8a 30       	cpi	r24, 0x0A	; 10
 16a:	09 f4       	brne	.+2      	; 0x16e <App_Update+0xc4>
 16c:	72 c0       	rjmp	.+228    	; 0x252 <App_Update+0x1a8>
 16e:	8b 30       	cpi	r24, 0x0B	; 11
 170:	09 f0       	breq	.+2      	; 0x174 <App_Update+0xca>
 172:	c9 c0       	rjmp	.+402    	; 0x306 <App_Update+0x25c>
	{
		case CAR_EN_Init:
		{
			if(CAR_Gear == CAR_EN_F_30)
 174:	80 91 60 00 	lds	r24, 0x0060
 178:	88 23       	and	r24, r24
 17a:	09 f0       	breq	.+2      	; 0x17e <App_Update+0xd4>
 17c:	31 c1       	rjmp	.+610    	; 0x3e0 <App_Update+0x336>
			{
				CAR = CAR_EN_Stop;
 17e:	8a e0       	ldi	r24, 0x0A	; 10
 180:	80 93 61 00 	sts	0x0061, r24
 184:	d5 c0       	rjmp	.+426    	; 0x330 <App_Update+0x286>
			else{/*MISRA C*/}
		}break;	
		case CAR_EN_B_30:
		{
			//check transfer conditions
			BUTTON_READ (BUTTON_MOVE, &BTN_value);
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	be 01       	movw	r22, r28
 18a:	6f 5f       	subi	r22, 0xFF	; 255
 18c:	7f 4f       	sbci	r23, 0xFF	; 255
 18e:	0e 94 41 02 	call	0x482	; 0x482 <BUTTON_READ>
			if(BTN_value == BTN_HIGH)
 192:	89 81       	ldd	r24, Y+1	; 0x01
 194:	81 30       	cpi	r24, 0x01	; 1
 196:	21 f4       	brne	.+8      	; 0x1a0 <App_Update+0xf6>
			{
				CAR = CAR_EN_B_30;
 198:	84 e0       	ldi	r24, 0x04	; 4
 19a:	80 93 61 00 	sts	0x0061, r24
 19e:	04 c1       	rjmp	.+520    	; 0x3a8 <App_Update+0x2fe>
			}
			else
			{
				CAR = CAR_EN_Stop;
 1a0:	8a e0       	ldi	r24, 0x0A	; 10
 1a2:	80 93 61 00 	sts	0x0061, r24
 1a6:	c4 c0       	rjmp	.+392    	; 0x330 <App_Update+0x286>
			}
		}break;
		case CAR_EN_B_R_30:
		{
			//check transfer conditions
			BUTTON_READ (BUTTON_RIGHT, &BTN_value);
 1a8:	82 e0       	ldi	r24, 0x02	; 2
 1aa:	be 01       	movw	r22, r28
 1ac:	6f 5f       	subi	r22, 0xFF	; 255
 1ae:	7f 4f       	sbci	r23, 0xFF	; 255
 1b0:	0e 94 41 02 	call	0x482	; 0x482 <BUTTON_READ>
			if(BTN_value == BTN_HIGH)
 1b4:	89 81       	ldd	r24, Y+1	; 0x01
 1b6:	81 30       	cpi	r24, 0x01	; 1
 1b8:	21 f4       	brne	.+8      	; 0x1c2 <App_Update+0x118>
			{
				CAR = CAR_EN_B_R_30;
 1ba:	85 e0       	ldi	r24, 0x05	; 5
 1bc:	80 93 61 00 	sts	0x0061, r24
 1c0:	fe c0       	rjmp	.+508    	; 0x3be <App_Update+0x314>
			}
			else
			{
				CAR = CAR_EN_Stop;
 1c2:	8a e0       	ldi	r24, 0x0A	; 10
 1c4:	80 93 61 00 	sts	0x0061, r24
 1c8:	b3 c0       	rjmp	.+358    	; 0x330 <App_Update+0x286>
			}
		}break;
		case CAR_EN_B_L_30:
		{
			//check transfer conditions
			BUTTON_READ (BUTTON_LEFT, &BTN_value);
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	be 01       	movw	r22, r28
 1ce:	6f 5f       	subi	r22, 0xFF	; 255
 1d0:	7f 4f       	sbci	r23, 0xFF	; 255
 1d2:	0e 94 41 02 	call	0x482	; 0x482 <BUTTON_READ>
			if(BTN_value == BTN_HIGH)
 1d6:	89 81       	ldd	r24, Y+1	; 0x01
 1d8:	81 30       	cpi	r24, 0x01	; 1
 1da:	21 f4       	brne	.+8      	; 0x1e4 <App_Update+0x13a>
			{
				CAR = CAR_EN_B_L_30;
 1dc:	86 e0       	ldi	r24, 0x06	; 6
 1de:	80 93 61 00 	sts	0x0061, r24
 1e2:	f6 c0       	rjmp	.+492    	; 0x3d0 <App_Update+0x326>
			}
			else
			{
				CAR = CAR_EN_Stop;
 1e4:	8a e0       	ldi	r24, 0x0A	; 10
 1e6:	80 93 61 00 	sts	0x0061, r24
 1ea:	a2 c0       	rjmp	.+324    	; 0x330 <App_Update+0x286>
			}
		}break;
		case CAR_EN_Move:
		{
			//check transfer conditions
			BUTTON_READ (BUTTON_MOVE, &BTN_value);
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	be 01       	movw	r22, r28
 1f0:	6f 5f       	subi	r22, 0xFF	; 255
 1f2:	7f 4f       	sbci	r23, 0xFF	; 255
 1f4:	0e 94 41 02 	call	0x482	; 0x482 <BUTTON_READ>
			if(BTN_value == BTN_HIGH)
 1f8:	89 81       	ldd	r24, Y+1	; 0x01
 1fa:	81 30       	cpi	r24, 0x01	; 1
 1fc:	21 f4       	brne	.+8      	; 0x206 <App_Update+0x15c>
			{
				CAR = CAR_EN_Move;
 1fe:	87 e0       	ldi	r24, 0x07	; 7
 200:	80 93 61 00 	sts	0x0061, r24
 204:	9c c0       	rjmp	.+312    	; 0x33e <App_Update+0x294>
			}
			else
			{
				CAR = CAR_EN_Stop;
 206:	8a e0       	ldi	r24, 0x0A	; 10
 208:	80 93 61 00 	sts	0x0061, r24
 20c:	91 c0       	rjmp	.+290    	; 0x330 <App_Update+0x286>
			}
		}break;
		case CAR_EN_Right:
		{
			//check transfer conditions
			BUTTON_READ (BUTTON_RIGHT, &BTN_value);
 20e:	82 e0       	ldi	r24, 0x02	; 2
 210:	be 01       	movw	r22, r28
 212:	6f 5f       	subi	r22, 0xFF	; 255
 214:	7f 4f       	sbci	r23, 0xFF	; 255
 216:	0e 94 41 02 	call	0x482	; 0x482 <BUTTON_READ>
			if(BTN_value == BTN_HIGH)
 21a:	89 81       	ldd	r24, Y+1	; 0x01
 21c:	81 30       	cpi	r24, 0x01	; 1
 21e:	21 f4       	brne	.+8      	; 0x228 <App_Update+0x17e>
			{
				CAR = CAR_EN_Right;
 220:	88 e0       	ldi	r24, 0x08	; 8
 222:	80 93 61 00 	sts	0x0061, r24
 226:	a2 c0       	rjmp	.+324    	; 0x36c <App_Update+0x2c2>
			}
			else
			{
				CAR = CAR_EN_Stop;
 228:	8a e0       	ldi	r24, 0x0A	; 10
 22a:	80 93 61 00 	sts	0x0061, r24
 22e:	80 c0       	rjmp	.+256    	; 0x330 <App_Update+0x286>
			}
		}break;
		case CAR_EN_Left:
		{
			//check transfer conditions
			BUTTON_READ (BUTTON_LEFT, &BTN_value);
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	be 01       	movw	r22, r28
 234:	6f 5f       	subi	r22, 0xFF	; 255
 236:	7f 4f       	sbci	r23, 0xFF	; 255
 238:	0e 94 41 02 	call	0x482	; 0x482 <BUTTON_READ>
			if(BTN_value == BTN_HIGH)
 23c:	89 81       	ldd	r24, Y+1	; 0x01
 23e:	81 30       	cpi	r24, 0x01	; 1
 240:	21 f4       	brne	.+8      	; 0x24a <App_Update+0x1a0>
			{
				CAR = CAR_EN_Left;
 242:	89 e0       	ldi	r24, 0x09	; 9
 244:	80 93 61 00 	sts	0x0061, r24
 248:	a0 c0       	rjmp	.+320    	; 0x38a <App_Update+0x2e0>
			}
			else
			{
				CAR = CAR_EN_Stop;
 24a:	8a e0       	ldi	r24, 0x0A	; 10
 24c:	80 93 61 00 	sts	0x0061, r24
 250:	6f c0       	rjmp	.+222    	; 0x330 <App_Update+0x286>
			}
		}break;
		case CAR_EN_Stop :
		{
			if(CAR_Gear == CAR_EN_BACK)
 252:	80 91 60 00 	lds	r24, 0x0060
 256:	83 30       	cpi	r24, 0x03	; 3
 258:	59 f5       	brne	.+86     	; 0x2b0 <App_Update+0x206>
			{
				//priority 1
				//check transfer conditions
				BUTTON_READ (BUTTON_MOVE, &BTN_value);
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	be 01       	movw	r22, r28
 25e:	6f 5f       	subi	r22, 0xFF	; 255
 260:	7f 4f       	sbci	r23, 0xFF	; 255
 262:	0e 94 41 02 	call	0x482	; 0x482 <BUTTON_READ>
				if(BTN_value == BTN_HIGH)
 266:	89 81       	ldd	r24, Y+1	; 0x01
 268:	81 30       	cpi	r24, 0x01	; 1
 26a:	21 f4       	brne	.+8      	; 0x274 <App_Update+0x1ca>
				{
					CAR = CAR_EN_B_30;
 26c:	84 e0       	ldi	r24, 0x04	; 4
 26e:	80 93 61 00 	sts	0x0061, r24
 272:	9a c0       	rjmp	.+308    	; 0x3a8 <App_Update+0x2fe>
				}
				else
				{
					//priority 2
					//check transfer conditions
					BUTTON_READ (BUTTON_RIGHT, &BTN_value);
 274:	82 e0       	ldi	r24, 0x02	; 2
 276:	be 01       	movw	r22, r28
 278:	6f 5f       	subi	r22, 0xFF	; 255
 27a:	7f 4f       	sbci	r23, 0xFF	; 255
 27c:	0e 94 41 02 	call	0x482	; 0x482 <BUTTON_READ>
					if(BTN_value == BTN_HIGH)
 280:	89 81       	ldd	r24, Y+1	; 0x01
 282:	81 30       	cpi	r24, 0x01	; 1
 284:	21 f4       	brne	.+8      	; 0x28e <App_Update+0x1e4>
					{
						CAR = CAR_EN_B_R_30;
 286:	85 e0       	ldi	r24, 0x05	; 5
 288:	80 93 61 00 	sts	0x0061, r24
 28c:	98 c0       	rjmp	.+304    	; 0x3be <App_Update+0x314>
					}
					else
					{
						//priority 3
						//check transfer conditions
						BUTTON_READ (BUTTON_LEFT, &BTN_value);
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	be 01       	movw	r22, r28
 292:	6f 5f       	subi	r22, 0xFF	; 255
 294:	7f 4f       	sbci	r23, 0xFF	; 255
 296:	0e 94 41 02 	call	0x482	; 0x482 <BUTTON_READ>
						if(BTN_value == BTN_HIGH)
 29a:	89 81       	ldd	r24, Y+1	; 0x01
 29c:	81 30       	cpi	r24, 0x01	; 1
 29e:	21 f4       	brne	.+8      	; 0x2a8 <App_Update+0x1fe>
						{
							CAR = CAR_EN_B_L_30;
 2a0:	86 e0       	ldi	r24, 0x06	; 6
 2a2:	80 93 61 00 	sts	0x0061, r24
 2a6:	94 c0       	rjmp	.+296    	; 0x3d0 <App_Update+0x326>
						}
						else
						{
							CAR = CAR_EN_Stop;
 2a8:	8a e0       	ldi	r24, 0x0A	; 10
 2aa:	80 93 61 00 	sts	0x0061, r24
 2ae:	40 c0       	rjmp	.+128    	; 0x330 <App_Update+0x286>
			}
			else
			{
				//priority 1
				//check transfer conditions
				BUTTON_READ (BUTTON_MOVE, &BTN_value);
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	be 01       	movw	r22, r28
 2b4:	6f 5f       	subi	r22, 0xFF	; 255
 2b6:	7f 4f       	sbci	r23, 0xFF	; 255
 2b8:	0e 94 41 02 	call	0x482	; 0x482 <BUTTON_READ>
				if(BTN_value == BTN_HIGH)
 2bc:	89 81       	ldd	r24, Y+1	; 0x01
 2be:	81 30       	cpi	r24, 0x01	; 1
 2c0:	21 f4       	brne	.+8      	; 0x2ca <App_Update+0x220>
				{
					CAR = CAR_EN_Move;
 2c2:	87 e0       	ldi	r24, 0x07	; 7
 2c4:	80 93 61 00 	sts	0x0061, r24
 2c8:	3a c0       	rjmp	.+116    	; 0x33e <App_Update+0x294>
				}
				else
				{
					//priority 2
					//check transfer conditions
					BUTTON_READ (BUTTON_RIGHT, &BTN_value);
 2ca:	82 e0       	ldi	r24, 0x02	; 2
 2cc:	be 01       	movw	r22, r28
 2ce:	6f 5f       	subi	r22, 0xFF	; 255
 2d0:	7f 4f       	sbci	r23, 0xFF	; 255
 2d2:	0e 94 41 02 	call	0x482	; 0x482 <BUTTON_READ>
					if(BTN_value == BTN_HIGH)
 2d6:	89 81       	ldd	r24, Y+1	; 0x01
 2d8:	81 30       	cpi	r24, 0x01	; 1
 2da:	21 f4       	brne	.+8      	; 0x2e4 <App_Update+0x23a>
					{
						CAR = CAR_EN_Right;
 2dc:	88 e0       	ldi	r24, 0x08	; 8
 2de:	80 93 61 00 	sts	0x0061, r24
 2e2:	44 c0       	rjmp	.+136    	; 0x36c <App_Update+0x2c2>
					}
					else
					{
						//priority 3
						//check transfer conditions
						BUTTON_READ (BUTTON_LEFT, &BTN_value);
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	be 01       	movw	r22, r28
 2e8:	6f 5f       	subi	r22, 0xFF	; 255
 2ea:	7f 4f       	sbci	r23, 0xFF	; 255
 2ec:	0e 94 41 02 	call	0x482	; 0x482 <BUTTON_READ>
						if(BTN_value == BTN_HIGH)
 2f0:	89 81       	ldd	r24, Y+1	; 0x01
 2f2:	81 30       	cpi	r24, 0x01	; 1
 2f4:	21 f4       	brne	.+8      	; 0x2fe <App_Update+0x254>
						{
							CAR = CAR_EN_Left;
 2f6:	89 e0       	ldi	r24, 0x09	; 9
 2f8:	80 93 61 00 	sts	0x0061, r24
 2fc:	46 c0       	rjmp	.+140    	; 0x38a <App_Update+0x2e0>
						}
						else
						{
							CAR = CAR_EN_Stop;
 2fe:	8a e0       	ldi	r24, 0x0A	; 10
 300:	80 93 61 00 	sts	0x0061, r24
 304:	15 c0       	rjmp	.+42     	; 0x330 <App_Update+0x286>
}


static void  APP_Apply(void)
{
	switch (CAR)
 306:	87 30       	cpi	r24, 0x07	; 7
 308:	d1 f0       	breq	.+52     	; 0x33e <App_Update+0x294>
 30a:	88 30       	cpi	r24, 0x08	; 8
 30c:	50 f4       	brcc	.+20     	; 0x322 <App_Update+0x278>
 30e:	85 30       	cpi	r24, 0x05	; 5
 310:	09 f4       	brne	.+2      	; 0x314 <App_Update+0x26a>
 312:	55 c0       	rjmp	.+170    	; 0x3be <App_Update+0x314>
 314:	86 30       	cpi	r24, 0x06	; 6
 316:	08 f0       	brcs	.+2      	; 0x31a <App_Update+0x270>
 318:	5b c0       	rjmp	.+182    	; 0x3d0 <App_Update+0x326>
 31a:	84 30       	cpi	r24, 0x04	; 4
 31c:	09 f0       	breq	.+2      	; 0x320 <App_Update+0x276>
 31e:	60 c0       	rjmp	.+192    	; 0x3e0 <App_Update+0x336>
 320:	43 c0       	rjmp	.+134    	; 0x3a8 <App_Update+0x2fe>
 322:	89 30       	cpi	r24, 0x09	; 9
 324:	91 f1       	breq	.+100    	; 0x38a <App_Update+0x2e0>
 326:	89 30       	cpi	r24, 0x09	; 9
 328:	08 f1       	brcs	.+66     	; 0x36c <App_Update+0x2c2>
 32a:	8a 30       	cpi	r24, 0x0A	; 10
 32c:	09 f0       	breq	.+2      	; 0x330 <App_Update+0x286>
 32e:	58 c0       	rjmp	.+176    	; 0x3e0 <App_Update+0x336>
	{
		case CAR_EN_Stop:
		{
			MOTOR_Stop(Motor1);
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	0e 94 2e 03 	call	0x65c	; 0x65c <MOTOR_Stop>
			MOTOR_Stop(Motor2);
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	0e 94 2e 03 	call	0x65c	; 0x65c <MOTOR_Stop>
 33c:	51 c0       	rjmp	.+162    	; 0x3e0 <App_Update+0x336>
		}break;
		case CAR_EN_Move:
		{
			MOTOR_Direction(Motor1, MTR_DIR_CW, speed[CAR_Gear]);
 33e:	80 91 60 00 	lds	r24, 0x0060
 342:	02 e6       	ldi	r16, 0x62	; 98
 344:	10 e0       	ldi	r17, 0x00	; 0
 346:	f8 01       	movw	r30, r16
 348:	e8 0f       	add	r30, r24
 34a:	f1 1d       	adc	r31, r1
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	60 e0       	ldi	r22, 0x00	; 0
 350:	40 81       	ld	r20, Z
 352:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <MOTOR_Direction>
			MOTOR_Direction(Motor2, MTR_DIR_CW, speed[CAR_Gear]);
 356:	80 91 60 00 	lds	r24, 0x0060
 35a:	f8 01       	movw	r30, r16
 35c:	e8 0f       	add	r30, r24
 35e:	f1 1d       	adc	r31, r1
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	60 e0       	ldi	r22, 0x00	; 0
 364:	40 81       	ld	r20, Z
 366:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <MOTOR_Direction>
 36a:	3a c0       	rjmp	.+116    	; 0x3e0 <App_Update+0x336>
		}break;
		case CAR_EN_Right:
		{
			MOTOR_Stop(Motor2);	
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	0e 94 2e 03 	call	0x65c	; 0x65c <MOTOR_Stop>
			MOTOR_Direction(Motor1, MTR_DIR_CW, speed[CAR_Gear]);	
 372:	80 91 60 00 	lds	r24, 0x0060
 376:	e2 e6       	ldi	r30, 0x62	; 98
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	e8 0f       	add	r30, r24
 37c:	f1 1d       	adc	r31, r1
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	60 e0       	ldi	r22, 0x00	; 0
 382:	40 81       	ld	r20, Z
 384:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <MOTOR_Direction>
 388:	2b c0       	rjmp	.+86     	; 0x3e0 <App_Update+0x336>
		}break;
		case CAR_EN_Left:
		{
			MOTOR_Stop(Motor1);
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	0e 94 2e 03 	call	0x65c	; 0x65c <MOTOR_Stop>
			MOTOR_Direction(Motor2, MTR_DIR_CW, speed[CAR_Gear]);
 390:	80 91 60 00 	lds	r24, 0x0060
 394:	e2 e6       	ldi	r30, 0x62	; 98
 396:	f0 e0       	ldi	r31, 0x00	; 0
 398:	e8 0f       	add	r30, r24
 39a:	f1 1d       	adc	r31, r1
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	60 e0       	ldi	r22, 0x00	; 0
 3a0:	40 81       	ld	r20, Z
 3a2:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <MOTOR_Direction>
 3a6:	1c c0       	rjmp	.+56     	; 0x3e0 <App_Update+0x336>
		}break;
		case CAR_EN_B_30:
		{
			MOTOR_Direction(Motor1, MTR_DIR_ACW, PWM_EN_Duty_30);
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	61 e0       	ldi	r22, 0x01	; 1
 3ac:	4d e4       	ldi	r20, 0x4D	; 77
 3ae:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <MOTOR_Direction>
			MOTOR_Direction(Motor2, MTR_DIR_ACW, PWM_EN_Duty_30);
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	61 e0       	ldi	r22, 0x01	; 1
 3b6:	4d e4       	ldi	r20, 0x4D	; 77
 3b8:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <MOTOR_Direction>
 3bc:	11 c0       	rjmp	.+34     	; 0x3e0 <App_Update+0x336>
		}break;
		case CAR_EN_B_R_30:
		{
			MOTOR_Stop(Motor1);
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	0e 94 2e 03 	call	0x65c	; 0x65c <MOTOR_Stop>
			MOTOR_Direction(Motor2, MTR_DIR_ACW, PWM_EN_Duty_30);
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	61 e0       	ldi	r22, 0x01	; 1
 3c8:	4d e4       	ldi	r20, 0x4D	; 77
 3ca:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <MOTOR_Direction>
 3ce:	08 c0       	rjmp	.+16     	; 0x3e0 <App_Update+0x336>
		}break;
		case CAR_EN_B_L_30:
		{
			MOTOR_Stop(Motor2);
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	0e 94 2e 03 	call	0x65c	; 0x65c <MOTOR_Stop>
			MOTOR_Direction(Motor1, MTR_DIR_ACW, PWM_EN_Duty_30);
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	61 e0       	ldi	r22, 0x01	; 1
 3da:	4d e4       	ldi	r20, 0x4D	; 77
 3dc:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <MOTOR_Direction>
void App_Update(void)
{
	GEAR_Update();
	Move_Update();
	APP_Apply();
}
 3e0:	0f 90       	pop	r0
 3e2:	df 91       	pop	r29
 3e4:	cf 91       	pop	r28
 3e6:	1f 91       	pop	r17
 3e8:	0f 91       	pop	r16
 3ea:	08 95       	ret

000003ec <Basic_io_init>:
#include "Indications.h"

void Basic_io_init(void)
{
	//row2
	DDRC  |= 1<<3;
 3ec:	a3 9a       	sbi	0x14, 3	; 20
	PORTC |= 1<<3;
 3ee:	ab 9a       	sbi	0x15, 3	; 21
	//led0
	DDRB  |= 1<<4;
 3f0:	bc 9a       	sbi	0x17, 4	; 23
	//led1
	DDRB  |= 1<<5;
 3f2:	bd 9a       	sbi	0x17, 5	; 23
	//led2
	DDRB  |= 1<<6;
 3f4:	be 9a       	sbi	0x17, 6	; 23
	//led3
	DDRB  |= 1<<7;	
 3f6:	bf 9a       	sbi	0x17, 7	; 23
}
 3f8:	08 95       	ret

000003fa <Led_only_on>:

void Led_only_on(Led_t led)
{
	PORTB  &= ~(1<<4);
 3fa:	c4 98       	cbi	0x18, 4	; 24
	PORTB  &= ~(1<<5);
 3fc:	c5 98       	cbi	0x18, 5	; 24
	PORTB  &= ~(1<<6);
 3fe:	c6 98       	cbi	0x18, 6	; 24
	PORTB  &= ~(1<<7);
 400:	c7 98       	cbi	0x18, 7	; 24
	PORTB  |= (1<<led);
 402:	48 b3       	in	r20, 0x18	; 24
 404:	21 e0       	ldi	r18, 0x01	; 1
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	b9 01       	movw	r22, r18
 40a:	02 c0       	rjmp	.+4      	; 0x410 <Led_only_on+0x16>
 40c:	66 0f       	add	r22, r22
 40e:	77 1f       	adc	r23, r23
 410:	8a 95       	dec	r24
 412:	e2 f7       	brpl	.-8      	; 0x40c <Led_only_on+0x12>
 414:	cb 01       	movw	r24, r22
 416:	84 2b       	or	r24, r20
 418:	88 bb       	out	0x18, r24	; 24
 41a:	08 95       	ret

0000041c <main>:
#include "App.h"

int main(void)
{	
	App_Init();
 41c:	0e 94 49 00 	call	0x92	; 0x92 <App_Init>
	while(1)
    {
        App_Update();		
 420:	0e 94 55 00 	call	0xaa	; 0xaa <App_Update>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 424:	8f ef       	ldi	r24, 0xFF	; 255
 426:	90 e7       	ldi	r25, 0x70	; 112
 428:	a2 e0       	ldi	r26, 0x02	; 2
 42a:	81 50       	subi	r24, 0x01	; 1
 42c:	90 40       	sbci	r25, 0x00	; 0
 42e:	a0 40       	sbci	r26, 0x00	; 0
 430:	e1 f7       	brne	.-8      	; 0x42a <main+0xe>
 432:	00 c0       	rjmp	.+0      	; 0x434 <main+0x18>
 434:	00 00       	nop
 436:	f4 cf       	rjmp	.-24     	; 0x420 <main+0x4>

00000438 <BUTTON_init>:
***************************************************************************************************/
/**************************************************************************************************
* BUTTON_init
***************************************************************************************************/
void                           BUTTON_init       (void)
{
 438:	0f 93       	push	r16
 43a:	1f 93       	push	r17
 43c:	cf 93       	push	r28
 43e:	df 93       	push	r29
 440:	c0 e0       	ldi	r28, 0x00	; 0
 442:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t  index = Btn_Start; 
	for(index = Btn_Start ; index < Btn_End ; index++)
	{
		/* 1. set the direction as input */
		DIO_setPinDirection (Arr_ST_Btn_cfg [index].PORT, Arr_ST_Btn_cfg [index].num_pin, DIO_u8_INPUT);
 444:	05 e6       	ldi	r16, 0x65	; 101
 446:	10 e0       	ldi	r17, 0x00	; 0
 448:	fe 01       	movw	r30, r28
 44a:	ee 0f       	add	r30, r30
 44c:	ff 1f       	adc	r31, r31
 44e:	e0 0f       	add	r30, r16
 450:	f1 1f       	adc	r31, r17
 452:	80 81       	ld	r24, Z
 454:	61 81       	ldd	r22, Z+1	; 0x01
 456:	40 e0       	ldi	r20, 0x00	; 0
 458:	0e 94 80 03 	call	0x700	; 0x700 <DIO_setPinDirection>
 45c:	21 96       	adiw	r28, 0x01	; 1
* BUTTON_init
***************************************************************************************************/
void                           BUTTON_init       (void)
{
	uint8_t  index = Btn_Start; 
	for(index = Btn_Start ; index < Btn_End ; index++)
 45e:	c4 30       	cpi	r28, 0x04	; 4
 460:	d1 05       	cpc	r29, r1
 462:	91 f7       	brne	.-28     	; 0x448 <BUTTON_init+0x10>
		DIO_setPinDirection (Arr_ST_Btn_cfg [index].PORT, Arr_ST_Btn_cfg [index].num_pin, DIO_u8_INPUT);
		/* 2. set pull-up resistor */
		//DIO_SetPullupRes(Arr_ST_Btn_cfg [index].PORT, Arr_ST_Btn_cfg [index].num_pin);
	}
	//for row2
	DIO_setPinDirection(PORTc, PIN3, DIO_u8_OUTPUT);
 464:	82 e0       	ldi	r24, 0x02	; 2
 466:	63 e0       	ldi	r22, 0x03	; 3
 468:	41 e0       	ldi	r20, 0x01	; 1
 46a:	0e 94 80 03 	call	0x700	; 0x700 <DIO_setPinDirection>
	DIO_writePinValue(PORTc,PIN3, DIO_u8_HIGH);
 46e:	82 e0       	ldi	r24, 0x02	; 2
 470:	63 e0       	ldi	r22, 0x03	; 3
 472:	41 e0       	ldi	r20, 0x01	; 1
 474:	0e 94 30 04 	call	0x860	; 0x860 <DIO_writePinValue>
}
 478:	df 91       	pop	r29
 47a:	cf 91       	pop	r28
 47c:	1f 91       	pop	r17
 47e:	0f 91       	pop	r16
 480:	08 95       	ret

00000482 <BUTTON_READ>:
/**************************************************************************************************
* BUTTON_READ
***************************************************************************************************/

BUTTON_ERROR_state_t            BUTTON_READ       (EN_Button_t num, BTN_State_t * ptr_return_value)
{
 482:	ab 01       	movw	r20, r22
	//return Error state
	BUTTON_ERROR_state_t return_value = Valid_BTN_init;
	/* 1. check if num is in correct range */
	if((num < Btn_Start) || (num > Btn_End))
 484:	85 30       	cpi	r24, 0x05	; 5
 486:	78 f4       	brcc	.+30     	; 0x4a6 <BUTTON_READ+0x24>
		return_value = Invalid_Num ;
	}
	else
	{	
		/* 2. check the return pointer is Valid */
		if(ptr_return_value == NULL)
 488:	61 15       	cp	r22, r1
 48a:	71 05       	cpc	r23, r1
 48c:	71 f0       	breq	.+28     	; 0x4aa <BUTTON_READ+0x28>
			return_value = Invalid_Pointer ;
		}
		else
		{
			/* 3. set the return value in the return pointer */
			DIO_readPin(Arr_ST_Btn_cfg [num].PORT, Arr_ST_Btn_cfg [num].num_pin, ptr_return_value);
 48e:	e8 2f       	mov	r30, r24
 490:	f0 e0       	ldi	r31, 0x00	; 0
 492:	ee 0f       	add	r30, r30
 494:	ff 1f       	adc	r31, r31
 496:	eb 59       	subi	r30, 0x9B	; 155
 498:	ff 4f       	sbci	r31, 0xFF	; 255
 49a:	80 81       	ld	r24, Z
 49c:	61 81       	ldd	r22, Z+1	; 0x01
 49e:	0e 94 ed 04 	call	0x9da	; 0x9da <DIO_readPin>
***************************************************************************************************/

BUTTON_ERROR_state_t            BUTTON_READ       (EN_Button_t num, BTN_State_t * ptr_return_value)
{
	//return Error state
	BUTTON_ERROR_state_t return_value = Valid_BTN_init;
 4a2:	80 e0       	ldi	r24, 0x00	; 0
 4a4:	08 95       	ret
	/* 1. check if num is in correct range */
	if((num < Btn_Start) || (num > Btn_End))
	{
		return_value = Invalid_Num ;
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	08 95       	ret
	else
	{	
		/* 2. check the return pointer is Valid */
		if(ptr_return_value == NULL)
		{
			return_value = Invalid_Pointer ;
 4aa:	82 e0       	ldi	r24, 0x02	; 2
			/* 3. set the return value in the return pointer */
			DIO_readPin(Arr_ST_Btn_cfg [num].PORT, Arr_ST_Btn_cfg [num].num_pin, ptr_return_value);
		}
	}
	return return_value;
}
 4ac:	08 95       	ret

000004ae <MOTOR_Start>:
/**************************************************************************************************
* MOTOR_Start
***************************************************************************************************/

static MOTOR_ERROR_state 		MOTOR_Start (Motor_t   num , uint8_t Duty)
{
 4ae:	ef 92       	push	r14
 4b0:	ff 92       	push	r15
 4b2:	1f 93       	push	r17
 4b4:	cf 93       	push	r28
 4b6:	df 93       	push	r29
 4b8:	16 2f       	mov	r17, r22
	MOTOR_ERROR_state   return_value   = Valid_MTR_init;
	/* check if num is in correct range */
	if((num < Mtr_Start) || (num > Mtr_End))
 4ba:	83 30       	cpi	r24, 0x03	; 3
 4bc:	e0 f5       	brcc	.+120    	; 0x536 <MOTOR_Start+0x88>
	{
		return_value   = Invalid_MTR_Num;
	}
	else
	{
		if(Motor_State[num] == Motor_Off)
 4be:	e8 2e       	mov	r14, r24
 4c0:	ff 24       	eor	r15, r15
 4c2:	f7 01       	movw	r30, r14
 4c4:	ec 57       	subi	r30, 0x7C	; 124
 4c6:	ff 4f       	sbci	r31, 0xFF	; 255
 4c8:	80 81       	ld	r24, Z
 4ca:	88 23       	and	r24, r24
 4cc:	59 f5       	brne	.+86     	; 0x524 <MOTOR_Start+0x76>
		{
			if(Motor_Direction[num] == Motor_CW)
 4ce:	f7 01       	movw	r30, r14
 4d0:	e3 59       	subi	r30, 0x93	; 147
 4d2:	ff 4f       	sbci	r31, 0xFF	; 255
 4d4:	80 81       	ld	r24, Z
 4d6:	88 23       	and	r24, r24
 4d8:	91 f4       	brne	.+36     	; 0x4fe <MOTOR_Start+0x50>
			{
				DIO_writePinValue(Arr_ST_Mtr_cfg[num][MOTOR_H2].PORT, Arr_ST_Mtr_cfg[num][MOTOR_H2].num_pin, DIO_u8_LOW);
 4da:	e7 01       	movw	r28, r14
 4dc:	cc 0f       	add	r28, r28
 4de:	dd 1f       	adc	r29, r29
 4e0:	cc 0f       	add	r28, r28
 4e2:	dd 1f       	adc	r29, r29
 4e4:	cf 58       	subi	r28, 0x8F	; 143
 4e6:	df 4f       	sbci	r29, 0xFF	; 255
 4e8:	8a 81       	ldd	r24, Y+2	; 0x02
 4ea:	6b 81       	ldd	r22, Y+3	; 0x03
 4ec:	40 e0       	ldi	r20, 0x00	; 0
 4ee:	0e 94 30 04 	call	0x860	; 0x860 <DIO_writePinValue>
				DIO_writePinValue(Arr_ST_Mtr_cfg[num][MOTOR_H1].PORT, Arr_ST_Mtr_cfg[num][MOTOR_H1].num_pin, DIO_u8_HIGH);
 4f2:	88 81       	ld	r24, Y
 4f4:	69 81       	ldd	r22, Y+1	; 0x01
 4f6:	41 e0       	ldi	r20, 0x01	; 1
 4f8:	0e 94 30 04 	call	0x860	; 0x860 <DIO_writePinValue>
 4fc:	13 c0       	rjmp	.+38     	; 0x524 <MOTOR_Start+0x76>
			}
			else if(Motor_Direction[num] == Motor_ACW)
 4fe:	81 30       	cpi	r24, 0x01	; 1
 500:	89 f4       	brne	.+34     	; 0x524 <MOTOR_Start+0x76>
			{
				DIO_writePinValue(Arr_ST_Mtr_cfg[num][MOTOR_H1].PORT, Arr_ST_Mtr_cfg[num][MOTOR_H1].num_pin, DIO_u8_LOW);
 502:	e7 01       	movw	r28, r14
 504:	cc 0f       	add	r28, r28
 506:	dd 1f       	adc	r29, r29
 508:	cc 0f       	add	r28, r28
 50a:	dd 1f       	adc	r29, r29
 50c:	cf 58       	subi	r28, 0x8F	; 143
 50e:	df 4f       	sbci	r29, 0xFF	; 255
 510:	88 81       	ld	r24, Y
 512:	69 81       	ldd	r22, Y+1	; 0x01
 514:	40 e0       	ldi	r20, 0x00	; 0
 516:	0e 94 30 04 	call	0x860	; 0x860 <DIO_writePinValue>
				DIO_writePinValue(Arr_ST_Mtr_cfg[num][MOTOR_H2].PORT, Arr_ST_Mtr_cfg[num][MOTOR_H2].num_pin, DIO_u8_HIGH);
 51a:	8a 81       	ldd	r24, Y+2	; 0x02
 51c:	6b 81       	ldd	r22, Y+3	; 0x03
 51e:	41 e0       	ldi	r20, 0x01	; 1
 520:	0e 94 30 04 	call	0x860	; 0x860 <DIO_writePinValue>
			}
		}
		SET_PWM_DutyCycle(MTR_PWM_CFG[num], Duty);
 524:	f7 01       	movw	r30, r14
 526:	e1 59       	subi	r30, 0x91	; 145
 528:	ff 4f       	sbci	r31, 0xFF	; 255
 52a:	80 81       	ld	r24, Z
 52c:	61 2f       	mov	r22, r17
 52e:	0e 94 3f 06 	call	0xc7e	; 0xc7e <SET_PWM_DutyCycle>
* MOTOR_Start
***************************************************************************************************/

static MOTOR_ERROR_state 		MOTOR_Start (Motor_t   num , uint8_t Duty)
{
	MOTOR_ERROR_state   return_value   = Valid_MTR_init;
 532:	80 e0       	ldi	r24, 0x00	; 0
 534:	01 c0       	rjmp	.+2      	; 0x538 <MOTOR_Start+0x8a>
	/* check if num is in correct range */
	if((num < Mtr_Start) || (num > Mtr_End))
	{
		return_value   = Invalid_MTR_Num;
 536:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
		SET_PWM_DutyCycle(MTR_PWM_CFG[num], Duty);
	}
	return return_value;
}
 538:	df 91       	pop	r29
 53a:	cf 91       	pop	r28
 53c:	1f 91       	pop	r17
 53e:	ff 90       	pop	r15
 540:	ef 90       	pop	r14
 542:	08 95       	ret

00000544 <MOTOR_INIT>:
/**************************************************************************************************
* MOTOR_INIT
***************************************************************************************************/

void	MOTOR_INIT     (Motor_t   num)
{
 544:	0f 93       	push	r16
 546:	1f 93       	push	r17
 548:	cf 93       	push	r28
 54a:	df 93       	push	r29
 54c:	08 2f       	mov	r16, r24
	PWM_Init(num);
 54e:	0e 94 0c 06 	call	0xc18	; 0xc18 <PWM_Init>
		
	/* H1 Pin */
	/* set as output */
	DIO_setPinDirection(Arr_ST_Mtr_cfg[num][MOTOR_H1].PORT, Arr_ST_Mtr_cfg[num][MOTOR_H1].num_pin, DIO_u8_OUTPUT);
 552:	10 e0       	ldi	r17, 0x00	; 0
 554:	e8 01       	movw	r28, r16
 556:	cc 0f       	add	r28, r28
 558:	dd 1f       	adc	r29, r29
 55a:	cc 0f       	add	r28, r28
 55c:	dd 1f       	adc	r29, r29
 55e:	cf 58       	subi	r28, 0x8F	; 143
 560:	df 4f       	sbci	r29, 0xFF	; 255
 562:	88 81       	ld	r24, Y
 564:	69 81       	ldd	r22, Y+1	; 0x01
 566:	41 e0       	ldi	r20, 0x01	; 1
 568:	0e 94 80 03 	call	0x700	; 0x700 <DIO_setPinDirection>
	/* default value is off */
	DIO_writePinValue(Arr_ST_Mtr_cfg[num][MOTOR_H1].PORT, Arr_ST_Mtr_cfg[num][MOTOR_H1].num_pin, DIO_u8_LOW);
 56c:	88 81       	ld	r24, Y
 56e:	69 81       	ldd	r22, Y+1	; 0x01
 570:	40 e0       	ldi	r20, 0x00	; 0
 572:	0e 94 30 04 	call	0x860	; 0x860 <DIO_writePinValue>
		
	/* H2 Pin */
	/* set as output */
	DIO_setPinDirection(Arr_ST_Mtr_cfg[num][MOTOR_H2].PORT, Arr_ST_Mtr_cfg[num][MOTOR_H2].num_pin, DIO_u8_OUTPUT);
 576:	8a 81       	ldd	r24, Y+2	; 0x02
 578:	6b 81       	ldd	r22, Y+3	; 0x03
 57a:	41 e0       	ldi	r20, 0x01	; 1
 57c:	0e 94 80 03 	call	0x700	; 0x700 <DIO_setPinDirection>
	/* default value is off */
	DIO_writePinValue(Arr_ST_Mtr_cfg[num][MOTOR_H2].PORT, Arr_ST_Mtr_cfg[num][MOTOR_H2].num_pin, DIO_u8_LOW);
 580:	8a 81       	ldd	r24, Y+2	; 0x02
 582:	6b 81       	ldd	r22, Y+3	; 0x03
 584:	40 e0       	ldi	r20, 0x00	; 0
 586:	0e 94 30 04 	call	0x860	; 0x860 <DIO_writePinValue>
	
	Motor_State    [num] = Motor_Off;
 58a:	f8 01       	movw	r30, r16
 58c:	ec 57       	subi	r30, 0x7C	; 124
 58e:	ff 4f       	sbci	r31, 0xFF	; 255
 590:	10 82       	st	Z, r1
	motorspeed     [num] = InvalidDuty;
 592:	f8 01       	movw	r30, r16
 594:	ea 57       	subi	r30, 0x7A	; 122
 596:	ff 4f       	sbci	r31, 0xFF	; 255
 598:	8f ef       	ldi	r24, 0xFF	; 255
 59a:	80 83       	st	Z, r24
	Motor_Direction[num] = Motor_CWACW_init;	
 59c:	f8 01       	movw	r30, r16
 59e:	e3 59       	subi	r30, 0x93	; 147
 5a0:	ff 4f       	sbci	r31, 0xFF	; 255
 5a2:	82 e0       	ldi	r24, 0x02	; 2
 5a4:	80 83       	st	Z, r24
}
 5a6:	df 91       	pop	r29
 5a8:	cf 91       	pop	r28
 5aa:	1f 91       	pop	r17
 5ac:	0f 91       	pop	r16
 5ae:	08 95       	ret

000005b0 <MOTOR_Direction>:

MOTOR_ERROR_state 		MOTOR_Direction (Motor_t   num , MTR_Direction_t Direction, uint8_t Duty)
{
 5b0:	cf 93       	push	r28
 5b2:	df 93       	push	r29
	MOTOR_ERROR_state   return_value   = Valid_MTR_init;
	/* check if num is in correct range */
	if((num < Mtr_Start) || (num > Mtr_End))
 5b4:	83 30       	cpi	r24, 0x03	; 3
 5b6:	08 f0       	brcs	.+2      	; 0x5ba <MOTOR_Direction+0xa>
 5b8:	49 c0       	rjmp	.+146    	; 0x64c <MOTOR_Direction+0x9c>
	{
		return_value   = Invalid_MTR_Num;
	}
	else
	{
		if(Motor_State[num]== Motor_Off)
 5ba:	c8 2f       	mov	r28, r24
 5bc:	d0 e0       	ldi	r29, 0x00	; 0
 5be:	fe 01       	movw	r30, r28
 5c0:	ec 57       	subi	r30, 0x7C	; 124
 5c2:	ff 4f       	sbci	r31, 0xFF	; 255
 5c4:	90 81       	ld	r25, Z
 5c6:	99 23       	and	r25, r25
 5c8:	89 f4       	brne	.+34     	; 0x5ec <MOTOR_Direction+0x3c>
		{
			motorspeed[num] = Duty;
 5ca:	fe 01       	movw	r30, r28
 5cc:	ea 57       	subi	r30, 0x7A	; 122
 5ce:	ff 4f       	sbci	r31, 0xFF	; 255
 5d0:	40 83       	st	Z, r20
			Motor_Direction[num] = Direction;
 5d2:	fe 01       	movw	r30, r28
 5d4:	e3 59       	subi	r30, 0x93	; 147
 5d6:	ff 4f       	sbci	r31, 0xFF	; 255
 5d8:	60 83       	st	Z, r22
			MOTOR_Start (num , Duty);
 5da:	64 2f       	mov	r22, r20
 5dc:	0e 94 57 02 	call	0x4ae	; 0x4ae <MOTOR_Start>
			Motor_State[num] = Motor_On;
 5e0:	cc 57       	subi	r28, 0x7C	; 124
 5e2:	df 4f       	sbci	r29, 0xFF	; 255
 5e4:	81 e0       	ldi	r24, 0x01	; 1
 5e6:	88 83       	st	Y, r24
	Motor_Direction[num] = Motor_CWACW_init;	
}

MOTOR_ERROR_state 		MOTOR_Direction (Motor_t   num , MTR_Direction_t Direction, uint8_t Duty)
{
	MOTOR_ERROR_state   return_value   = Valid_MTR_init;
 5e8:	80 e0       	ldi	r24, 0x00	; 0
 5ea:	35 c0       	rjmp	.+106    	; 0x656 <MOTOR_Direction+0xa6>
			motorspeed[num] = Duty;
			Motor_Direction[num] = Direction;
			MOTOR_Start (num , Duty);
			Motor_State[num] = Motor_On;
		}
		else if (Motor_State[num]== Motor_On)
 5ec:	91 30       	cpi	r25, 0x01	; 1
 5ee:	81 f5       	brne	.+96     	; 0x650 <MOTOR_Direction+0xa0>
		{
			if(Motor_Direction[num] != Direction)
 5f0:	fe 01       	movw	r30, r28
 5f2:	e3 59       	subi	r30, 0x93	; 147
 5f4:	ff 4f       	sbci	r31, 0xFF	; 255
 5f6:	90 81       	ld	r25, Z
 5f8:	96 17       	cp	r25, r22
 5fa:	89 f0       	breq	.+34     	; 0x61e <MOTOR_Direction+0x6e>
			{
				motorspeed[num] = Duty;
 5fc:	fe 01       	movw	r30, r28
 5fe:	ea 57       	subi	r30, 0x7A	; 122
 600:	ff 4f       	sbci	r31, 0xFF	; 255
 602:	40 83       	st	Z, r20
				Motor_Direction[num] = Direction;
 604:	fe 01       	movw	r30, r28
 606:	e3 59       	subi	r30, 0x93	; 147
 608:	ff 4f       	sbci	r31, 0xFF	; 255
 60a:	60 83       	st	Z, r22
				Motor_State[num] == Motor_Off;
				MOTOR_Start (num , Duty);
 60c:	64 2f       	mov	r22, r20
 60e:	0e 94 57 02 	call	0x4ae	; 0x4ae <MOTOR_Start>
				Motor_State[num] = Motor_On;
 612:	cc 57       	subi	r28, 0x7C	; 124
 614:	df 4f       	sbci	r29, 0xFF	; 255
 616:	81 e0       	ldi	r24, 0x01	; 1
 618:	88 83       	st	Y, r24
	Motor_Direction[num] = Motor_CWACW_init;	
}

MOTOR_ERROR_state 		MOTOR_Direction (Motor_t   num , MTR_Direction_t Direction, uint8_t Duty)
{
	MOTOR_ERROR_state   return_value   = Valid_MTR_init;
 61a:	80 e0       	ldi	r24, 0x00	; 0
 61c:	1c c0       	rjmp	.+56     	; 0x656 <MOTOR_Direction+0xa6>
				MOTOR_Start (num , Duty);
				Motor_State[num] = Motor_On;
			}
			else if(Motor_Direction[num] == Direction)
			{
				if(motorspeed[num] != Duty)
 61e:	fe 01       	movw	r30, r28
 620:	ea 57       	subi	r30, 0x7A	; 122
 622:	ff 4f       	sbci	r31, 0xFF	; 255
 624:	20 81       	ld	r18, Z
 626:	24 17       	cp	r18, r20
 628:	a9 f0       	breq	.+42     	; 0x654 <MOTOR_Direction+0xa4>
				{
					motorspeed[num] = Duty;
 62a:	fe 01       	movw	r30, r28
 62c:	ea 57       	subi	r30, 0x7A	; 122
 62e:	ff 4f       	sbci	r31, 0xFF	; 255
 630:	40 83       	st	Z, r20
					Motor_Direction[num] = Direction;
 632:	fe 01       	movw	r30, r28
 634:	e3 59       	subi	r30, 0x93	; 147
 636:	ff 4f       	sbci	r31, 0xFF	; 255
 638:	90 83       	st	Z, r25
					Motor_State[num] == Motor_Off;
					MOTOR_Start (num , Duty);
 63a:	64 2f       	mov	r22, r20
 63c:	0e 94 57 02 	call	0x4ae	; 0x4ae <MOTOR_Start>
					Motor_State[num] = Motor_On;
 640:	cc 57       	subi	r28, 0x7C	; 124
 642:	df 4f       	sbci	r29, 0xFF	; 255
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	88 83       	st	Y, r24
	Motor_Direction[num] = Motor_CWACW_init;	
}

MOTOR_ERROR_state 		MOTOR_Direction (Motor_t   num , MTR_Direction_t Direction, uint8_t Duty)
{
	MOTOR_ERROR_state   return_value   = Valid_MTR_init;
 648:	80 e0       	ldi	r24, 0x00	; 0
 64a:	05 c0       	rjmp	.+10     	; 0x656 <MOTOR_Direction+0xa6>
	/* check if num is in correct range */
	if((num < Mtr_Start) || (num > Mtr_End))
	{
		return_value   = Invalid_MTR_Num;
 64c:	81 e0       	ldi	r24, 0x01	; 1
 64e:	03 c0       	rjmp	.+6      	; 0x656 <MOTOR_Direction+0xa6>
	Motor_Direction[num] = Motor_CWACW_init;	
}

MOTOR_ERROR_state 		MOTOR_Direction (Motor_t   num , MTR_Direction_t Direction, uint8_t Duty)
{
	MOTOR_ERROR_state   return_value   = Valid_MTR_init;
 650:	80 e0       	ldi	r24, 0x00	; 0
 652:	01 c0       	rjmp	.+2      	; 0x656 <MOTOR_Direction+0xa6>
 654:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
		}
	}
	return return_value;
}
 656:	df 91       	pop	r29
 658:	cf 91       	pop	r28
 65a:	08 95       	ret

0000065c <MOTOR_Stop>:
* MOTOR_Stop
***************************************************************************************************/


MOTOR_ERROR_state 		MOTOR_Stop       (Motor_t   num )
{
 65c:	ef 92       	push	r14
 65e:	ff 92       	push	r15
 660:	1f 93       	push	r17
 662:	cf 93       	push	r28
 664:	df 93       	push	r29
 666:	18 2f       	mov	r17, r24
	MOTOR_ERROR_state   return_value   = Valid_MTR_init;
	/* check if num is in correct range */
	if((num < Mtr_Start) || (num > Mtr_End))
 668:	83 30       	cpi	r24, 0x03	; 3
 66a:	60 f5       	brcc	.+88     	; 0x6c4 <MOTOR_Stop+0x68>
		return_value   = Invalid_MTR_Num;
	}
	else
	{
		/* 2. start the motor! */
		PWM_Stop(MTR_PWM_CFG[num]);
 66c:	e8 2e       	mov	r14, r24
 66e:	ff 24       	eor	r15, r15
 670:	f7 01       	movw	r30, r14
 672:	e1 59       	subi	r30, 0x91	; 145
 674:	ff 4f       	sbci	r31, 0xFF	; 255
 676:	80 81       	ld	r24, Z
 678:	0e 94 2a 06 	call	0xc54	; 0xc54 <PWM_Stop>
		//SET_PWM_DutyCycle(num, 0);
		DIO_writePinValue(Arr_ST_Mtr_cfg[num][MOTOR_H1].PORT, Arr_ST_Mtr_cfg[num][MOTOR_H1].num_pin, DIO_u8_LOW);
 67c:	e7 01       	movw	r28, r14
 67e:	cc 0f       	add	r28, r28
 680:	dd 1f       	adc	r29, r29
 682:	cc 0f       	add	r28, r28
 684:	dd 1f       	adc	r29, r29
 686:	cf 58       	subi	r28, 0x8F	; 143
 688:	df 4f       	sbci	r29, 0xFF	; 255
 68a:	88 81       	ld	r24, Y
 68c:	69 81       	ldd	r22, Y+1	; 0x01
 68e:	40 e0       	ldi	r20, 0x00	; 0
 690:	0e 94 30 04 	call	0x860	; 0x860 <DIO_writePinValue>
		DIO_writePinValue(Arr_ST_Mtr_cfg[num][MOTOR_H2].PORT, Arr_ST_Mtr_cfg[num][MOTOR_H2].num_pin, DIO_u8_LOW);
 694:	8a 81       	ldd	r24, Y+2	; 0x02
 696:	6b 81       	ldd	r22, Y+3	; 0x03
 698:	40 e0       	ldi	r20, 0x00	; 0
 69a:	0e 94 30 04 	call	0x860	; 0x860 <DIO_writePinValue>
		
		/* 2. store the state for the next re-stop */
		Motor_State[num]     = Motor_Off;
 69e:	f7 01       	movw	r30, r14
 6a0:	ec 57       	subi	r30, 0x7C	; 124
 6a2:	ff 4f       	sbci	r31, 0xFF	; 255
 6a4:	10 82       	st	Z, r1
		motorspeed[num]      = InvalidDuty;
 6a6:	f7 01       	movw	r30, r14
 6a8:	ea 57       	subi	r30, 0x7A	; 122
 6aa:	ff 4f       	sbci	r31, 0xFF	; 255
 6ac:	8f ef       	ldi	r24, 0xFF	; 255
 6ae:	80 83       	st	Z, r24
		Motor_Direction[num] = Motor_CWACW_init;
 6b0:	f7 01       	movw	r30, r14
 6b2:	e3 59       	subi	r30, 0x93	; 147
 6b4:	ff 4f       	sbci	r31, 0xFF	; 255
 6b6:	82 e0       	ldi	r24, 0x02	; 2
 6b8:	80 83       	st	Z, r24
		PWM_Stop(num);
 6ba:	81 2f       	mov	r24, r17
 6bc:	0e 94 2a 06 	call	0xc54	; 0xc54 <PWM_Stop>
***************************************************************************************************/


MOTOR_ERROR_state 		MOTOR_Stop       (Motor_t   num )
{
	MOTOR_ERROR_state   return_value   = Valid_MTR_init;
 6c0:	80 e0       	ldi	r24, 0x00	; 0
 6c2:	01 c0       	rjmp	.+2      	; 0x6c6 <MOTOR_Stop+0x6a>
	/* check if num is in correct range */
	if((num < Mtr_Start) || (num > Mtr_End))
	{
		return_value   = Invalid_MTR_Num;
 6c4:	81 e0       	ldi	r24, 0x01	; 1
		motorspeed[num]      = InvalidDuty;
		Motor_Direction[num] = Motor_CWACW_init;
		PWM_Stop(num);
	}
	return return_value;
}
 6c6:	df 91       	pop	r29
 6c8:	cf 91       	pop	r28
 6ca:	1f 91       	pop	r17
 6cc:	ff 90       	pop	r15
 6ce:	ef 90       	pop	r14
 6d0:	08 95       	ret

000006d2 <DIO_setPortDirection>:

ERROR_STATE_t DIO_setPortDirection(uint8_t PortID, uint8_t PortDirection)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
	//Check for the ports if it is between 0 to 3
    switch (PortID)
 6d2:	81 30       	cpi	r24, 0x01	; 1
 6d4:	51 f0       	breq	.+20     	; 0x6ea <DIO_setPortDirection+0x18>
 6d6:	81 30       	cpi	r24, 0x01	; 1
 6d8:	28 f0       	brcs	.+10     	; 0x6e4 <DIO_setPortDirection+0x12>
 6da:	82 30       	cpi	r24, 0x02	; 2
 6dc:	49 f0       	breq	.+18     	; 0x6f0 <DIO_setPortDirection+0x1e>
 6de:	83 30       	cpi	r24, 0x03	; 3
 6e0:	69 f4       	brne	.+26     	; 0x6fc <DIO_setPortDirection+0x2a>
 6e2:	09 c0       	rjmp	.+18     	; 0x6f6 <DIO_setPortDirection+0x24>
    {
    case PORTa :
        DDRA = PortDirection;
 6e4:	6a bb       	out	0x1a, r22	; 26

#include "DIO.h"

ERROR_STATE_t DIO_setPortDirection(uint8_t PortID, uint8_t PortDirection)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 6e6:	80 e0       	ldi	r24, 0x00	; 0
	//Check for the ports if it is between 0 to 3
    switch (PortID)
    {
    case PORTa :
        DDRA = PortDirection;
        break;
 6e8:	08 95       	ret
    case PORTb :
        DDRB = PortDirection;
 6ea:	67 bb       	out	0x17, r22	; 23

#include "DIO.h"

ERROR_STATE_t DIO_setPortDirection(uint8_t PortID, uint8_t PortDirection)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 6ec:	80 e0       	ldi	r24, 0x00	; 0
    case PORTa :
        DDRA = PortDirection;
        break;
    case PORTb :
        DDRB = PortDirection;
        break;
 6ee:	08 95       	ret
    case PORTc :
        DDRC = PortDirection;
 6f0:	64 bb       	out	0x14, r22	; 20

#include "DIO.h"

ERROR_STATE_t DIO_setPortDirection(uint8_t PortID, uint8_t PortDirection)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 6f2:	80 e0       	ldi	r24, 0x00	; 0
    case PORTb :
        DDRB = PortDirection;
        break;
    case PORTc :
        DDRC = PortDirection;
        break;
 6f4:	08 95       	ret
    case PORTd :
        DDRD = PortDirection;
 6f6:	61 bb       	out	0x11, r22	; 17

#include "DIO.h"

ERROR_STATE_t DIO_setPortDirection(uint8_t PortID, uint8_t PortDirection)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 6f8:	80 e0       	ldi	r24, 0x00	; 0
    case PORTc :
        DDRC = PortDirection;
        break;
    case PORTd :
        DDRD = PortDirection;
        break;
 6fa:	08 95       	ret
    default:
        u8_ERROR_STAT = ERROR_NOK;
 6fc:	81 e0       	ldi	r24, 0x01	; 1
        break;
    } //END of SWITCH
    return u8_ERROR_STAT ;
}	  //END DIO_setPortDirection
 6fe:	08 95       	ret

00000700 <DIO_setPinDirection>:
*  API to Set Pin Direction                                         *
*  *****************************************************************/
ERROR_STATE_t DIO_setPinDirection(uint8_t PortID, uint8_t PinNumber,uint8_t PinDirection)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
	if ((PinNumber >= PIN0 )&& (PinNumber <= PIN7 ))
 700:	68 30       	cpi	r22, 0x08	; 8
 702:	08 f0       	brcs	.+2      	; 0x706 <DIO_setPinDirection+0x6>
 704:	8e c0       	rjmp	.+284    	; 0x822 <DIO_setPinDirection+0x122>
	{
		if (DIO_u8_OUTPUT==PinDirection)
 706:	41 30       	cpi	r20, 0x01	; 1
 708:	09 f0       	breq	.+2      	; 0x70c <DIO_setPinDirection+0xc>
 70a:	42 c0       	rjmp	.+132    	; 0x790 <DIO_setPinDirection+0x90>
		{
			switch (PortID)
 70c:	81 30       	cpi	r24, 0x01	; 1
 70e:	b1 f0       	breq	.+44     	; 0x73c <DIO_setPinDirection+0x3c>
 710:	81 30       	cpi	r24, 0x01	; 1
 712:	30 f0       	brcs	.+12     	; 0x720 <DIO_setPinDirection+0x20>
 714:	82 30       	cpi	r24, 0x02	; 2
 716:	01 f1       	breq	.+64     	; 0x758 <DIO_setPinDirection+0x58>
 718:	83 30       	cpi	r24, 0x03	; 3
 71a:	09 f0       	breq	.+2      	; 0x71e <DIO_setPinDirection+0x1e>
 71c:	84 c0       	rjmp	.+264    	; 0x826 <DIO_setPinDirection+0x126>
 71e:	2a c0       	rjmp	.+84     	; 0x774 <DIO_setPinDirection+0x74>
			{
			case PORTa :
				Set_Bit(DDRA, PinNumber);
 720:	2a b3       	in	r18, 0x1a	; 26
 722:	81 e0       	ldi	r24, 0x01	; 1
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	ac 01       	movw	r20, r24
 728:	02 c0       	rjmp	.+4      	; 0x72e <DIO_setPinDirection+0x2e>
 72a:	44 0f       	add	r20, r20
 72c:	55 1f       	adc	r21, r21
 72e:	6a 95       	dec	r22
 730:	e2 f7       	brpl	.-8      	; 0x72a <DIO_setPinDirection+0x2a>
 732:	ba 01       	movw	r22, r20
 734:	62 2b       	or	r22, r18
 736:	6a bb       	out	0x1a, r22	; 26
/********************************************************************
*  API to Set Pin Direction                                         *
*  *****************************************************************/
ERROR_STATE_t DIO_setPinDirection(uint8_t PortID, uint8_t PinNumber,uint8_t PinDirection)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 738:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch (PortID)
			{
			case PORTa :
				Set_Bit(DDRA, PinNumber);
				break;
 73a:	08 95       	ret
			case PORTb :
				Set_Bit(DDRB, PinNumber);
 73c:	27 b3       	in	r18, 0x17	; 23
 73e:	81 e0       	ldi	r24, 0x01	; 1
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	ac 01       	movw	r20, r24
 744:	02 c0       	rjmp	.+4      	; 0x74a <DIO_setPinDirection+0x4a>
 746:	44 0f       	add	r20, r20
 748:	55 1f       	adc	r21, r21
 74a:	6a 95       	dec	r22
 74c:	e2 f7       	brpl	.-8      	; 0x746 <DIO_setPinDirection+0x46>
 74e:	ba 01       	movw	r22, r20
 750:	62 2b       	or	r22, r18
 752:	67 bb       	out	0x17, r22	; 23
/********************************************************************
*  API to Set Pin Direction                                         *
*  *****************************************************************/
ERROR_STATE_t DIO_setPinDirection(uint8_t PortID, uint8_t PinNumber,uint8_t PinDirection)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 754:	80 e0       	ldi	r24, 0x00	; 0
			case PORTa :
				Set_Bit(DDRA, PinNumber);
				break;
			case PORTb :
				Set_Bit(DDRB, PinNumber);
				break;
 756:	08 95       	ret
			case PORTc :
				Set_Bit(DDRC, PinNumber);
 758:	24 b3       	in	r18, 0x14	; 20
 75a:	81 e0       	ldi	r24, 0x01	; 1
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	ac 01       	movw	r20, r24
 760:	02 c0       	rjmp	.+4      	; 0x766 <DIO_setPinDirection+0x66>
 762:	44 0f       	add	r20, r20
 764:	55 1f       	adc	r21, r21
 766:	6a 95       	dec	r22
 768:	e2 f7       	brpl	.-8      	; 0x762 <DIO_setPinDirection+0x62>
 76a:	ba 01       	movw	r22, r20
 76c:	62 2b       	or	r22, r18
 76e:	64 bb       	out	0x14, r22	; 20
/********************************************************************
*  API to Set Pin Direction                                         *
*  *****************************************************************/
ERROR_STATE_t DIO_setPinDirection(uint8_t PortID, uint8_t PinNumber,uint8_t PinDirection)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 770:	80 e0       	ldi	r24, 0x00	; 0
			case PORTb :
				Set_Bit(DDRB, PinNumber);
				break;
			case PORTc :
				Set_Bit(DDRC, PinNumber);
				break;
 772:	08 95       	ret
			case PORTd :
				Set_Bit(DDRD, PinNumber);
 774:	21 b3       	in	r18, 0x11	; 17
 776:	81 e0       	ldi	r24, 0x01	; 1
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	ac 01       	movw	r20, r24
 77c:	02 c0       	rjmp	.+4      	; 0x782 <DIO_setPinDirection+0x82>
 77e:	44 0f       	add	r20, r20
 780:	55 1f       	adc	r21, r21
 782:	6a 95       	dec	r22
 784:	e2 f7       	brpl	.-8      	; 0x77e <DIO_setPinDirection+0x7e>
 786:	ba 01       	movw	r22, r20
 788:	62 2b       	or	r22, r18
 78a:	61 bb       	out	0x11, r22	; 17
/********************************************************************
*  API to Set Pin Direction                                         *
*  *****************************************************************/
ERROR_STATE_t DIO_setPinDirection(uint8_t PortID, uint8_t PinNumber,uint8_t PinDirection)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 78c:	80 e0       	ldi	r24, 0x00	; 0
			case PORTc :
				Set_Bit(DDRC, PinNumber);
				break;
			case PORTd :
				Set_Bit(DDRD, PinNumber);
				break;
 78e:	08 95       	ret
                u8_ERROR_STAT = ERROR_NOK;
                break;
			} //END of SWITCH
		} // END of IF that check for the direction if it is INPUT

		else if (DIO_u8_INPUT == PinDirection)
 790:	44 23       	and	r20, r20
 792:	09 f0       	breq	.+2      	; 0x796 <DIO_setPinDirection+0x96>
 794:	4a c0       	rjmp	.+148    	; 0x82a <DIO_setPinDirection+0x12a>
		{
			switch (PortID)
 796:	81 30       	cpi	r24, 0x01	; 1
 798:	b9 f0       	breq	.+46     	; 0x7c8 <DIO_setPinDirection+0xc8>
 79a:	81 30       	cpi	r24, 0x01	; 1
 79c:	30 f0       	brcs	.+12     	; 0x7aa <DIO_setPinDirection+0xaa>
 79e:	82 30       	cpi	r24, 0x02	; 2
 7a0:	11 f1       	breq	.+68     	; 0x7e6 <DIO_setPinDirection+0xe6>
 7a2:	83 30       	cpi	r24, 0x03	; 3
 7a4:	09 f0       	breq	.+2      	; 0x7a8 <DIO_setPinDirection+0xa8>
 7a6:	43 c0       	rjmp	.+134    	; 0x82e <DIO_setPinDirection+0x12e>
 7a8:	2d c0       	rjmp	.+90     	; 0x804 <DIO_setPinDirection+0x104>
			{
			case PORTa :
				Clr_Bit(DDRA, PinNumber);
 7aa:	2a b3       	in	r18, 0x1a	; 26
 7ac:	81 e0       	ldi	r24, 0x01	; 1
 7ae:	90 e0       	ldi	r25, 0x00	; 0
 7b0:	ac 01       	movw	r20, r24
 7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <DIO_setPinDirection+0xb8>
 7b4:	44 0f       	add	r20, r20
 7b6:	55 1f       	adc	r21, r21
 7b8:	6a 95       	dec	r22
 7ba:	e2 f7       	brpl	.-8      	; 0x7b4 <DIO_setPinDirection+0xb4>
 7bc:	ba 01       	movw	r22, r20
 7be:	60 95       	com	r22
 7c0:	62 23       	and	r22, r18
 7c2:	6a bb       	out	0x1a, r22	; 26
/********************************************************************
*  API to Set Pin Direction                                         *
*  *****************************************************************/
ERROR_STATE_t DIO_setPinDirection(uint8_t PortID, uint8_t PinNumber,uint8_t PinDirection)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 7c4:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch (PortID)
			{
			case PORTa :
				Clr_Bit(DDRA, PinNumber);
				break;
 7c6:	08 95       	ret
			case PORTb :
				Clr_Bit(DDRB, PinNumber);
 7c8:	27 b3       	in	r18, 0x17	; 23
 7ca:	81 e0       	ldi	r24, 0x01	; 1
 7cc:	90 e0       	ldi	r25, 0x00	; 0
 7ce:	ac 01       	movw	r20, r24
 7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <DIO_setPinDirection+0xd6>
 7d2:	44 0f       	add	r20, r20
 7d4:	55 1f       	adc	r21, r21
 7d6:	6a 95       	dec	r22
 7d8:	e2 f7       	brpl	.-8      	; 0x7d2 <DIO_setPinDirection+0xd2>
 7da:	ba 01       	movw	r22, r20
 7dc:	60 95       	com	r22
 7de:	62 23       	and	r22, r18
 7e0:	67 bb       	out	0x17, r22	; 23
/********************************************************************
*  API to Set Pin Direction                                         *
*  *****************************************************************/
ERROR_STATE_t DIO_setPinDirection(uint8_t PortID, uint8_t PinNumber,uint8_t PinDirection)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 7e2:	80 e0       	ldi	r24, 0x00	; 0
			case PORTa :
				Clr_Bit(DDRA, PinNumber);
				break;
			case PORTb :
				Clr_Bit(DDRB, PinNumber);
				break;
 7e4:	08 95       	ret
			case PORTc :
				Clr_Bit(DDRC, PinNumber);
 7e6:	24 b3       	in	r18, 0x14	; 20
 7e8:	81 e0       	ldi	r24, 0x01	; 1
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	ac 01       	movw	r20, r24
 7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <DIO_setPinDirection+0xf4>
 7f0:	44 0f       	add	r20, r20
 7f2:	55 1f       	adc	r21, r21
 7f4:	6a 95       	dec	r22
 7f6:	e2 f7       	brpl	.-8      	; 0x7f0 <DIO_setPinDirection+0xf0>
 7f8:	ba 01       	movw	r22, r20
 7fa:	60 95       	com	r22
 7fc:	62 23       	and	r22, r18
 7fe:	64 bb       	out	0x14, r22	; 20
/********************************************************************
*  API to Set Pin Direction                                         *
*  *****************************************************************/
ERROR_STATE_t DIO_setPinDirection(uint8_t PortID, uint8_t PinNumber,uint8_t PinDirection)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 800:	80 e0       	ldi	r24, 0x00	; 0
			case PORTb :
				Clr_Bit(DDRB, PinNumber);
				break;
			case PORTc :
				Clr_Bit(DDRC, PinNumber);
				break;
 802:	08 95       	ret
			case PORTd :
				Clr_Bit(DDRD, PinNumber);
 804:	21 b3       	in	r18, 0x11	; 17
 806:	81 e0       	ldi	r24, 0x01	; 1
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	ac 01       	movw	r20, r24
 80c:	02 c0       	rjmp	.+4      	; 0x812 <DIO_setPinDirection+0x112>
 80e:	44 0f       	add	r20, r20
 810:	55 1f       	adc	r21, r21
 812:	6a 95       	dec	r22
 814:	e2 f7       	brpl	.-8      	; 0x80e <DIO_setPinDirection+0x10e>
 816:	ba 01       	movw	r22, r20
 818:	60 95       	com	r22
 81a:	62 23       	and	r22, r18
 81c:	61 bb       	out	0x11, r22	; 17
/********************************************************************
*  API to Set Pin Direction                                         *
*  *****************************************************************/
ERROR_STATE_t DIO_setPinDirection(uint8_t PortID, uint8_t PinNumber,uint8_t PinDirection)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 81e:	80 e0       	ldi	r24, 0x00	; 0
			case PORTc :
				Clr_Bit(DDRC, PinNumber);
				break;
			case PORTd :
				Clr_Bit(DDRD, PinNumber);
				break;
 820:	08 95       	ret
			u8_ERROR_STAT = ERROR_NOK;
		} //END OF ELSE
	}	  //END of IF That checking the port and pin number
	else
	{
		u8_ERROR_STAT = ERROR_NOK;
 822:	81 e0       	ldi	r24, 0x01	; 1
 824:	08 95       	ret
				break;
			case PORTd :
				Set_Bit(DDRD, PinNumber);
				break;
            default:
                u8_ERROR_STAT = ERROR_NOK;
 826:	81 e0       	ldi	r24, 0x01	; 1
 828:	08 95       	ret
                break;
			} //END of SWITCH
		} // END of ELSE IF that check for the direction if it is INPUT
		else
		{
			u8_ERROR_STAT = ERROR_NOK;
 82a:	81 e0       	ldi	r24, 0x01	; 1
 82c:	08 95       	ret
				break;
			case PORTd :
				Clr_Bit(DDRD, PinNumber);
				break;
            default:
                u8_ERROR_STAT = ERROR_NOK;
 82e:	81 e0       	ldi	r24, 0x01	; 1
	{
		u8_ERROR_STAT = ERROR_NOK;

	}	  //END of ELSE
	return u8_ERROR_STAT;
}	  //END DIO_setPinDirection
 830:	08 95       	ret

00000832 <DIO_writePortValue>:

/* API to Write Port  Value */
ERROR_STATE_t DIO_writePortValue(uint8_t PortID, uint8_t PortValue)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
    switch (PortID)
 832:	81 30       	cpi	r24, 0x01	; 1
 834:	51 f0       	breq	.+20     	; 0x84a <DIO_writePortValue+0x18>
 836:	81 30       	cpi	r24, 0x01	; 1
 838:	28 f0       	brcs	.+10     	; 0x844 <DIO_writePortValue+0x12>
 83a:	82 30       	cpi	r24, 0x02	; 2
 83c:	49 f0       	breq	.+18     	; 0x850 <DIO_writePortValue+0x1e>
 83e:	83 30       	cpi	r24, 0x03	; 3
 840:	69 f4       	brne	.+26     	; 0x85c <DIO_writePortValue+0x2a>
 842:	09 c0       	rjmp	.+18     	; 0x856 <DIO_writePortValue+0x24>
    {
    case PORTa :
        PORTA = PortValue;
 844:	6b bb       	out	0x1b, r22	; 27
}	  //END DIO_setPinDirection

/* API to Write Port  Value */
ERROR_STATE_t DIO_writePortValue(uint8_t PortID, uint8_t PortValue)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 846:	80 e0       	ldi	r24, 0x00	; 0
    switch (PortID)
    {
    case PORTa :
        PORTA = PortValue;
        break;
 848:	08 95       	ret
    case PORTb :
        PORTB = PortValue;
 84a:	68 bb       	out	0x18, r22	; 24
}	  //END DIO_setPinDirection

/* API to Write Port  Value */
ERROR_STATE_t DIO_writePortValue(uint8_t PortID, uint8_t PortValue)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 84c:	80 e0       	ldi	r24, 0x00	; 0
    case PORTa :
        PORTA = PortValue;
        break;
    case PORTb :
        PORTB = PortValue;
        break;
 84e:	08 95       	ret
    case PORTc :
        PORTC = PortValue;
 850:	65 bb       	out	0x15, r22	; 21
}	  //END DIO_setPinDirection

/* API to Write Port  Value */
ERROR_STATE_t DIO_writePortValue(uint8_t PortID, uint8_t PortValue)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 852:	80 e0       	ldi	r24, 0x00	; 0
    case PORTb :
        PORTB = PortValue;
        break;
    case PORTc :
        PORTC = PortValue;
        break;
 854:	08 95       	ret
    case PORTd :
        PORTD = PortValue;
 856:	62 bb       	out	0x12, r22	; 18
}	  //END DIO_setPinDirection

/* API to Write Port  Value */
ERROR_STATE_t DIO_writePortValue(uint8_t PortID, uint8_t PortValue)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 858:	80 e0       	ldi	r24, 0x00	; 0
    case PORTc :
        PORTC = PortValue;
        break;
    case PORTd :
        PORTD = PortValue;
        break;
 85a:	08 95       	ret
    default:
        u8_ERROR_STAT = ERROR_NOK;
 85c:	81 e0       	ldi	r24, 0x01	; 1
        break;
    } //END of SWITCH
    return u8_ERROR_STAT ;
}	  //END DIO_writePortValue
 85e:	08 95       	ret

00000860 <DIO_writePinValue>:
/* API to Write Pin  Value */
ERROR_STATE_t DIO_writePinValue(uint8_t PortID, uint8_t PinNumber,uint8_t PinDirection)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
    /*CHECK IF VALID PIN NUMBER*/
	if ( (PinNumber >= PIN0 )&& (PinNumber <= PIN7 ))
 860:	68 30       	cpi	r22, 0x08	; 8
 862:	08 f0       	brcs	.+2      	; 0x866 <DIO_writePinValue+0x6>
 864:	8e c0       	rjmp	.+284    	; 0x982 <DIO_writePinValue+0x122>
	{
		if (DIO_u8_HIGH==PinDirection)
 866:	41 30       	cpi	r20, 0x01	; 1
 868:	09 f0       	breq	.+2      	; 0x86c <DIO_writePinValue+0xc>
 86a:	42 c0       	rjmp	.+132    	; 0x8f0 <DIO_writePinValue+0x90>
		{
			switch (PortID)
 86c:	81 30       	cpi	r24, 0x01	; 1
 86e:	b1 f0       	breq	.+44     	; 0x89c <DIO_writePinValue+0x3c>
 870:	81 30       	cpi	r24, 0x01	; 1
 872:	30 f0       	brcs	.+12     	; 0x880 <DIO_writePinValue+0x20>
 874:	82 30       	cpi	r24, 0x02	; 2
 876:	01 f1       	breq	.+64     	; 0x8b8 <DIO_writePinValue+0x58>
 878:	83 30       	cpi	r24, 0x03	; 3
 87a:	09 f0       	breq	.+2      	; 0x87e <DIO_writePinValue+0x1e>
 87c:	84 c0       	rjmp	.+264    	; 0x986 <DIO_writePinValue+0x126>
 87e:	2a c0       	rjmp	.+84     	; 0x8d4 <DIO_writePinValue+0x74>
			{
			case PORTa :
				Set_Bit(PORTA, PinNumber);
 880:	2b b3       	in	r18, 0x1b	; 27
 882:	81 e0       	ldi	r24, 0x01	; 1
 884:	90 e0       	ldi	r25, 0x00	; 0
 886:	ac 01       	movw	r20, r24
 888:	02 c0       	rjmp	.+4      	; 0x88e <DIO_writePinValue+0x2e>
 88a:	44 0f       	add	r20, r20
 88c:	55 1f       	adc	r21, r21
 88e:	6a 95       	dec	r22
 890:	e2 f7       	brpl	.-8      	; 0x88a <DIO_writePinValue+0x2a>
 892:	ba 01       	movw	r22, r20
 894:	62 2b       	or	r22, r18
 896:	6b bb       	out	0x1b, r22	; 27
}	  //END DIO_writePortValue

/* API to Write Pin  Value */
ERROR_STATE_t DIO_writePinValue(uint8_t PortID, uint8_t PinNumber,uint8_t PinDirection)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 898:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch (PortID)
			{
			case PORTa :
				Set_Bit(PORTA, PinNumber);
				break;
 89a:	08 95       	ret
			case PORTb :
				Set_Bit(PORTB, PinNumber);
 89c:	28 b3       	in	r18, 0x18	; 24
 89e:	81 e0       	ldi	r24, 0x01	; 1
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	ac 01       	movw	r20, r24
 8a4:	02 c0       	rjmp	.+4      	; 0x8aa <DIO_writePinValue+0x4a>
 8a6:	44 0f       	add	r20, r20
 8a8:	55 1f       	adc	r21, r21
 8aa:	6a 95       	dec	r22
 8ac:	e2 f7       	brpl	.-8      	; 0x8a6 <DIO_writePinValue+0x46>
 8ae:	ba 01       	movw	r22, r20
 8b0:	62 2b       	or	r22, r18
 8b2:	68 bb       	out	0x18, r22	; 24
}	  //END DIO_writePortValue

/* API to Write Pin  Value */
ERROR_STATE_t DIO_writePinValue(uint8_t PortID, uint8_t PinNumber,uint8_t PinDirection)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 8b4:	80 e0       	ldi	r24, 0x00	; 0
			case PORTa :
				Set_Bit(PORTA, PinNumber);
				break;
			case PORTb :
				Set_Bit(PORTB, PinNumber);
				break;
 8b6:	08 95       	ret
			case PORTc :
				Set_Bit(PORTC, PinNumber);
 8b8:	25 b3       	in	r18, 0x15	; 21
 8ba:	81 e0       	ldi	r24, 0x01	; 1
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	ac 01       	movw	r20, r24
 8c0:	02 c0       	rjmp	.+4      	; 0x8c6 <DIO_writePinValue+0x66>
 8c2:	44 0f       	add	r20, r20
 8c4:	55 1f       	adc	r21, r21
 8c6:	6a 95       	dec	r22
 8c8:	e2 f7       	brpl	.-8      	; 0x8c2 <DIO_writePinValue+0x62>
 8ca:	ba 01       	movw	r22, r20
 8cc:	62 2b       	or	r22, r18
 8ce:	65 bb       	out	0x15, r22	; 21
}	  //END DIO_writePortValue

/* API to Write Pin  Value */
ERROR_STATE_t DIO_writePinValue(uint8_t PortID, uint8_t PinNumber,uint8_t PinDirection)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 8d0:	80 e0       	ldi	r24, 0x00	; 0
			case PORTb :
				Set_Bit(PORTB, PinNumber);
				break;
			case PORTc :
				Set_Bit(PORTC, PinNumber);
				break;
 8d2:	08 95       	ret
			case PORTd :
				Set_Bit(PORTD, PinNumber);
 8d4:	22 b3       	in	r18, 0x12	; 18
 8d6:	81 e0       	ldi	r24, 0x01	; 1
 8d8:	90 e0       	ldi	r25, 0x00	; 0
 8da:	ac 01       	movw	r20, r24
 8dc:	02 c0       	rjmp	.+4      	; 0x8e2 <DIO_writePinValue+0x82>
 8de:	44 0f       	add	r20, r20
 8e0:	55 1f       	adc	r21, r21
 8e2:	6a 95       	dec	r22
 8e4:	e2 f7       	brpl	.-8      	; 0x8de <DIO_writePinValue+0x7e>
 8e6:	ba 01       	movw	r22, r20
 8e8:	62 2b       	or	r22, r18
 8ea:	62 bb       	out	0x12, r22	; 18
}	  //END DIO_writePortValue

/* API to Write Pin  Value */
ERROR_STATE_t DIO_writePinValue(uint8_t PortID, uint8_t PinNumber,uint8_t PinDirection)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 8ec:	80 e0       	ldi	r24, 0x00	; 0
			case PORTc :
				Set_Bit(PORTC, PinNumber);
				break;
			case PORTd :
				Set_Bit(PORTD, PinNumber);
				break;
 8ee:	08 95       	ret
            default:
                u8_ERROR_STAT = ERROR_NOK;
                break;
			} //END of SWITCH
		} // END of IF that check for the direction if it is INPUT
		else if (DIO_u8_LOW==PinDirection)
 8f0:	44 23       	and	r20, r20
 8f2:	09 f0       	breq	.+2      	; 0x8f6 <DIO_writePinValue+0x96>
 8f4:	4a c0       	rjmp	.+148    	; 0x98a <DIO_writePinValue+0x12a>
		{
			switch (PortID)
 8f6:	81 30       	cpi	r24, 0x01	; 1
 8f8:	b9 f0       	breq	.+46     	; 0x928 <DIO_writePinValue+0xc8>
 8fa:	81 30       	cpi	r24, 0x01	; 1
 8fc:	30 f0       	brcs	.+12     	; 0x90a <DIO_writePinValue+0xaa>
 8fe:	82 30       	cpi	r24, 0x02	; 2
 900:	11 f1       	breq	.+68     	; 0x946 <DIO_writePinValue+0xe6>
 902:	83 30       	cpi	r24, 0x03	; 3
 904:	09 f0       	breq	.+2      	; 0x908 <DIO_writePinValue+0xa8>
 906:	43 c0       	rjmp	.+134    	; 0x98e <DIO_writePinValue+0x12e>
 908:	2d c0       	rjmp	.+90     	; 0x964 <DIO_writePinValue+0x104>
			{
			case PORTa :
				Clr_Bit(PORTA, PinNumber);
 90a:	2b b3       	in	r18, 0x1b	; 27
 90c:	81 e0       	ldi	r24, 0x01	; 1
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	ac 01       	movw	r20, r24
 912:	02 c0       	rjmp	.+4      	; 0x918 <DIO_writePinValue+0xb8>
 914:	44 0f       	add	r20, r20
 916:	55 1f       	adc	r21, r21
 918:	6a 95       	dec	r22
 91a:	e2 f7       	brpl	.-8      	; 0x914 <DIO_writePinValue+0xb4>
 91c:	ba 01       	movw	r22, r20
 91e:	60 95       	com	r22
 920:	62 23       	and	r22, r18
 922:	6b bb       	out	0x1b, r22	; 27
}	  //END DIO_writePortValue

/* API to Write Pin  Value */
ERROR_STATE_t DIO_writePinValue(uint8_t PortID, uint8_t PinNumber,uint8_t PinDirection)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 924:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch (PortID)
			{
			case PORTa :
				Clr_Bit(PORTA, PinNumber);
				break;
 926:	08 95       	ret
			case PORTb :
				Clr_Bit(PORTB, PinNumber);
 928:	28 b3       	in	r18, 0x18	; 24
 92a:	81 e0       	ldi	r24, 0x01	; 1
 92c:	90 e0       	ldi	r25, 0x00	; 0
 92e:	ac 01       	movw	r20, r24
 930:	02 c0       	rjmp	.+4      	; 0x936 <DIO_writePinValue+0xd6>
 932:	44 0f       	add	r20, r20
 934:	55 1f       	adc	r21, r21
 936:	6a 95       	dec	r22
 938:	e2 f7       	brpl	.-8      	; 0x932 <DIO_writePinValue+0xd2>
 93a:	ba 01       	movw	r22, r20
 93c:	60 95       	com	r22
 93e:	62 23       	and	r22, r18
 940:	68 bb       	out	0x18, r22	; 24
}	  //END DIO_writePortValue

/* API to Write Pin  Value */
ERROR_STATE_t DIO_writePinValue(uint8_t PortID, uint8_t PinNumber,uint8_t PinDirection)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 942:	80 e0       	ldi	r24, 0x00	; 0
			case PORTa :
				Clr_Bit(PORTA, PinNumber);
				break;
			case PORTb :
				Clr_Bit(PORTB, PinNumber);
				break;
 944:	08 95       	ret
			case PORTc :
				Clr_Bit(PORTC, PinNumber);
 946:	25 b3       	in	r18, 0x15	; 21
 948:	81 e0       	ldi	r24, 0x01	; 1
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	ac 01       	movw	r20, r24
 94e:	02 c0       	rjmp	.+4      	; 0x954 <DIO_writePinValue+0xf4>
 950:	44 0f       	add	r20, r20
 952:	55 1f       	adc	r21, r21
 954:	6a 95       	dec	r22
 956:	e2 f7       	brpl	.-8      	; 0x950 <DIO_writePinValue+0xf0>
 958:	ba 01       	movw	r22, r20
 95a:	60 95       	com	r22
 95c:	62 23       	and	r22, r18
 95e:	65 bb       	out	0x15, r22	; 21
}	  //END DIO_writePortValue

/* API to Write Pin  Value */
ERROR_STATE_t DIO_writePinValue(uint8_t PortID, uint8_t PinNumber,uint8_t PinDirection)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 960:	80 e0       	ldi	r24, 0x00	; 0
			case PORTb :
				Clr_Bit(PORTB, PinNumber);
				break;
			case PORTc :
				Clr_Bit(PORTC, PinNumber);
				break;
 962:	08 95       	ret
			case PORTd :
				Clr_Bit(PORTD, PinNumber);
 964:	22 b3       	in	r18, 0x12	; 18
 966:	81 e0       	ldi	r24, 0x01	; 1
 968:	90 e0       	ldi	r25, 0x00	; 0
 96a:	ac 01       	movw	r20, r24
 96c:	02 c0       	rjmp	.+4      	; 0x972 <DIO_writePinValue+0x112>
 96e:	44 0f       	add	r20, r20
 970:	55 1f       	adc	r21, r21
 972:	6a 95       	dec	r22
 974:	e2 f7       	brpl	.-8      	; 0x96e <DIO_writePinValue+0x10e>
 976:	ba 01       	movw	r22, r20
 978:	60 95       	com	r22
 97a:	62 23       	and	r22, r18
 97c:	62 bb       	out	0x12, r22	; 18
}	  //END DIO_writePortValue

/* API to Write Pin  Value */
ERROR_STATE_t DIO_writePinValue(uint8_t PortID, uint8_t PinNumber,uint8_t PinDirection)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 97e:	80 e0       	ldi	r24, 0x00	; 0
			case PORTc :
				Clr_Bit(PORTC, PinNumber);
				break;
			case PORTd :
				Clr_Bit(PORTD, PinNumber);
				break;
 980:	08 95       	ret
		} //END OF ELSE
	}	  //END OF IF
	else
	{
        /*INVALID PIN NUMBER*/
		u8_ERROR_STAT = ERROR_NOK;
 982:	81 e0       	ldi	r24, 0x01	; 1
 984:	08 95       	ret
				break;
			case PORTd :
				Set_Bit(PORTD, PinNumber);
				break;
            default:
                u8_ERROR_STAT = ERROR_NOK;
 986:	81 e0       	ldi	r24, 0x01	; 1
 988:	08 95       	ret
			} //END of SWITCH
		} // END OF ELSE IF
		else
        {
            /*INVALID PIN DIRECTION*/
			u8_ERROR_STAT = ERROR_NOK;
 98a:	81 e0       	ldi	r24, 0x01	; 1
 98c:	08 95       	ret
			case PORTd :
				Clr_Bit(PORTD, PinNumber);
				break;
            default:
                /*INVALID PORT NUMBER*/
                u8_ERROR_STAT = ERROR_NOK;
 98e:	81 e0       	ldi	r24, 0x01	; 1
	{
        /*INVALID PIN NUMBER*/
		u8_ERROR_STAT = ERROR_NOK;
	}	  //END of ELSE
	return u8_ERROR_STAT ;
}	  //END of DIO_writePinValue
 990:	08 95       	ret

00000992 <DIO_readPort>:
/* API to Read Port  Value */
ERROR_STATE_t DIO_readPort(uint8_t PortID, uint8_t* PortState)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
    /*CHECK IF PinState=NULL POINTER*/
	if(NULL_PTR==PortState)
 992:	61 15       	cp	r22, r1
 994:	71 05       	cpc	r23, r1
 996:	e9 f0       	breq	.+58     	; 0x9d2 <DIO_readPort+0x40>
    {
        u8_ERROR_STAT = ERROR_NOK;
	}
	else
	{
    switch (PortID)
 998:	81 30       	cpi	r24, 0x01	; 1
 99a:	61 f0       	breq	.+24     	; 0x9b4 <DIO_readPort+0x22>
 99c:	81 30       	cpi	r24, 0x01	; 1
 99e:	28 f0       	brcs	.+10     	; 0x9aa <DIO_readPort+0x18>
 9a0:	82 30       	cpi	r24, 0x02	; 2
 9a2:	69 f0       	breq	.+26     	; 0x9be <DIO_readPort+0x2c>
 9a4:	83 30       	cpi	r24, 0x03	; 3
 9a6:	b9 f4       	brne	.+46     	; 0x9d6 <DIO_readPort+0x44>
 9a8:	0f c0       	rjmp	.+30     	; 0x9c8 <DIO_readPort+0x36>
    {
    case PORTa :
        *(PortState) = PINA;
 9aa:	89 b3       	in	r24, 0x19	; 25
 9ac:	fb 01       	movw	r30, r22
 9ae:	80 83       	st	Z, r24
}	  //END of DIO_writePinValue

/* API to Read Port  Value */
ERROR_STATE_t DIO_readPort(uint8_t PortID, uint8_t* PortState)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 9b0:	80 e0       	ldi	r24, 0x00	; 0
	{
    switch (PortID)
    {
    case PORTa :
        *(PortState) = PINA;
        break;
 9b2:	08 95       	ret
    case PORTb :
        *(PortState) = PINB;
 9b4:	86 b3       	in	r24, 0x16	; 22
 9b6:	fb 01       	movw	r30, r22
 9b8:	80 83       	st	Z, r24
}	  //END of DIO_writePinValue

/* API to Read Port  Value */
ERROR_STATE_t DIO_readPort(uint8_t PortID, uint8_t* PortState)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 9ba:	80 e0       	ldi	r24, 0x00	; 0
    case PORTa :
        *(PortState) = PINA;
        break;
    case PORTb :
        *(PortState) = PINB;
        break;
 9bc:	08 95       	ret
    case PORTc :
        *(PortState) = PINC;
 9be:	83 b3       	in	r24, 0x13	; 19
 9c0:	fb 01       	movw	r30, r22
 9c2:	80 83       	st	Z, r24
}	  //END of DIO_writePinValue

/* API to Read Port  Value */
ERROR_STATE_t DIO_readPort(uint8_t PortID, uint8_t* PortState)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 9c4:	80 e0       	ldi	r24, 0x00	; 0
    case PORTb :
        *(PortState) = PINB;
        break;
    case PORTc :
        *(PortState) = PINC;
        break;
 9c6:	08 95       	ret
    case PORTd :
        *(PortState) = PIND;
 9c8:	80 b3       	in	r24, 0x10	; 16
 9ca:	fb 01       	movw	r30, r22
 9cc:	80 83       	st	Z, r24
}	  //END of DIO_writePinValue

/* API to Read Port  Value */
ERROR_STATE_t DIO_readPort(uint8_t PortID, uint8_t* PortState)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 9ce:	80 e0       	ldi	r24, 0x00	; 0
    case PORTc :
        *(PortState) = PINC;
        break;
    case PORTd :
        *(PortState) = PIND;
        break;
 9d0:	08 95       	ret
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
    /*CHECK IF PinState=NULL POINTER*/
	if(NULL_PTR==PortState)
    {
        u8_ERROR_STAT = ERROR_NOK;
 9d2:	81 e0       	ldi	r24, 0x01	; 1
 9d4:	08 95       	ret
    case PORTd :
        *(PortState) = PIND;
        break;
    default:
            /*INVALID PORT NUMBER*/
        u8_ERROR_STAT = ERROR_NOK;
 9d6:	81 e0       	ldi	r24, 0x01	; 1
        break;

		} //END of SWITCH
	}
	return u8_ERROR_STAT ;
}	  //END of DIO_readPort
 9d8:	08 95       	ret

000009da <DIO_readPin>:
/* API to Read Pin  Value */
ERROR_STATE_t DIO_readPin(uint8_t PortID, uint8_t PinNumber,uint8_t* PinState)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
    /*CHECK IF PinState=NULL POINTER*/
	if(NULL_PTR==PinState)
 9da:	41 15       	cp	r20, r1
 9dc:	51 05       	cpc	r21, r1
 9de:	09 f4       	brne	.+2      	; 0x9e2 <DIO_readPin+0x8>
 9e0:	45 c0       	rjmp	.+138    	; 0xa6c <DIO_readPin+0x92>
        u8_ERROR_STAT = ERROR_NOK;
	}
	else
	{
        /*CHECK IF INVALID PIN NUMBER*/
        if ((PinNumber >= PIN0 )&& (PinNumber <= PIN7 ))
 9e2:	68 30       	cpi	r22, 0x08	; 8
 9e4:	08 f0       	brcs	.+2      	; 0x9e8 <DIO_readPin+0xe>
 9e6:	44 c0       	rjmp	.+136    	; 0xa70 <DIO_readPin+0x96>
        {
            switch (PortID)
 9e8:	81 30       	cpi	r24, 0x01	; 1
 9ea:	b1 f0       	breq	.+44     	; 0xa18 <DIO_readPin+0x3e>
 9ec:	81 30       	cpi	r24, 0x01	; 1
 9ee:	30 f0       	brcs	.+12     	; 0x9fc <DIO_readPin+0x22>
 9f0:	82 30       	cpi	r24, 0x02	; 2
 9f2:	01 f1       	breq	.+64     	; 0xa34 <DIO_readPin+0x5a>
 9f4:	83 30       	cpi	r24, 0x03	; 3
 9f6:	09 f0       	breq	.+2      	; 0x9fa <DIO_readPin+0x20>
 9f8:	3d c0       	rjmp	.+122    	; 0xa74 <DIO_readPin+0x9a>
 9fa:	2a c0       	rjmp	.+84     	; 0xa50 <DIO_readPin+0x76>
            {
            case PORTa :
                *(PinState) = Get_Bit(PINA, PinNumber);
 9fc:	89 b3       	in	r24, 0x19	; 25
 9fe:	90 e0       	ldi	r25, 0x00	; 0
 a00:	9c 01       	movw	r18, r24
 a02:	02 c0       	rjmp	.+4      	; 0xa08 <DIO_readPin+0x2e>
 a04:	35 95       	asr	r19
 a06:	27 95       	ror	r18
 a08:	6a 95       	dec	r22
 a0a:	e2 f7       	brpl	.-8      	; 0xa04 <DIO_readPin+0x2a>
 a0c:	b9 01       	movw	r22, r18
 a0e:	61 70       	andi	r22, 0x01	; 1
 a10:	fa 01       	movw	r30, r20
 a12:	60 83       	st	Z, r22
}	  //END of DIO_readPort

/* API to Read Pin  Value */
ERROR_STATE_t DIO_readPin(uint8_t PortID, uint8_t PinNumber,uint8_t* PinState)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 a14:	80 e0       	ldi	r24, 0x00	; 0
        {
            switch (PortID)
            {
            case PORTa :
                *(PinState) = Get_Bit(PINA, PinNumber);
                break;
 a16:	08 95       	ret
            case PORTb :
                *(PinState) = Get_Bit(PINB, PinNumber);
 a18:	86 b3       	in	r24, 0x16	; 22
 a1a:	90 e0       	ldi	r25, 0x00	; 0
 a1c:	9c 01       	movw	r18, r24
 a1e:	02 c0       	rjmp	.+4      	; 0xa24 <DIO_readPin+0x4a>
 a20:	35 95       	asr	r19
 a22:	27 95       	ror	r18
 a24:	6a 95       	dec	r22
 a26:	e2 f7       	brpl	.-8      	; 0xa20 <DIO_readPin+0x46>
 a28:	b9 01       	movw	r22, r18
 a2a:	61 70       	andi	r22, 0x01	; 1
 a2c:	fa 01       	movw	r30, r20
 a2e:	60 83       	st	Z, r22
}	  //END of DIO_readPort

/* API to Read Pin  Value */
ERROR_STATE_t DIO_readPin(uint8_t PortID, uint8_t PinNumber,uint8_t* PinState)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 a30:	80 e0       	ldi	r24, 0x00	; 0
            case PORTa :
                *(PinState) = Get_Bit(PINA, PinNumber);
                break;
            case PORTb :
                *(PinState) = Get_Bit(PINB, PinNumber);
                break;
 a32:	08 95       	ret
            case PORTc :
                *(PinState) = Get_Bit(PINC, PinNumber);
 a34:	83 b3       	in	r24, 0x13	; 19
 a36:	90 e0       	ldi	r25, 0x00	; 0
 a38:	9c 01       	movw	r18, r24
 a3a:	02 c0       	rjmp	.+4      	; 0xa40 <DIO_readPin+0x66>
 a3c:	35 95       	asr	r19
 a3e:	27 95       	ror	r18
 a40:	6a 95       	dec	r22
 a42:	e2 f7       	brpl	.-8      	; 0xa3c <DIO_readPin+0x62>
 a44:	b9 01       	movw	r22, r18
 a46:	61 70       	andi	r22, 0x01	; 1
 a48:	fa 01       	movw	r30, r20
 a4a:	60 83       	st	Z, r22
}	  //END of DIO_readPort

/* API to Read Pin  Value */
ERROR_STATE_t DIO_readPin(uint8_t PortID, uint8_t PinNumber,uint8_t* PinState)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 a4c:	80 e0       	ldi	r24, 0x00	; 0
            case PORTb :
                *(PinState) = Get_Bit(PINB, PinNumber);
                break;
            case PORTc :
                *(PinState) = Get_Bit(PINC, PinNumber);
                break;
 a4e:	08 95       	ret
            case PORTd :
                *(PinState) = Get_Bit(PIND, PinNumber);
 a50:	80 b3       	in	r24, 0x10	; 16
 a52:	90 e0       	ldi	r25, 0x00	; 0
 a54:	9c 01       	movw	r18, r24
 a56:	02 c0       	rjmp	.+4      	; 0xa5c <DIO_readPin+0x82>
 a58:	35 95       	asr	r19
 a5a:	27 95       	ror	r18
 a5c:	6a 95       	dec	r22
 a5e:	e2 f7       	brpl	.-8      	; 0xa58 <DIO_readPin+0x7e>
 a60:	b9 01       	movw	r22, r18
 a62:	61 70       	andi	r22, 0x01	; 1
 a64:	fa 01       	movw	r30, r20
 a66:	60 83       	st	Z, r22
}	  //END of DIO_readPort

/* API to Read Pin  Value */
ERROR_STATE_t DIO_readPin(uint8_t PortID, uint8_t PinNumber,uint8_t* PinState)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 a68:	80 e0       	ldi	r24, 0x00	; 0
            case PORTc :
                *(PinState) = Get_Bit(PINC, PinNumber);
                break;
            case PORTd :
                *(PinState) = Get_Bit(PIND, PinNumber);
                break;
 a6a:	08 95       	ret
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
    /*CHECK IF PinState=NULL POINTER*/
	if(NULL_PTR==PinState)
    {
        u8_ERROR_STAT = ERROR_NOK;
 a6c:	81 e0       	ldi	r24, 0x01	; 1
 a6e:	08 95       	ret
                break;
            } //END of SWITCH
        }	  //END of IF That checking the port and pin number
        else
        {
            u8_ERROR_STAT = ERROR_NOK;
 a70:	81 e0       	ldi	r24, 0x01	; 1
 a72:	08 95       	ret
            case PORTd :
                *(PinState) = Get_Bit(PIND, PinNumber);
                break;
            default:
                /*INVALID PORT NUMBER*/
                u8_ERROR_STAT = ERROR_NOK;
 a74:	81 e0       	ldi	r24, 0x01	; 1
        {
            u8_ERROR_STAT = ERROR_NOK;
        }	  //END of ELSE
	}
    return u8_ERROR_STAT ;
}    //END of DIO_readPint
 a76:	08 95       	ret

00000a78 <DIO_TogglePin>:
 * */
ERROR_STATE_t DIO_TogglePin(uint8_t PortID, uint8_t PinNumber)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
    /*CHECK IF VALID PIN NUMBER*/
    if ((PinNumber >= PIN0 )&& (PinNumber <= PIN7 ))
 a78:	68 30       	cpi	r22, 0x08	; 8
 a7a:	08 f0       	brcs	.+2      	; 0xa7e <DIO_TogglePin+0x6>
 a7c:	42 c0       	rjmp	.+132    	; 0xb02 <DIO_TogglePin+0x8a>
    {
        switch (PortID)
 a7e:	81 30       	cpi	r24, 0x01	; 1
 a80:	b1 f0       	breq	.+44     	; 0xaae <DIO_TogglePin+0x36>
 a82:	81 30       	cpi	r24, 0x01	; 1
 a84:	30 f0       	brcs	.+12     	; 0xa92 <DIO_TogglePin+0x1a>
 a86:	82 30       	cpi	r24, 0x02	; 2
 a88:	01 f1       	breq	.+64     	; 0xaca <DIO_TogglePin+0x52>
 a8a:	83 30       	cpi	r24, 0x03	; 3
 a8c:	09 f0       	breq	.+2      	; 0xa90 <DIO_TogglePin+0x18>
 a8e:	3b c0       	rjmp	.+118    	; 0xb06 <DIO_TogglePin+0x8e>
 a90:	2a c0       	rjmp	.+84     	; 0xae6 <DIO_TogglePin+0x6e>
        {
        case PORTa :
            Toggle_Bit(PORTA, PinNumber);
 a92:	2b b3       	in	r18, 0x1b	; 27
 a94:	81 e0       	ldi	r24, 0x01	; 1
 a96:	90 e0       	ldi	r25, 0x00	; 0
 a98:	ac 01       	movw	r20, r24
 a9a:	02 c0       	rjmp	.+4      	; 0xaa0 <DIO_TogglePin+0x28>
 a9c:	44 0f       	add	r20, r20
 a9e:	55 1f       	adc	r21, r21
 aa0:	6a 95       	dec	r22
 aa2:	e2 f7       	brpl	.-8      	; 0xa9c <DIO_TogglePin+0x24>
 aa4:	ba 01       	movw	r22, r20
 aa6:	62 27       	eor	r22, r18
 aa8:	6b bb       	out	0x1b, r22	; 27
/*
 * API to toggle pin
 * */
ERROR_STATE_t DIO_TogglePin(uint8_t PortID, uint8_t PinNumber)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 aaa:	80 e0       	ldi	r24, 0x00	; 0
    {
        switch (PortID)
        {
        case PORTa :
            Toggle_Bit(PORTA, PinNumber);
            break;
 aac:	08 95       	ret
        case PORTb :
            Toggle_Bit(PORTB, PinNumber);
 aae:	28 b3       	in	r18, 0x18	; 24
 ab0:	81 e0       	ldi	r24, 0x01	; 1
 ab2:	90 e0       	ldi	r25, 0x00	; 0
 ab4:	ac 01       	movw	r20, r24
 ab6:	02 c0       	rjmp	.+4      	; 0xabc <DIO_TogglePin+0x44>
 ab8:	44 0f       	add	r20, r20
 aba:	55 1f       	adc	r21, r21
 abc:	6a 95       	dec	r22
 abe:	e2 f7       	brpl	.-8      	; 0xab8 <DIO_TogglePin+0x40>
 ac0:	ba 01       	movw	r22, r20
 ac2:	62 27       	eor	r22, r18
 ac4:	68 bb       	out	0x18, r22	; 24
/*
 * API to toggle pin
 * */
ERROR_STATE_t DIO_TogglePin(uint8_t PortID, uint8_t PinNumber)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 ac6:	80 e0       	ldi	r24, 0x00	; 0
        case PORTa :
            Toggle_Bit(PORTA, PinNumber);
            break;
        case PORTb :
            Toggle_Bit(PORTB, PinNumber);
            break;
 ac8:	08 95       	ret
        case PORTc :
            Toggle_Bit(PORTC, PinNumber);
 aca:	25 b3       	in	r18, 0x15	; 21
 acc:	81 e0       	ldi	r24, 0x01	; 1
 ace:	90 e0       	ldi	r25, 0x00	; 0
 ad0:	ac 01       	movw	r20, r24
 ad2:	02 c0       	rjmp	.+4      	; 0xad8 <DIO_TogglePin+0x60>
 ad4:	44 0f       	add	r20, r20
 ad6:	55 1f       	adc	r21, r21
 ad8:	6a 95       	dec	r22
 ada:	e2 f7       	brpl	.-8      	; 0xad4 <DIO_TogglePin+0x5c>
 adc:	ba 01       	movw	r22, r20
 ade:	62 27       	eor	r22, r18
 ae0:	65 bb       	out	0x15, r22	; 21
/*
 * API to toggle pin
 * */
ERROR_STATE_t DIO_TogglePin(uint8_t PortID, uint8_t PinNumber)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 ae2:	80 e0       	ldi	r24, 0x00	; 0
        case PORTb :
            Toggle_Bit(PORTB, PinNumber);
            break;
        case PORTc :
            Toggle_Bit(PORTC, PinNumber);
            break;
 ae4:	08 95       	ret
        case PORTd :
            Toggle_Bit(PORTD, PinNumber);
 ae6:	22 b3       	in	r18, 0x12	; 18
 ae8:	81 e0       	ldi	r24, 0x01	; 1
 aea:	90 e0       	ldi	r25, 0x00	; 0
 aec:	ac 01       	movw	r20, r24
 aee:	02 c0       	rjmp	.+4      	; 0xaf4 <DIO_TogglePin+0x7c>
 af0:	44 0f       	add	r20, r20
 af2:	55 1f       	adc	r21, r21
 af4:	6a 95       	dec	r22
 af6:	e2 f7       	brpl	.-8      	; 0xaf0 <DIO_TogglePin+0x78>
 af8:	ba 01       	movw	r22, r20
 afa:	62 27       	eor	r22, r18
 afc:	62 bb       	out	0x12, r22	; 18
/*
 * API to toggle pin
 * */
ERROR_STATE_t DIO_TogglePin(uint8_t PortID, uint8_t PinNumber)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 afe:	80 e0       	ldi	r24, 0x00	; 0
        case PORTc :
            Toggle_Bit(PORTC, PinNumber);
            break;
        case PORTd :
            Toggle_Bit(PORTD, PinNumber);
            break;
 b00:	08 95       	ret
            break;
        } //END OF SWITCH
    }	  //END OF IF
    else {
        /*INVALID PIN NUMBER*/
        u8_ERROR_STAT = ERROR_NOK;
 b02:	81 e0       	ldi	r24, 0x01	; 1
 b04:	08 95       	ret
        case PORTd :
            Toggle_Bit(PORTD, PinNumber);
            break;
        default:
            /*INVALID PORT NUMBER*/
            u8_ERROR_STAT = ERROR_NOK;
 b06:	81 e0       	ldi	r24, 0x01	; 1
    else {
        /*INVALID PIN NUMBER*/
        u8_ERROR_STAT = ERROR_NOK;
    }	  //END of ELSE
    return u8_ERROR_STAT ;
}
 b08:	08 95       	ret

00000b0a <DIO_SetPullupRes>:
ERROR_STATE_t DIO_SetPullupRes(uint8_t PortID, uint8_t PinNumber)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
    /*CHECK IF VALID PIN NUMBER*/
    if ((PinNumber >= PIN0 )&& (PinNumber <= PIN7 ))
 b0a:	68 30       	cpi	r22, 0x08	; 8
 b0c:	08 f0       	brcs	.+2      	; 0xb10 <DIO_SetPullupRes+0x6>
 b0e:	6a c0       	rjmp	.+212    	; 0xbe4 <DIO_SetPullupRes+0xda>
    {
        switch (PortID)
 b10:	81 30       	cpi	r24, 0x01	; 1
 b12:	01 f1       	breq	.+64     	; 0xb54 <DIO_SetPullupRes+0x4a>
 b14:	81 30       	cpi	r24, 0x01	; 1
 b16:	30 f0       	brcs	.+12     	; 0xb24 <DIO_SetPullupRes+0x1a>
 b18:	82 30       	cpi	r24, 0x02	; 2
 b1a:	a1 f1       	breq	.+104    	; 0xb84 <DIO_SetPullupRes+0x7a>
 b1c:	83 30       	cpi	r24, 0x03	; 3
 b1e:	09 f0       	breq	.+2      	; 0xb22 <DIO_SetPullupRes+0x18>
 b20:	63 c0       	rjmp	.+198    	; 0xbe8 <DIO_SetPullupRes+0xde>
 b22:	48 c0       	rjmp	.+144    	; 0xbb4 <DIO_SetPullupRes+0xaa>
        {
        case PORTa :
            if(DIO_u8_INPUT==Get_Bit(DDRA, PinNumber))
 b24:	8a b3       	in	r24, 0x1a	; 26
 b26:	90 e0       	ldi	r25, 0x00	; 0
 b28:	06 2e       	mov	r0, r22
 b2a:	02 c0       	rjmp	.+4      	; 0xb30 <DIO_SetPullupRes+0x26>
 b2c:	95 95       	asr	r25
 b2e:	87 95       	ror	r24
 b30:	0a 94       	dec	r0
 b32:	e2 f7       	brpl	.-8      	; 0xb2c <DIO_SetPullupRes+0x22>
 b34:	80 fd       	sbrc	r24, 0
 b36:	5a c0       	rjmp	.+180    	; 0xbec <DIO_SetPullupRes+0xe2>
            {
                Set_Bit(PORTA, PinNumber);
 b38:	2b b3       	in	r18, 0x1b	; 27
 b3a:	81 e0       	ldi	r24, 0x01	; 1
 b3c:	90 e0       	ldi	r25, 0x00	; 0
 b3e:	ac 01       	movw	r20, r24
 b40:	02 c0       	rjmp	.+4      	; 0xb46 <DIO_SetPullupRes+0x3c>
 b42:	44 0f       	add	r20, r20
 b44:	55 1f       	adc	r21, r21
 b46:	6a 95       	dec	r22
 b48:	e2 f7       	brpl	.-8      	; 0xb42 <DIO_SetPullupRes+0x38>
 b4a:	ba 01       	movw	r22, r20
 b4c:	62 2b       	or	r22, r18
 b4e:	6b bb       	out	0x1b, r22	; 27
    }	  //END of ELSE
    return u8_ERROR_STAT ;
}
ERROR_STATE_t DIO_SetPullupRes(uint8_t PortID, uint8_t PinNumber)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 b50:	80 e0       	ldi	r24, 0x00	; 0
 b52:	08 95       	ret
            {
                u8_ERROR_STAT = ERROR_NOK;
            }
            break;
        case PORTb :
            if(DIO_u8_INPUT==Get_Bit(DDRB, PinNumber))
 b54:	87 b3       	in	r24, 0x17	; 23
 b56:	90 e0       	ldi	r25, 0x00	; 0
 b58:	06 2e       	mov	r0, r22
 b5a:	02 c0       	rjmp	.+4      	; 0xb60 <DIO_SetPullupRes+0x56>
 b5c:	95 95       	asr	r25
 b5e:	87 95       	ror	r24
 b60:	0a 94       	dec	r0
 b62:	e2 f7       	brpl	.-8      	; 0xb5c <DIO_SetPullupRes+0x52>
 b64:	80 fd       	sbrc	r24, 0
 b66:	44 c0       	rjmp	.+136    	; 0xbf0 <DIO_SetPullupRes+0xe6>
            {
                Set_Bit(PORTB, PinNumber);
 b68:	28 b3       	in	r18, 0x18	; 24
 b6a:	81 e0       	ldi	r24, 0x01	; 1
 b6c:	90 e0       	ldi	r25, 0x00	; 0
 b6e:	ac 01       	movw	r20, r24
 b70:	02 c0       	rjmp	.+4      	; 0xb76 <DIO_SetPullupRes+0x6c>
 b72:	44 0f       	add	r20, r20
 b74:	55 1f       	adc	r21, r21
 b76:	6a 95       	dec	r22
 b78:	e2 f7       	brpl	.-8      	; 0xb72 <DIO_SetPullupRes+0x68>
 b7a:	ba 01       	movw	r22, r20
 b7c:	62 2b       	or	r22, r18
 b7e:	68 bb       	out	0x18, r22	; 24
    }	  //END of ELSE
    return u8_ERROR_STAT ;
}
ERROR_STATE_t DIO_SetPullupRes(uint8_t PortID, uint8_t PinNumber)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 b80:	80 e0       	ldi	r24, 0x00	; 0
 b82:	08 95       	ret
            {
                u8_ERROR_STAT = ERROR_NOK;
            }
            break;
        case PORTc :
            if(DIO_u8_INPUT==Get_Bit(DDRC, PinNumber))
 b84:	84 b3       	in	r24, 0x14	; 20
 b86:	90 e0       	ldi	r25, 0x00	; 0
 b88:	06 2e       	mov	r0, r22
 b8a:	02 c0       	rjmp	.+4      	; 0xb90 <DIO_SetPullupRes+0x86>
 b8c:	95 95       	asr	r25
 b8e:	87 95       	ror	r24
 b90:	0a 94       	dec	r0
 b92:	e2 f7       	brpl	.-8      	; 0xb8c <DIO_SetPullupRes+0x82>
 b94:	80 fd       	sbrc	r24, 0
 b96:	2e c0       	rjmp	.+92     	; 0xbf4 <DIO_SetPullupRes+0xea>
            {
                Set_Bit(PORTC, PinNumber);
 b98:	25 b3       	in	r18, 0x15	; 21
 b9a:	81 e0       	ldi	r24, 0x01	; 1
 b9c:	90 e0       	ldi	r25, 0x00	; 0
 b9e:	ac 01       	movw	r20, r24
 ba0:	02 c0       	rjmp	.+4      	; 0xba6 <DIO_SetPullupRes+0x9c>
 ba2:	44 0f       	add	r20, r20
 ba4:	55 1f       	adc	r21, r21
 ba6:	6a 95       	dec	r22
 ba8:	e2 f7       	brpl	.-8      	; 0xba2 <DIO_SetPullupRes+0x98>
 baa:	ba 01       	movw	r22, r20
 bac:	62 2b       	or	r22, r18
 bae:	65 bb       	out	0x15, r22	; 21
    }	  //END of ELSE
    return u8_ERROR_STAT ;
}
ERROR_STATE_t DIO_SetPullupRes(uint8_t PortID, uint8_t PinNumber)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 bb0:	80 e0       	ldi	r24, 0x00	; 0
 bb2:	08 95       	ret
            {
                u8_ERROR_STAT = ERROR_NOK;
            }
            break;
        case PORTd :
            if(DIO_u8_INPUT==Get_Bit(DDRD, PinNumber))
 bb4:	81 b3       	in	r24, 0x11	; 17
 bb6:	90 e0       	ldi	r25, 0x00	; 0
 bb8:	06 2e       	mov	r0, r22
 bba:	02 c0       	rjmp	.+4      	; 0xbc0 <DIO_SetPullupRes+0xb6>
 bbc:	95 95       	asr	r25
 bbe:	87 95       	ror	r24
 bc0:	0a 94       	dec	r0
 bc2:	e2 f7       	brpl	.-8      	; 0xbbc <DIO_SetPullupRes+0xb2>
 bc4:	80 fd       	sbrc	r24, 0
 bc6:	18 c0       	rjmp	.+48     	; 0xbf8 <DIO_SetPullupRes+0xee>
            {
                Set_Bit(PORTD, PinNumber);
 bc8:	22 b3       	in	r18, 0x12	; 18
 bca:	81 e0       	ldi	r24, 0x01	; 1
 bcc:	90 e0       	ldi	r25, 0x00	; 0
 bce:	ac 01       	movw	r20, r24
 bd0:	02 c0       	rjmp	.+4      	; 0xbd6 <DIO_SetPullupRes+0xcc>
 bd2:	44 0f       	add	r20, r20
 bd4:	55 1f       	adc	r21, r21
 bd6:	6a 95       	dec	r22
 bd8:	e2 f7       	brpl	.-8      	; 0xbd2 <DIO_SetPullupRes+0xc8>
 bda:	ba 01       	movw	r22, r20
 bdc:	62 2b       	or	r22, r18
 bde:	62 bb       	out	0x12, r22	; 18
    }	  //END of ELSE
    return u8_ERROR_STAT ;
}
ERROR_STATE_t DIO_SetPullupRes(uint8_t PortID, uint8_t PinNumber)
{
    ERROR_STATE_t u8_ERROR_STAT = ERROR_OK;
 be0:	80 e0       	ldi	r24, 0x00	; 0
 be2:	08 95       	ret
    }	  //END OF IF

    else
    {
        /*INVALID PIN NUMBER*/
        u8_ERROR_STAT = ERROR_NOK;
 be4:	81 e0       	ldi	r24, 0x01	; 1
 be6:	08 95       	ret
                u8_ERROR_STAT = ERROR_NOK;
            }
            break;
        default:
            /*INVALID PORT NUMBER*/
            u8_ERROR_STAT = ERROR_NOK;
 be8:	81 e0       	ldi	r24, 0x01	; 1
 bea:	08 95       	ret
            {
                Set_Bit(PORTA, PinNumber);
            }// END of IF which checking if the  pin is INPUT
            else
            {
                u8_ERROR_STAT = ERROR_NOK;
 bec:	81 e0       	ldi	r24, 0x01	; 1
 bee:	08 95       	ret
            {
                Set_Bit(PORTB, PinNumber);
            }// END of IF which checking if the  pin is INPUT
            else
            {
                u8_ERROR_STAT = ERROR_NOK;
 bf0:	81 e0       	ldi	r24, 0x01	; 1
 bf2:	08 95       	ret
            {
                Set_Bit(PORTC, PinNumber);
            }// END of IF which checking if the  pin is INPUT
            else
            {
                u8_ERROR_STAT = ERROR_NOK;
 bf4:	81 e0       	ldi	r24, 0x01	; 1
 bf6:	08 95       	ret
            {
                Set_Bit(PORTD, PinNumber);
            }// END of IF which checking if the  pin is INPUT
            else
            {
                u8_ERROR_STAT = ERROR_NOK;
 bf8:	81 e0       	ldi	r24, 0x01	; 1
    {
        /*INVALID PIN NUMBER*/
        u8_ERROR_STAT = ERROR_NOK;
    } //END of ELSE
    return u8_ERROR_STAT ;
}
 bfa:	08 95       	ret

00000bfc <TOGGLE_2>:
	DIO_TogglePin(PWM_CFG[0].port, PWM_CFG[0].pin);
}

static void     TOGGLE_2 (void)
{
	DIO_TogglePin(PWM_CFG[1].port, PWM_CFG[1].pin);
 bfc:	80 91 7d 00 	lds	r24, 0x007D
 c00:	60 91 7e 00 	lds	r22, 0x007E
 c04:	0e 94 3c 05 	call	0xa78	; 0xa78 <DIO_TogglePin>
 c08:	08 95       	ret

00000c0a <TOGGLE_1>:
	TIMER_setCallBack(a_ptr, a_pwmID);
}

static void     TOGGLE_1 (void)
{
	DIO_TogglePin(PWM_CFG[0].port, PWM_CFG[0].pin);
 c0a:	80 91 7b 00 	lds	r24, 0x007B
 c0e:	60 91 7c 00 	lds	r22, 0x007C
 c12:	0e 94 3c 05 	call	0xa78	; 0xa78 <DIO_TogglePin>
}
 c16:	08 95       	ret

00000c18 <PWM_Init>:
static void PWM_setCallBack(void(*a_ptr)(void), const PWM_ID a_pwmID);

static void (*PWM_CALLBACKS[])(void) = {TOGGLE_1,TOGGLE_2};

void PWM_Init(PWM_ID pwm_ch)
{
 c18:	1f 93       	push	r17
 c1a:	cf 93       	push	r28
 c1c:	df 93       	push	r29
 c1e:	18 2f       	mov	r17, r24
	DIO_setPinDirection(PWM_CFG[pwm_ch].port, PWM_CFG[pwm_ch].pin, DIO_u8_OUTPUT);
 c20:	c8 2f       	mov	r28, r24
 c22:	d0 e0       	ldi	r29, 0x00	; 0
 c24:	cc 0f       	add	r28, r28
 c26:	dd 1f       	adc	r29, r29
 c28:	de 01       	movw	r26, r28
 c2a:	a5 58       	subi	r26, 0x85	; 133
 c2c:	bf 4f       	sbci	r27, 0xFF	; 255
 c2e:	fe 01       	movw	r30, r28
 c30:	e4 58       	subi	r30, 0x84	; 132
 c32:	ff 4f       	sbci	r31, 0xFF	; 255
 c34:	8c 91       	ld	r24, X
 c36:	60 81       	ld	r22, Z
 c38:	41 e0       	ldi	r20, 0x01	; 1
 c3a:	0e 94 80 03 	call	0x700	; 0x700 <DIO_setPinDirection>
	PWM_setCallBack(PWM_CALLBACKS[pwm_ch], pwm_ch);
 c3e:	c1 58       	subi	r28, 0x81	; 129
 c40:	df 4f       	sbci	r29, 0xFF	; 255

/***************************************************************************************************************/

static void PWM_setCallBack(void(*a_ptr)(void), const PWM_ID a_pwmID)
{
	TIMER_setCallBack(a_ptr, a_pwmID);
 c42:	88 81       	ld	r24, Y
 c44:	99 81       	ldd	r25, Y+1	; 0x01
 c46:	61 2f       	mov	r22, r17
 c48:	0e 94 42 06 	call	0xc84	; 0xc84 <TIMER_setCallBack>

void PWM_Init(PWM_ID pwm_ch)
{
	DIO_setPinDirection(PWM_CFG[pwm_ch].port, PWM_CFG[pwm_ch].pin, DIO_u8_OUTPUT);
	PWM_setCallBack(PWM_CALLBACKS[pwm_ch], pwm_ch);
}
 c4c:	df 91       	pop	r29
 c4e:	cf 91       	pop	r28
 c50:	1f 91       	pop	r17
 c52:	08 95       	ret

00000c54 <PWM_Stop>:

void PWM_Stop(PWM_ID pwm_ch)
{
 c54:	cf 93       	push	r28
 c56:	c8 2f       	mov	r28, r24
	DIO_writePinValue(PWM_CFG[pwm_ch].port, PWM_CFG[pwm_ch].pin, DIO_u8_LOW);
 c58:	e8 2f       	mov	r30, r24
 c5a:	f0 e0       	ldi	r31, 0x00	; 0
 c5c:	ee 0f       	add	r30, r30
 c5e:	ff 1f       	adc	r31, r31
 c60:	df 01       	movw	r26, r30
 c62:	a5 58       	subi	r26, 0x85	; 133
 c64:	bf 4f       	sbci	r27, 0xFF	; 255
 c66:	e4 58       	subi	r30, 0x84	; 132
 c68:	ff 4f       	sbci	r31, 0xFF	; 255
 c6a:	8c 91       	ld	r24, X
 c6c:	60 81       	ld	r22, Z
 c6e:	40 e0       	ldi	r20, 0x00	; 0
 c70:	0e 94 30 04 	call	0x860	; 0x860 <DIO_writePinValue>
	TIMER_stop(pwm_ch);
 c74:	8c 2f       	mov	r24, r28
 c76:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <TIMER_stop>
}
 c7a:	cf 91       	pop	r28
 c7c:	08 95       	ret

00000c7e <SET_PWM_DutyCycle>:

void SET_PWM_DutyCycle(PWM_ID pwm_ch, uint8_t Duty)
{	
	TIMER_start(pwm_ch, Duty);
 c7e:	0e 94 4b 06 	call	0xc96	; 0xc96 <TIMER_start>
}
 c82:	08 95       	ret

00000c84 <TIMER_setCallBack>:

static void (*TMR_CALLBACKS[])(void) = {NULL_PTR,NULL_PTR};

void TIMER_setCallBack(void(*fun)(void), TIMER_ID_t Timer)
{
	TMR_CALLBACKS[Timer]=fun;
 c84:	e6 2f       	mov	r30, r22
 c86:	f0 e0       	ldi	r31, 0x00	; 0
 c88:	ee 0f       	add	r30, r30
 c8a:	ff 1f       	adc	r31, r31
 c8c:	e8 57       	subi	r30, 0x78	; 120
 c8e:	ff 4f       	sbci	r31, 0xFF	; 255
 c90:	91 83       	std	Z+1, r25	; 0x01
 c92:	80 83       	st	Z, r24
}
 c94:	08 95       	ret

00000c96 <TIMER_start>:
void TIMER_start(TIMER_ID_t Timer, uint8_t duty)
{
	if(Timer == Timer_0)
 c96:	88 23       	and	r24, r24
 c98:	71 f4       	brne	.+28     	; 0xcb6 <TIMER_start+0x20>
	{
		TIMER.T0.Counter      = 0;
 c9a:	12 be       	out	0x32, r1	; 50
		TIMER.T0.CompareValue = 0xFF - duty;
 c9c:	60 95       	com	r22
 c9e:	6c bf       	out	0x3c, r22	; 60
		TIMER.T0.Interrupts.Comp_Match = ENABLE;
 ca0:	89 b7       	in	r24, 0x39	; 57
 ca2:	82 60       	ori	r24, 0x02	; 2
 ca4:	89 bf       	out	0x39, r24	; 57
		TIMER.T0.Control.PWM_wave_generation = ENABLE;
 ca6:	83 b7       	in	r24, 0x33	; 51
 ca8:	80 64       	ori	r24, 0x40	; 64
 caa:	83 bf       	out	0x33, r24	; 51
		TIMER.T0.Control.Clock = 4;
 cac:	83 b7       	in	r24, 0x33	; 51
 cae:	88 7f       	andi	r24, 0xF8	; 248
 cb0:	84 60       	ori	r24, 0x04	; 4
 cb2:	83 bf       	out	0x33, r24	; 51
 cb4:	08 95       	ret
	}
	else if(Timer == Timer_2)
 cb6:	81 30       	cpi	r24, 0x01	; 1
 cb8:	69 f4       	brne	.+26     	; 0xcd4 <TIMER_start+0x3e>
	{
		TIMER.T2.Counter      = 0;
 cba:	14 bc       	out	0x24, r1	; 36
		TIMER.T2.CompareValue = 0xFF - duty;
 cbc:	60 95       	com	r22
 cbe:	63 bd       	out	0x23, r22	; 35
		TIMER.T2.Interrupts.Comp_Match = ENABLE;
 cc0:	89 b7       	in	r24, 0x39	; 57
 cc2:	80 68       	ori	r24, 0x80	; 128
 cc4:	89 bf       	out	0x39, r24	; 57
		TIMER.T2.Control.PWM_wave_generation = ENABLE;
 cc6:	85 b5       	in	r24, 0x25	; 37
 cc8:	80 64       	ori	r24, 0x40	; 64
 cca:	85 bd       	out	0x25, r24	; 37
		TIMER.T2.Control.Clock = 6;
 ccc:	85 b5       	in	r24, 0x25	; 37
 cce:	88 7f       	andi	r24, 0xF8	; 248
 cd0:	86 60       	ori	r24, 0x06	; 6
 cd2:	85 bd       	out	0x25, r24	; 37
 cd4:	08 95       	ret

00000cd6 <TIMER_stop>:
	}
}
void TIMER_stop(TIMER_ID_t Timer)
{
	if(Timer == Timer_0)
 cd6:	88 23       	and	r24, r24
 cd8:	21 f4       	brne	.+8      	; 0xce2 <TIMER_stop+0xc>
	{
		TIMER.T0.Control.Clock = TMR_EN_NoClock;
 cda:	83 b7       	in	r24, 0x33	; 51
 cdc:	88 7f       	andi	r24, 0xF8	; 248
 cde:	83 bf       	out	0x33, r24	; 51
 ce0:	08 95       	ret
	}
	else if (Timer == Timer_2)
 ce2:	81 30       	cpi	r24, 0x01	; 1
 ce4:	19 f4       	brne	.+6      	; 0xcec <TIMER_stop+0x16>
	{
		TIMER.T2.Control.Clock = TMR_EN_NoClock;
 ce6:	85 b5       	in	r24, 0x25	; 37
 ce8:	88 7f       	andi	r24, 0xF8	; 248
 cea:	85 bd       	out	0x25, r24	; 37
 cec:	08 95       	ret

00000cee <__vector_11>:
	}
}
ISR(TIMER0_OVF_vect)
{
 cee:	1f 92       	push	r1
 cf0:	0f 92       	push	r0
 cf2:	0f b6       	in	r0, 0x3f	; 63
 cf4:	0f 92       	push	r0
 cf6:	11 24       	eor	r1, r1
 cf8:	2f 93       	push	r18
 cfa:	3f 93       	push	r19
 cfc:	4f 93       	push	r20
 cfe:	5f 93       	push	r21
 d00:	6f 93       	push	r22
 d02:	7f 93       	push	r23
 d04:	8f 93       	push	r24
 d06:	9f 93       	push	r25
 d08:	af 93       	push	r26
 d0a:	bf 93       	push	r27
 d0c:	ef 93       	push	r30
 d0e:	ff 93       	push	r31
	TIMER.T0.Flags.OverFlow = ENABLE;
 d10:	88 b7       	in	r24, 0x38	; 56
 d12:	81 60       	ori	r24, 0x01	; 1
 d14:	88 bf       	out	0x38, r24	; 56
	TMR_CALLBACKS[Timer_0]();
 d16:	e0 91 88 00 	lds	r30, 0x0088
 d1a:	f0 91 89 00 	lds	r31, 0x0089
 d1e:	09 95       	icall
}
 d20:	ff 91       	pop	r31
 d22:	ef 91       	pop	r30
 d24:	bf 91       	pop	r27
 d26:	af 91       	pop	r26
 d28:	9f 91       	pop	r25
 d2a:	8f 91       	pop	r24
 d2c:	7f 91       	pop	r23
 d2e:	6f 91       	pop	r22
 d30:	5f 91       	pop	r21
 d32:	4f 91       	pop	r20
 d34:	3f 91       	pop	r19
 d36:	2f 91       	pop	r18
 d38:	0f 90       	pop	r0
 d3a:	0f be       	out	0x3f, r0	; 63
 d3c:	0f 90       	pop	r0
 d3e:	1f 90       	pop	r1
 d40:	18 95       	reti

00000d42 <__vector_5>:
ISR(TIMER2_OVF_vect)
{
 d42:	1f 92       	push	r1
 d44:	0f 92       	push	r0
 d46:	0f b6       	in	r0, 0x3f	; 63
 d48:	0f 92       	push	r0
 d4a:	11 24       	eor	r1, r1
 d4c:	2f 93       	push	r18
 d4e:	3f 93       	push	r19
 d50:	4f 93       	push	r20
 d52:	5f 93       	push	r21
 d54:	6f 93       	push	r22
 d56:	7f 93       	push	r23
 d58:	8f 93       	push	r24
 d5a:	9f 93       	push	r25
 d5c:	af 93       	push	r26
 d5e:	bf 93       	push	r27
 d60:	ef 93       	push	r30
 d62:	ff 93       	push	r31
	TIMER.T2.Flags.OverFlow = ENABLE;
 d64:	88 b7       	in	r24, 0x38	; 56
 d66:	80 64       	ori	r24, 0x40	; 64
 d68:	88 bf       	out	0x38, r24	; 56
	TMR_CALLBACKS[Timer_2]();
 d6a:	e0 91 8a 00 	lds	r30, 0x008A
 d6e:	f0 91 8b 00 	lds	r31, 0x008B
 d72:	09 95       	icall
}
 d74:	ff 91       	pop	r31
 d76:	ef 91       	pop	r30
 d78:	bf 91       	pop	r27
 d7a:	af 91       	pop	r26
 d7c:	9f 91       	pop	r25
 d7e:	8f 91       	pop	r24
 d80:	7f 91       	pop	r23
 d82:	6f 91       	pop	r22
 d84:	5f 91       	pop	r21
 d86:	4f 91       	pop	r20
 d88:	3f 91       	pop	r19
 d8a:	2f 91       	pop	r18
 d8c:	0f 90       	pop	r0
 d8e:	0f be       	out	0x3f, r0	; 63
 d90:	0f 90       	pop	r0
 d92:	1f 90       	pop	r1
 d94:	18 95       	reti

00000d96 <__vector_10>:
ISR(TIMER0_COMP_vect)
{
 d96:	1f 92       	push	r1
 d98:	0f 92       	push	r0
 d9a:	0f b6       	in	r0, 0x3f	; 63
 d9c:	0f 92       	push	r0
 d9e:	11 24       	eor	r1, r1
 da0:	2f 93       	push	r18
 da2:	3f 93       	push	r19
 da4:	4f 93       	push	r20
 da6:	5f 93       	push	r21
 da8:	6f 93       	push	r22
 daa:	7f 93       	push	r23
 dac:	8f 93       	push	r24
 dae:	9f 93       	push	r25
 db0:	af 93       	push	r26
 db2:	bf 93       	push	r27
 db4:	ef 93       	push	r30
 db6:	ff 93       	push	r31
	TIMER.T0.Flags.Comp_Match = ENABLE;
 db8:	88 b7       	in	r24, 0x38	; 56
 dba:	82 60       	ori	r24, 0x02	; 2
 dbc:	88 bf       	out	0x38, r24	; 56
	TMR_CALLBACKS[Timer_0]();
 dbe:	e0 91 88 00 	lds	r30, 0x0088
 dc2:	f0 91 89 00 	lds	r31, 0x0089
 dc6:	09 95       	icall
}
 dc8:	ff 91       	pop	r31
 dca:	ef 91       	pop	r30
 dcc:	bf 91       	pop	r27
 dce:	af 91       	pop	r26
 dd0:	9f 91       	pop	r25
 dd2:	8f 91       	pop	r24
 dd4:	7f 91       	pop	r23
 dd6:	6f 91       	pop	r22
 dd8:	5f 91       	pop	r21
 dda:	4f 91       	pop	r20
 ddc:	3f 91       	pop	r19
 dde:	2f 91       	pop	r18
 de0:	0f 90       	pop	r0
 de2:	0f be       	out	0x3f, r0	; 63
 de4:	0f 90       	pop	r0
 de6:	1f 90       	pop	r1
 de8:	18 95       	reti

00000dea <__vector_4>:
ISR(TIMER2_COMP_vect)
{
 dea:	1f 92       	push	r1
 dec:	0f 92       	push	r0
 dee:	0f b6       	in	r0, 0x3f	; 63
 df0:	0f 92       	push	r0
 df2:	11 24       	eor	r1, r1
 df4:	2f 93       	push	r18
 df6:	3f 93       	push	r19
 df8:	4f 93       	push	r20
 dfa:	5f 93       	push	r21
 dfc:	6f 93       	push	r22
 dfe:	7f 93       	push	r23
 e00:	8f 93       	push	r24
 e02:	9f 93       	push	r25
 e04:	af 93       	push	r26
 e06:	bf 93       	push	r27
 e08:	ef 93       	push	r30
 e0a:	ff 93       	push	r31
	TIMER.T2.Flags.Comp_Match = ENABLE;
 e0c:	88 b7       	in	r24, 0x38	; 56
 e0e:	80 68       	ori	r24, 0x80	; 128
 e10:	88 bf       	out	0x38, r24	; 56
	TMR_CALLBACKS[Timer_2]();
 e12:	e0 91 8a 00 	lds	r30, 0x008A
 e16:	f0 91 8b 00 	lds	r31, 0x008B
 e1a:	09 95       	icall
 e1c:	ff 91       	pop	r31
 e1e:	ef 91       	pop	r30
 e20:	bf 91       	pop	r27
 e22:	af 91       	pop	r26
 e24:	9f 91       	pop	r25
 e26:	8f 91       	pop	r24
 e28:	7f 91       	pop	r23
 e2a:	6f 91       	pop	r22
 e2c:	5f 91       	pop	r21
 e2e:	4f 91       	pop	r20
 e30:	3f 91       	pop	r19
 e32:	2f 91       	pop	r18
 e34:	0f 90       	pop	r0
 e36:	0f be       	out	0x3f, r0	; 63
 e38:	0f 90       	pop	r0
 e3a:	1f 90       	pop	r1
 e3c:	18 95       	reti

00000e3e <_exit>:
 e3e:	f8 94       	cli

00000e40 <__stop_program>:
 e40:	ff cf       	rjmp	.-2      	; 0xe40 <__stop_program>
