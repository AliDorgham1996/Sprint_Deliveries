
ATmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000008b0  00000944  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003a  00800072  00800072  00000956  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000956  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000988  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  000009c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000247e  00000000  00000000  00000bac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ce9  00000000  00000000  0000302a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000118e  00000000  00000000  00003d13  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005fc  00000000  00000000  00004ea4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000011d9  00000000  00000000  000054a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b77  00000000  00000000  00006679  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  000081f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 0b 04 	jmp	0x816	; 0x816 <__vector_4>
  14:	0c 94 2f 03 	jmp	0x65e	; 0x65e <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 d3 03 	jmp	0x7a6	; 0x7a6 <__vector_10>
  2c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 eb       	ldi	r30, 0xB0	; 176
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 3a       	cpi	r26, 0xAC	; 172
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  8a:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Task_1>:
#include "../ECUAL/LCD/LCD.h"

void Task_1(void)
{
	LCD_init();
  92:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_init>
	LCD_Display_StringXY(LCD_EN_ROW_1, LCD_EN_COL_1, (uint8_t*)"Welcome Sprints");
  96:	42 e6       	ldi	r20, 0x62	; 98
  98:	50 e0       	ldi	r21, 0x00	; 0
  9a:	60 e0       	ldi	r22, 0x00	; 0
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	0e 94 13 01 	call	0x226	; 0x226 <LCD_Display_StringXY>
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <Task_1+0x10>

000000a4 <main>:
#define Task  Task1

int main(void)
{
#if(Task == Task1)
	Task_1();		//LCD -> "Welcome Sprints"
  a4:	0e 94 49 00 	call	0x92	; 0x92 <Task_1>
#elif(Task == Task2)
	Task_2();		//print LM35 values on LCD
#elif(Task == Task3)
	Task_3();		//use keypad with LCD
#endif /* Task */
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	08 95       	ret

000000ae <LCD_Latch>:

void        LCD_Display_CharXY       (LCD_Row_t row, LCD_Col_t col, uint8_t uint8_tChar)
{
	LCD_GoToXY(row,col);
	LCD_sendData(uint8_tChar);
}
  ae:	61 e0       	ldi	r22, 0x01	; 1
  b0:	8b e1       	ldi	r24, 0x1B	; 27
  b2:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <Dio_ChannelWrite>
  b6:	60 e0       	ldi	r22, 0x00	; 0
  b8:	8b e1       	ldi	r24, 0x1B	; 27
  ba:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <Dio_ChannelWrite>
  be:	08 95       	ret

000000c0 <LCD_sendInst>:
  c0:	cf 93       	push	r28
  c2:	c8 2f       	mov	r28, r24
  c4:	60 e0       	ldi	r22, 0x00	; 0
  c6:	89 e1       	ldi	r24, 0x19	; 25
  c8:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <Dio_ChannelWrite>
  cc:	60 e0       	ldi	r22, 0x00	; 0
  ce:	8a e1       	ldi	r24, 0x1A	; 26
  d0:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <Dio_ChannelWrite>
  d4:	9c 2f       	mov	r25, r28
  d6:	90 7f       	andi	r25, 0xF0	; 240
  d8:	8b b3       	in	r24, 0x1b	; 27
  da:	8f 70       	andi	r24, 0x0F	; 15
  dc:	89 2b       	or	r24, r25
  de:	8b bb       	out	0x1b, r24	; 27
  e0:	0e 94 57 00 	call	0xae	; 0xae <LCD_Latch>
  e4:	c2 95       	swap	r28
  e6:	c0 7f       	andi	r28, 0xF0	; 240
  e8:	8b b3       	in	r24, 0x1b	; 27
  ea:	8f 70       	andi	r24, 0x0F	; 15
  ec:	c8 2b       	or	r28, r24
  ee:	cb bb       	out	0x1b, r28	; 27
  f0:	0e 94 57 00 	call	0xae	; 0xae <LCD_Latch>
  f4:	28 e2       	ldi	r18, 0x28	; 40
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	40 e0       	ldi	r20, 0x00	; 0
  fa:	50 e0       	ldi	r21, 0x00	; 0
  fc:	60 e0       	ldi	r22, 0x00	; 0
  fe:	70 e0       	ldi	r23, 0x00	; 0
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 52 01 	call	0x2a4	; 0x2a4 <Delay_Us>
 108:	cf 91       	pop	r28
 10a:	08 95       	ret

0000010c <LCD_GoToXY>:
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	29 f4       	brne	.+10     	; 0x11a <LCD_GoToXY+0xe>
 110:	80 e8       	ldi	r24, 0x80	; 128
 112:	86 0f       	add	r24, r22
 114:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_sendInst>
 118:	08 95       	ret
 11a:	82 30       	cpi	r24, 0x02	; 2
 11c:	29 f4       	brne	.+10     	; 0x128 <LCD_GoToXY+0x1c>
 11e:	80 ec       	ldi	r24, 0xC0	; 192
 120:	86 0f       	add	r24, r22
 122:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_sendInst>
 126:	08 95       	ret
 128:	83 30       	cpi	r24, 0x03	; 3
 12a:	29 f4       	brne	.+10     	; 0x136 <LCD_GoToXY+0x2a>
 12c:	80 e9       	ldi	r24, 0x90	; 144
 12e:	86 0f       	add	r24, r22
 130:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_sendInst>
 134:	08 95       	ret
 136:	84 30       	cpi	r24, 0x04	; 4
 138:	21 f4       	brne	.+8      	; 0x142 <LCD_GoToXY+0x36>
 13a:	80 ed       	ldi	r24, 0xD0	; 208
 13c:	86 0f       	add	r24, r22
 13e:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_sendInst>
 142:	08 95       	ret

00000144 <LCD_sendData>:
 144:	cf 93       	push	r28
 146:	c8 2f       	mov	r28, r24
 148:	61 e0       	ldi	r22, 0x01	; 1
 14a:	89 e1       	ldi	r24, 0x19	; 25
 14c:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <Dio_ChannelWrite>
 150:	60 e0       	ldi	r22, 0x00	; 0
 152:	8a e1       	ldi	r24, 0x1A	; 26
 154:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <Dio_ChannelWrite>
 158:	9c 2f       	mov	r25, r28
 15a:	90 7f       	andi	r25, 0xF0	; 240
 15c:	8b b3       	in	r24, 0x1b	; 27
 15e:	8f 70       	andi	r24, 0x0F	; 15
 160:	89 2b       	or	r24, r25
 162:	8b bb       	out	0x1b, r24	; 27
 164:	0e 94 57 00 	call	0xae	; 0xae <LCD_Latch>
 168:	c2 95       	swap	r28
 16a:	c0 7f       	andi	r28, 0xF0	; 240
 16c:	8b b3       	in	r24, 0x1b	; 27
 16e:	8f 70       	andi	r24, 0x0F	; 15
 170:	c8 2b       	or	r28, r24
 172:	cb bb       	out	0x1b, r28	; 27
 174:	0e 94 57 00 	call	0xae	; 0xae <LCD_Latch>
 178:	28 e2       	ldi	r18, 0x28	; 40
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	40 e0       	ldi	r20, 0x00	; 0
 17e:	50 e0       	ldi	r21, 0x00	; 0
 180:	60 e0       	ldi	r22, 0x00	; 0
 182:	70 e0       	ldi	r23, 0x00	; 0
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 52 01 	call	0x2a4	; 0x2a4 <Delay_Us>
 18c:	cf 91       	pop	r28
 18e:	08 95       	ret

00000190 <LCD_Clear>:
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_sendInst>
 196:	25 e0       	ldi	r18, 0x05	; 5
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	40 e0       	ldi	r20, 0x00	; 0
 19c:	50 e0       	ldi	r21, 0x00	; 0
 19e:	60 e0       	ldi	r22, 0x00	; 0
 1a0:	70 e0       	ldi	r23, 0x00	; 0
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 1e 01 	call	0x23c	; 0x23c <Delay_Ms>
 1aa:	08 95       	ret

000001ac <LCD_init>:
 1ac:	41 e0       	ldi	r20, 0x01	; 1
 1ae:	60 ef       	ldi	r22, 0xF0	; 240
 1b0:	83 e0       	ldi	r24, 0x03	; 3
 1b2:	0e 94 4e 02 	call	0x49c	; 0x49c <Dio_GroupMode>
 1b6:	61 e0       	ldi	r22, 0x01	; 1
 1b8:	8a e1       	ldi	r24, 0x1A	; 26
 1ba:	0e 94 84 01 	call	0x308	; 0x308 <Dio_ChannelMode>
 1be:	61 e0       	ldi	r22, 0x01	; 1
 1c0:	89 e1       	ldi	r24, 0x19	; 25
 1c2:	0e 94 84 01 	call	0x308	; 0x308 <Dio_ChannelMode>
 1c6:	61 e0       	ldi	r22, 0x01	; 1
 1c8:	8b e1       	ldi	r24, 0x1B	; 27
 1ca:	0e 94 84 01 	call	0x308	; 0x308 <Dio_ChannelMode>
 1ce:	24 e6       	ldi	r18, 0x64	; 100
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	40 e0       	ldi	r20, 0x00	; 0
 1d4:	50 e0       	ldi	r21, 0x00	; 0
 1d6:	60 e0       	ldi	r22, 0x00	; 0
 1d8:	70 e0       	ldi	r23, 0x00	; 0
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 1e 01 	call	0x23c	; 0x23c <Delay_Ms>
 1e2:	82 e0       	ldi	r24, 0x02	; 2
 1e4:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_sendInst>
 1e8:	88 e2       	ldi	r24, 0x28	; 40
 1ea:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_sendInst>
 1ee:	8c e0       	ldi	r24, 0x0C	; 12
 1f0:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_sendInst>
 1f4:	0e 94 c8 00 	call	0x190	; 0x190 <LCD_Clear>
 1f8:	08 95       	ret

000001fa <LCD_Display_String>:
 1fa:	0f 93       	push	r16
 1fc:	1f 93       	push	r17
 1fe:	cf 93       	push	r28
 200:	fc 01       	movw	r30, r24
 202:	80 81       	ld	r24, Z
 204:	88 23       	and	r24, r24
 206:	59 f0       	breq	.+22     	; 0x21e <LCD_Display_String+0x24>
 208:	8f 01       	movw	r16, r30
 20a:	c0 e0       	ldi	r28, 0x00	; 0
 20c:	0e 94 a2 00 	call	0x144	; 0x144 <LCD_sendData>
 210:	cf 5f       	subi	r28, 0xFF	; 255
 212:	f8 01       	movw	r30, r16
 214:	ec 0f       	add	r30, r28
 216:	f1 1d       	adc	r31, r1
 218:	80 81       	ld	r24, Z
 21a:	81 11       	cpse	r24, r1
 21c:	f7 cf       	rjmp	.-18     	; 0x20c <LCD_Display_String+0x12>
 21e:	cf 91       	pop	r28
 220:	1f 91       	pop	r17
 222:	0f 91       	pop	r16
 224:	08 95       	ret

00000226 <LCD_Display_StringXY>:

void        LCD_Display_StringXY      (LCD_Row_t row, LCD_Col_t col, uint8_t* puint8_tString)
{
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
 22a:	ea 01       	movw	r28, r20
	LCD_GoToXY(row,col);
 22c:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_GoToXY>
	LCD_Display_String(puint8_tString);
 230:	ce 01       	movw	r24, r28
 232:	0e 94 fd 00 	call	0x1fa	; 0x1fa <LCD_Display_String>
}
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	08 95       	ret

0000023c <Delay_Ms>:
#include "../Library/Configurations.h"
#include <util/delay.h>


void Delay_Ms(uint64_t Delay)
{
 23c:	ff 92       	push	r15
 23e:	0f 93       	push	r16
 240:	1f 93       	push	r17
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	f2 2e       	mov	r15, r18
 248:	03 2f       	mov	r16, r19
 24a:	14 2f       	mov	r17, r20
 24c:	d5 2f       	mov	r29, r21
 24e:	c6 2f       	mov	r28, r22
 250:	b7 2f       	mov	r27, r23
 252:	f8 2f       	mov	r31, r24
 254:	e9 2f       	mov	r30, r25
	while (0 < Delay)
 256:	a0 e0       	ldi	r26, 0x00	; 0
 258:	0e 94 4a 04 	call	0x894	; 0x894 <__cmpdi2_s8>
 25c:	e9 f0       	breq	.+58     	; 0x298 <Delay_Ms+0x5c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25e:	8f ec       	ldi	r24, 0xCF	; 207
 260:	97 e0       	ldi	r25, 0x07	; 7
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <Delay_Ms+0x26>
 266:	00 c0       	rjmp	.+0      	; 0x268 <Delay_Ms+0x2c>
 268:	00 00       	nop
	{
		_delay_ms(1);
		--Delay;
 26a:	2f 2d       	mov	r18, r15
 26c:	30 2f       	mov	r19, r16
 26e:	41 2f       	mov	r20, r17
 270:	5d 2f       	mov	r21, r29
 272:	6c 2f       	mov	r22, r28
 274:	7b 2f       	mov	r23, r27
 276:	8f 2f       	mov	r24, r31
 278:	9e 2f       	mov	r25, r30
 27a:	af ef       	ldi	r26, 0xFF	; 255
 27c:	0e 94 35 04 	call	0x86a	; 0x86a <__adddi3_s8>
 280:	f2 2e       	mov	r15, r18
 282:	03 2f       	mov	r16, r19
 284:	14 2f       	mov	r17, r20
 286:	d5 2f       	mov	r29, r21
 288:	c6 2f       	mov	r28, r22
 28a:	b7 2f       	mov	r27, r23
 28c:	f8 2f       	mov	r31, r24
 28e:	e9 2f       	mov	r30, r25
#include <util/delay.h>


void Delay_Ms(uint64_t Delay)
{
	while (0 < Delay)
 290:	a0 e0       	ldi	r26, 0x00	; 0
 292:	0e 94 4a 04 	call	0x894	; 0x894 <__cmpdi2_s8>
 296:	19 f7       	brne	.-58     	; 0x25e <Delay_Ms+0x22>
	{
		_delay_ms(1);
		--Delay;
	}
}
 298:	df 91       	pop	r29
 29a:	cf 91       	pop	r28
 29c:	1f 91       	pop	r17
 29e:	0f 91       	pop	r16
 2a0:	ff 90       	pop	r15
 2a2:	08 95       	ret

000002a4 <Delay_Us>:

void Delay_Us(uint64_t Delay)
{
 2a4:	ff 92       	push	r15
 2a6:	0f 93       	push	r16
 2a8:	1f 93       	push	r17
 2aa:	cf 93       	push	r28
 2ac:	df 93       	push	r29
 2ae:	f2 2e       	mov	r15, r18
 2b0:	03 2f       	mov	r16, r19
 2b2:	14 2f       	mov	r17, r20
 2b4:	d5 2f       	mov	r29, r21
 2b6:	c6 2f       	mov	r28, r22
 2b8:	b7 2f       	mov	r27, r23
 2ba:	f8 2f       	mov	r31, r24
 2bc:	e9 2f       	mov	r30, r25
	while (0 < Delay)
 2be:	a0 e0       	ldi	r26, 0x00	; 0
 2c0:	0e 94 4a 04 	call	0x894	; 0x894 <__cmpdi2_s8>
 2c4:	d9 f0       	breq	.+54     	; 0x2fc <Delay_Us+0x58>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c6:	82 e0       	ldi	r24, 0x02	; 2
 2c8:	8a 95       	dec	r24
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <Delay_Us+0x24>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <Delay_Us+0x2a>
	{
		_delay_us(1);
		--Delay;
 2ce:	2f 2d       	mov	r18, r15
 2d0:	30 2f       	mov	r19, r16
 2d2:	41 2f       	mov	r20, r17
 2d4:	5d 2f       	mov	r21, r29
 2d6:	6c 2f       	mov	r22, r28
 2d8:	7b 2f       	mov	r23, r27
 2da:	8f 2f       	mov	r24, r31
 2dc:	9e 2f       	mov	r25, r30
 2de:	af ef       	ldi	r26, 0xFF	; 255
 2e0:	0e 94 35 04 	call	0x86a	; 0x86a <__adddi3_s8>
 2e4:	f2 2e       	mov	r15, r18
 2e6:	03 2f       	mov	r16, r19
 2e8:	14 2f       	mov	r17, r20
 2ea:	d5 2f       	mov	r29, r21
 2ec:	c6 2f       	mov	r28, r22
 2ee:	b7 2f       	mov	r27, r23
 2f0:	f8 2f       	mov	r31, r24
 2f2:	e9 2f       	mov	r30, r25
	}
}

void Delay_Us(uint64_t Delay)
{
	while (0 < Delay)
 2f4:	a0 e0       	ldi	r26, 0x00	; 0
 2f6:	0e 94 4a 04 	call	0x894	; 0x894 <__cmpdi2_s8>
 2fa:	29 f7       	brne	.-54     	; 0x2c6 <Delay_Us+0x22>
	{
		_delay_us(1);
		--Delay;
	}
 2fc:	df 91       	pop	r29
 2fe:	cf 91       	pop	r28
 300:	1f 91       	pop	r17
 302:	0f 91       	pop	r16
 304:	ff 90       	pop	r15
 306:	08 95       	ret

00000308 <Dio_ChannelMode>:
	else
	{
		return_value = DIO_EN_invalidChannel;
	}
	return return_value;
}
 308:	ef 92       	push	r14
 30a:	ff 92       	push	r15
 30c:	0f 93       	push	r16
 30e:	1f 93       	push	r17
 310:	80 32       	cpi	r24, 0x20	; 32
 312:	08 f0       	brcs	.+2      	; 0x316 <Dio_ChannelMode+0xe>
 314:	45 c0       	rjmp	.+138    	; 0x3a0 <Dio_ChannelMode+0x98>
 316:	61 11       	cpse	r22, r1
 318:	21 c0       	rjmp	.+66     	; 0x35c <Dio_ChannelMode+0x54>
 31a:	e8 2f       	mov	r30, r24
 31c:	e6 95       	lsr	r30
 31e:	e6 95       	lsr	r30
 320:	e6 95       	lsr	r30
 322:	2e 2f       	mov	r18, r30
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	f9 01       	movw	r30, r18
 328:	ee 0f       	add	r30, r30
 32a:	ff 1f       	adc	r31, r31
 32c:	e2 0f       	add	r30, r18
 32e:	f3 1f       	adc	r31, r19
 330:	21 a9       	ldd	r18, Z+49	; 0x31
 332:	87 70       	andi	r24, 0x07	; 7
 334:	41 e0       	ldi	r20, 0x01	; 1
 336:	50 e0       	ldi	r21, 0x00	; 0
 338:	60 e0       	ldi	r22, 0x00	; 0
 33a:	70 e0       	ldi	r23, 0x00	; 0
 33c:	7a 01       	movw	r14, r20
 33e:	8b 01       	movw	r16, r22
 340:	04 c0       	rjmp	.+8      	; 0x34a <Dio_ChannelMode+0x42>
 342:	ee 0c       	add	r14, r14
 344:	ff 1c       	adc	r15, r15
 346:	00 1f       	adc	r16, r16
 348:	11 1f       	adc	r17, r17
 34a:	8a 95       	dec	r24
 34c:	d2 f7       	brpl	.-12     	; 0x342 <Dio_ChannelMode+0x3a>
 34e:	d8 01       	movw	r26, r16
 350:	c7 01       	movw	r24, r14
 352:	80 95       	com	r24
 354:	82 23       	and	r24, r18
 356:	81 ab       	std	Z+49, r24	; 0x31
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	25 c0       	rjmp	.+74     	; 0x3a6 <Dio_ChannelMode+0x9e>
 35c:	61 30       	cpi	r22, 0x01	; 1
 35e:	11 f5       	brne	.+68     	; 0x3a4 <Dio_ChannelMode+0x9c>
 360:	e8 2f       	mov	r30, r24
 362:	e6 95       	lsr	r30
 364:	e6 95       	lsr	r30
 366:	e6 95       	lsr	r30
 368:	2e 2f       	mov	r18, r30
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	f9 01       	movw	r30, r18
 36e:	ee 0f       	add	r30, r30
 370:	ff 1f       	adc	r31, r31
 372:	e2 0f       	add	r30, r18
 374:	f3 1f       	adc	r31, r19
 376:	21 a9       	ldd	r18, Z+49	; 0x31
 378:	87 70       	andi	r24, 0x07	; 7
 37a:	41 e0       	ldi	r20, 0x01	; 1
 37c:	50 e0       	ldi	r21, 0x00	; 0
 37e:	60 e0       	ldi	r22, 0x00	; 0
 380:	70 e0       	ldi	r23, 0x00	; 0
 382:	7a 01       	movw	r14, r20
 384:	8b 01       	movw	r16, r22
 386:	04 c0       	rjmp	.+8      	; 0x390 <Dio_ChannelMode+0x88>
 388:	ee 0c       	add	r14, r14
 38a:	ff 1c       	adc	r15, r15
 38c:	00 1f       	adc	r16, r16
 38e:	11 1f       	adc	r17, r17
 390:	8a 95       	dec	r24
 392:	d2 f7       	brpl	.-12     	; 0x388 <Dio_ChannelMode+0x80>
 394:	d8 01       	movw	r26, r16
 396:	c7 01       	movw	r24, r14
 398:	82 2b       	or	r24, r18
 39a:	81 ab       	std	Z+49, r24	; 0x31
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	03 c0       	rjmp	.+6      	; 0x3a6 <Dio_ChannelMode+0x9e>
 3a0:	82 e0       	ldi	r24, 0x02	; 2
 3a2:	01 c0       	rjmp	.+2      	; 0x3a6 <Dio_ChannelMode+0x9e>
 3a4:	83 e0       	ldi	r24, 0x03	; 3
 3a6:	1f 91       	pop	r17
 3a8:	0f 91       	pop	r16
 3aa:	ff 90       	pop	r15
 3ac:	ef 90       	pop	r14
 3ae:	08 95       	ret

000003b0 <Dio_ChannelWrite>:
 3b0:	ef 92       	push	r14
 3b2:	ff 92       	push	r15
 3b4:	0f 93       	push	r16
 3b6:	1f 93       	push	r17
 3b8:	80 32       	cpi	r24, 0x20	; 32
 3ba:	08 f0       	brcs	.+2      	; 0x3be <Dio_ChannelWrite+0xe>
 3bc:	67 c0       	rjmp	.+206    	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
 3be:	61 11       	cpse	r22, r1
 3c0:	21 c0       	rjmp	.+66     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3c2:	e8 2f       	mov	r30, r24
 3c4:	e6 95       	lsr	r30
 3c6:	e6 95       	lsr	r30
 3c8:	e6 95       	lsr	r30
 3ca:	2e 2f       	mov	r18, r30
 3cc:	30 e0       	ldi	r19, 0x00	; 0
 3ce:	f9 01       	movw	r30, r18
 3d0:	ee 0f       	add	r30, r30
 3d2:	ff 1f       	adc	r31, r31
 3d4:	e2 0f       	add	r30, r18
 3d6:	f3 1f       	adc	r31, r19
 3d8:	22 a9       	ldd	r18, Z+50	; 0x32
 3da:	87 70       	andi	r24, 0x07	; 7
 3dc:	41 e0       	ldi	r20, 0x01	; 1
 3de:	50 e0       	ldi	r21, 0x00	; 0
 3e0:	60 e0       	ldi	r22, 0x00	; 0
 3e2:	70 e0       	ldi	r23, 0x00	; 0
 3e4:	7a 01       	movw	r14, r20
 3e6:	8b 01       	movw	r16, r22
 3e8:	04 c0       	rjmp	.+8      	; 0x3f2 <Dio_ChannelWrite+0x42>
 3ea:	ee 0c       	add	r14, r14
 3ec:	ff 1c       	adc	r15, r15
 3ee:	00 1f       	adc	r16, r16
 3f0:	11 1f       	adc	r17, r17
 3f2:	8a 95       	dec	r24
 3f4:	d2 f7       	brpl	.-12     	; 0x3ea <Dio_ChannelWrite+0x3a>
 3f6:	d8 01       	movw	r26, r16
 3f8:	c7 01       	movw	r24, r14
 3fa:	80 95       	com	r24
 3fc:	82 23       	and	r24, r18
 3fe:	82 ab       	std	Z+50, r24	; 0x32
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	47 c0       	rjmp	.+142    	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 404:	61 30       	cpi	r22, 0x01	; 1
 406:	01 f5       	brne	.+64     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 408:	e8 2f       	mov	r30, r24
 40a:	e6 95       	lsr	r30
 40c:	e6 95       	lsr	r30
 40e:	e6 95       	lsr	r30
 410:	2e 2f       	mov	r18, r30
 412:	30 e0       	ldi	r19, 0x00	; 0
 414:	f9 01       	movw	r30, r18
 416:	ee 0f       	add	r30, r30
 418:	ff 1f       	adc	r31, r31
 41a:	e2 0f       	add	r30, r18
 41c:	f3 1f       	adc	r31, r19
 41e:	22 a9       	ldd	r18, Z+50	; 0x32
 420:	87 70       	andi	r24, 0x07	; 7
 422:	41 e0       	ldi	r20, 0x01	; 1
 424:	50 e0       	ldi	r21, 0x00	; 0
 426:	60 e0       	ldi	r22, 0x00	; 0
 428:	70 e0       	ldi	r23, 0x00	; 0
 42a:	7a 01       	movw	r14, r20
 42c:	8b 01       	movw	r16, r22
 42e:	04 c0       	rjmp	.+8      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 430:	ee 0c       	add	r14, r14
 432:	ff 1c       	adc	r15, r15
 434:	00 1f       	adc	r16, r16
 436:	11 1f       	adc	r17, r17
 438:	8a 95       	dec	r24
 43a:	d2 f7       	brpl	.-12     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 43c:	d8 01       	movw	r26, r16
 43e:	c7 01       	movw	r24, r14
 440:	82 2b       	or	r24, r18
 442:	82 ab       	std	Z+50, r24	; 0x32
 444:	80 e0       	ldi	r24, 0x00	; 0
 446:	25 c0       	rjmp	.+74     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 448:	62 30       	cpi	r22, 0x02	; 2
 44a:	11 f5       	brne	.+68     	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 44c:	e8 2f       	mov	r30, r24
 44e:	e6 95       	lsr	r30
 450:	e6 95       	lsr	r30
 452:	e6 95       	lsr	r30
 454:	2e 2f       	mov	r18, r30
 456:	30 e0       	ldi	r19, 0x00	; 0
 458:	f9 01       	movw	r30, r18
 45a:	ee 0f       	add	r30, r30
 45c:	ff 1f       	adc	r31, r31
 45e:	e2 0f       	add	r30, r18
 460:	f3 1f       	adc	r31, r19
 462:	22 a9       	ldd	r18, Z+50	; 0x32
 464:	87 70       	andi	r24, 0x07	; 7
 466:	41 e0       	ldi	r20, 0x01	; 1
 468:	50 e0       	ldi	r21, 0x00	; 0
 46a:	60 e0       	ldi	r22, 0x00	; 0
 46c:	70 e0       	ldi	r23, 0x00	; 0
 46e:	7a 01       	movw	r14, r20
 470:	8b 01       	movw	r16, r22
 472:	04 c0       	rjmp	.+8      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 474:	ee 0c       	add	r14, r14
 476:	ff 1c       	adc	r15, r15
 478:	00 1f       	adc	r16, r16
 47a:	11 1f       	adc	r17, r17
 47c:	8a 95       	dec	r24
 47e:	d2 f7       	brpl	.-12     	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 480:	d8 01       	movw	r26, r16
 482:	c7 01       	movw	r24, r14
 484:	82 27       	eor	r24, r18
 486:	82 ab       	std	Z+50, r24	; 0x32
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	03 c0       	rjmp	.+6      	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 48c:	82 e0       	ldi	r24, 0x02	; 2
 48e:	01 c0       	rjmp	.+2      	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 490:	84 e0       	ldi	r24, 0x04	; 4
 492:	1f 91       	pop	r17
 494:	0f 91       	pop	r16
 496:	ff 90       	pop	r15
 498:	ef 90       	pop	r14
 49a:	08 95       	ret

0000049c <Dio_GroupMode>:

DioError_t			Dio_GroupMode			(DioPort_t Port, DioGroupBits_t Group, DioMode_t  Mode)
{
	DioError_t return_value = DIO_EN_valid_inti;
	if((Port >= DIO_EN_MIN_PORT) && (Port < DIO_EN_MAX_PORT))
 49c:	84 30       	cpi	r24, 0x04	; 4
 49e:	d8 f4       	brcc	.+54     	; 0x4d6 <Dio_GroupMode+0x3a>
	{
		if(DIO_EN_M_Input == Mode)
 4a0:	41 11       	cpse	r20, r1
 4a2:	0c c0       	rjmp	.+24     	; 0x4bc <Dio_GroupMode+0x20>
		{
			ClearMaskBits(DIO[Port].DDR.Register, Group);
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	fc 01       	movw	r30, r24
 4a8:	ee 0f       	add	r30, r30
 4aa:	ff 1f       	adc	r31, r31
 4ac:	e8 0f       	add	r30, r24
 4ae:	f9 1f       	adc	r31, r25
 4b0:	81 a9       	ldd	r24, Z+49	; 0x31
 4b2:	60 95       	com	r22
 4b4:	68 23       	and	r22, r24
 4b6:	61 ab       	std	Z+49, r22	; 0x31
	return return_value;
}

DioError_t			Dio_GroupMode			(DioPort_t Port, DioGroupBits_t Group, DioMode_t  Mode)
{
	DioError_t return_value = DIO_EN_valid_inti;
 4b8:	80 e0       	ldi	r24, 0x00	; 0
 4ba:	08 95       	ret
	{
		if(DIO_EN_M_Input == Mode)
		{
			ClearMaskBits(DIO[Port].DDR.Register, Group);
		}
		else if(DIO_EN_M_Output == Mode)
 4bc:	41 30       	cpi	r20, 0x01	; 1
 4be:	69 f4       	brne	.+26     	; 0x4da <Dio_GroupMode+0x3e>
		{
			SetMaskBits(DIO[Port].DDR.Register, Group);
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	fc 01       	movw	r30, r24
 4c4:	ee 0f       	add	r30, r30
 4c6:	ff 1f       	adc	r31, r31
 4c8:	e8 0f       	add	r30, r24
 4ca:	f9 1f       	adc	r31, r25
 4cc:	81 a9       	ldd	r24, Z+49	; 0x31
 4ce:	68 2b       	or	r22, r24
 4d0:	61 ab       	std	Z+49, r22	; 0x31
	return return_value;
}

DioError_t			Dio_GroupMode			(DioPort_t Port, DioGroupBits_t Group, DioMode_t  Mode)
{
	DioError_t return_value = DIO_EN_valid_inti;
 4d2:	80 e0       	ldi	r24, 0x00	; 0
 4d4:	08 95       	ret
			return_value = DIO_EN_invalidMode;
		}
	}
	else
	{
		return_value = DIO_EN_invalidChannel;
 4d6:	82 e0       	ldi	r24, 0x02	; 2
 4d8:	08 95       	ret
		{
			SetMaskBits(DIO[Port].DDR.Register, Group);
		}
		else
		{
			return_value = DIO_EN_invalidMode;
 4da:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		return_value = DIO_EN_invalidChannel;
	}
	return return_value;
}
 4dc:	08 95       	ret

000004de <Timer_ResetCounter>:
		//DDRD7 = OUTPUT;
		TIMER2.Interrupts.Comp_Match       = DISABLE;
		TIMER2.Control.Clock = Clock;
	}
	else{/*MISRA C*/}
}
 4de:	81 11       	cpse	r24, r1
 4e0:	0c c0       	rjmp	.+24     	; 0x4fa <Timer_ResetCounter+0x1c>
 4e2:	e6 e9       	ldi	r30, 0x96	; 150
 4e4:	f0 e0       	ldi	r31, 0x00	; 0
 4e6:	10 82       	st	Z, r1
 4e8:	11 82       	std	Z+1, r1	; 0x01
 4ea:	12 82       	std	Z+2, r1	; 0x02
 4ec:	13 82       	std	Z+3, r1	; 0x03
 4ee:	14 82       	std	Z+4, r1	; 0x04
 4f0:	15 82       	std	Z+5, r1	; 0x05
 4f2:	16 82       	std	Z+6, r1	; 0x06
 4f4:	17 82       	std	Z+7, r1	; 0x07
 4f6:	12 be       	out	0x32, r1	; 50
 4f8:	08 95       	ret
 4fa:	81 30       	cpi	r24, 0x01	; 1
 4fc:	59 f4       	brne	.+22     	; 0x514 <Timer_ResetCounter+0x36>
 4fe:	e6 e9       	ldi	r30, 0x96	; 150
 500:	f0 e0       	ldi	r31, 0x00	; 0
 502:	10 86       	std	Z+8, r1	; 0x08
 504:	11 86       	std	Z+9, r1	; 0x09
 506:	12 86       	std	Z+10, r1	; 0x0a
 508:	13 86       	std	Z+11, r1	; 0x0b
 50a:	14 86       	std	Z+12, r1	; 0x0c
 50c:	15 86       	std	Z+13, r1	; 0x0d
 50e:	16 86       	std	Z+14, r1	; 0x0e
 510:	17 86       	std	Z+15, r1	; 0x0f
 512:	14 bc       	out	0x24, r1	; 36
 514:	08 95       	ret

00000516 <__vector_11>:


ISR(TIMER0_OVF_vect)
{
 516:	1f 92       	push	r1
 518:	0f 92       	push	r0
 51a:	0f b6       	in	r0, 0x3f	; 63
 51c:	0f 92       	push	r0
 51e:	11 24       	eor	r1, r1
 520:	af 92       	push	r10
 522:	bf 92       	push	r11
 524:	cf 92       	push	r12
 526:	df 92       	push	r13
 528:	ef 92       	push	r14
 52a:	ff 92       	push	r15
 52c:	0f 93       	push	r16
 52e:	1f 93       	push	r17
 530:	2f 93       	push	r18
 532:	3f 93       	push	r19
 534:	4f 93       	push	r20
 536:	5f 93       	push	r21
 538:	6f 93       	push	r22
 53a:	7f 93       	push	r23
 53c:	8f 93       	push	r24
 53e:	9f 93       	push	r25
 540:	af 93       	push	r26
 542:	bf 93       	push	r27
 544:	ef 93       	push	r30
 546:	ff 93       	push	r31
	TIMER0.Flags.OverFlow = ENABLE;
 548:	88 b7       	in	r24, 0x38	; 56
 54a:	81 60       	ori	r24, 0x01	; 1
 54c:	88 bf       	out	0x38, r24	; 56
	OverFlows[Timer0]++;
 54e:	e6 e9       	ldi	r30, 0x96	; 150
 550:	f0 e0       	ldi	r31, 0x00	; 0
 552:	20 81       	ld	r18, Z
 554:	31 81       	ldd	r19, Z+1	; 0x01
 556:	42 81       	ldd	r20, Z+2	; 0x02
 558:	53 81       	ldd	r21, Z+3	; 0x03
 55a:	64 81       	ldd	r22, Z+4	; 0x04
 55c:	75 81       	ldd	r23, Z+5	; 0x05
 55e:	86 81       	ldd	r24, Z+6	; 0x06
 560:	97 81       	ldd	r25, Z+7	; 0x07
 562:	a1 e0       	ldi	r26, 0x01	; 1
 564:	0e 94 35 04 	call	0x86a	; 0x86a <__adddi3_s8>
 568:	20 83       	st	Z, r18
 56a:	31 83       	std	Z+1, r19	; 0x01
 56c:	42 83       	std	Z+2, r20	; 0x02
 56e:	53 83       	std	Z+3, r21	; 0x03
 570:	64 83       	std	Z+4, r22	; 0x04
 572:	75 83       	std	Z+5, r23	; 0x05
 574:	86 83       	std	Z+6, r24	; 0x06
 576:	97 83       	std	Z+7, r25	; 0x07
	if(OverFlows[Timer0] == Duty[Timer0][Cycle[Timer0]])
 578:	20 81       	ld	r18, Z
 57a:	31 81       	ldd	r19, Z+1	; 0x01
 57c:	42 81       	ldd	r20, Z+2	; 0x02
 57e:	53 81       	ldd	r21, Z+3	; 0x03
 580:	64 81       	ldd	r22, Z+4	; 0x04
 582:	75 81       	ldd	r23, Z+5	; 0x05
 584:	86 81       	ldd	r24, Z+6	; 0x06
 586:	97 81       	ldd	r25, Z+7	; 0x07
 588:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 58c:	f0 e0       	ldi	r31, 0x00	; 0
 58e:	ee 0f       	add	r30, r30
 590:	ff 1f       	adc	r31, r31
 592:	ee 0f       	add	r30, r30
 594:	ff 1f       	adc	r31, r31
 596:	ee 0f       	add	r30, r30
 598:	ff 1f       	adc	r31, r31
 59a:	ea 58       	subi	r30, 0x8A	; 138
 59c:	ff 4f       	sbci	r31, 0xFF	; 255
 59e:	a0 80       	ld	r10, Z
 5a0:	b1 80       	ldd	r11, Z+1	; 0x01
 5a2:	c2 80       	ldd	r12, Z+2	; 0x02
 5a4:	d3 80       	ldd	r13, Z+3	; 0x03
 5a6:	e4 80       	ldd	r14, Z+4	; 0x04
 5a8:	f5 80       	ldd	r15, Z+5	; 0x05
 5aa:	06 81       	ldd	r16, Z+6	; 0x06
 5ac:	17 81       	ldd	r17, Z+7	; 0x07
 5ae:	0e 94 41 04 	call	0x882	; 0x882 <__cmpdi2>
 5b2:	e1 f5       	brne	.+120    	; 0x62c <__vector_11+0x116>
	{
		OverFlows[Timer0] = RESET;
 5b4:	e6 e9       	ldi	r30, 0x96	; 150
 5b6:	f0 e0       	ldi	r31, 0x00	; 0
 5b8:	10 82       	st	Z, r1
 5ba:	11 82       	std	Z+1, r1	; 0x01
 5bc:	12 82       	std	Z+2, r1	; 0x02
 5be:	13 82       	std	Z+3, r1	; 0x03
 5c0:	14 82       	std	Z+4, r1	; 0x04
 5c2:	15 82       	std	Z+5, r1	; 0x05
 5c4:	16 82       	std	Z+6, r1	; 0x06
 5c6:	17 82       	std	Z+7, r1	; 0x07
		NotifierAction[Timer0]();
 5c8:	e0 91 a6 00 	lds	r30, 0x00A6	; 0x8000a6 <NotifierAction>
 5cc:	f0 91 a7 00 	lds	r31, 0x00A7	; 0x8000a7 <NotifierAction+0x1>
 5d0:	09 95       	icall
		if(Cycle[Timer0] == ON_Cycle)
 5d2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 5d6:	81 11       	cpse	r24, r1
 5d8:	13 c0       	rjmp	.+38     	; 0x600 <__vector_11+0xea>
		{
			Cycle[Timer0] = OFF_Cycle;
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			TIMER0.Counter  = 256 - ((Duty[Timer0][OFF_Cycle] * 1000UL)%256 -1);
 5e0:	e6 e7       	ldi	r30, 0x76	; 118
 5e2:	f0 e0       	ldi	r31, 0x00	; 0
 5e4:	90 85       	ldd	r25, Z+8	; 0x08
 5e6:	21 85       	ldd	r18, Z+9	; 0x09
 5e8:	22 85       	ldd	r18, Z+10	; 0x0a
 5ea:	23 85       	ldd	r18, Z+11	; 0x0b
 5ec:	24 85       	ldd	r18, Z+12	; 0x0c
 5ee:	25 85       	ldd	r18, Z+13	; 0x0d
 5f0:	26 85       	ldd	r18, Z+14	; 0x0e
 5f2:	27 85       	ldd	r18, Z+15	; 0x0f
 5f4:	28 e1       	ldi	r18, 0x18	; 24
 5f6:	92 9f       	mul	r25, r18
 5f8:	80 0d       	add	r24, r0
 5fa:	11 24       	eor	r1, r1
 5fc:	82 bf       	out	0x32, r24	; 50
 5fe:	16 c0       	rjmp	.+44     	; 0x62c <__vector_11+0x116>
		}
		else if(Cycle[Timer0] == OFF_Cycle)
 600:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 604:	81 30       	cpi	r24, 0x01	; 1
 606:	91 f4       	brne	.+36     	; 0x62c <__vector_11+0x116>
		{
			Cycle[Timer0] = ON_Cycle;
 608:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			TIMER0.Counter  = 256 - ((Duty[Timer0][ON_Cycle] * 1000UL)%256 -1);
 60c:	e6 e7       	ldi	r30, 0x76	; 118
 60e:	f0 e0       	ldi	r31, 0x00	; 0
 610:	90 81       	ld	r25, Z
 612:	81 81       	ldd	r24, Z+1	; 0x01
 614:	82 81       	ldd	r24, Z+2	; 0x02
 616:	83 81       	ldd	r24, Z+3	; 0x03
 618:	84 81       	ldd	r24, Z+4	; 0x04
 61a:	85 81       	ldd	r24, Z+5	; 0x05
 61c:	86 81       	ldd	r24, Z+6	; 0x06
 61e:	87 81       	ldd	r24, Z+7	; 0x07
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	28 e1       	ldi	r18, 0x18	; 24
 624:	92 9f       	mul	r25, r18
 626:	80 0d       	add	r24, r0
 628:	11 24       	eor	r1, r1
 62a:	82 bf       	out	0x32, r24	; 50
		}
	}
}
 62c:	ff 91       	pop	r31
 62e:	ef 91       	pop	r30
 630:	bf 91       	pop	r27
 632:	af 91       	pop	r26
 634:	9f 91       	pop	r25
 636:	8f 91       	pop	r24
 638:	7f 91       	pop	r23
 63a:	6f 91       	pop	r22
 63c:	5f 91       	pop	r21
 63e:	4f 91       	pop	r20
 640:	3f 91       	pop	r19
 642:	2f 91       	pop	r18
 644:	1f 91       	pop	r17
 646:	0f 91       	pop	r16
 648:	ff 90       	pop	r15
 64a:	ef 90       	pop	r14
 64c:	df 90       	pop	r13
 64e:	cf 90       	pop	r12
 650:	bf 90       	pop	r11
 652:	af 90       	pop	r10
 654:	0f 90       	pop	r0
 656:	0f be       	out	0x3f, r0	; 63
 658:	0f 90       	pop	r0
 65a:	1f 90       	pop	r1
 65c:	18 95       	reti

0000065e <__vector_5>:
ISR(TIMER2_OVF_vect)
{
 65e:	1f 92       	push	r1
 660:	0f 92       	push	r0
 662:	0f b6       	in	r0, 0x3f	; 63
 664:	0f 92       	push	r0
 666:	11 24       	eor	r1, r1
 668:	af 92       	push	r10
 66a:	bf 92       	push	r11
 66c:	cf 92       	push	r12
 66e:	df 92       	push	r13
 670:	ef 92       	push	r14
 672:	ff 92       	push	r15
 674:	0f 93       	push	r16
 676:	1f 93       	push	r17
 678:	2f 93       	push	r18
 67a:	3f 93       	push	r19
 67c:	4f 93       	push	r20
 67e:	5f 93       	push	r21
 680:	6f 93       	push	r22
 682:	7f 93       	push	r23
 684:	8f 93       	push	r24
 686:	9f 93       	push	r25
 688:	af 93       	push	r26
 68a:	bf 93       	push	r27
 68c:	ef 93       	push	r30
 68e:	ff 93       	push	r31
	TIMER2.Flags.OverFlow = ENABLE;
 690:	88 b7       	in	r24, 0x38	; 56
 692:	80 64       	ori	r24, 0x40	; 64
 694:	88 bf       	out	0x38, r24	; 56
	OverFlows[Timer2]++;
 696:	e6 e9       	ldi	r30, 0x96	; 150
 698:	f0 e0       	ldi	r31, 0x00	; 0
 69a:	20 85       	ldd	r18, Z+8	; 0x08
 69c:	31 85       	ldd	r19, Z+9	; 0x09
 69e:	42 85       	ldd	r20, Z+10	; 0x0a
 6a0:	53 85       	ldd	r21, Z+11	; 0x0b
 6a2:	64 85       	ldd	r22, Z+12	; 0x0c
 6a4:	75 85       	ldd	r23, Z+13	; 0x0d
 6a6:	86 85       	ldd	r24, Z+14	; 0x0e
 6a8:	97 85       	ldd	r25, Z+15	; 0x0f
 6aa:	a1 e0       	ldi	r26, 0x01	; 1
 6ac:	0e 94 35 04 	call	0x86a	; 0x86a <__adddi3_s8>
 6b0:	20 87       	std	Z+8, r18	; 0x08
 6b2:	31 87       	std	Z+9, r19	; 0x09
 6b4:	42 87       	std	Z+10, r20	; 0x0a
 6b6:	53 87       	std	Z+11, r21	; 0x0b
 6b8:	64 87       	std	Z+12, r22	; 0x0c
 6ba:	75 87       	std	Z+13, r23	; 0x0d
 6bc:	86 87       	std	Z+14, r24	; 0x0e
 6be:	97 87       	std	Z+15, r25	; 0x0f
	if(OverFlows[Timer2] == Duty[Timer2][Cycle[Timer2]])
 6c0:	20 85       	ldd	r18, Z+8	; 0x08
 6c2:	31 85       	ldd	r19, Z+9	; 0x09
 6c4:	42 85       	ldd	r20, Z+10	; 0x0a
 6c6:	53 85       	ldd	r21, Z+11	; 0x0b
 6c8:	64 85       	ldd	r22, Z+12	; 0x0c
 6ca:	75 85       	ldd	r23, Z+13	; 0x0d
 6cc:	86 85       	ldd	r24, Z+14	; 0x0e
 6ce:	97 85       	ldd	r25, Z+15	; 0x0f
 6d0:	e0 91 61 00 	lds	r30, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 6d4:	f0 e0       	ldi	r31, 0x00	; 0
 6d6:	ee 0f       	add	r30, r30
 6d8:	ff 1f       	adc	r31, r31
 6da:	ee 0f       	add	r30, r30
 6dc:	ff 1f       	adc	r31, r31
 6de:	ee 0f       	add	r30, r30
 6e0:	ff 1f       	adc	r31, r31
 6e2:	ea 57       	subi	r30, 0x7A	; 122
 6e4:	ff 4f       	sbci	r31, 0xFF	; 255
 6e6:	a0 80       	ld	r10, Z
 6e8:	b1 80       	ldd	r11, Z+1	; 0x01
 6ea:	c2 80       	ldd	r12, Z+2	; 0x02
 6ec:	d3 80       	ldd	r13, Z+3	; 0x03
 6ee:	e4 80       	ldd	r14, Z+4	; 0x04
 6f0:	f5 80       	ldd	r15, Z+5	; 0x05
 6f2:	06 81       	ldd	r16, Z+6	; 0x06
 6f4:	17 81       	ldd	r17, Z+7	; 0x07
 6f6:	0e 94 41 04 	call	0x882	; 0x882 <__cmpdi2>
 6fa:	e1 f5       	brne	.+120    	; 0x774 <__vector_5+0x116>
	{
		OverFlows[Timer2] = RESET;
 6fc:	e6 e9       	ldi	r30, 0x96	; 150
 6fe:	f0 e0       	ldi	r31, 0x00	; 0
 700:	10 86       	std	Z+8, r1	; 0x08
 702:	11 86       	std	Z+9, r1	; 0x09
 704:	12 86       	std	Z+10, r1	; 0x0a
 706:	13 86       	std	Z+11, r1	; 0x0b
 708:	14 86       	std	Z+12, r1	; 0x0c
 70a:	15 86       	std	Z+13, r1	; 0x0d
 70c:	16 86       	std	Z+14, r1	; 0x0e
 70e:	17 86       	std	Z+15, r1	; 0x0f
		NotifierAction[Timer2]();
 710:	e0 91 a8 00 	lds	r30, 0x00A8	; 0x8000a8 <NotifierAction+0x2>
 714:	f0 91 a9 00 	lds	r31, 0x00A9	; 0x8000a9 <NotifierAction+0x3>
 718:	09 95       	icall
		if(Cycle[Timer2] == ON_Cycle)
 71a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 71e:	81 11       	cpse	r24, r1
 720:	13 c0       	rjmp	.+38     	; 0x748 <__vector_5+0xea>
		{
			Cycle[Timer2] = OFF_Cycle;
 722:	81 e0       	ldi	r24, 0x01	; 1
 724:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
			TIMER0.Counter  = 256 - ((Duty[Timer2][OFF_Cycle] * 1000UL)%256 -1);
 728:	e6 e7       	ldi	r30, 0x76	; 118
 72a:	f0 e0       	ldi	r31, 0x00	; 0
 72c:	90 8d       	ldd	r25, Z+24	; 0x18
 72e:	21 8d       	ldd	r18, Z+25	; 0x19
 730:	22 8d       	ldd	r18, Z+26	; 0x1a
 732:	23 8d       	ldd	r18, Z+27	; 0x1b
 734:	24 8d       	ldd	r18, Z+28	; 0x1c
 736:	25 8d       	ldd	r18, Z+29	; 0x1d
 738:	26 8d       	ldd	r18, Z+30	; 0x1e
 73a:	27 8d       	ldd	r18, Z+31	; 0x1f
 73c:	28 e1       	ldi	r18, 0x18	; 24
 73e:	92 9f       	mul	r25, r18
 740:	80 0d       	add	r24, r0
 742:	11 24       	eor	r1, r1
 744:	82 bf       	out	0x32, r24	; 50
 746:	16 c0       	rjmp	.+44     	; 0x774 <__vector_5+0x116>
		}
		else if(Cycle[Timer2] == OFF_Cycle)
 748:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 74c:	81 30       	cpi	r24, 0x01	; 1
 74e:	91 f4       	brne	.+36     	; 0x774 <__vector_5+0x116>
		{
			Cycle[Timer2] = ON_Cycle;
 750:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
			TIMER2.Counter  = 256 - ((Duty[Timer2][ON_Cycle] * 1000UL)%256 -1);
 754:	e6 e7       	ldi	r30, 0x76	; 118
 756:	f0 e0       	ldi	r31, 0x00	; 0
 758:	90 89       	ldd	r25, Z+16	; 0x10
 75a:	81 89       	ldd	r24, Z+17	; 0x11
 75c:	82 89       	ldd	r24, Z+18	; 0x12
 75e:	83 89       	ldd	r24, Z+19	; 0x13
 760:	84 89       	ldd	r24, Z+20	; 0x14
 762:	85 89       	ldd	r24, Z+21	; 0x15
 764:	86 89       	ldd	r24, Z+22	; 0x16
 766:	87 89       	ldd	r24, Z+23	; 0x17
 768:	81 e0       	ldi	r24, 0x01	; 1
 76a:	28 e1       	ldi	r18, 0x18	; 24
 76c:	92 9f       	mul	r25, r18
 76e:	80 0d       	add	r24, r0
 770:	11 24       	eor	r1, r1
 772:	84 bd       	out	0x24, r24	; 36
		}
	}
}
 774:	ff 91       	pop	r31
 776:	ef 91       	pop	r30
 778:	bf 91       	pop	r27
 77a:	af 91       	pop	r26
 77c:	9f 91       	pop	r25
 77e:	8f 91       	pop	r24
 780:	7f 91       	pop	r23
 782:	6f 91       	pop	r22
 784:	5f 91       	pop	r21
 786:	4f 91       	pop	r20
 788:	3f 91       	pop	r19
 78a:	2f 91       	pop	r18
 78c:	1f 91       	pop	r17
 78e:	0f 91       	pop	r16
 790:	ff 90       	pop	r15
 792:	ef 90       	pop	r14
 794:	df 90       	pop	r13
 796:	cf 90       	pop	r12
 798:	bf 90       	pop	r11
 79a:	af 90       	pop	r10
 79c:	0f 90       	pop	r0
 79e:	0f be       	out	0x3f, r0	; 63
 7a0:	0f 90       	pop	r0
 7a2:	1f 90       	pop	r1
 7a4:	18 95       	reti

000007a6 <__vector_10>:
ISR(TIMER0_COMP_vect)
{
 7a6:	1f 92       	push	r1
 7a8:	0f 92       	push	r0
 7aa:	0f b6       	in	r0, 0x3f	; 63
 7ac:	0f 92       	push	r0
 7ae:	11 24       	eor	r1, r1
 7b0:	2f 93       	push	r18
 7b2:	3f 93       	push	r19
 7b4:	4f 93       	push	r20
 7b6:	5f 93       	push	r21
 7b8:	6f 93       	push	r22
 7ba:	7f 93       	push	r23
 7bc:	8f 93       	push	r24
 7be:	9f 93       	push	r25
 7c0:	af 93       	push	r26
 7c2:	bf 93       	push	r27
 7c4:	ef 93       	push	r30
 7c6:	ff 93       	push	r31
	TIMER0.Flags.Comp_Match = ENABLE;
 7c8:	88 b7       	in	r24, 0x38	; 56
 7ca:	82 60       	ori	r24, 0x02	; 2
 7cc:	88 bf       	out	0x38, r24	; 56
	if(CounterAction != NULL)
 7ce:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <CounterAction>
 7d2:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <CounterAction+0x1>
 7d6:	89 2b       	or	r24, r25
 7d8:	41 f0       	breq	.+16     	; 0x7ea <__vector_10+0x44>
	{
		CounterAction();
 7da:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <CounterAction>
 7de:	f0 91 ab 00 	lds	r31, 0x00AB	; 0x8000ab <CounterAction+0x1>
 7e2:	09 95       	icall
		Timer_ResetCounter(Timer0);
 7e4:	80 e0       	ldi	r24, 0x00	; 0
 7e6:	0e 94 6f 02 	call	0x4de	; 0x4de <Timer_ResetCounter>
	}
	PWMAction[Timer0]();
 7ea:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <__data_end>
 7ee:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <__data_end+0x1>
 7f2:	09 95       	icall
}
 7f4:	ff 91       	pop	r31
 7f6:	ef 91       	pop	r30
 7f8:	bf 91       	pop	r27
 7fa:	af 91       	pop	r26
 7fc:	9f 91       	pop	r25
 7fe:	8f 91       	pop	r24
 800:	7f 91       	pop	r23
 802:	6f 91       	pop	r22
 804:	5f 91       	pop	r21
 806:	4f 91       	pop	r20
 808:	3f 91       	pop	r19
 80a:	2f 91       	pop	r18
 80c:	0f 90       	pop	r0
 80e:	0f be       	out	0x3f, r0	; 63
 810:	0f 90       	pop	r0
 812:	1f 90       	pop	r1
 814:	18 95       	reti

00000816 <__vector_4>:
ISR(TIMER2_COMP_vect)
{
 816:	1f 92       	push	r1
 818:	0f 92       	push	r0
 81a:	0f b6       	in	r0, 0x3f	; 63
 81c:	0f 92       	push	r0
 81e:	11 24       	eor	r1, r1
 820:	2f 93       	push	r18
 822:	3f 93       	push	r19
 824:	4f 93       	push	r20
 826:	5f 93       	push	r21
 828:	6f 93       	push	r22
 82a:	7f 93       	push	r23
 82c:	8f 93       	push	r24
 82e:	9f 93       	push	r25
 830:	af 93       	push	r26
 832:	bf 93       	push	r27
 834:	ef 93       	push	r30
 836:	ff 93       	push	r31
	TIMER2.Flags.Comp_Match = ENABLE;
 838:	88 b7       	in	r24, 0x38	; 56
 83a:	80 68       	ori	r24, 0x80	; 128
 83c:	88 bf       	out	0x38, r24	; 56
	PWMAction[Timer2]();
 83e:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <__data_end+0x2>
 842:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <__data_end+0x3>
 846:	09 95       	icall
 848:	ff 91       	pop	r31
 84a:	ef 91       	pop	r30
 84c:	bf 91       	pop	r27
 84e:	af 91       	pop	r26
 850:	9f 91       	pop	r25
 852:	8f 91       	pop	r24
 854:	7f 91       	pop	r23
 856:	6f 91       	pop	r22
 858:	5f 91       	pop	r21
 85a:	4f 91       	pop	r20
 85c:	3f 91       	pop	r19
 85e:	2f 91       	pop	r18
 860:	0f 90       	pop	r0
 862:	0f be       	out	0x3f, r0	; 63
 864:	0f 90       	pop	r0
 866:	1f 90       	pop	r1
 868:	18 95       	reti

0000086a <__adddi3_s8>:
 86a:	00 24       	eor	r0, r0
 86c:	a7 fd       	sbrc	r26, 7
 86e:	00 94       	com	r0
 870:	2a 0f       	add	r18, r26
 872:	30 1d       	adc	r19, r0
 874:	40 1d       	adc	r20, r0
 876:	50 1d       	adc	r21, r0
 878:	60 1d       	adc	r22, r0
 87a:	70 1d       	adc	r23, r0
 87c:	80 1d       	adc	r24, r0
 87e:	90 1d       	adc	r25, r0
 880:	08 95       	ret

00000882 <__cmpdi2>:
 882:	2a 15       	cp	r18, r10
 884:	3b 05       	cpc	r19, r11
 886:	4c 05       	cpc	r20, r12
 888:	5d 05       	cpc	r21, r13
 88a:	6e 05       	cpc	r22, r14
 88c:	7f 05       	cpc	r23, r15
 88e:	80 07       	cpc	r24, r16
 890:	91 07       	cpc	r25, r17
 892:	08 95       	ret

00000894 <__cmpdi2_s8>:
 894:	00 24       	eor	r0, r0
 896:	a7 fd       	sbrc	r26, 7
 898:	00 94       	com	r0
 89a:	2a 17       	cp	r18, r26
 89c:	30 05       	cpc	r19, r0
 89e:	40 05       	cpc	r20, r0
 8a0:	50 05       	cpc	r21, r0
 8a2:	60 05       	cpc	r22, r0
 8a4:	70 05       	cpc	r23, r0
 8a6:	80 05       	cpc	r24, r0
 8a8:	90 05       	cpc	r25, r0
 8aa:	08 95       	ret

000008ac <_exit>:
 8ac:	f8 94       	cli

000008ae <__stop_program>:
 8ae:	ff cf       	rjmp	.-2      	; 0x8ae <__stop_program>
